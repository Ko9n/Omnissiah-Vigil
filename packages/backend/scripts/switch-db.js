#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É SQLite –∏ PostgreSQL
 *
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node scripts/switch-db.js sqlite    # –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ SQLite
 * node scripts/switch-db.js postgres  # –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ PostgreSQL
 */

const fs = require("fs");
const path = require("path");

const SCHEMA_FILE = path.join(__dirname, "../prisma/schema.prisma");
const ENV_FILE = path.join(__dirname, "../.env");

const SQLITE_CONFIG = {
  provider: "sqlite",
  url: "file:./prisma/data/dev.db",
};

const POSTGRES_CONFIG = {
  provider: "postgresql",
  url: "postgresql://monitoring_user:monitoring_password@localhost:5433/monitoring_db",
};

function updateSchema(dbType) {
  let schema = fs.readFileSync(SCHEMA_FILE, "utf8");

  if (dbType === "sqlite") {
    // –í–∫–ª—é—á–∞–µ–º SQLite, –æ—Ç–∫–ª—é—á–∞–µ–º PostgreSQL
    schema = schema.replace(
      /\/\/ SQLite[\s\S]*?url\s*=\s*env\("DATABASE_URL"\)/,
      `// SQLite (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) - –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
  provider = "sqlite"
  url      = env("DATABASE_URL")`
    );

    schema = schema.replace(
      /\/\/ PostgreSQL[\s\S]*?\/\/ url\s*=\s*env\("DATABASE_URL"\)/,
      `// PostgreSQL - —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  // provider = "postgresql"
  // url      = env("DATABASE_URL")`
    );
  } else if (dbType === "postgres") {
    // –í–∫–ª—é—á–∞–µ–º PostgreSQL, –æ—Ç–∫–ª—é—á–∞–µ–º SQLite
    schema = schema.replace(
      /\/\/ SQLite[\s\S]*?url\s*=\s*env\("DATABASE_URL"\)/,
      `// SQLite (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) - –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
  // provider = "sqlite"
  // url      = env("DATABASE_URL")`
    );

    schema = schema.replace(
      /\/\/ PostgreSQL[\s\S]*?\/\/ url\s*=\s*env\("DATABASE_URL"\)/,
      `// PostgreSQL - —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  provider = "postgresql"
  url      = env("DATABASE_URL")`
    );
  }

  fs.writeFileSync(SCHEMA_FILE, schema);
}

function updateEnv(dbType) {
  let envContent = "";

  // –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π .env –µ—Å–ª–∏ –µ—Å—Ç—å
  if (fs.existsSync(ENV_FILE)) {
    envContent = fs.readFileSync(ENV_FILE, "utf8");
  }

  // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ DATABASE_URL
  envContent = envContent.replace(/DATABASE_URL=.*\n?/g, "");

  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π DATABASE_URL
  if (dbType === "sqlite") {
    envContent += `\n# SQLite Configuration
DATABASE_URL="${SQLITE_CONFIG.url}"
`;
  } else if (dbType === "postgres") {
    envContent += `\n# PostgreSQL Configuration
DATABASE_URL="${POSTGRES_CONFIG.url}"
`;
  }

  fs.writeFileSync(ENV_FILE, envContent.trim() + "\n");
}

function main() {
  const dbType = process.argv[2];

  if (!dbType || !["sqlite", "postgres"].includes(dbType)) {
    console.log("‚ùå –û—à–∏–±–∫–∞: –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö");
    console.log("");
    console.log("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:");
    console.log(
      "  node scripts/switch-db.js sqlite    # –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ SQLite"
    );
    console.log(
      "  node scripts/switch-db.js postgres  # –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ PostgreSQL"
    );
    process.exit(1);
  }

  console.log(`üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ ${dbType.toUpperCase()}...`);

  try {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ö–µ–º—É Prisma
    updateSchema(dbType);
    console.log("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ö–µ–º–∞ Prisma");

    // –û–±–Ω–æ–≤–ª—è–µ–º .env —Ñ–∞–π–ª
    updateEnv(dbType);
    console.log("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω .env —Ñ–∞–π–ª");

    console.log("");
    console.log(`üéâ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ ${dbType.toUpperCase()}!`);
    console.log("");
    console.log("–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:");

    if (dbType === "postgres") {
      console.log("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ PostgreSQL:");
      console.log("   docker-compose up postgres -d");
      console.log("");
      console.log("2. –ü—Ä–∏–º–µ–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏:");
      console.log("   npx prisma migrate deploy");
      console.log("");
      console.log("3. –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ Prisma –∫–ª–∏–µ–Ω—Ç:");
      console.log("   npx prisma generate");
    } else {
      console.log("1. –ü—Ä–∏–º–µ–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏:");
      console.log("   npx prisma migrate deploy");
      console.log("");
      console.log("2. –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ Prisma –∫–ª–∏–µ–Ω—Ç:");
      console.log("   npx prisma generate");
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è:", error.message);
    process.exit(1);
  }
}

main();
