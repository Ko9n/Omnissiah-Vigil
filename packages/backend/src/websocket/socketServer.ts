import { Server as SocketIOServer } from "socket.io";
import { Server } from "http";
import * as ping from "ping";
import prisma from "../utils/prisma";
import { exec } from "child_process";
import { promisify } from "util";
import net from "net";

const execAsync = promisify(exec);

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã–π ping
const systemPing = async (
  host: string
): Promise<{ alive: boolean; time: number; error?: string }> => {
  try {
    const isWindows = process.platform === "win32";
    const command = isWindows
      ? `ping -n 1 -w 3000 ${host}`
      : `ping -c 1 -W 3 ${host}`;

    const { stdout, stderr } = await execAsync(command);

    if (stderr) {
      return { alive: false, time: 0, error: stderr };
    }

    // –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞
    const timeMatch = isWindows
      ? stdout.match(/–≤—Ä–µ–º—è[=<]\s*(\d+)–º—Å/i) ||
        stdout.match(/time[=<]\s*(\d+)ms/i)
      : stdout.match(/time=(\d+\.?\d*)/);

    const time = timeMatch && timeMatch[1] ? parseInt(timeMatch[1]) : 0;
    const isAlive =
      !stdout.includes("–Ω–µ–¥–æ—Å—Ç–∏–∂–∏–º") &&
      !stdout.includes("unreachable") &&
      !stdout.includes("–ü—Ä–µ–≤—ã—à–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª") &&
      !stdout.includes("timeout");

    return { alive: isAlive, time };
  } catch (error) {
    return {
      alive: false,
      time: 0,
      error: error instanceof Error ? error.message : String(error),
    };
  }
};

export interface RealtimeMetrics {
  timestamp: string;
  deviceMetrics: Array<{
    deviceId: string;
    deviceName: string;
    ip: string;
    status: "online" | "offline";
    responseTime: number;
    packetLoss: string;
  }>;
  systemHealth: {
    cpu: number;
    memory: number;
    disk: number;
    network: number;
    temperature: number;
    uptime: number;
    processes: number;
  };
  networkMetrics: {
    totalDevices: number;
    onlineDevices: number;
    offlineDevices: number;
    averageResponseTime: number;
  };
}

export class SocketServer {
  private io: SocketIOServer;
  private monitoringInterval: NodeJS.Timeout | null = null;
  private devices: any[] = []; // –ë—É–¥–µ–º –ø–æ–ª—É—á–∞—Ç—å –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤

  constructor(httpServer: Server) {
    this.io = new SocketIOServer(httpServer, {
      cors: {
        origin: [
          "http://localhost:3000",
          "http://localhost:3001",
          "http://127.0.0.1:3000",
          "http://127.0.0.1:3001",
        ],
        methods: ["GET", "POST"],
        credentials: true,
      },
    });

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ –±–∞–∑—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    this.loadDevicesFromDB();

    this.setupSocketHandlers();
  }

  private async loadDevicesFromDB() {
    try {
      this.devices = await prisma.device.findMany();
      console.log(
        `üîÑ WebSocket: –∑–∞–≥—Ä—É–∂–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏–∑ –ë–î: ${this.devices.length}`
      );
    } catch (error) {
      console.error("‚ùå WebSocket: –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏–∑ –ë–î:", error);
      this.devices = [];
    }
  }

  private setupSocketHandlers() {
    this.io.on("connection", (socket) => {
      console.log(
        `üì° WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω: ${socket.id} (–≤—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: ${this.io.engine.clientsCount})`
      );

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ —Å—Ä–∞–∑—É –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
      this.sendCurrentMetrics(socket);

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
      if (this.io.engine.clientsCount === 1) {
        console.log(
          "üöÄ –ü–µ—Ä–≤—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
        );
        this.startMonitoring();
      }

      // –†—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
      socket.on("start_monitoring", () => {
        console.log("üîÑ –ö–ª–∏–µ–Ω—Ç –∑–∞–ø—Ä–æ—Å–∏–ª –Ω–∞—á–∞–ª–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞");
        this.startMonitoring();
      });

      socket.on("stop_monitoring", () => {
        console.log("‚èπÔ∏è –ö–ª–∏–µ–Ω—Ç –∑–∞–ø—Ä–æ—Å–∏–ª –æ—Å—Ç–∞–Ω–æ–≤–∫—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞");
        this.stopMonitoring();
      });

      // –†—É—á–Ω–æ–π ping —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
      socket.on("ping_device", async (deviceId: string) => {
        console.log(`üèì WebSocket ping –∑–∞–ø—Ä–æ—Å –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: ${deviceId}`);
        await this.pingSingleDevice(deviceId, socket);
      });

      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
      socket.on("add_device", (device: any) => {
        console.log(`‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ${device.name}`);
        if (!this.devices.find((d) => d.id === device.id)) {
          this.devices.push(device);
          this.io.emit("devices_updated", this.devices);
        }
      });

      // –£–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
      socket.on("remove_device", (deviceId: string) => {
        console.log(`‚ûñ –£–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ${deviceId}`);
        this.devices = this.devices.filter((d) => d.id !== deviceId);
        this.io.emit("devices_updated", this.devices);
      });

      socket.on("disconnect", () => {
        console.log(
          `üì° WebSocket –æ—Ç–∫–ª—é—á–µ–Ω: ${socket.id} (–æ—Å—Ç–∞–ª–æ—Å—å –∫–ª–∏–µ–Ω—Ç–æ–≤: ${this.io.engine.clientsCount - 1})`
        );

        // –ï—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        if (this.io.engine.clientsCount === 1) {
          // 1 –ø–æ—Ç–æ–º—É —á—Ç–æ disconnect –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω
          console.log("‚è∏Ô∏è –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥");
          this.stopMonitoring();
        }
      });
    });
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  public updateDevices(devices: any[]) {
    this.devices = devices;
  }

  private async sendCurrentMetrics(socket?: any) {
    try {
      const metrics = await this.collectMetrics();
      const target = socket || this.io;
      target.emit("metrics_update", metrics);
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫:", error);
    }
  }

  private async collectMetrics(): Promise<RealtimeMetrics> {
    // –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    const deviceMetrics = await Promise.all(
      this.devices.map(async (device) => {
        try {
          // –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–π ping, –∑–∞—Ç–µ–º Node.js ping
          let result = await systemPing(device.ip);

          if (!result.alive) {
            // –ï—Å–ª–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–π ping –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º Node.js ping
            try {
              const nodePingResult = await ping.promise.probe(device.ip, {
                timeout: 3,
                extra: ["-c", "1"],
              });
              if (nodePingResult.alive) {
                result = {
                  alive: true,
                  time: Math.round(nodePingResult.time || 0),
                };
              }
            } catch (nodePingError) {
              console.log(
                `‚ö†Ô∏è Node.js ping —Ç–∞–∫–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è ${device.name}`
              );
            }
          }

          const status = result.alive
            ? ("online" as const)
            : ("offline" as const);
          const responseTime = result.time || 0;

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ –ë–î
          try {
            await prisma.device.update({
              where: { id: device.id },
              data: {
                status,
                responseTime,
              },
            });
          } catch (dbError) {
            console.error(
              `‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ${device.name} –≤ –ë–î:`,
              dbError
            );
          }

          console.log(
            `üîç ${device.name} (${device.ip}): ${status} - ${responseTime}ms`
          );

          return {
            deviceId: device.id,
            deviceName: device.name,
            ip: device.ip,
            status,
            responseTime,
            packetLoss: result.alive ? "0%" : "100%",
          };
        } catch (error) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∫ offline –≤ –ë–î –ø—Ä–∏ –æ—à–∏–±–∫–µ ping
          try {
            await prisma.device.update({
              where: { id: device.id },
              data: {
                status: "offline",
                responseTime: 0,
              },
            });
          } catch (dbError) {
            console.error(
              `‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ${device.name} –≤ –ë–î:`,
              dbError
            );
          }

          console.log(`‚ùå ${device.name} (${device.ip}): –û–®–ò–ë–ö–ê –ü–†–û–í–ï–†–ö–ò`);

          return {
            deviceId: device.id,
            deviceName: device.name,
            ip: device.ip,
            status: "offline" as const,
            responseTime: 0,
            packetLoss: "100%",
          };
        }
      })
    );

    // –°–æ–±–∏—Ä–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (—Å–∏–º—É–ª—è—Ü–∏—è)
    const systemHealth = {
      cpu: Math.random() * 100,
      memory: Math.random() * 100,
      disk: Math.random() * 100,
      network: Math.random() * 100,
      temperature: 35 + Math.random() * 30,
      uptime: Math.floor(Date.now() / 1000),
      processes: Math.floor(100 + Math.random() * 200),
    };

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–µ—Ç–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    const onlineDevices = deviceMetrics.filter(
      (d) => d.status === "online"
    ).length;
    const averageResponseTime =
      deviceMetrics
        .filter((d) => d.status === "online" && d.responseTime > 0)
        .reduce((sum, d) => sum + d.responseTime, 0) / onlineDevices || 0;

    const networkMetrics = {
      totalDevices: this.devices.length,
      onlineDevices,
      offlineDevices: this.devices.length - onlineDevices,
      averageResponseTime: Math.round(averageResponseTime),
    };

    return {
      timestamp: new Date().toISOString(),
      deviceMetrics,
      systemHealth,
      networkMetrics,
    };
  }

  private async pingSingleDevice(deviceId: string, socket: any) {
    const device = this.devices.find((d) => d.id === deviceId);
    if (!device) {
      socket.emit("ping_result", {
        error: "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
        deviceId,
      });
      return;
    }

    try {
      const result = await ping.promise.probe(device.ip, {
        timeout: 5,
        extra: ["-c", "3"],
      });

      const pingResult = {
        deviceId,
        deviceName: device.name,
        ip: device.ip,
        alive: result.alive,
        responseTime: Math.round(result.time || 0),
        packetLoss: result.packetLoss || "0%",
        timestamp: new Date().toISOString(),
      };

      socket.emit("ping_result", pingResult);
      console.log(
        `üèì Ping —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${device.name} - ${result.alive ? "–æ–Ω–ª–∞–π–Ω" : "–æ—Ñ–ª–∞–π–Ω"} (${result.time}ms)`
      );
    } catch (error) {
      socket.emit("ping_result", {
        error: "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ping",
        deviceId,
        deviceName: device.name,
      });
    }
  }

  public startMonitoring() {
    if (this.monitoringInterval) {
      console.log("‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω");
      return;
    }

    console.log("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: 30 —Å–µ–∫)");
    this.monitoringInterval = setInterval(async () => {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏–∑ –ë–î –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ü–∏–∫–ª–æ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
      await this.loadDevicesFromDB();
      await this.sendCurrentMetrics();
    }, 30000); // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Å—Ä–∞–∑—É
    this.sendCurrentMetrics();
  }

  public stopMonitoring() {
    if (this.monitoringInterval) {
      clearInterval(this.monitoringInterval);
      this.monitoringInterval = null;
      console.log("‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    }
  }

  public getIO() {
    return this.io;
  }
}
