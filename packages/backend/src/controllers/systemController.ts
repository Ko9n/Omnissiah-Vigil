import { Request, Response } from "express";
import * as si from "systeminformation";

// GET /api/system/info - –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
export const getSystemInfo = async (req: Request, res: Response) => {
  try {
    console.log("‚ÑπÔ∏è –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ");

    const [osInfo, system, versions] = await Promise.all([
      si.osInfo(),
      si.system(),
      si.versions(),
    ]);

    const systemInfo = {
      os: {
        platform: osInfo.platform,
        distro: osInfo.distro,
        release: osInfo.release,
        arch: osInfo.arch,
        hostname: osInfo.hostname,
      },
      system: {
        manufacturer: system.manufacturer,
        model: system.model,
        version: system.version,
        serial: system.serial,
      },
      runtime: {
        node: versions.node,
        npm: versions.npm,
        pid: process.pid,
        uptime: process.uptime(),
        memory: process.memoryUsage(),
      },
      timestamp: new Date().toISOString(),
    };

    res.json({
      success: true,
      data: systemInfo,
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ:", error);
    res.status(500).json({
      success: false,
      error: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ",
    });
  }
};

// POST /api/system/restart - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å
export const restartService = async (req: Request, res: Response) => {
  try {
    console.log("üîÑ –ó–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞");

    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ª–æ–≥–∏–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    // –ù–∞–ø—Ä–∏–º–µ—Ä, graceful shutdown —Ç–µ–∫—É—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π

    res.json({
      success: true,
      message: "–°–µ—Ä–≤–∏—Å –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥",
      timestamp: new Date().toISOString(),
    });

    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      console.log("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞...");
      process.exit(0);
    }, 5000);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞:", error);
    res.status(500).json({
      success: false,
      error: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å",
    });
  }
};

// GET /api/system/config - –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
export const getConfiguration = async (req: Request, res: Response) => {
  try {
    console.log("‚öôÔ∏è –ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã");

    const config = {
      server: {
        port: process.env.PORT || 5000,
        environment: process.env.NODE_ENV || "development",
        frontendUrl: process.env.FRONTEND_URL || "http://localhost:3000",
      },
      monitoring: {
        pingTimeout: process.env.PING_TIMEOUT || 5000,
        pingInterval: process.env.PING_INTERVAL || 30000,
        systemCheckInterval: process.env.SYSTEM_CHECK_INTERVAL || 10000,
      },
      features: {
        realTimeUpdates: false, // WebSocket –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω
        database: false, // –ë–î –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞
        authentication: false, // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞
        logging: true,
        ping: true,
        systemMetrics: true,
      },
      version: {
        api: "1.0.0",
        node: process.version,
        uptime: Math.floor(process.uptime()),
      },
      timestamp: new Date().toISOString(),
    };

    res.json({
      success: true,
      data: config,
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:", error);
    res.status(500).json({
      success: false,
      error: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é",
    });
  }
};
