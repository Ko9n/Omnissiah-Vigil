import { Request, Response } from "express";
import ping from "ping";
import prisma from "../utils/prisma";

// GET /api/devices - –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
export const getAllDevices = async (
  req: Request,
  res: Response
): Promise<void> => {
  try {
    console.log("üì° –ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (Prisma)");
    const devices = await prisma.device.findMany();
    res.json({
      success: true,
      data: devices,
      count: devices.length,
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤:", error);
    res.status(500).json({
      success: false,
      error: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤",
    });
  }
};

// GET /api/devices/:id - –ø–æ–ª—É—á–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ ID
export const getDeviceById = async (
  req: Request,
  res: Response
): Promise<void> => {
  try {
    const { id } = req.params;
    const device = await prisma.device.findUnique({ where: { id } });
    if (!device) {
      res.status(404).json({
        success: false,
        error: "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
      });
      return;
    }
    console.log(`üì± –ó–∞–ø—Ä–æ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: ${device.name}`);
    res.json({
      success: true,
      data: device,
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:", error);
    res.status(500).json({
      success: false,
      error: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ",
    });
  }
};

// POST /api/devices - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
export const createDevice = async (
  req: Request,
  res: Response
): Promise<void> => {
  try {
    const deviceData = req.body;
    const newDevice = await prisma.device.create({
      data: {
        name: deviceData.name,
        ip: deviceData.ip,
        type: deviceData.type || "unknown",
        status: deviceData.status || "online",
        responseTime: deviceData.responseTime || 0,
        uptime: deviceData.uptime || 100,
        location: deviceData.location || "",
        description: deviceData.description || "",
        folderId: deviceData.folderId || null,
      },
    });
    console.log(`‚ûï –°–æ–∑–¥–∞–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${newDevice.name}`);
    res.status(201).json({
      success: true,
      data: newDevice,
      message: "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ",
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:", error);
    res.status(500).json({
      success: false,
      error: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ",
    });
  }
};

// PUT /api/devices/:id - –æ–±–Ω–æ–≤–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
export const updateDevice = async (
  req: Request,
  res: Response
): Promise<void> => {
  try {
    const { id } = req.params;
    const updateData = req.body;
    const updatedDevice = await prisma.device.update({
      where: { id },
      data: updateData,
    });
    console.log(`‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${updatedDevice.name}`);
    res.json({
      success: true,
      data: updatedDevice,
      message: "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ",
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:", error);
    res.status(500).json({
      success: false,
      error: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ",
    });
  }
};

// DELETE /api/devices/:id - —É–¥–∞–ª–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
export const deleteDevice = async (
  req: Request,
  res: Response
): Promise<void> => {
  try {
    const { id } = req.params;
    const deletedDevice = await prisma.device.delete({ where: { id } });
    console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${deletedDevice.name}`);
    res.json({
      success: true,
      data: deletedDevice,
      message: "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ",
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:", error);
    res.status(500).json({
      success: false,
      error: "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ",
    });
  }
};

// POST /api/devices/:id/ping - –ø–∏–Ω–≥ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
export const pingDevice = async (
  req: Request,
  res: Response
): Promise<void> => {
  try {
    const { id } = req.params;
    const device = await prisma.device.findUnique({ where: { id } });

    if (!device) {
      res.status(404).json({
        success: false,
        error: "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
      });
      return;
    }

    console.log(`üèì –ü–∏–Ω–≥ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: ${device.name} (${device.ip})`);

    // –í—ã–ø–æ–ª–Ω—è–µ–º ping
    const result = await ping.promise.probe(device.ip, {
      timeout: 5,
      extra: ["-c", "3"], // 3 –ø–∞–∫–µ—Ç–∞ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    const updatedDevice = await prisma.device.update({
      where: { id },
      data: {
        status: result.alive ? "online" : "offline",
        responseTime: Math.round(result.time || 0),
      },
    });

    res.json({
      success: true,
      data: {
        deviceId: id,
        deviceName: updatedDevice.name,
        ip: updatedDevice.ip,
        alive: result.alive,
        responseTime: Math.round(result.time || 0),
        packetLoss: result.packetLoss || "0%",
        timestamp: new Date().toISOString(),
      },
      message: result.alive ? "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω–æ" : "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ ping —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:", error);
    res.status(500).json({
      success: false,
      error: "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å ping —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
    });
  }
};
