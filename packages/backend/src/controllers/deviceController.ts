import { Request, Response } from "express";
import * as ping from "ping";
import prisma from "../utils/prisma";
import { exec } from "child_process";
import { promisify } from "util";
import net from "net";

const execAsync = promisify(exec);

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ TCP –ø–æ—Ä—Ç
const checkTcpConnection = (
  host: string,
  port: number = 80,
  timeout: number = 3000
): Promise<boolean> => {
  return new Promise((resolve) => {
    const socket = new net.Socket();

    socket.setTimeout(timeout);

    socket.on("connect", () => {
      socket.destroy();
      resolve(true);
    });

    socket.on("timeout", () => {
      socket.destroy();
      resolve(false);
    });

    socket.on("error", () => {
      resolve(false);
    });

    socket.connect(port, host);
  });
};

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã–π ping
const systemPing = async (
  host: string
): Promise<{ alive: boolean; time: number; error?: string }> => {
  try {
    const isWindows = process.platform === "win32";
    const command = isWindows
      ? `ping -n 1 -w 3000 ${host}`
      : `ping -c 1 -W 3 ${host}`;

    const { stdout, stderr } = await execAsync(command);

    if (stderr) {
      return { alive: false, time: 0, error: stderr };
    }

    // –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞
    const timeMatch = isWindows
      ? stdout.match(/–≤—Ä–µ–º—è[=<]\s*(\d+)–º—Å/i) ||
        stdout.match(/time[=<]\s*(\d+)ms/i)
      : stdout.match(/time=(\d+\.?\d*)/);

    const time = timeMatch && timeMatch[1] ? parseInt(timeMatch[1]) : 0;
    const isAlive =
      !stdout.includes("–Ω–µ–¥–æ—Å—Ç–∏–∂–∏–º") &&
      !stdout.includes("unreachable") &&
      !stdout.includes("–ü—Ä–µ–≤—ã—à–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª") &&
      !stdout.includes("timeout");

    return { alive: isAlive, time };
  } catch (error) {
    return {
      alive: false,
      time: 0,
      error: error instanceof Error ? error.message : String(error),
    };
  }
};

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
const checkDeviceAvailability = async (device: any) => {
  const methods = [];

  // 1. –ü–æ–ø—Ä–æ–±—É–µ–º Node.js ping
  try {
    const pingResult = await ping.promise.probe(device.ip, {
      timeout: 3,
      extra: ["-c", "1"],
    });
    methods.push({
      method: "node-ping",
      alive: pingResult.alive,
      time: Math.round(pingResult.time || 0),
      success: true,
    });
  } catch (error) {
    methods.push({
      method: "node-ping",
      alive: false,
      time: 0,
      success: false,
      error: error instanceof Error ? error.message : String(error),
    });
  }

  // 2. –ü–æ–ø—Ä–æ–±—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π ping
  const systemResult = await systemPing(device.ip);
  methods.push({
    method: "system-ping",
    alive: systemResult.alive,
    time: systemResult.time,
    success: !systemResult.error,
  });

  // 3. –ü–æ–ø—Ä–æ–±—É–µ–º TCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω HTTP)
  if (device.monitoring?.http) {
    const tcpResult = await checkTcpConnection(device.ip, 80);
    methods.push({
      method: "tcp-80",
      alive: tcpResult,
      time: tcpResult ? 50 : 0, // –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è TCP
      success: true,
    });
  }

  // –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  const aliveMethod = methods.find((m) => m.alive && m.success);
  if (aliveMethod) {
    return {
      alive: true,
      time: aliveMethod.time,
      method: aliveMethod.method,
      allMethods: methods,
    };
  }

  return {
    alive: false,
    time: 0,
    method: "all-failed",
    allMethods: methods,
  };
};

// GET /api/devices - –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
export const getAllDevices = async (
  req: Request,
  res: Response
): Promise<void> => {
  try {
    console.log("üì° –ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (Prisma)");
    const rawDevices = await prisma.device.findMany();

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    const devices = rawDevices.map((device: any) => ({
      ...device,
      folderId: device.folderId || null, // –ï—Å–ª–∏ –Ω–µ—Ç –ø–∞–ø–∫–∏, —Ç–æ null (–Ω–µ "root")
      monitoring: {
        ping: device.monitoringPing ?? true,
        snmp: device.monitoringSnmp ?? false,
        http: device.monitoringHttp ?? false,
        ssh: device.monitoringSsh ?? false,
      },
    }));

    res.json({
      success: true,
      data: devices,
      count: devices.length,
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤:", error);
    res.status(500).json({
      success: false,
      error: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤",
    });
  }
};

// GET /api/devices/:id - –ø–æ–ª—É—á–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ ID
export const getDeviceById = async (
  req: Request,
  res: Response
): Promise<void> => {
  try {
    const { id } = req.params;
    const device = await prisma.device.findUnique({ where: { id } });
    if (!device) {
      res.status(404).json({
        success: false,
        error: "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
      });
      return;
    }
    console.log(`üì± –ó–∞–ø—Ä–æ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: ${device.name}`);
    res.json({
      success: true,
      data: device,
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:", error);
    res.status(500).json({
      success: false,
      error: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ",
    });
  }
};

// POST /api/devices - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
export const createDevice = async (
  req: Request,
  res: Response
): Promise<void> => {
  try {
    const deviceData = req.body;

    console.log(`üîÑ –°–æ–∑–¥–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å –¥–∞–Ω–Ω—ã–º–∏:`, deviceData);

    const createData: any = {
      name: deviceData.name,
      ip: deviceData.ip,
      type: deviceData.type || "unknown",
      status: deviceData.status || "online",
      responseTime: deviceData.responseTime || 0,
      uptime: deviceData.uptime || 100,
      location: deviceData.location || "",
      description: deviceData.description || "",
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
      mac: deviceData.mac || "",
      vendor: deviceData.vendor || "",
      model: deviceData.model || "",
      osVersion: deviceData.osVersion || "",
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
      monitoringPing: deviceData.monitoring?.ping ?? true,
      monitoringSnmp: deviceData.monitoring?.snmp ?? false,
      monitoringHttp: deviceData.monitoring?.http ?? false,
      monitoringSsh: deviceData.monitoring?.ssh ?? false,
    };

    // –°–≤—è–∑—å —Å –ø–∞–ø–∫–æ–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å Prisma
    if (
      deviceData.folderId &&
      deviceData.folderId !== "root" &&
      deviceData.folderId !== null
    ) {
      createData.folder = { connect: { id: deviceData.folderId } };
    }
    // –ï—Å–ª–∏ folderId === "root" –∏–ª–∏ null, —Ç–æ –æ—Å—Ç–∞–≤–ª—è–µ–º folderId –∫–∞–∫ null –≤ –±–∞–∑–µ

    const newDevice = await prisma.device.create({
      data: createData,
    });
    console.log(`‚ûï –°–æ–∑–¥–∞–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${newDevice.name}`);
    res.status(201).json({
      success: true,
      data: newDevice,
      message: "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ",
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:", error);
    res.status(500).json({
      success: false,
      error: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ",
    });
  }
};

// PUT /api/devices/:id - –æ–±–Ω–æ–≤–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
export const updateDevice = async (
  req: Request,
  res: Response
): Promise<void> => {
  try {
    const { id } = req.params;
    const updateData = req.body;

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const updateFields: any = {};

    // –ü—Ä–æ—Å—Ç—ã–µ –ø–æ–ª—è
    if (updateData.name !== undefined) updateFields.name = updateData.name;
    if (updateData.ip !== undefined) updateFields.ip = updateData.ip;
    if (updateData.type !== undefined) updateFields.type = updateData.type;
    if (updateData.location !== undefined)
      updateFields.location = updateData.location;
    if (updateData.description !== undefined)
      updateFields.description = updateData.description;
    if (updateData.status !== undefined)
      updateFields.status = updateData.status;
    if (updateData.responseTime !== undefined)
      updateFields.responseTime = updateData.responseTime;
    if (updateData.uptime !== undefined)
      updateFields.uptime = updateData.uptime;
    if (updateData.mac !== undefined) updateFields.mac = updateData.mac;
    if (updateData.vendor !== undefined)
      updateFields.vendor = updateData.vendor;
    if (updateData.model !== undefined) updateFields.model = updateData.model;
    if (updateData.osVersion !== undefined)
      updateFields.osVersion = updateData.osVersion;

    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if (updateData.monitoring?.ping !== undefined)
      updateFields.monitoringPing = updateData.monitoring.ping;
    if (updateData.monitoring?.snmp !== undefined)
      updateFields.monitoringSnmp = updateData.monitoring.snmp;
    if (updateData.monitoring?.http !== undefined)
      updateFields.monitoringHttp = updateData.monitoring.http;
    if (updateData.monitoring?.ssh !== undefined)
      updateFields.monitoringSsh = updateData.monitoring.ssh;

    // –°–≤—è–∑—å —Å –ø–∞–ø–∫–æ–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å Prisma
    if (updateData.folderId !== undefined) {
      if (updateData.folderId === null || updateData.folderId === "root") {
        updateFields.folder = { disconnect: true };
      } else {
        updateFields.folder = { connect: { id: updateData.folderId } };
      }
    }

    console.log(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ${id} —Å –¥–∞–Ω–Ω—ã–º–∏:`, updateFields);

    const updatedDevice = await prisma.device.update({
      where: { id },
      data: updateFields,
    });

    console.log(`‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${updatedDevice.name}`);
    res.json({
      success: true,
      data: updatedDevice,
      message: "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ",
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:", error);
    res.status(500).json({
      success: false,
      error: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ",
    });
  }
};

// DELETE /api/devices/:id - —É–¥–∞–ª–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
export const deleteDevice = async (
  req: Request,
  res: Response
): Promise<void> => {
  try {
    const { id } = req.params;
    const deletedDevice = await prisma.device.delete({ where: { id } });
    console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${deletedDevice.name}`);
    res.json({
      success: true,
      data: deletedDevice,
      message: "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ",
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:", error);
    res.status(500).json({
      success: false,
      error: "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ",
    });
  }
};

// POST /api/devices/:id/ping - –ø–∏–Ω–≥ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
export const pingDevice = async (
  req: Request,
  res: Response
): Promise<void> => {
  try {
    const { id } = req.params;
    const device = await prisma.device.findUnique({ where: { id } });

    if (!device) {
      res.status(404).json({
        success: false,
        error: "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
      });
      return;
    }

    console.log(`üèì –ü–∏–Ω–≥ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: ${device.name} (${device.ip})`);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    const result = await checkDeviceAvailability(device);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    const updatedDevice = await prisma.device.update({
      where: { id },
      data: {
        status: result.alive ? "online" : "offline",
        responseTime: result.time,
      },
    });

    res.json({
      success: true,
      data: {
        deviceId: id,
        deviceName: updatedDevice.name,
        ip: updatedDevice.ip,
        alive: result.alive,
        responseTime: result.time,
        packetLoss: "0%", // TODO: –ø–æ–ª—É—á–∞—Ç—å –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ping
        timestamp: new Date().toISOString(),
        method: result.method,
        allMethods: result.allMethods,
      },
      message: result.alive
        ? `–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω–æ (${result.method})`
        : "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ ping —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:", error);
    res.status(500).json({
      success: false,
      error: "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å ping —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
    });
  }
};
