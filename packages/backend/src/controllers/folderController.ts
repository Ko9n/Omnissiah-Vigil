import { Request, Response } from "express";
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

// GET /api/folders - –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–∞–ø–∫–∏
export const getAllFolders = async (
  req: Request,
  res: Response
): Promise<void> => {
  try {
    console.log("üìÅ –ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö –ø–∞–ø–æ–∫");

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –ø–∞–ø–∫–∏ –≤ –±–∞–∑–µ
    const totalFolders = await prisma.deviceFolder.count();
    console.log(`üìä –í—Å–µ–≥–æ –ø–∞–ø–æ–∫ –≤ –±–∞–∑–µ: ${totalFolders}`);

    const folders = await prisma.deviceFolder.findMany({
      include: {
        children: {
          include: {
            children: true, // –í–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–∞–ø–∫–∏ 2-–≥–æ —É—Ä–æ–≤–Ω—è
          },
        },
        devices: true, // –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ –ø–∞–ø–∫–µ
      },
      where: {
        parentId: null, // –¢–æ–ª—å–∫–æ –∫–æ—Ä–Ω–µ–≤—ã–µ –ø–∞–ø–∫–∏
      },
    });

    console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ –∫–æ—Ä–Ω–µ–≤—ã—Ö –ø–∞–ø–æ–∫: ${folders.length}`);

    // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å—Ç—Ä–æ–∏–º –¥–µ—Ä–µ–≤–æ –ø–∞–ø–æ–∫
    const buildFolderTree = (folder: any): any => ({
      id: folder.id,
      name: folder.name,
      parentId: folder.parentId,
      color: folder.color || "#3B82F6",
      icon: "Folder",
      description: "",
      expanded: true,
      children: folder.children ? folder.children.map(buildFolderTree) : [],
    });

    const folderTree = folders.map(buildFolderTree);

    console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ${folderTree.length} –ø–∞–ø–æ–∫`);

    res.json({
      success: true,
      data: folderTree,
      count: folderTree.length,
    });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–ø–æ–∫:", error);
    res.status(500).json({
      success: false,
      error: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫",
    });
  }
};

// GET /api/folders/:id - –ø–æ–ª—É—á–∏—Ç—å –ø–∞–ø–∫—É –ø–æ ID
export const getFolderById = async (
  req: Request,
  res: Response
): Promise<void> => {
  try {
    const { id } = req.params;
    const folder = await prisma.deviceFolder.findUnique({
      where: { id },
      include: {
        children: true,
        devices: true,
      },
    });

    if (!folder) {
      res.status(404).json({
        success: false,
        error: "–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
      });
      return;
    }

    console.log(`üìÅ –ó–∞–ø—Ä–æ—Å –ø–∞–ø–∫–∏: ${folder.name}`);
    res.json({
      success: true,
      data: folder,
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–ø–∫–∏:", error);
    res.status(500).json({
      success: false,
      error: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∞–ø–∫—É",
    });
  }
};

// POST /api/folders - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–∞–ø–∫—É
export const createFolder = async (
  req: Request,
  res: Response
): Promise<void> => {
  try {
    const folderData = req.body;

    console.log(`üìÅ –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏:`, folderData);

    const createData: any = {
      name: folderData.name,
      color: folderData.color || "#3B82F6",
    };

    // –°–≤—è–∑—å —Å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –ø–∞–ø–∫–æ–π
    if (folderData.parentId && folderData.parentId !== "root") {
      createData.parent = { connect: { id: folderData.parentId } };
    }

    const newFolder = await prisma.deviceFolder.create({
      data: createData,
      include: {
        children: true,
        devices: true,
      },
    });

    console.log(`‚ûï –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: ${newFolder.name}`);
    res.status(201).json({
      success: true,
      data: newFolder,
      message: "–ü–∞–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞",
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏:", error);
    res.status(500).json({
      success: false,
      error: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É",
    });
  }
};

// PUT /api/folders/:id - –æ–±–Ω–æ–≤–∏—Ç—å –ø–∞–ø–∫—É
export const updateFolder = async (
  req: Request,
  res: Response
): Promise<void> => {
  try {
    const { id } = req.params;
    const updateData = req.body;

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const updateFields: any = {};

    if (updateData.name !== undefined) updateFields.name = updateData.name;
    if (updateData.color !== undefined) updateFields.color = updateData.color;

    // –°–≤—è–∑—å —Å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –ø–∞–ø–∫–æ–π
    if (updateData.parentId !== undefined) {
      if (updateData.parentId === null || updateData.parentId === "root") {
        updateFields.parent = { disconnect: true };
      } else {
        updateFields.parent = { connect: { id: updateData.parentId } };
      }
    }

    console.log(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–ø–∫—É ${id} —Å –¥–∞–Ω–Ω—ã–º–∏:`, updateFields);

    const updatedFolder = await prisma.deviceFolder.update({
      where: { id },
      data: updateFields,
      include: {
        children: true,
        devices: true,
      },
    });

    console.log(`‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–∞–ø–∫–∞: ${updatedFolder.name}`);
    res.json({
      success: true,
      data: updatedFolder,
      message: "–ü–∞–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏:", error);
    res.status(500).json({
      success: false,
      error: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–∞–ø–∫—É",
    });
  }
};

// DELETE /api/folders/:id - —É–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É
export const deleteFolder = async (
  req: Request,
  res: Response
): Promise<void> => {
  try {
    const { id } = req.params;

    // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ —É–¥–∞–ª—è–µ–º–æ–π –ø–∞–ø–∫–∏ –≤ –∫–æ—Ä–µ–Ω—å
    await prisma.device.updateMany({
      where: { folderId: id },
      data: {
        folderId: null,
      },
    });

    const deletedFolder = await prisma.deviceFolder.delete({
      where: { id },
      include: {
        devices: true,
      },
    });

    console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞: ${deletedFolder.name}`);
    res.json({
      success: true,
      data: deletedFolder,
      message: "–ü–∞–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞",
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏:", error);
    res.status(500).json({
      success: false,
      error: "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É",
    });
  }
};
