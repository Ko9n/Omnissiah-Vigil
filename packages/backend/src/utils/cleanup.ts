import dbManager from "./prisma";
import cron from "node-cron";

// Retention policies (–≤ –¥–Ω—è—Ö)
const PING_HISTORY_RETENTION_DAYS = parseInt(
  process.env.PING_HISTORY_RETENTION_DAYS || "90"
);
const SYSTEM_METRICS_RETENTION_DAYS = parseInt(
  process.env.SYSTEM_METRICS_RETENTION_DAYS || "30"
);

/**
 * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –ø–∏–Ω–≥–æ–≤
 */
export async function cleanupPingHistory(): Promise<number> {
  try {
    const prisma = dbManager.getClient();
    const cutoffDate = new Date();
    cutoffDate.setDate(cutoffDate.getDate() - PING_HISTORY_RETENTION_DAYS);

    const result = await prisma.pingHistory.deleteMany({
      where: {
        timestamp: {
          lt: cutoffDate,
        },
      },
    });

    console.log(
      `üßπ –û—á–∏—Å—Ç–∫–∞ ping_history: —É–¥–∞–ª–µ–Ω–æ ${result.count} –∑–∞–ø–∏—Å–µ–π —Å—Ç–∞—Ä—à–µ ${PING_HISTORY_RETENTION_DAYS} –¥–Ω–µ–π`
    );
    return result.count;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ ping_history:", error);
    return 0;
  }
}

/**
 * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
 */
export async function cleanupSystemMetrics(): Promise<number> {
  try {
    const prisma = dbManager.getClient();
    const cutoffDate = new Date();
    cutoffDate.setDate(cutoffDate.getDate() - SYSTEM_METRICS_RETENTION_DAYS);

    const result = await prisma.systemMetrics.deleteMany({
      where: {
        timestamp: {
          lt: cutoffDate,
        },
      },
    });

    console.log(
      `üßπ –û—á–∏—Å—Ç–∫–∞ system_metrics: —É–¥–∞–ª–µ–Ω–æ ${result.count} –∑–∞–ø–∏—Å–µ–π —Å—Ç–∞—Ä—à–µ ${SYSTEM_METRICS_RETENTION_DAYS} –¥–Ω–µ–π`
    );
    return result.count;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ system_metrics:", error);
    return 0;
  }
}

/**
 * –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
export async function cleanupOldData(): Promise<{
  pings: number;
  metrics: number;
}> {
  console.log("üßπ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö...");

  const [deletedPings, deletedMetrics] = await Promise.all([
    cleanupPingHistory(),
    cleanupSystemMetrics(),
  ]);

  const total = deletedPings + deletedMetrics;
  if (total > 0) {
    console.log(
      `‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É–¥–∞–ª–µ–Ω–æ ${total} –∑–∞–ø–∏—Å–µ–π (pings: ${deletedPings}, metrics: ${deletedMetrics})`
    );
  } else {
    console.log("‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—á–∏—Å—Ç–∫–∏");
  }

  return { pings: deletedPings, metrics: deletedMetrics };
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –æ–±—ä–µ–º—É –¥–∞–Ω–Ω—ã—Ö
 */
export async function getDataStats() {
  try {
    const prisma = dbManager.getClient();
    const [
      totalPings,
      totalMetrics,
      oldestPing,
      oldestMetric,
      newestPing,
      newestMetric,
    ] = await Promise.all([
      prisma.pingHistory.count(),
      prisma.systemMetrics.count(),
      prisma.pingHistory.findFirst({
        orderBy: { timestamp: "asc" },
        select: { timestamp: true },
      }),
      prisma.systemMetrics.findFirst({
        orderBy: { timestamp: "asc" },
        select: { timestamp: true },
      }),
      prisma.pingHistory.findFirst({
        orderBy: { timestamp: "desc" },
        select: { timestamp: true },
      }),
      prisma.systemMetrics.findFirst({
        orderBy: { timestamp: "desc" },
        select: { timestamp: true },
      }),
    ]);

    const estimatedSize = {
      pings: Math.round(((totalPings * 150) / 1024 / 1024) * 100) / 100, // MB
      metrics: Math.round(((totalMetrics * 200) / 1024 / 1024) * 100) / 100, // MB
      total:
        Math.round(
          ((totalPings * 150 + totalMetrics * 200) / 1024 / 1024) * 100
        ) / 100, // MB
    };

    return {
      counts: { totalPings, totalMetrics },
      dateRange: {
        pings: {
          oldest: oldestPing?.timestamp,
          newest: newestPing?.timestamp,
        },
        metrics: {
          oldest: oldestMetric?.timestamp,
          newest: newestMetric?.timestamp,
        },
      },
      estimatedSize,
      retentionDays: {
        pings: PING_HISTORY_RETENTION_DAYS,
        metrics: SYSTEM_METRICS_RETENTION_DAYS,
      },
    };
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö:", error);
    return null;
  }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 3:00 AM
 */
export function initAutoCleanup(): void {
  console.log("‚è∞ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö...");
  console.log(
    `üìä Retention policy: ping_history=${PING_HISTORY_RETENTION_DAYS}–¥, system_metrics=${SYSTEM_METRICS_RETENTION_DAYS}–¥`
  );

  // –ó–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 3:00 AM
  cron.schedule("0 3 * * *", async () => {
    console.log("‚è∞ –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö (3:00 AM)");
    await cleanupOldData();
  });

  // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –∑–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤ –≤ production
  if (process.env.NODE_ENV === "production") {
    cron.schedule("0 */6 * * *", async () => {
      const stats = await getDataStats();
      if (stats && stats.estimatedSize.total > 100) {
        // –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä > 100MB
        console.log(
          "‚ö†Ô∏è –†–∞–∑–º–µ—Ä –ë–î –ø—Ä–µ–≤—ã—à–∞–µ—Ç 100MB, –∑–∞–ø—É—Å–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏"
        );
        await cleanupOldData();
      }
    });
  }

  console.log("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞");
}

/**
 * –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 */
export async function manualCleanup(): Promise<void> {
  console.log("üßπ –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö");

  // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ –æ—á–∏—Å—Ç–∫–∏
  const statsBefore = await getDataStats();
  if (statsBefore) {
    console.log("üìä –î–æ –æ—á–∏—Å—Ç–∫–∏:", {
      records: statsBefore.counts,
      size: `${statsBefore.estimatedSize.total}MB`,
    });
  }

  // –í—ã–ø–æ–ª–Ω–∏—Ç—å –æ—á–∏—Å—Ç–∫—É
  const result = await cleanupOldData();

  // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
  const statsAfter = await getDataStats();
  if (statsAfter) {
    console.log("üìä –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:", {
      records: statsAfter.counts,
      size: `${statsAfter.estimatedSize.total}MB`,
      deleted: result,
    });
  }
}
