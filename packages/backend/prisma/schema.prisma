generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Device {
  id             String        @id @default(cuid())
  name           String
  ip             String        @unique
  type           String
  location       String?
  description    String?
  status         String        @default("unknown")
  responseTime   Int?          @default(0)
  uptime         Float?        @default(0)
  folderId       String?
  mac            String?
  vendor         String?
  model          String?
  osVersion      String?
  monitoringPing Boolean?      @default(true)
  monitoringSnmp Boolean?      @default(false)
  monitoringHttp Boolean?      @default(false)
  monitoringSsh  Boolean?      @default(false)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  lastSeen       DateTime      @default(now())
  alerts         Alert[]
  folder         DeviceFolder? @relation(fields: [folderId], references: [id])
  pingHistory    PingHistory[]

  @@map("devices")
}

model DeviceFolder {
  id        String         @id @default(cuid())
  name      String
  color     String?
  parentId  String?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  parent    DeviceFolder?  @relation("FolderHierarchy", fields: [parentId], references: [id])
  children  DeviceFolder[] @relation("FolderHierarchy")
  devices   Device[]

  @@map("device_folders")
}

model PingHistory {
  id           String   @id @default(cuid())
  deviceId     String
  timestamp    DateTime @default(now())
  isAlive      Boolean
  responseTime Int?
  packetLoss   String?
  errorMessage String?
  device       Device   @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@index([deviceId, timestamp(sort: Desc)])
  @@index([timestamp(sort: Desc)])
  @@index([deviceId, isAlive])
  @@map("ping_history")
}

model SystemMetrics {
  id                String   @id @default(cuid())
  timestamp         DateTime @default(now())
  cpuUsage          Float
  cpuCores          Int?
  cpuModel          String?
  memoryUsage       Float
  memoryUsed        Float
  memoryTotal       Float
  networkInterfaces Int?
  totalRx           Float?
  totalTx           Float?
  uptime            Int?
  temperature       Float?
  processes         Int?

  @@index([timestamp(sort: Desc)])
  @@map("system_metrics")
}

model User {
  id        String        @id @default(cuid())
  email     String        @unique
  username  String        @unique
  password  String
  role      String        @default("viewer")
  isActive  Boolean       @default(true)
  firstName String?
  lastName  String?
  avatar    String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  lastLogin DateTime?
  sessions  UserSession[]
  settings  UserSettings?

  @@map("users")
}

model UserSession {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  userAgent String?
  ipAddress String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
  @@map("user_sessions")
}

model UserSettings {
  id                 String   @id @default(cuid())
  userId             String   @unique
  theme              String   @default("dark")
  language           String   @default("ru")
  timezone           String   @default("Europe/Moscow")
  emailNotifications Boolean  @default(true)
  pushNotifications  Boolean  @default(true)
  alertThreshold     Int      @default(5000)
  refreshInterval    Int      @default(30000)
  defaultView        String   @default("grid")
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model AppSettings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  type        String   @default("string")
  description String?
  isPublic    Boolean  @default(false)
  updatedAt   DateTime @updatedAt
  updatedBy   String?

  @@map("app_settings")
}

model Alert {
  id         String    @id @default(cuid())
  type       String
  severity   String
  title      String
  message    String
  deviceId   String?
  isResolved Boolean   @default(false)
  resolvedAt DateTime?
  resolvedBy String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  device     Device?   @relation(fields: [deviceId], references: [id])

  @@index([createdAt(sort: Desc)])
  @@index([deviceId])
  @@index([isResolved, severity])
  @@map("alerts")
}
