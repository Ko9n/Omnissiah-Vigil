'use client';

import { useEffect } from 'react';
import { useWebSocket } from '@/hooks/useWebSocket';
import { useNetworkStore } from '@/store/network-store';

export const WebSocketProvider: React.FC<{ children: React.ReactNode }> = ({
  children,
}) => {
  const { socket, connected, connect, disconnect } = useWebSocket();
  const apiConnected = useNetworkStore((state) => state.apiConnected);
  const setWebSocketConnected = useNetworkStore(
    (state) => state.setWebSocketConnected
  );

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
  useEffect(() => {
    if (apiConnected && !connected) {
      console.log('üîå API –¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket...');
      connect();
    } else if (!apiConnected && connected) {
      console.log('‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç WebSocket...');
      disconnect();
    }
  }, [apiConnected, connected]); // –£–±–∏—Ä–∞–µ–º connect/disconnect –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ store
  useEffect(() => {
    setWebSocketConnected(connected);
  }, [connected]); // –£–±–∏—Ä–∞–µ–º setWebSocketConnected –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      if (connected) {
        disconnect();
      }
    };
  }, []); // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è cleanup —ç—Ñ—Ñ–µ–∫—Ç–∞

  return <>{children}</>;
};
