'use client';

import { useEffect, useRef, useState, useCallback } from 'react';
import { io, Socket } from 'socket.io-client';
import { useNetworkStore } from '@/store/network-store';

interface UseWebSocketReturn {
  socket: Socket | null;
  connected: boolean;
  connect: () => void;
  disconnect: () => void;
}

export const useWebSocket = (): UseWebSocketReturn => {
  const [socket, setSocket] = useState<Socket | null>(null);
  const [connected, setConnected] = useState(false);
  const reconnectTimeoutRef = useRef<NodeJS.Timeout>();
  const reconnectAttempts = useRef(0);
  const maxReconnectAttempts = 5;

  const updateDeviceStatus = useNetworkStore(
    (state) => state.updateDeviceStatus
  );
  const updateMetrics = useNetworkStore((state) => state.updateMetrics);
  const updateSystemHealth = useNetworkStore(
    (state) => state.updateSystemHealth
  );
  const addBandwidthData = useNetworkStore((state) => state.addBandwidthData);
  const addSystemLog = useNetworkStore((state) => state.addSystemLog);

  const connect = useCallback(() => {
    if (socket?.connected) {
      console.log('‚ö†Ô∏è WebSocket —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
      return;
    }

    console.log(
      'üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É (http://localhost:5000)...'
    );

    const newSocket = io('http://localhost:5000', {
      transports: ['websocket', 'polling'], // –î–æ–±–∞–≤–ª—è–µ–º polling –∫–∞–∫ fallback
      reconnection: false, // –£–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –≤—Ä—É—á–Ω—É—é
      timeout: 5000,
      forceNew: true,
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    newSocket.on('connect', () => {
      console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
      setConnected(true);
      reconnectAttempts.current = 0;

      addSystemLog({
        type: 'info',
        message: 'WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ',
      });
    });

    newSocket.on('disconnect', (reason) => {
      console.log('‚ùå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω:', reason);
      setConnected(false);

      addSystemLog({
        type: 'warning',
        message: `WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ: ${reason}`,
      });

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      if (reconnectAttempts.current < maxReconnectAttempts) {
        const delay = Math.min(
          1000 * Math.pow(2, reconnectAttempts.current),
          30000
        );
        console.log(
          `üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ${delay}ms (–ø–æ–ø—ã—Ç–∫–∞ ${reconnectAttempts.current + 1}/${maxReconnectAttempts})`
        );

        reconnectTimeoutRef.current = setTimeout(() => {
          reconnectAttempts.current++;
          newSocket.connect();
        }, delay);
      }
    });

    newSocket.on('connect_error', (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket:', error);
      setConnected(false);

      addSystemLog({
        type: 'error',
        message: `–û—à–∏–±–∫–∞ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`,
      });
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–∞–Ω–Ω—ã—Ö
    newSocket.on(
      'device:ping:result',
      (data: {
        deviceId: string;
        success: boolean;
        responseTime?: number;
        error?: string;
      }) => {
        console.log('üì° –ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç ping:', data);

        updateDeviceStatus(data.deviceId, {
          status: data.success ? 'online' : 'offline',
          responseTime: data.responseTime || 0,
          lastSeen: new Date(),
        });

        if (!data.success && data.error) {
          addSystemLog({
            type: 'warning',
            message: `–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ${data.deviceId} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: ${data.error}`,
          });
        }
      }
    );

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ events
    newSocket.on(
      'metrics:update',
      (data: {
        systemHealth?: any;
        bandwidth?: any;
        networkStats?: any;
        metrics?: any;
      }) => {
        console.log('üìä –ü–æ–ª—É—á–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç):', data);

        if (data.metrics) {
          updateMetrics(data.metrics);
        }
        if (data.systemHealth) {
          updateSystemHealth(data.systemHealth);
        }
      }
    );

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç –±—ç–∫–µ–Ω–¥–∞
    newSocket.on(
      'metrics_update',
      (data: {
        timestamp: string;
        deviceMetrics: Array<{
          deviceId: string;
          deviceName: string;
          ip: string;
          status: 'online' | 'offline';
          responseTime: number;
          packetLoss: string;
        }>;
        systemHealth: {
          cpu: number;
          memory: number;
          disk: number;
          network: number;
          temperature: number;
          uptime: number;
          processes: number;
        };
        networkMetrics: {
          totalDevices: number;
          onlineDevices: number;
          offlineDevices: number;
          averageResponseTime: number;
        };
      }) => {
        console.log('üìä –ü–æ–ª—É—á–µ–Ω—ã real-time –º–µ—Ç—Ä–∏–∫–∏ –æ—Ç –±—ç–∫–µ–Ω–¥–∞:', data);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        data.deviceMetrics.forEach((device) => {
          updateDeviceStatus(device.deviceId, {
            status: device.status,
            responseTime: device.responseTime,
            lastSeen: new Date(),
          });
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        updateSystemHealth({
          ...data.systemHealth,
          lastUpdate: new Date(),
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–µ—Ç–∏
        updateMetrics({
          totalDevices: data.networkMetrics.totalDevices,
          onlineDevices: data.networkMetrics.onlineDevices,
          offlineDevices: data.networkMetrics.offlineDevices,
          averageResponseTime: data.networkMetrics.averageResponseTime,
          lastUpdate: new Date(),
        });

        // –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–ø—É—Å–∫–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        const bandwidthData = {
          timestamp: new Date(),
          upload: 50 + Math.random() * 100, // Mbps
          download: 100 + Math.random() * 200, // Mbps
          total: 150 + Math.random() * 300, // Mbps
        };
        addBandwidthData(bandwidthData);

        addSystemLog({
          type: 'info',
          message: `–û–±–Ω–æ–≤–ª–µ–Ω—ã –º–µ—Ç—Ä–∏–∫–∏: ${data.networkMetrics.onlineDevices}/${data.networkMetrics.totalDevices} —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –æ–Ω–ª–∞–π–Ω`,
        });
      }
    );

    newSocket.on(
      'device:monitoring:update',
      (data: {
        deviceId: string;
        status: 'online' | 'offline' | 'warning';
        responseTime: number;
        timestamp: string;
      }) => {
        console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', data);

        updateDeviceStatus(data.deviceId, {
          status: data.status,
          responseTime: data.responseTime,
          lastSeen: new Date(data.timestamp),
        });
      }
    );

    setSocket(newSocket);
  }, [
    socket,
    addSystemLog,
    updateDeviceStatus,
    updateMetrics,
    updateSystemHealth,
    addBandwidthData,
  ]);

  const disconnect = useCallback(() => {
    if (reconnectTimeoutRef.current) {
      clearTimeout(reconnectTimeoutRef.current);
    }

    if (socket) {
      console.log('üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç WebSocket —Å–µ—Ä–≤–µ—Ä–∞...');
      socket.disconnect();
      setSocket(null);
      setConnected(false);
    }
  }, [socket]);

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      disconnect();
    };
  }, [disconnect]);

  return {
    socket,
    connected,
    connect,
    disconnect,
  };
};
