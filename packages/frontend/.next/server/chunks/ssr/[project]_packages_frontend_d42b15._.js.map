{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/packages/frontend/src/lib/utils.ts"],"sourcesContent":["import { type ClassValue, clsx } from 'clsx';\r\nimport { twMerge } from 'tailwind-merge';\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(inputs));\r\n}\r\n\r\n// Форматирование времени \"назад\" (например \"5 мин назад\")\r\nexport function formatTimeAgo(date: Date | string): string {\r\n  const now = new Date();\r\n  const dateObj = typeof date === 'string' ? new Date(date) : date;\r\n\r\n  if (isNaN(dateObj.getTime())) return 'неизвестно';\r\n\r\n  const diffInSeconds = Math.floor((now.getTime() - dateObj.getTime()) / 1000);\r\n\r\n  if (diffInSeconds < 60) return 'только что';\r\n  if (diffInSeconds < 3600)\r\n    return `${Math.floor(diffInSeconds / 60)} мин назад`;\r\n  if (diffInSeconds < 86400)\r\n    return `${Math.floor(diffInSeconds / 3600)} ч назад`;\r\n  return `${Math.floor(diffInSeconds / 86400)} дн назад`;\r\n}\r\n\r\n// Детальное форматирование времени\r\nexport function formatTimeDetailed(timestamp: Date | string): string {\r\n  const date = typeof timestamp === 'string' ? new Date(timestamp) : timestamp;\r\n  if (isNaN(date.getTime())) return 'неизвестно';\r\n\r\n  return date.toLocaleString('ru-RU', {\r\n    day: '2-digit',\r\n    month: '2-digit',\r\n    year: 'numeric',\r\n    hour: '2-digit',\r\n    minute: '2-digit',\r\n  });\r\n}\r\n\r\n// Создание и скачивание файла\r\nexport function downloadFile(\r\n  data: string,\r\n  filename: string,\r\n  type: string = 'application/json'\r\n) {\r\n  const blob = new Blob([data], { type });\r\n  const url = URL.createObjectURL(blob);\r\n  const a = document.createElement('a');\r\n  a.href = url;\r\n  a.download = filename;\r\n  document.body.appendChild(a);\r\n  a.click();\r\n  document.body.removeChild(a);\r\n  URL.revokeObjectURL(url);\r\n}\r\n\r\n// Создание backup файла с датой\r\nexport function createBackupFilename(prefix: string = 'backup'): string {\r\n  const date = new Date().toISOString().split('T')[0];\r\n  return `${prefix}-${date}.json`;\r\n}\r\n\r\n// Универсальная функция поиска в массиве объектов\r\nexport function searchInObjects<T>(\r\n  items: T[],\r\n  searchTerm: string,\r\n  searchFields: (keyof T)[]\r\n): T[] {\r\n  if (!searchTerm.trim()) return items;\r\n\r\n  const lowercaseSearch = searchTerm.toLowerCase();\r\n\r\n  return items.filter((item) =>\r\n    searchFields.some((field) => {\r\n      const value = item[field];\r\n      return value && String(value).toLowerCase().includes(lowercaseSearch);\r\n    })\r\n  );\r\n}\r\n\r\n// Debounce функция (уже была, оставляю как есть)\r\nexport function debounce<T extends (...args: any[]) => any>(\r\n  func: T,\r\n  wait: number\r\n): (...args: Parameters<T>) => void {\r\n  let timeout: NodeJS.Timeout | null = null;\r\n\r\n  return (...args: Parameters<T>) => {\r\n    if (timeout) clearTimeout(timeout);\r\n    timeout = setTimeout(() => func(...args), wait);\r\n  };\r\n}\r\n\r\n// Генерация случайного ID\r\nexport function generateId(): string {\r\n  return Math.random().toString(36).substr(2, 9);\r\n}\r\n\r\n// Форматирование uptime\r\nexport function formatUptime(seconds: number): string {\r\n  const days = Math.floor(seconds / 86400);\r\n  const hours = Math.floor((seconds % 86400) / 3600);\r\n  const minutes = Math.floor((seconds % 3600) / 60);\r\n\r\n  if (days > 0) return `${days}д ${hours}ч ${minutes}м`;\r\n  if (hours > 0) return `${hours}ч ${minutes}м`;\r\n  return `${minutes}м`;\r\n}\r\n\r\nexport function formatBytes(bytes: number): string {\r\n  if (bytes === 0) return '0 Bytes';\r\n  const k = 1024;\r\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\r\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n}\r\n\r\nexport function getStatusColor(status: string): string {\r\n  switch (status) {\r\n    case 'online':\r\n      return 'text-green-500';\r\n    case 'offline':\r\n      return 'text-red-500';\r\n    case 'warning':\r\n      return 'text-yellow-500';\r\n    default:\r\n      return 'text-gray-500';\r\n  }\r\n}\r\n\r\nexport function getStatusBgColor(status: string): string {\r\n  switch (status) {\r\n    case 'online':\r\n      return 'bg-green-500/10 border-green-500/20';\r\n    case 'offline':\r\n      return 'bg-red-500/10 border-red-500/20';\r\n    case 'warning':\r\n      return 'bg-yellow-500/10 border-yellow-500/20';\r\n    default:\r\n      return 'bg-gray-500/10 border-gray-500/20';\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 130, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 135, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/packages/frontend/src/components/ui/button.tsx"],"sourcesContent":["import * as React from 'react';\r\nimport { Slot } from '@radix-ui/react-slot';\r\nimport { cva, type VariantProps } from 'class-variance-authority';\r\nimport { cn } from '@/lib/utils';\r\n\r\nconst buttonVariants = cva(\r\n  'inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50',\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: 'bg-primary text-primary-foreground hover:bg-primary/90',\r\n        destructive: 'bg-destructive text-destructive-foreground hover:bg-destructive/90',\r\n        outline: 'border border-input bg-background hover:bg-accent hover:text-accent-foreground',\r\n        secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',\r\n        ghost: 'hover:bg-accent hover:text-accent-foreground',\r\n        link: 'text-primary underline-offset-4 hover:underline',\r\n      },\r\n      size: {\r\n        default: 'h-10 px-4 py-2',\r\n        sm: 'h-9 rounded-md px-3',\r\n        lg: 'h-11 rounded-md px-8',\r\n        icon: 'h-10 w-10',\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: 'default',\r\n      size: 'default',\r\n    },\r\n  }\r\n);\r\n\r\nexport interface ButtonProps\r\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\r\n    VariantProps<typeof buttonVariants> {\r\n  asChild?: boolean;\r\n}\r\n\r\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\r\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\r\n    const Comp = asChild ? Slot : 'button';\r\n    return (\r\n      <Comp\r\n        className={cn(buttonVariants({ variant, size, className }))}\r\n        ref={ref}\r\n        {...props}\r\n      />\r\n    );\r\n  }\r\n);\r\nButton.displayName = 'Button';\r\n\r\nexport { Button, buttonVariants }; "],"names":[],"mappings":";;;;;;;;;;;;;;;AAKA,MAAM,iBAAiB,CAAA,GAAA,2OAAA,CAAA,MAAG,AAAD,EACvB,0RACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aAAa;YACb,SAAS;YACT,WAAW;YACX,OAAO;YACP,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AASF,MAAM,uBAAS,gYAAM,UAAU,CAC7B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,KAAK,EAAE,GAAG,OAAO,EAAE;IACxD,MAAM,OAAO,UAAU,qSAAA,CAAA,OAAI,GAAG;IAC9B,qBACE,waAAC;QACC,WAAW,CAAA,GAAA,2IAAA,CAAA,KAAE,AAAD,EAAE,eAAe;YAAE;YAAS;YAAM;QAAU;QACxD,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,OAAO,WAAW,GAAG"}},
    {"offset": {"line": 190, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 195, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/packages/frontend/src/components/ui/card.tsx"],"sourcesContent":["import * as React from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\nconst Card = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\r\n      'rounded-lg border bg-card text-card-foreground shadow-sm',\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n));\r\nCard.displayName = 'Card';\r\n\r\nconst CardHeader = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn('flex flex-col space-y-1.5 p-6', className)}\r\n    {...props}\r\n  />\r\n));\r\nCardHeader.displayName = 'CardHeader';\r\n\r\nconst CardTitle = React.forwardRef<\r\n  HTMLParagraphElement,\r\n  React.HTMLAttributes<HTMLHeadingElement>\r\n>(({ className, ...props }, ref) => (\r\n  <h3\r\n    ref={ref}\r\n    className={cn(\r\n      'text-2xl font-semibold leading-none tracking-tight',\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n));\r\nCardTitle.displayName = 'CardTitle';\r\n\r\nconst CardDescription = React.forwardRef<\r\n  HTMLParagraphElement,\r\n  React.HTMLAttributes<HTMLParagraphElement>\r\n>(({ className, ...props }, ref) => (\r\n  <p\r\n    ref={ref}\r\n    className={cn('text-sm text-muted-foreground', className)}\r\n    {...props}\r\n  />\r\n));\r\nCardDescription.displayName = 'CardDescription';\r\n\r\nconst CardContent = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div ref={ref} className={cn('p-6 pt-0', className)} {...props} />\r\n));\r\nCardContent.displayName = 'CardContent';\r\n\r\nconst CardFooter = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn('flex items-center p-6 pt-0', className)}\r\n    {...props}\r\n  />\r\n));\r\nCardFooter.displayName = 'CardFooter';\r\n\r\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }; "],"names":[],"mappings":";;;;;;;;;;;;;;;AAGA,MAAM,qBAAO,gYAAM,UAAU,CAG3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,waAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,2IAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,gYAAM,UAAU,CAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,waAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,2IAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,gYAAM,UAAU,CAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,waAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,2IAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,gYAAM,UAAU,CAGtC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,waAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,2IAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,gYAAM,UAAU,CAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,waAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,2IAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,gYAAM,UAAU,CAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,waAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,2IAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG"}},
    {"offset": {"line": 271, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 276, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/packages/frontend/src/components/ui/error-boundary.tsx"],"sourcesContent":["'use client';\r\n\r\nimport React from 'react';\r\nimport { AlertTriangle, RefreshCw, Home } from 'lucide-react';\r\nimport { Button } from './button';\r\nimport { Card } from './card';\r\nimport * as Sentry from '@sentry/nextjs';\r\n\r\ninterface ErrorBoundaryState {\r\n  hasError: boolean;\r\n  error: Error | null;\r\n  errorInfo: React.ErrorInfo | null;\r\n}\r\n\r\ninterface ErrorBoundaryProps {\r\n  children: React.ReactNode;\r\n  fallback?: React.ComponentType<ErrorFallbackProps>;\r\n}\r\n\r\ninterface ErrorFallbackProps {\r\n  error: Error;\r\n  resetError: () => void;\r\n  errorInfo?: React.ErrorInfo;\r\n}\r\n\r\n// Компонент отображения ошибки по умолчанию\r\nfunction DefaultErrorFallback({ error, resetError }: ErrorFallbackProps) {\r\n  const handleGoHome = () => {\r\n    window.location.href = '/';\r\n  };\r\n\r\n  const handleReload = () => {\r\n    window.location.reload();\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex min-h-screen items-center justify-center bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 p-4\">\r\n      <Card className=\"mx-auto max-w-md border-slate-700 bg-slate-800/50\">\r\n        <div className=\"p-8 text-center\">\r\n          <div className=\"mx-auto mb-6 flex h-16 w-16 items-center justify-center rounded-full bg-red-500/10\">\r\n            <AlertTriangle className=\"h-8 w-8 text-red-400\" />\r\n          </div>\r\n\r\n          <h1 className=\"mb-3 text-xl font-semibold text-white\">\r\n            Упс! Что-то пошло не так\r\n          </h1>\r\n\r\n          <p className=\"mb-6 text-sm text-slate-400\">\r\n            Произошла неожиданная ошибка. Мы уже работаем над её исправлением.\r\n          </p>\r\n\r\n          {process.env.NODE_ENV === 'development' && (\r\n            <details className=\"mb-6 text-left\">\r\n              <summary className=\"mb-2 cursor-pointer text-sm font-medium text-red-400\">\r\n                Детали ошибки (только для разработки)\r\n              </summary>\r\n              <div className=\"rounded-lg bg-slate-900/50 p-4 text-xs text-slate-300\">\r\n                <pre className=\"whitespace-pre-wrap break-words\">\r\n                  {error.name}: {error.message}\r\n                  {error.stack && (\r\n                    <>\r\n                      {'\\n\\nStack trace:\\n'}\r\n                      {error.stack}\r\n                    </>\r\n                  )}\r\n                </pre>\r\n              </div>\r\n            </details>\r\n          )}\r\n\r\n          <div className=\"flex flex-col gap-3 sm:flex-row\">\r\n            <Button\r\n              onClick={resetError}\r\n              className=\"flex items-center justify-center gap-2\"\r\n              variant=\"default\"\r\n            >\r\n              <RefreshCw className=\"h-4 w-4\" />\r\n              Попробовать снова\r\n            </Button>\r\n\r\n            <Button\r\n              onClick={handleGoHome}\r\n              variant=\"outline\"\r\n              className=\"flex items-center justify-center gap-2\"\r\n            >\r\n              <Home className=\"h-4 w-4\" />\r\n              На главную\r\n            </Button>\r\n\r\n            <Button\r\n              onClick={handleReload}\r\n              variant=\"ghost\"\r\n              className=\"text-slate-400 hover:text-white\"\r\n            >\r\n              Перезагрузить\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Error Boundary класс\r\nexport class ErrorBoundary extends React.Component<\r\n  ErrorBoundaryProps,\r\n  ErrorBoundaryState\r\n> {\r\n  constructor(props: ErrorBoundaryProps) {\r\n    super(props);\r\n    this.state = { hasError: false, error: null, errorInfo: null };\r\n  }\r\n\r\n  static getDerivedStateFromError(error: Error): Partial<ErrorBoundaryState> {\r\n    return { hasError: true, error };\r\n  }\r\n\r\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\r\n    console.error('ErrorBoundary caught an error:', error, errorInfo);\r\n\r\n    this.setState({\r\n      error,\r\n      errorInfo,\r\n    });\r\n\r\n    // Отправляем ошибку в Sentry\r\n    Sentry.withScope((scope) => {\r\n      scope.setTag('errorBoundary', true);\r\n      scope.setLevel('error');\r\n      scope.setContext('errorInfo', {\r\n        componentStack: errorInfo.componentStack,\r\n      });\r\n      scope.setContext('errorBoundary', {\r\n        fallbackType: this.props.fallback ? 'custom' : 'default',\r\n        hasError: this.state.hasError,\r\n      });\r\n      Sentry.captureException(error);\r\n    });\r\n  }\r\n\r\n  resetError = () => {\r\n    this.setState({ hasError: false, error: null, errorInfo: null });\r\n  };\r\n\r\n  render() {\r\n    if (this.state.hasError && this.state.error) {\r\n      const FallbackComponent = this.props.fallback || DefaultErrorFallback;\r\n\r\n      return (\r\n        <FallbackComponent\r\n          error={this.state.error}\r\n          resetError={this.resetError}\r\n          errorInfo={this.state.errorInfo || undefined}\r\n        />\r\n      );\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\n// Hook для использования в функциональных компонентах\r\nexport function useErrorHandler() {\r\n  return React.useCallback((error: Error, errorInfo?: React.ErrorInfo) => {\r\n    console.error('Error caught by useErrorHandler:', error, errorInfo);\r\n\r\n    // Отправляем ошибку в Sentry через хук\r\n    Sentry.withScope((scope) => {\r\n      scope.setTag('errorHandler', true);\r\n      scope.setLevel('error');\r\n      if (errorInfo) {\r\n        scope.setContext('errorInfo', {\r\n          componentStack: errorInfo.componentStack,\r\n        });\r\n      }\r\n      Sentry.captureException(error);\r\n    });\r\n  }, []);\r\n}\r\n\r\n// Компонент-обертка для легкого использования\r\nexport function withErrorBoundary<T extends object>(\r\n  Component: React.ComponentType<T>,\r\n  fallback?: React.ComponentType<ErrorFallbackProps>\r\n) {\r\n  const WrappedComponent = (props: T) => (\r\n    <ErrorBoundary fallback={fallback}>\r\n      <Component {...props} />\r\n    </ErrorBoundary>\r\n  );\r\n\r\n  WrappedComponent.displayName = `withErrorBoundary(${Component.displayName || Component.name})`;\r\n\r\n  return WrappedComponent;\r\n}\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 550, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 555, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/packages/frontend/src/lib/api.ts"],"sourcesContent":["import {\r\n  NetworkDevice,\r\n  DeviceFolder,\r\n  NetworkMetrics,\r\n  AlertMessage,\r\n  SystemHealth,\r\n  BandwidthData,\r\n} from '@/types/schemas';\r\n\r\n// API Response types\r\ninterface ApiResponse<T> {\r\n  success: boolean;\r\n  data: T;\r\n  message?: string;\r\n  error?: string;\r\n}\r\n\r\ninterface PaginatedResponse<T> {\r\n  success: boolean;\r\n  data: T[];\r\n  pagination: {\r\n    page: number;\r\n    limit: number;\r\n    total: number;\r\n    totalPages: number;\r\n  };\r\n}\r\n\r\n// API Error class\r\nexport class ApiError extends Error {\r\n  constructor(\r\n    message: string,\r\n    public status: number,\r\n    public code?: string\r\n  ) {\r\n    super(message);\r\n    this.name = 'ApiError';\r\n  }\r\n}\r\n\r\n// Base API configuration\r\nconst API_BASE_URL =\r\n  process.env.NEXT_PUBLIC_API_URL || 'http://localhost:5000/api';\r\nconst API_TIMEOUT = 30000; // 30 seconds\r\n\r\n// HTTP client configuration\r\nclass HttpClient {\r\n  private baseURL: string;\r\n  private timeout: number;\r\n  private defaultHeaders: Record<string, string>;\r\n\r\n  constructor(baseURL: string, timeout: number = API_TIMEOUT) {\r\n    this.baseURL = baseURL;\r\n    this.timeout = timeout;\r\n    this.defaultHeaders = {\r\n      'Content-Type': 'application/json',\r\n    };\r\n  }\r\n\r\n  // Add authentication token\r\n  setAuthToken(token: string) {\r\n    this.defaultHeaders.Authorization = `Bearer ${token}`;\r\n  }\r\n\r\n  // Remove authentication token\r\n  clearAuthToken() {\r\n    delete this.defaultHeaders.Authorization;\r\n  }\r\n\r\n  // Generic request method\r\n  private async request<T>(\r\n    endpoint: string,\r\n    options: RequestInit = {}\r\n  ): Promise<T> {\r\n    const url = `${this.baseURL}${endpoint}`;\r\n\r\n    const config: RequestInit = {\r\n      ...options,\r\n      headers: {\r\n        ...this.defaultHeaders,\r\n        ...options.headers,\r\n      },\r\n      signal: AbortSignal.timeout(this.timeout),\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(url, config);\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json().catch(() => ({}));\r\n        throw new ApiError(\r\n          errorData.message ||\r\n            `HTTP ${response.status}: ${response.statusText}`,\r\n          response.status,\r\n          errorData.code\r\n        );\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      if (error instanceof ApiError) {\r\n        throw error;\r\n      }\r\n\r\n      if (error instanceof DOMException && error.name === 'TimeoutError') {\r\n        throw new ApiError('Request timeout', 408, 'TIMEOUT');\r\n      }\r\n\r\n      if (error instanceof TypeError && error.message.includes('fetch')) {\r\n        throw new ApiError(\r\n          'Network error - server unavailable',\r\n          0,\r\n          'NETWORK_ERROR'\r\n        );\r\n      }\r\n\r\n      throw new ApiError('Unknown error occurred', 500, 'UNKNOWN_ERROR');\r\n    }\r\n  }\r\n\r\n  // HTTP methods\r\n  async get<T>(endpoint: string, params?: Record<string, any>): Promise<T> {\r\n    const url = new URL(endpoint, this.baseURL);\r\n    if (params) {\r\n      Object.entries(params).forEach(([key, value]) => {\r\n        if (value !== undefined && value !== null) {\r\n          url.searchParams.append(key, String(value));\r\n        }\r\n      });\r\n    }\r\n\r\n    return this.request<T>(url.pathname + url.search);\r\n  }\r\n\r\n  async post<T>(endpoint: string, data?: any): Promise<T> {\r\n    return this.request<T>(endpoint, {\r\n      method: 'POST',\r\n      body: data ? JSON.stringify(data) : undefined,\r\n    });\r\n  }\r\n\r\n  async put<T>(endpoint: string, data?: any): Promise<T> {\r\n    return this.request<T>(endpoint, {\r\n      method: 'PUT',\r\n      body: data ? JSON.stringify(data) : undefined,\r\n    });\r\n  }\r\n\r\n  async patch<T>(endpoint: string, data?: any): Promise<T> {\r\n    return this.request<T>(endpoint, {\r\n      method: 'PATCH',\r\n      body: data ? JSON.stringify(data) : undefined,\r\n    });\r\n  }\r\n\r\n  async delete<T>(endpoint: string): Promise<T> {\r\n    return this.request<T>(endpoint, {\r\n      method: 'DELETE',\r\n    });\r\n  }\r\n}\r\n\r\n// Create HTTP client instance\r\nconst httpClient = new HttpClient(API_BASE_URL);\r\n\r\n// API Service classes\r\nexport class DevicesApi {\r\n  // Get all devices with optional filtering\r\n  static async getDevices(params?: {\r\n    folderId?: string;\r\n    status?: string;\r\n    type?: string;\r\n    search?: string;\r\n    page?: number;\r\n    limit?: number;\r\n  }): Promise<PaginatedResponse<NetworkDevice>> {\r\n    return httpClient.get<PaginatedResponse<NetworkDevice>>('/devices', params);\r\n  }\r\n\r\n  // Get single device by ID\r\n  static async getDevice(id: string): Promise<ApiResponse<NetworkDevice>> {\r\n    return httpClient.get<ApiResponse<NetworkDevice>>(`/devices/${id}`);\r\n  }\r\n\r\n  // Create new device\r\n  static async createDevice(\r\n    device: Omit<NetworkDevice, 'id' | 'lastSeen' | 'status'>\r\n  ): Promise<ApiResponse<NetworkDevice>> {\r\n    return httpClient.post<ApiResponse<NetworkDevice>>('/devices', device);\r\n  }\r\n\r\n  // Update device\r\n  static async updateDevice(\r\n    id: string,\r\n    updates: Partial<NetworkDevice>\r\n  ): Promise<ApiResponse<NetworkDevice>> {\r\n    return httpClient.patch<ApiResponse<NetworkDevice>>(\r\n      `/devices/${id}`,\r\n      updates\r\n    );\r\n  }\r\n\r\n  // Delete device\r\n  static async deleteDevice(id: string): Promise<ApiResponse<void>> {\r\n    return httpClient.delete<ApiResponse<void>>(`/devices/${id}`);\r\n  }\r\n\r\n  // Ping device\r\n  static async pingDevice(\r\n    id: string\r\n  ): Promise<ApiResponse<{ responseTime: number; status: string }>> {\r\n    return httpClient.post<\r\n      ApiResponse<{ responseTime: number; status: string }>\r\n    >(`/devices/${id}/ping`);\r\n  }\r\n\r\n  // Get device metrics\r\n  static async getDeviceMetrics(\r\n    id: string,\r\n    period?: string\r\n  ): Promise<ApiResponse<BandwidthData[]>> {\r\n    return httpClient.get<ApiResponse<BandwidthData[]>>(\r\n      `/devices/${id}/metrics`,\r\n      { period }\r\n    );\r\n  }\r\n}\r\n\r\nexport class FoldersApi {\r\n  // Get all folders\r\n  static async getFolders(): Promise<ApiResponse<DeviceFolder[]>> {\r\n    return httpClient.get<ApiResponse<DeviceFolder[]>>('/folders');\r\n  }\r\n\r\n  // Create new folder\r\n  static async createFolder(\r\n    folder: Omit<DeviceFolder, 'id' | 'children'>\r\n  ): Promise<ApiResponse<DeviceFolder>> {\r\n    return httpClient.post<ApiResponse<DeviceFolder>>('/folders', folder);\r\n  }\r\n\r\n  // Update folder\r\n  static async updateFolder(\r\n    id: string,\r\n    updates: Partial<DeviceFolder>\r\n  ): Promise<ApiResponse<DeviceFolder>> {\r\n    return httpClient.patch<ApiResponse<DeviceFolder>>(\r\n      `/folders/${id}`,\r\n      updates\r\n    );\r\n  }\r\n\r\n  // Delete folder\r\n  static async deleteFolder(id: string): Promise<ApiResponse<void>> {\r\n    return httpClient.delete<ApiResponse<void>>(`/folders/${id}`);\r\n  }\r\n}\r\n\r\nexport class MetricsApi {\r\n  // Get network metrics\r\n  static async getNetworkMetrics(): Promise<ApiResponse<NetworkMetrics>> {\r\n    return httpClient.get<ApiResponse<NetworkMetrics>>('/metrics/network');\r\n  }\r\n\r\n  // Get system health\r\n  static async getSystemHealth(): Promise<ApiResponse<SystemHealth>> {\r\n    return httpClient.get<ApiResponse<SystemHealth>>('/metrics/system');\r\n  }\r\n\r\n  // Get bandwidth history\r\n  static async getBandwidthHistory(params?: {\r\n    deviceId?: string;\r\n    period?: string;\r\n    limit?: number;\r\n  }): Promise<ApiResponse<BandwidthData[]>> {\r\n    return httpClient.get<ApiResponse<BandwidthData[]>>(\r\n      '/metrics/bandwidth',\r\n      params\r\n    );\r\n  }\r\n}\r\n\r\nexport class AlertsApi {\r\n  // Get all alerts\r\n  static async getAlerts(params?: {\r\n    resolved?: boolean;\r\n    type?: string;\r\n    deviceId?: string;\r\n    page?: number;\r\n    limit?: number;\r\n  }): Promise<PaginatedResponse<AlertMessage>> {\r\n    return httpClient.get<PaginatedResponse<AlertMessage>>('/alerts', params);\r\n  }\r\n\r\n  // Create new alert\r\n  static async createAlert(\r\n    alert: Omit<AlertMessage, 'id' | 'timestamp'>\r\n  ): Promise<ApiResponse<AlertMessage>> {\r\n    return httpClient.post<ApiResponse<AlertMessage>>('/alerts', alert);\r\n  }\r\n\r\n  // Mark alert as resolved\r\n  static async resolveAlert(id: string): Promise<ApiResponse<AlertMessage>> {\r\n    return httpClient.patch<ApiResponse<AlertMessage>>(`/alerts/${id}/resolve`);\r\n  }\r\n\r\n  // Acknowledge alert\r\n  static async acknowledgeAlert(\r\n    id: string,\r\n    userId: string\r\n  ): Promise<ApiResponse<AlertMessage>> {\r\n    return httpClient.patch<ApiResponse<AlertMessage>>(\r\n      `/alerts/${id}/acknowledge`,\r\n      { userId }\r\n    );\r\n  }\r\n\r\n  // Delete alert\r\n  static async deleteAlert(id: string): Promise<ApiResponse<void>> {\r\n    return httpClient.delete<ApiResponse<void>>(`/alerts/${id}`);\r\n  }\r\n}\r\n\r\n// WebSocket connection for real-time updates\r\nexport class RealtimeApi {\r\n  private ws: WebSocket | null = null;\r\n  private reconnectAttempts = 0;\r\n  private maxReconnectAttempts = 5;\r\n  private reconnectDelay = 1000;\r\n\r\n  connect(onMessage: (data: any) => void, onError?: (error: Event) => void) {\r\n    const wsUrl = API_BASE_URL.replace(/^https?/, 'ws') + '/ws';\r\n\r\n    try {\r\n      this.ws = new WebSocket(wsUrl);\r\n\r\n      this.ws.onopen = () => {\r\n        console.log('WebSocket connected');\r\n        this.reconnectAttempts = 0;\r\n      };\r\n\r\n      this.ws.onmessage = (event) => {\r\n        try {\r\n          const data = JSON.parse(event.data);\r\n          onMessage(data);\r\n        } catch (error) {\r\n          console.error('Failed to parse WebSocket message:', error);\r\n        }\r\n      };\r\n\r\n      this.ws.onclose = () => {\r\n        console.log('WebSocket disconnected');\r\n        this.reconnect(onMessage, onError);\r\n      };\r\n\r\n      this.ws.onerror = (error) => {\r\n        console.error('WebSocket error:', error);\r\n        if (onError) {\r\n          onError(error);\r\n        }\r\n      };\r\n    } catch (error) {\r\n      console.error('Failed to connect WebSocket:', error);\r\n      if (onError) {\r\n        onError(error as Event);\r\n      }\r\n    }\r\n  }\r\n\r\n  private reconnect(\r\n    onMessage: (data: any) => void,\r\n    onError?: (error: Event) => void\r\n  ) {\r\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\r\n      this.reconnectAttempts++;\r\n      const delay =\r\n        this.reconnectDelay * Math.pow(2, this.reconnectAttempts - 1);\r\n\r\n      console.log(\r\n        `Reconnecting WebSocket in ${delay}ms (attempt ${this.reconnectAttempts})`\r\n      );\r\n\r\n      setTimeout(() => {\r\n        this.connect(onMessage, onError);\r\n      }, delay);\r\n    } else {\r\n      console.error('Max WebSocket reconnection attempts reached');\r\n    }\r\n  }\r\n\r\n  disconnect() {\r\n    if (this.ws) {\r\n      this.ws.close();\r\n      this.ws = null;\r\n    }\r\n  }\r\n\r\n  send(data: any) {\r\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\r\n      this.ws.send(JSON.stringify(data));\r\n    } else {\r\n      console.error('WebSocket is not connected');\r\n    }\r\n  }\r\n}\r\n\r\n// Export configured instances\r\nexport const api = {\r\n  devices: DevicesApi,\r\n  folders: FoldersApi,\r\n  metrics: MetricsApi,\r\n  alerts: AlertsApi,\r\n  realtime: new RealtimeApi(),\r\n\r\n  // Auth methods\r\n  setAuthToken: (token: string) => httpClient.setAuthToken(token),\r\n  clearAuthToken: () => httpClient.clearAuthToken(),\r\n};\r\n\r\n// Default export\r\nexport default api;\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 831, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 836, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/packages/frontend/src/store/network-store.ts"],"sourcesContent":["import { create } from 'zustand';\nimport { subscribeWithSelector } from 'zustand/middleware';\nimport { persist } from 'zustand/middleware';\nimport {\n  NetworkDevice,\n  DeviceFolder,\n  NetworkMetrics,\n  BandwidthData,\n  AlertMessage,\n  SystemHealth,\n  NetworkConnection,\n  MonitoringConfig,\n} from '../types/schemas';\n\ninterface SystemLog {\n  id: string;\n  type: 'info' | 'warning' | 'error' | 'success';\n  message: string;\n  timestamp: Date;\n}\nimport {\n  mockDevices,\n  mockFolders,\n  mockAlerts,\n  initialMetrics,\n  initialSystemHealth,\n  initialBandwidthHistory,\n  initialConfig,\n} from '../data/mock-data';\nimport api from '../lib/api';\n\ninterface NetworkStore {\n  // State\n  devices: NetworkDevice[];\n  folders: DeviceFolder[];\n  metrics: NetworkMetrics;\n  bandwidthHistory: BandwidthData[];\n  alerts: AlertMessage[];\n  systemHealth: SystemHealth;\n  connections: NetworkConnection[];\n  config: MonitoringConfig;\n  systemLogs: SystemLog[];\n\n  // UI State\n  selectedFolderId: string;\n  sidebarCollapsed: boolean;\n  loading: boolean;\n  error: string | null;\n  rootFolderExpanded: boolean;\n  othersExpanded: boolean;\n\n  // API integration flags\n  useApi: boolean;\n  apiConnected: boolean;\n\n  // WebSocket state\n  webSocketConnected: boolean;\n\n  // Device actions\n  addDevice: (\n    device: Omit<NetworkDevice, 'id' | 'lastSeen' | 'status'>\n  ) => Promise<void>;\n  updateDevice: (\n    deviceId: string,\n    updates: Partial<NetworkDevice>\n  ) => Promise<void>;\n  deleteDevice: (deviceId: string) => Promise<void>;\n  pingDevice: (deviceId: string) => Promise<void>;\n\n  // Folder actions\n  addFolder: (folder: Omit<DeviceFolder, 'id' | 'children'>) => Promise<void>;\n  updateFolder: (\n    folderId: string,\n    updates: Partial<DeviceFolder>\n  ) => Promise<void>;\n  deleteFolder: (folderId: string) => Promise<void>;\n\n  // Alert actions\n  addAlert: (alert: Omit<AlertMessage, 'id' | 'timestamp'>) => void;\n  markAlertResolved: (alertId: string) => void;\n  acknowledgeAlert: (alertId: string, userId: string) => void;\n  clearAlerts: () => void;\n\n  // System log actions\n  addSystemLog: (log: Omit<SystemLog, 'id' | 'timestamp'>) => void;\n  clearSystemLogs: () => void;\n\n  // WebSocket actions\n  setWebSocketConnected: (connected: boolean) => void;\n  updateDeviceStatus: (\n    deviceId: string,\n    updates: Partial<NetworkDevice>\n  ) => void;\n\n  // Data actions\n  setBandwidthData: (data: BandwidthData[]) => void;\n  addBandwidthData: (data: BandwidthData) => void;\n  updateSystemHealth: (health: SystemHealth) => void;\n  updateMetrics: (metrics: Partial<NetworkMetrics>) => void;\n  loadDevices: () => Promise<void>;\n  loadSystemHealth: () => Promise<void>;\n  loadBandwidthData: () => Promise<void>;\n  loadNetworkMetrics: () => Promise<void>;\n\n  // UI actions\n  setSelectedFolder: (folderId: string) => void;\n  setSidebarCollapsed: (collapsed: boolean) => void;\n  setLoading: (loading: boolean) => void;\n  setError: (error: string | null) => void;\n  setUseApi: (useApi: boolean) => void;\n\n  // Data management\n  refreshData: () => Promise<void>;\n  exportData: () => string;\n  importData: (jsonData: string) => boolean;\n  resetData: () => void;\n  resetToMockData: () => void;\n  setRootFolderExpanded: (expanded: boolean) => void;\n  setOthersExpanded: (expanded: boolean) => void;\n  initializeApi: () => Promise<void>;\n}\n\nexport const useNetworkStore = create<NetworkStore>()(\n  subscribeWithSelector(\n    persist(\n      (set, get) => ({\n        // Initial state (devices и folders пустые, useApi всегда true)\n        devices: [],\n        folders: [],\n        metrics: initialMetrics,\n        bandwidthHistory: initialBandwidthHistory,\n        alerts: [],\n        systemHealth: initialSystemHealth,\n        connections: [],\n        config: initialConfig,\n        systemLogs: [],\n\n        // UI state\n        selectedFolderId: 'root',\n        sidebarCollapsed: false,\n        loading: false,\n        error: null,\n        rootFolderExpanded: true,\n        othersExpanded: false,\n\n        // API integration flags\n        useApi: true,\n        apiConnected: false,\n\n        // WebSocket state\n        webSocketConnected: false,\n\n        // Device actions\n        addDevice: async (deviceData) => {\n          try {\n            const response = await api.devices.createDevice(deviceData);\n            console.log('✅ Устройство создано через API:', response);\n            await get().loadDevices();\n          } catch (error) {\n            set({ error: 'Ошибка создания устройства через API' });\n          }\n        },\n        updateDevice: async (deviceId, updates) => {\n          try {\n            const response = await api.devices.updateDevice(deviceId, updates);\n            console.log('✅ Устройство обновлено через API:', response);\n            await get().loadDevices();\n          } catch (error) {\n            set({ error: 'Ошибка обновления устройства через API' });\n          }\n        },\n        deleteDevice: async (deviceId) => {\n          try {\n            await api.devices.deleteDevice(deviceId);\n            console.log('✅ Устройство удалено через API');\n            await get().loadDevices();\n          } catch (error) {\n            set({ error: 'Ошибка удаления устройства через API' });\n          }\n        },\n        pingDevice: async (deviceId) => {\n          try {\n            const response = await api.devices.pingDevice(deviceId);\n            console.log('🏓 Ping выполнен через API:', response);\n            if (response && response.data) {\n              const pingData = response.data as any;\n              const alive = pingData.alive;\n              const responseTime = pingData.responseTime || 0;\n              await get().updateDevice(deviceId, {\n                status: alive ? 'online' : 'offline',\n                responseTime: responseTime,\n                lastSeen: new Date(),\n              });\n            }\n          } catch (error) {\n            set({ error: 'Ошибка ping через API' });\n          }\n        },\n\n        // Folder actions\n        addFolder: async (folderData) => {\n          const folder: DeviceFolder = {\n            ...folderData,\n            id: Math.random().toString(36).substr(2, 9),\n            children: [],\n          };\n\n          const addFolderRecursive = (\n            folders: DeviceFolder[]\n          ): DeviceFolder[] => {\n            return folders.map((f) =>\n              f.id === (folder.parentId || 'root')\n                ? { ...f, children: [...f.children, folder] }\n                : { ...f, children: addFolderRecursive(f.children) }\n            );\n          };\n\n          if (!folder.parentId || folder.parentId === 'root') {\n            set((state) => ({\n              folders: [...state.folders, folder],\n            }));\n          } else {\n            set((state) => ({\n              folders: addFolderRecursive(state.folders),\n            }));\n          }\n        },\n\n        updateFolder: async (folderId, updates) => {\n          // Специальная обработка для корневой папки\n          if (folderId === 'root') {\n            set((state) => ({\n              rootFolderExpanded:\n                updates.expanded !== undefined\n                  ? updates.expanded\n                  : state.rootFolderExpanded,\n            }));\n            return;\n          }\n\n          // Специальная обработка для папки \"Иные\"\n          if (folderId === 'others') {\n            set((state) => ({\n              othersExpanded:\n                updates.expanded !== undefined\n                  ? updates.expanded\n                  : state.othersExpanded,\n            }));\n            return;\n          }\n\n          const updateFolderRecursive = (\n            folders: DeviceFolder[]\n          ): DeviceFolder[] => {\n            return folders.map((folder) =>\n              folder.id === folderId\n                ? { ...folder, ...updates }\n                : {\n                    ...folder,\n                    children: updateFolderRecursive(folder.children),\n                  }\n            );\n          };\n\n          set((state) => ({\n            folders: updateFolderRecursive(state.folders),\n          }));\n        },\n\n        deleteFolder: async (folderId) => {\n          const removeFolderRecursive = (\n            folders: DeviceFolder[]\n          ): DeviceFolder[] => {\n            return folders\n              .filter((folder) => folder.id !== folderId)\n              .map((folder) => ({\n                ...folder,\n                children: removeFolderRecursive(folder.children),\n              }));\n          };\n\n          set((state) => ({\n            folders: removeFolderRecursive(state.folders),\n            devices: state.devices.map((device) =>\n              device.folderId === folderId\n                ? { ...device, folderId: 'root' }\n                : device\n            ),\n          }));\n        },\n\n        // Alert actions\n        addAlert: (alertData) => {\n          const alert: AlertMessage = {\n            ...alertData,\n            id: Math.random().toString(36).substr(2, 9),\n            timestamp: new Date(),\n          };\n\n          set((state) => ({\n            alerts: [alert, ...state.alerts].slice(0, 50), // Keep only last 50 alerts\n          }));\n        },\n\n        markAlertResolved: (alertId) => {\n          set((state) => ({\n            alerts: state.alerts.map((alert) =>\n              alert.id === alertId ? { ...alert, resolved: true } : alert\n            ),\n          }));\n        },\n\n        acknowledgeAlert: (alertId, userId) => {\n          set((state) => ({\n            alerts: state.alerts.map((alert) =>\n              alert.id === alertId\n                ? {\n                    ...alert,\n                    acknowledgedBy: userId,\n                    acknowledgedAt: new Date(),\n                  }\n                : alert\n            ),\n          }));\n        },\n\n        clearAlerts: () => {\n          set({ alerts: [] });\n        },\n\n        // Data actions\n        setBandwidthData: (data) => {\n          set({ bandwidthHistory: data });\n        },\n\n        addBandwidthData: (data) => {\n          set((state) => ({\n            bandwidthHistory: [...state.bandwidthHistory.slice(-19), data],\n          }));\n        },\n\n        updateSystemHealth: (health) => {\n          set({ systemHealth: health });\n        },\n\n        updateMetrics: (metricsUpdate) => {\n          const state = get();\n          const devices = state.devices;\n\n          const totalDevices = devices.length;\n          const onlineDevices = devices.filter(\n            (d) => d.status === 'online'\n          ).length;\n          const offlineDevices = devices.filter(\n            (d) => d.status === 'offline'\n          ).length;\n          const warningDevices = devices.filter(\n            (d) => d.status === 'warning'\n          ).length;\n          const averageResponseTime =\n            totalDevices > 0\n              ? Math.round(\n                  devices.reduce((sum, d) => sum + d.responseTime, 0) /\n                    totalDevices\n                )\n              : 0;\n\n          set({\n            metrics: {\n              ...state.metrics,\n              totalDevices,\n              onlineDevices,\n              offlineDevices,\n              warningDevices,\n              averageResponseTime,\n              lastUpdate: new Date(),\n              ...metricsUpdate,\n            },\n          });\n        },\n\n        loadDevices: async () => {\n          set({ loading: true, error: null });\n          try {\n            const response = await api.devices.getDevices();\n            let devices: NetworkDevice[] = [];\n            if (response && response.data) {\n              devices = Array.isArray(response.data) ? response.data : [];\n            } else if (Array.isArray(response)) {\n              devices = response;\n            }\n            set({\n              devices,\n              loading: false,\n              apiConnected: true,\n              error: null,\n            });\n            get().updateMetrics({});\n          } catch (error) {\n            set({\n              devices: [],\n              loading: false,\n              error: 'API недоступен',\n              apiConnected: false,\n            });\n            get().updateMetrics({});\n          }\n        },\n\n        loadSystemHealth: async () => {\n          try {\n            const response = await api.metrics.getSystemHealth();\n            console.log('✅ API Response system health:', response);\n\n            // Простая обработка - пока используем initialSystemHealth и обновляем apiConnected\n            set({\n              systemHealth: {\n                ...initialSystemHealth,\n                lastUpdate: new Date(),\n              },\n              apiConnected: true,\n              error: null,\n            });\n\n            console.log('💻 Системные метрики обновлены (API подключен)');\n          } catch (error) {\n            console.error('❌ API недоступен для системного здоровья:', error);\n            set({\n              systemHealth: initialSystemHealth,\n              apiConnected: false,\n              error: 'Метрики системы недоступны',\n            });\n          }\n        },\n\n        loadBandwidthData: async () => {\n          try {\n            const response = await api.metrics.getBandwidthHistory();\n            console.log('✅ API Response bandwidth:', response);\n\n            // Обрабатываем данные пропускной способности\n            let bandwidthData = initialBandwidthHistory;\n            if (response && response.data && Array.isArray(response.data)) {\n              bandwidthData = response.data;\n            }\n\n            set({\n              bandwidthHistory: bandwidthData,\n              apiConnected: true,\n            });\n            console.log('📊 Данные пропускной способности обновлены');\n          } catch (error) {\n            console.error(\n              '❌ API недоступен для данных пропускной способности:',\n              error\n            );\n            set({\n              bandwidthHistory: initialBandwidthHistory,\n              apiConnected: false,\n            });\n          }\n        },\n\n        loadNetworkMetrics: async () => {\n          try {\n            const response = await api.metrics.getNetworkMetrics();\n            console.log('✅ API Response network metrics:', response);\n\n            // Обрабатываем метрики сети\n            let metrics = initialMetrics;\n            if (response && response.data) {\n              metrics = {\n                ...initialMetrics,\n                ...response.data,\n                lastUpdate: new Date(),\n              };\n            }\n\n            set({\n              metrics,\n              apiConnected: true,\n            });\n            console.log('🌐 Метрики сети обновлены');\n          } catch (error) {\n            console.error('❌ API недоступен для метрик сети:', error);\n            set({\n              metrics: initialMetrics,\n              apiConnected: false,\n            });\n          }\n        },\n\n        // UI actions\n        setSelectedFolder: (folderId) => {\n          set({ selectedFolderId: folderId });\n        },\n\n        setSidebarCollapsed: (collapsed) => {\n          set({ sidebarCollapsed: collapsed });\n        },\n\n        setLoading: (loading) => {\n          set({ loading });\n        },\n\n        setError: (error) => {\n          set({ error });\n        },\n\n        setUseApi: (useApi) => {\n          set({ useApi });\n        },\n\n        // Data management\n        refreshData: async () => {\n          set({ loading: true, error: null });\n          try {\n            await Promise.allSettled([\n              get().loadDevices(),\n              get().loadSystemHealth(),\n              get().loadBandwidthData(),\n              get().loadNetworkMetrics(),\n            ]);\n            set({ loading: false });\n          } catch (error) {\n            set({\n              loading: false,\n              error:\n                error instanceof Error\n                  ? error.message\n                  : 'Ошибка обновления данных',\n            });\n          }\n        },\n\n        // Инициализация API подключения\n        initializeApi: async () => {\n          console.log('🔌 Попытка подключения к API...');\n          try {\n            // Проверяем доступность API\n            const response = await fetch('http://localhost:5000/api/health');\n            if (response.ok) {\n              console.log('✅ API доступен! Включаем API режим');\n              set({ useApi: true, apiConnected: true });\n              await get().refreshData();\n            } else {\n              console.log('❌ API недоступен, используем моковые данные');\n              set({ useApi: false, apiConnected: false });\n            }\n          } catch (error) {\n            console.log('❌ API недоступен, используем моковые данные');\n            set({ useApi: false, apiConnected: false });\n          }\n        },\n\n        exportData: () => {\n          const state = get();\n          const exportData = {\n            devices: state.devices,\n            folders: state.folders,\n            connections: state.connections,\n            config: state.config,\n            exportTimestamp: new Date().toISOString(),\n          };\n          return JSON.stringify(exportData, null, 2);\n        },\n\n        importData: (jsonData) => {\n          try {\n            const data = JSON.parse(jsonData);\n            set({\n              devices: data.devices || [],\n              folders: data.folders || [],\n              connections: data.connections || [],\n              config: data.config || initialConfig,\n            });\n            get().updateMetrics({});\n            return true;\n          } catch {\n            return false;\n          }\n        },\n\n        resetData: () => {\n          set({\n            devices: [],\n            folders: [],\n            metrics: initialMetrics,\n            bandwidthHistory: [],\n            alerts: [],\n            systemHealth: initialSystemHealth,\n            connections: [],\n            selectedFolderId: 'root',\n            loading: false,\n            error: null,\n          });\n        },\n        resetToMockData: () => {\n          // Отключено: mock-данные больше не используются\n        },\n\n        setRootFolderExpanded: (expanded) => {\n          set({ rootFolderExpanded: expanded });\n        },\n\n        setOthersExpanded: (expanded) => {\n          set({ othersExpanded: expanded });\n        },\n\n        // System log actions\n        addSystemLog: (log) => {\n          const systemLog: SystemLog = {\n            ...log,\n            id: Date.now().toString(),\n            timestamp: new Date(),\n          };\n\n          set((state) => ({\n            systemLogs: [systemLog, ...state.systemLogs].slice(0, 100), // Keep only last 100 logs\n          }));\n        },\n\n        clearSystemLogs: () => {\n          set({ systemLogs: [] });\n        },\n\n        // WebSocket actions\n        setWebSocketConnected: (connected) => {\n          set({ webSocketConnected: connected });\n        },\n\n        updateDeviceStatus: (deviceId, updates) => {\n          set((state) => ({\n            devices: state.devices.map((device) =>\n              device.id === deviceId\n                ? { ...device, ...updates, lastSeen: new Date() }\n                : device\n            ),\n          }));\n          get().updateMetrics({});\n        },\n      }),\n      {\n        name: 'network-monitor-storage',\n        partialize: (state) => ({\n          selectedFolderId: state.selectedFolderId,\n          sidebarCollapsed: state.sidebarCollapsed,\n          rootFolderExpanded: state.rootFolderExpanded,\n          othersExpanded: state.othersExpanded,\n        }),\n      }\n    )\n  )\n);\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1352, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1357, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/packages/frontend/src/hooks/useWebSocket.ts"],"sourcesContent":["'use client';\r\n\r\nimport { useEffect, useRef, useState, useCallback } from 'react';\r\nimport { io, Socket } from 'socket.io-client';\r\nimport { useNetworkStore } from '@/store/network-store';\r\n\r\ninterface UseWebSocketReturn {\r\n  socket: Socket | null;\r\n  connected: boolean;\r\n  connect: () => void;\r\n  disconnect: () => void;\r\n}\r\n\r\nexport const useWebSocket = (): UseWebSocketReturn => {\r\n  const [socket, setSocket] = useState<Socket | null>(null);\r\n  const [connected, setConnected] = useState(false);\r\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout>();\r\n  const reconnectAttempts = useRef(0);\r\n  const maxReconnectAttempts = 5;\r\n\r\n  const updateDeviceStatus = useNetworkStore(\r\n    (state) => state.updateDeviceStatus\r\n  );\r\n  const updateMetrics = useNetworkStore((state) => state.updateMetrics);\r\n  const updateSystemHealth = useNetworkStore(\r\n    (state) => state.updateSystemHealth\r\n  );\r\n  const addBandwidthData = useNetworkStore((state) => state.addBandwidthData);\r\n  const addSystemLog = useNetworkStore((state) => state.addSystemLog);\r\n\r\n  const connect = useCallback(() => {\r\n    if (socket?.connected) {\r\n      console.log('⚠️ WebSocket уже подключен, пропускаем');\r\n      return;\r\n    }\r\n\r\n    console.log(\r\n      '🔌 Подключение к WebSocket серверу (http://localhost:5000)...'\r\n    );\r\n\r\n    const newSocket = io('http://localhost:5000', {\r\n      transports: ['websocket', 'polling'], // Добавляем polling как fallback\r\n      reconnection: false, // Управляем переподключением вручную\r\n      timeout: 5000,\r\n      forceNew: true,\r\n    });\r\n\r\n    // Обработчики подключения\r\n    newSocket.on('connect', () => {\r\n      console.log('✅ WebSocket подключен');\r\n      setConnected(true);\r\n      reconnectAttempts.current = 0;\r\n\r\n      addSystemLog({\r\n        type: 'info',\r\n        message: 'WebSocket соединение установлено',\r\n      });\r\n    });\r\n\r\n    newSocket.on('disconnect', (reason) => {\r\n      console.log('❌ WebSocket отключен:', reason);\r\n      setConnected(false);\r\n\r\n      addSystemLog({\r\n        type: 'warning',\r\n        message: `WebSocket соединение разорвано: ${reason}`,\r\n      });\r\n\r\n      // Автоматическое переподключение\r\n      if (reconnectAttempts.current < maxReconnectAttempts) {\r\n        const delay = Math.min(\r\n          1000 * Math.pow(2, reconnectAttempts.current),\r\n          30000\r\n        );\r\n        console.log(\r\n          `🔄 Переподключение через ${delay}ms (попытка ${reconnectAttempts.current + 1}/${maxReconnectAttempts})`\r\n        );\r\n\r\n        reconnectTimeoutRef.current = setTimeout(() => {\r\n          reconnectAttempts.current++;\r\n          newSocket.connect();\r\n        }, delay);\r\n      }\r\n    });\r\n\r\n    newSocket.on('connect_error', (error) => {\r\n      console.error('❌ Ошибка подключения WebSocket:', error);\r\n      setConnected(false);\r\n\r\n      addSystemLog({\r\n        type: 'error',\r\n        message: `Ошибка WebSocket подключения: ${error.message}`,\r\n      });\r\n    });\r\n\r\n    // Обработчики событий данных\r\n    newSocket.on(\r\n      'device:ping:result',\r\n      (data: {\r\n        deviceId: string;\r\n        success: boolean;\r\n        responseTime?: number;\r\n        error?: string;\r\n      }) => {\r\n        console.log('📡 Получен результат ping:', data);\r\n\r\n        updateDeviceStatus(data.deviceId, {\r\n          status: data.success ? 'online' : 'offline',\r\n          responseTime: data.responseTime || 0,\r\n          lastSeen: new Date(),\r\n        });\r\n\r\n        if (!data.success && data.error) {\r\n          addSystemLog({\r\n            type: 'warning',\r\n            message: `Устройство ${data.deviceId} недоступно: ${data.error}`,\r\n          });\r\n        }\r\n      }\r\n    );\r\n\r\n    // Обработчик для старого формата events\r\n    newSocket.on(\r\n      'metrics:update',\r\n      (data: {\r\n        systemHealth?: any;\r\n        bandwidth?: any;\r\n        networkStats?: any;\r\n        metrics?: any;\r\n      }) => {\r\n        console.log('📊 Получены обновленные метрики (старый формат):', data);\r\n\r\n        if (data.metrics) {\r\n          updateMetrics(data.metrics);\r\n        }\r\n        if (data.systemHealth) {\r\n          updateSystemHealth(data.systemHealth);\r\n        }\r\n      }\r\n    );\r\n\r\n    // Обработчик для нового формата от бэкенда\r\n    newSocket.on(\r\n      'metrics_update',\r\n      (data: {\r\n        timestamp: string;\r\n        deviceMetrics: Array<{\r\n          deviceId: string;\r\n          deviceName: string;\r\n          ip: string;\r\n          status: 'online' | 'offline';\r\n          responseTime: number;\r\n          packetLoss: string;\r\n        }>;\r\n        systemHealth: {\r\n          cpu: number;\r\n          memory: number;\r\n          disk: number;\r\n          network: number;\r\n          temperature: number;\r\n          uptime: number;\r\n          processes: number;\r\n        };\r\n        networkMetrics: {\r\n          totalDevices: number;\r\n          onlineDevices: number;\r\n          offlineDevices: number;\r\n          averageResponseTime: number;\r\n        };\r\n      }) => {\r\n        console.log('📊 Получены real-time метрики от бэкенда:', data);\r\n\r\n        // Обновляем статусы устройств\r\n        data.deviceMetrics.forEach((device) => {\r\n          updateDeviceStatus(device.deviceId, {\r\n            status: device.status,\r\n            responseTime: device.responseTime,\r\n            lastSeen: new Date(),\r\n          });\r\n        });\r\n\r\n        // Обновляем системные метрики\r\n        updateSystemHealth({\r\n          ...data.systemHealth,\r\n          lastUpdate: new Date(),\r\n        });\r\n\r\n        // Обновляем общие метрики сети\r\n        updateMetrics({\r\n          totalDevices: data.networkMetrics.totalDevices,\r\n          onlineDevices: data.networkMetrics.onlineDevices,\r\n          offlineDevices: data.networkMetrics.offlineDevices,\r\n          averageResponseTime: data.networkMetrics.averageResponseTime,\r\n          lastUpdate: new Date(),\r\n        });\r\n\r\n        // Симулируем данные пропускной способности для графика\r\n        const bandwidthData = {\r\n          timestamp: new Date(),\r\n          upload: 50 + Math.random() * 100, // Mbps\r\n          download: 100 + Math.random() * 200, // Mbps\r\n          total: 150 + Math.random() * 300, // Mbps\r\n        };\r\n        addBandwidthData(bandwidthData);\r\n\r\n        addSystemLog({\r\n          type: 'info',\r\n          message: `Обновлены метрики: ${data.networkMetrics.onlineDevices}/${data.networkMetrics.totalDevices} устройств онлайн`,\r\n        });\r\n      }\r\n    );\r\n\r\n    newSocket.on(\r\n      'device:monitoring:update',\r\n      (data: {\r\n        deviceId: string;\r\n        status: 'online' | 'offline' | 'warning';\r\n        responseTime: number;\r\n        timestamp: string;\r\n      }) => {\r\n        console.log('🔄 Обновление мониторинга устройства:', data);\r\n\r\n        updateDeviceStatus(data.deviceId, {\r\n          status: data.status,\r\n          responseTime: data.responseTime,\r\n          lastSeen: new Date(data.timestamp),\r\n        });\r\n      }\r\n    );\r\n\r\n    setSocket(newSocket);\r\n  }, [\r\n    socket,\r\n    addSystemLog,\r\n    updateDeviceStatus,\r\n    updateMetrics,\r\n    updateSystemHealth,\r\n    addBandwidthData,\r\n  ]);\r\n\r\n  const disconnect = useCallback(() => {\r\n    if (reconnectTimeoutRef.current) {\r\n      clearTimeout(reconnectTimeoutRef.current);\r\n    }\r\n\r\n    if (socket) {\r\n      console.log('🔌 Отключение от WebSocket сервера...');\r\n      socket.disconnect();\r\n      setSocket(null);\r\n      setConnected(false);\r\n    }\r\n  }, [socket]);\r\n\r\n  // Очистка при размонтировании\r\n  useEffect(() => {\r\n    return () => {\r\n      disconnect();\r\n    };\r\n  }, [disconnect]);\r\n\r\n  return {\r\n    socket,\r\n    connected,\r\n    connect,\r\n    disconnect,\r\n  };\r\n};\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1537, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1542, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/packages/frontend/src/components/dashboard/websocket-provider.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useEffect } from 'react';\r\nimport { useWebSocket } from '@/hooks/useWebSocket';\r\nimport { useNetworkStore } from '@/store/network-store';\r\n\r\nexport const WebSocketProvider: React.FC<{ children: React.ReactNode }> = ({\r\n  children,\r\n}) => {\r\n  const { socket, connected, connect, disconnect } = useWebSocket();\r\n  const apiConnected = useNetworkStore((state) => state.apiConnected);\r\n  const setWebSocketConnected = useNetworkStore(\r\n    (state) => state.setWebSocketConnected\r\n  );\r\n\r\n  // Автоматическое подключение при доступности API\r\n  useEffect(() => {\r\n    if (apiConnected && !connected) {\r\n      console.log('🔌 API доступен, подключаемся к WebSocket...');\r\n      connect();\r\n    } else if (!apiConnected && connected) {\r\n      console.log('❌ API недоступен, отключаемся от WebSocket...');\r\n      disconnect();\r\n    }\r\n  }, [apiConnected, connected]); // Убираем connect/disconnect из зависимостей\r\n\r\n  // Обновляем состояние подключения в store\r\n  useEffect(() => {\r\n    setWebSocketConnected(connected);\r\n  }, [connected]); // Убираем setWebSocketConnected из зависимостей\r\n\r\n  // Очистка при размонтировании\r\n  useEffect(() => {\r\n    return () => {\r\n      if (connected) {\r\n        disconnect();\r\n      }\r\n    };\r\n  }, []); // Убираем все зависимости для cleanup эффекта\r\n\r\n  return <>{children}</>;\r\n};\r\n"],"names":[],"mappings":";;;;;;;;AAAA;;;;;AAMO,MAAM,oBAA6D,CAAC,EACzE,QAAQ,EACT;IACC,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,UAAU,EAAE,GAAG,CAAA,GAAA,oJAAA,CAAA,eAAY,AAAD;IAC9D,MAAM,eAAe,CAAA,GAAA,wJAAA,CAAA,kBAAe,AAAD,EAAE,CAAC,QAAU,MAAM,YAAY;IAClE,MAAM,wBAAwB,CAAA,GAAA,wJAAA,CAAA,kBAAe,AAAD,EAC1C,CAAC,QAAU,MAAM,qBAAqB;IAGxC,iDAAiD;IACjD,CAAA,GAAA,+XAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI,gBAAgB,CAAC,WAAW;YAC9B,QAAQ,GAAG,CAAC;YACZ;QACF,OAAO,IAAI,CAAC,gBAAgB,WAAW;YACrC,QAAQ,GAAG,CAAC;YACZ;QACF;IACF,GAAG;QAAC;QAAc;KAAU,GAAG,6CAA6C;IAE5E,0CAA0C;IAC1C,CAAA,GAAA,+XAAA,CAAA,YAAS,AAAD,EAAE;QACR,sBAAsB;IACxB,GAAG;QAAC;KAAU,GAAG,gDAAgD;IAEjE,8BAA8B;IAC9B,CAAA,GAAA,+XAAA,CAAA,YAAS,AAAD,EAAE;QACR,OAAO;YACL,IAAI,WAAW;gBACb;YACF;QACF;IACF,GAAG,EAAE,GAAG,8CAA8C;IAEtD,qBAAO;kBAAG;;AACZ"}},
    {"offset": {"line": 1590, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1595, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/packages/frontend/app/providers.tsx"],"sourcesContent":["'use client';\n\nimport { ThemeProvider } from 'next-themes';\nimport { ErrorBoundary } from '@/components/ui/error-boundary';\nimport { WebSocketProvider } from '@/components/dashboard/websocket-provider';\n\nexport function Providers({ children }: { children: React.ReactNode }) {\n  return (\n    <ErrorBoundary>\n      <ThemeProvider\n        attribute=\"class\"\n        defaultTheme=\"dark\"\n        enableSystem={false}\n        storageKey=\"network-monitor-theme\"\n      >\n        <WebSocketProvider>{children}</WebSocketProvider>\n      </ThemeProvider>\n    </ErrorBoundary>\n  );\n}\n"],"names":[],"mappings":";;;;;;;;AAAA;;;;;AAMO,SAAS,UAAU,EAAE,QAAQ,EAAiC;IACnE,qBACE,waAAC,qKAAA,CAAA,gBAAa;kBACZ,cAAA,waAAC,6RAAA,CAAA,gBAAa;YACZ,WAAU;YACV,cAAa;YACb,cAAc;YACd,YAAW;sBAEX,cAAA,waAAC,gLAAA,CAAA,oBAAiB;0BAAE;;;;;;;;;;;;;;;;AAI5B"}},
    {"offset": {"line": 1633, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}