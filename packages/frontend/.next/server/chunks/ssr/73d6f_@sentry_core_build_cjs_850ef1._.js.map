{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/debug-build.ts"],"sourcesContent":["declare const __DEBUG_BUILD__: boolean;\n\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nexport const DEBUG_BUILD = __DEBUG_BUILD__;\n"],"names":[],"mappings":";;;AAEA;;;;CAIA,GACO,MAAM,cAAc,OAAA,qBAAA,eAAA"}},
    {"offset": {"line": 13, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 17, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/utils/worldwide.ts"],"sourcesContent":["/**\n * NOTE: In order to avoid circular dependencies, if you add a function to this module and it needs to print something,\n * you must either a) use `console.log` rather than the logger, or b) put your function elsewhere.\n *\n * Note: This file was originally called `global.ts`, but was changed to unblock users which might be doing\n * string replaces with bundlers like Vite for `global` (would break imports that rely on importing from utils/src/global).\n *\n * Why worldwide?\n *\n * Why not?\n */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport type { Carrier } from '../carrier';\nimport type { Client } from '../client';\nimport type { SerializedLog } from '../types-hoist/log';\nimport type { Span } from '../types-hoist/span';\nimport type { SdkSource } from './env';\n\n/** Internal global with common properties and Sentry extensions  */\nexport type InternalGlobal = {\n  navigator?: { userAgent?: string; maxTouchPoints?: number };\n  console: Console;\n  PerformanceObserver?: any;\n  Sentry?: any;\n  onerror?: {\n    (event: object | string, source?: string, lineno?: number, colno?: number, error?: Error): any;\n    __SENTRY_INSTRUMENTED__?: true;\n  };\n  onunhandledrejection?: {\n    (event: unknown): boolean;\n    __SENTRY_INSTRUMENTED__?: true;\n  };\n  SENTRY_ENVIRONMENT?: string;\n  SENTRY_DSN?: string;\n  SENTRY_RELEASE?: {\n    id?: string;\n  };\n  SENTRY_SDK_SOURCE?: SdkSource;\n  /**\n   * A map of Sentry clients to their log buffers.\n   *\n   * This is used to store logs that are sent to Sentry.\n   */\n  _sentryClientToLogBufferMap?: WeakMap<Client, Array<SerializedLog>>;\n  /**\n   * Debug IDs are indirectly injected by Sentry CLI or bundler plugins to directly reference a particular source map\n   * for resolving of a source file. The injected code will place an entry into the record for each loaded bundle/JS\n   * file.\n   */\n  _sentryDebugIds?: Record<string, string>;\n  /**\n   * Raw module metadata that is injected by bundler plugins.\n   *\n   * Keys are `error.stack` strings, values are the metadata.\n   */\n  _sentryModuleMetadata?: Record<string, any>;\n  _sentryEsmLoaderHookRegistered?: boolean;\n  /**\n   * A map of spans to evaluated feature flags. Populated by feature flag integrations.\n   */\n  _spanToFlagBufferMap?: WeakMap<Span, Set<string>>;\n} & Carrier;\n\n/** Get's the global object for the current JavaScript runtime */\nexport const GLOBAL_OBJ = globalThis as unknown as InternalGlobal;\n"],"names":[],"mappings":";;;AAoBA,kEAAA,GA6CA,+DAAA,GACO,MAAM,aAAa"}},
    {"offset": {"line": 22, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 26, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/utils/version.ts"],"sourcesContent":["// This is a magic string replaced by rollup\ndeclare const __SENTRY_SDK_VERSION__: string;\n\nexport const SDK_VERSION = typeof __SENTRY_SDK_VERSION__ === 'string' ? __SENTRY_SDK_VERSION__ : '0.0.0-unknown.0';\n"],"names":[],"mappings":";;;AAAA,4CAAA;AAGO,MAAM,cAA2D"}},
    {"offset": {"line": 32, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 36, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/carrier.ts"],"sourcesContent":["import type { AsyncContextStack } from './asyncContext/stackStrategy';\nimport type { AsyncContextStrategy } from './asyncContext/types';\nimport type { Scope } from './scope';\nimport type { Logger } from './utils/logger';\nimport { SDK_VERSION } from './utils/version';\nimport { GLOBAL_OBJ } from './utils/worldwide';\n\n/**\n * An object that contains globally accessible properties and maintains a scope stack.\n * @hidden\n */\nexport interface Carrier {\n  __SENTRY__?: VersionedCarrier;\n}\n\ntype VersionedCarrier = {\n  version?: string;\n} & Record<Exclude<string, 'version'>, SentryCarrier>;\n\nexport interface SentryCarrier {\n  acs?: AsyncContextStrategy;\n  stack?: AsyncContextStack;\n\n  globalScope?: Scope;\n  defaultIsolationScope?: Scope;\n  defaultCurrentScope?: Scope;\n  logger?: Logger;\n\n  /** Overwrites TextEncoder used in `@sentry/core`, need for `react-native@0.73` and older */\n  encodePolyfill?: (input: string) => Uint8Array;\n  /** Overwrites TextDecoder used in `@sentry/core`, need for `react-native@0.73` and older */\n  decodePolyfill?: (input: Uint8Array) => string;\n}\n\n/**\n * Returns the global shim registry.\n *\n * FIXME: This function is problematic, because despite always returning a valid Carrier,\n * it has an optional `__SENTRY__` property, which then in turn requires us to always perform an unnecessary check\n * at the call-site. We always access the carrier through this function, so we can guarantee that `__SENTRY__` is there.\n **/\nexport function getMainCarrier(): Carrier {\n  // This ensures a Sentry carrier exists\n  getSentryCarrier(GLOBAL_OBJ);\n  return GLOBAL_OBJ;\n}\n\n/** Will either get the existing sentry carrier, or create a new one. */\nexport function getSentryCarrier(carrier: Carrier): SentryCarrier {\n  const __SENTRY__ = (carrier.__SENTRY__ = carrier.__SENTRY__ || {});\n\n  // For now: First SDK that sets the .version property wins\n  __SENTRY__.version = __SENTRY__.version || SDK_VERSION;\n\n  // Intentionally populating and returning the version of \"this\" SDK instance\n  // rather than what's set in .version so that \"this\" SDK always gets its carrier\n  return (__SENTRY__[SDK_VERSION] = __SENTRY__[SDK_VERSION] || {});\n}\n\n/**\n * Returns a global singleton contained in the global `__SENTRY__[]` object.\n *\n * If the singleton doesn't already exist in `__SENTRY__`, it will be created using the given factory\n * function and added to the `__SENTRY__` object.\n *\n * @param name name of the global singleton on __SENTRY__\n * @param creator creator Factory function to create the singleton if it doesn't already exist on `__SENTRY__`\n * @param obj (Optional) The global object on which to look for `__SENTRY__`, if not `GLOBAL_OBJ`'s return value\n * @returns the singleton\n */\nexport function getGlobalSingleton<Prop extends keyof SentryCarrier>(\n  name: Prop,\n  creator: () => NonNullable<SentryCarrier[Prop]>,\n  obj = GLOBAL_OBJ,\n): NonNullable<SentryCarrier[Prop]> {\n  const __SENTRY__ = (obj.__SENTRY__ = obj.__SENTRY__ || {});\n  const carrier = (__SENTRY__[SDK_VERSION] = __SENTRY__[SDK_VERSION] || {});\n  // Note: We do not want to set `carrier.version` here, as this may be called before any `init` is called, e.g. for the default scopes\n  return carrier[name] || (carrier[name] = creator());\n}\n"],"names":["GLOBAL_OBJ","SDK_VERSION"],"mappings":";;;;;AAOA;;;CAGA,GAwBA;;;;;;EAMA,GACO,SAAS;IAChB,uCAAA;IACE,iBAAiBA,UAAAA,UAAU;IAC3B,OAAOA,UAAAA,UAAU;AACnB;AAEA,sEAAA,GACO,SAAS,iBAAiB,OAAO;IACtC,MAAM,aAAc,QAAQ,UAAA,GAAa,QAAQ,UAAA,IAAc,CAAA;IAEjE,0DAAA;IACE,WAAW,OAAA,GAAU,WAAW,OAAA,IAAWC,QAAAA,WAAW;IAExD,4EAAA;IACA,gFAAA;IACE,OAAQ,UAAU,CAACA,QAAAA,WAAW,CAAA,GAAI,UAAU,CAACA,QAAAA,WAAW,CAAA,IAAK,CAAA;AAC/D;AAEA;;;;;;;;;;CAUA,GACO,SAAS,mBACd,IAAI,EACJ,OAAO,EACP,MAAMD,UAAAA,UAAU;IAEhB,MAAM,aAAc,IAAI,UAAA,GAAa,IAAI,UAAA,IAAc,CAAA;IACvD,MAAM,UAAW,UAAU,CAACC,QAAAA,WAAW,CAAA,GAAI,UAAU,CAACA,QAAAA,WAAW,CAAA,IAAK,CAAA;IACxE,qIAAA;IACE,OAAO,OAAO,CAAC,KAAI,IAAA,CAAM,OAAO,CAAC,KAAI,GAAI,SAAS;AACpD"}},
    {"offset": {"line": 82, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 86, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/utils/logger.ts"],"sourcesContent":["import { getGlobalSingleton } from '../carrier';\nimport { DEBUG_BUILD } from '../debug-build';\nimport type { ConsoleLevel } from '../types-hoist/instrument';\nimport { GLOBAL_OBJ } from './worldwide';\n\n/** Prefix for logging strings */\nconst PREFIX = 'Sentry Logger ';\n\nexport const CONSOLE_LEVELS: readonly ConsoleLevel[] = [\n  'debug',\n  'info',\n  'warn',\n  'error',\n  'log',\n  'assert',\n  'trace',\n] as const;\n\ntype LoggerMethod = (...args: unknown[]) => void;\ntype LoggerConsoleMethods = Record<ConsoleLevel, LoggerMethod>;\n\n/** This may be mutated by the console instrumentation. */\nexport const originalConsoleMethods: {\n  [key in ConsoleLevel]?: (...args: unknown[]) => void;\n} = {};\n\n/** A Sentry Logger instance. */\nexport interface Logger extends LoggerConsoleMethods {\n  disable(): void;\n  enable(): void;\n  isEnabled(): boolean;\n}\n\n/**\n * Temporarily disable sentry console instrumentations.\n *\n * @param callback The function to run against the original `console` messages\n * @returns The results of the callback\n */\nexport function consoleSandbox<T>(callback: () => T): T {\n  if (!('console' in GLOBAL_OBJ)) {\n    return callback();\n  }\n\n  const console = GLOBAL_OBJ.console as Console;\n  const wrappedFuncs: Partial<LoggerConsoleMethods> = {};\n\n  const wrappedLevels = Object.keys(originalConsoleMethods) as ConsoleLevel[];\n\n  // Restore all wrapped console methods\n  wrappedLevels.forEach(level => {\n    const originalConsoleMethod = originalConsoleMethods[level] as LoggerMethod;\n    wrappedFuncs[level] = console[level] as LoggerMethod | undefined;\n    console[level] = originalConsoleMethod;\n  });\n\n  try {\n    return callback();\n  } finally {\n    // Revert restoration to wrapped state\n    wrappedLevels.forEach(level => {\n      console[level] = wrappedFuncs[level] as LoggerMethod;\n    });\n  }\n}\n\nfunction makeLogger(): Logger {\n  let enabled = false;\n  const logger: Partial<Logger> = {\n    enable: () => {\n      enabled = true;\n    },\n    disable: () => {\n      enabled = false;\n    },\n    isEnabled: () => enabled,\n  };\n\n  if (DEBUG_BUILD) {\n    CONSOLE_LEVELS.forEach(name => {\n      logger[name] = (...args: Parameters<(typeof GLOBAL_OBJ.console)[typeof name]>) => {\n        if (enabled) {\n          consoleSandbox(() => {\n            GLOBAL_OBJ.console[name](`${PREFIX}[${name}]:`, ...args);\n          });\n        }\n      };\n    });\n  } else {\n    CONSOLE_LEVELS.forEach(name => {\n      logger[name] = () => undefined;\n    });\n  }\n\n  return logger as Logger;\n}\n\n/**\n * This is a logger singleton which either logs things or no-ops if logging is not enabled.\n * The logger is a singleton on the carrier, to ensure that a consistent logger is used throughout the SDK.\n */\nexport const logger = getGlobalSingleton('logger', makeLogger);\n"],"names":["GLOBAL_OBJ","DEBUG_BUILD","getGlobalSingleton"],"mappings":";;;;;;AAKA,+BAAA,GACA,MAAM,SAAS;AAER,MAAM,iBAA0C;IACrD;IACA;IACA;IACA;IACA;IACA;IACA;CACF;AAKA,wDAAA,SACa,yBAET,CAAA;AAEJ,8BAAA,GAOA;;;;;CAKA,GACO,SAAS,eAAkB,QAAQ;IACxC,IAAI,CAAA,CAAE,aAAaA,UAAAA,UAAU,GAAG;QAC9B,OAAO;IACX;IAEE,MAAM,UAAUA,UAAAA,UAAU,CAAC,OAAA;IAC3B,MAAM,eAA8C,CAAA;IAEpD,MAAM,gBAAgB,OAAO,IAAI,CAAC;IAEpC,sCAAA;IACE,cAAc,OAAO,CAAC,CAAA;QACpB,MAAM,wBAAwB,sBAAsB,CAAC,MAAK;QAC1D,YAAY,CAAC,MAAK,GAAI,OAAO,CAAC,MAAK;QACnC,OAAO,CAAC,MAAK,GAAI;IACrB;IAEE,IAAI;QACF,OAAO;IACX,SAAY;QACZ,sCAAA;QACI,cAAc,OAAO,CAAC,CAAA;YACpB,OAAO,CAAC,MAAK,GAAI,YAAY,CAAC,MAAK;QACzC;IACA;AACA;AAEA,SAAS;IACP,IAAI,UAAU;IACd,MAAM,SAA0B;QAC9B,QAAQ;YACN,UAAU;QAChB;QACI,SAAS;YACP,UAAU;QAChB;QACI,WAAW,IAAM;IACrB;IAEE,IAAIC,WAAAA,WAAW,EAAE;QACf,eAAe,OAAO,CAAC,CAAA;YACrB,MAAM,CAAC,KAAI,GAAI,CAAC,GAAG;gBACjB,IAAI,SAAS;oBACX,eAAe;wBACbD,UAAAA,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,EAAA,OAAA,CAAA,EAAA,KAAA,EAAA,CAAA,KAAA;oBACA;gBACA;YACA;QACA;IACA,OAAA;QACA,eAAA,OAAA,CAAA,CAAA;YACA,MAAA,CAAA,KAAA,GAAA,IAAA;QACA;IACA;IAEA,OAAA;AACA;AAEA;;;CAGA,GACA,MAAA,SAAAE,QAAAA,kBAAA,CAAA,UAAA"}},
    {"offset": {"line": 166, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 170, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/utils/stacktrace.ts"],"sourcesContent":["import type { Event } from '../types-hoist/event';\nimport type { StackFrame } from '../types-hoist/stackframe';\nimport type { StackLineParser, StackParser } from '../types-hoist/stacktrace';\n\nconst STACKTRACE_FRAME_LIMIT = 50;\nexport const UNKNOWN_FUNCTION = '?';\n// Used to sanitize webpack (error: *) wrapped stack errors\nconst WEBPACK_ERROR_REGEXP = /\\(error: (.*)\\)/;\nconst STRIP_FRAME_REGEXP = /captureMessage|captureException/;\n\n/**\n * Creates a stack parser with the supplied line parsers\n *\n * StackFrames are returned in the correct order for Sentry Exception\n * frames and with Sentry SDK internal frames removed from the top and bottom\n *\n */\nexport function createStackParser(...parsers: StackLineParser[]): StackParser {\n  const sortedParsers = parsers.sort((a, b) => a[0] - b[0]).map(p => p[1]);\n\n  return (stack: string, skipFirstLines: number = 0, framesToPop: number = 0): StackFrame[] => {\n    const frames: StackFrame[] = [];\n    const lines = stack.split('\\n');\n\n    for (let i = skipFirstLines; i < lines.length; i++) {\n      const line = lines[i] as string;\n      // Ignore lines over 1kb as they are unlikely to be stack frames.\n      // Many of the regular expressions use backtracking which results in run time that increases exponentially with\n      // input size. Huge strings can result in hangs/Denial of Service:\n      // https://github.com/getsentry/sentry-javascript/issues/2286\n      if (line.length > 1024) {\n        continue;\n      }\n\n      // https://github.com/getsentry/sentry-javascript/issues/5459\n      // Remove webpack (error: *) wrappers\n      const cleanedLine = WEBPACK_ERROR_REGEXP.test(line) ? line.replace(WEBPACK_ERROR_REGEXP, '$1') : line;\n\n      // https://github.com/getsentry/sentry-javascript/issues/7813\n      // Skip Error: lines\n      if (cleanedLine.match(/\\S*Error: /)) {\n        continue;\n      }\n\n      for (const parser of sortedParsers) {\n        const frame = parser(cleanedLine);\n\n        if (frame) {\n          frames.push(frame);\n          break;\n        }\n      }\n\n      if (frames.length >= STACKTRACE_FRAME_LIMIT + framesToPop) {\n        break;\n      }\n    }\n\n    return stripSentryFramesAndReverse(frames.slice(framesToPop));\n  };\n}\n\n/**\n * Gets a stack parser implementation from Options.stackParser\n * @see Options\n *\n * If options contains an array of line parsers, it is converted into a parser\n */\nexport function stackParserFromStackParserOptions(stackParser: StackParser | StackLineParser[]): StackParser {\n  if (Array.isArray(stackParser)) {\n    return createStackParser(...stackParser);\n  }\n  return stackParser;\n}\n\n/**\n * Removes Sentry frames from the top and bottom of the stack if present and enforces a limit of max number of frames.\n * Assumes stack input is ordered from top to bottom and returns the reverse representation so call site of the\n * function that caused the crash is the last frame in the array.\n * @hidden\n */\nexport function stripSentryFramesAndReverse(stack: ReadonlyArray<StackFrame>): StackFrame[] {\n  if (!stack.length) {\n    return [];\n  }\n\n  const localStack = Array.from(stack);\n\n  // If stack starts with one of our API calls, remove it (starts, meaning it's the top of the stack - aka last call)\n  if (/sentryWrapped/.test(getLastStackFrame(localStack).function || '')) {\n    localStack.pop();\n  }\n\n  // Reversing in the middle of the procedure allows us to just pop the values off the stack\n  localStack.reverse();\n\n  // If stack ends with one of our internal API calls, remove it (ends, meaning it's the bottom of the stack - aka top-most call)\n  if (STRIP_FRAME_REGEXP.test(getLastStackFrame(localStack).function || '')) {\n    localStack.pop();\n\n    // When using synthetic events, we will have a 2 levels deep stack, as `new Error('Sentry syntheticException')`\n    // is produced within the scope itself, making it:\n    //\n    //   Sentry.captureException()\n    //   scope.captureException()\n    //\n    // instead of just the top `Sentry` call itself.\n    // This forces us to possibly strip an additional frame in the exact same was as above.\n    if (STRIP_FRAME_REGEXP.test(getLastStackFrame(localStack).function || '')) {\n      localStack.pop();\n    }\n  }\n\n  return localStack.slice(0, STACKTRACE_FRAME_LIMIT).map(frame => ({\n    ...frame,\n    filename: frame.filename || getLastStackFrame(localStack).filename,\n    function: frame.function || UNKNOWN_FUNCTION,\n  }));\n}\n\nfunction getLastStackFrame(arr: StackFrame[]): StackFrame {\n  return arr[arr.length - 1] || {};\n}\n\nconst defaultFunctionName = '<anonymous>';\n\n/**\n * Safely extract function name from itself\n */\nexport function getFunctionName(fn: unknown): string {\n  try {\n    if (!fn || typeof fn !== 'function') {\n      return defaultFunctionName;\n    }\n    return fn.name || defaultFunctionName;\n  } catch (e) {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    return defaultFunctionName;\n  }\n}\n\n/**\n * Get's stack frames from an event without needing to check for undefined properties.\n */\nexport function getFramesFromEvent(event: Event): StackFrame[] | undefined {\n  const exception = event.exception;\n\n  if (exception) {\n    const frames: StackFrame[] = [];\n    try {\n      // @ts-expect-error Object could be undefined\n      exception.values.forEach(value => {\n        // @ts-expect-error Value could be undefined\n        if (value.stacktrace.frames) {\n          // @ts-expect-error Value could be undefined\n          frames.push(...value.stacktrace.frames);\n        }\n      });\n      return frames;\n    } catch (_oO) {\n      return undefined;\n    }\n  }\n  return undefined;\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 314, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 318, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/instrument/handlers.ts"],"sourcesContent":["import { DEBUG_BUILD } from '../debug-build';\nimport { logger } from '../utils/logger';\nimport { getFunctionName } from '../utils/stacktrace';\n\nexport type InstrumentHandlerType =\n  | 'console'\n  | 'dom'\n  | 'fetch'\n  | 'fetch-body-resolved'\n  | 'history'\n  | 'xhr'\n  | 'error'\n  | 'unhandledrejection';\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type InstrumentHandlerCallback = (data: any) => void;\n\n// We keep the handlers globally\nconst handlers: { [key in InstrumentHandlerType]?: InstrumentHandlerCallback[] } = {};\nconst instrumented: { [key in InstrumentHandlerType]?: boolean } = {};\n\n/** Add a handler function. */\nexport function addHandler(type: InstrumentHandlerType, handler: InstrumentHandlerCallback): void {\n  handlers[type] = handlers[type] || [];\n  (handlers[type] as InstrumentHandlerCallback[]).push(handler);\n}\n\n/**\n * Reset all instrumentation handlers.\n * This can be used by tests to ensure we have a clean slate of instrumentation handlers.\n */\nexport function resetInstrumentationHandlers(): void {\n  Object.keys(handlers).forEach(key => {\n    handlers[key as InstrumentHandlerType] = undefined;\n  });\n}\n\n/** Maybe run an instrumentation function, unless it was already called. */\nexport function maybeInstrument(type: InstrumentHandlerType, instrumentFn: () => void): void {\n  if (!instrumented[type]) {\n    instrumented[type] = true;\n    try {\n      instrumentFn();\n    } catch (e) {\n      DEBUG_BUILD && logger.error(`Error while instrumenting ${type}`, e);\n    }\n  }\n}\n\n/** Trigger handlers for a given instrumentation type. */\nexport function triggerHandlers(type: InstrumentHandlerType, data: unknown): void {\n  const typeHandlers = type && handlers[type];\n  if (!typeHandlers) {\n    return;\n  }\n\n  for (const handler of typeHandlers) {\n    try {\n      handler(data);\n    } catch (e) {\n      DEBUG_BUILD &&\n        logger.error(\n          `Error while triggering instrumentation handler.\\nType: ${type}\\nName: ${getFunctionName(handler)}\\nError:`,\n          e,\n        );\n    }\n  }\n}\n"],"names":["DEBUG_BUILD","logger","getFunctionName"],"mappings":";;;;;;AAgBA,gCAAA;AACA,MAAM,WAA6E,CAAA;AACnF,MAAM,eAA6D,CAAA;AAEnE,4BAAA,GACO,SAAS,WAAW,IAAI,EAAyB,OAAO;IAC7D,QAAQ,CAAC,KAAI,GAAI,QAAQ,CAAC,KAAI,IAAK,EAAE;IACpC,QAAQ,CAAC,KAAI,CAAkC,IAAI,CAAC;AACvD;AAEA;;;CAGA,GACO,SAAS;IACd,OAAO,IAAI,CAAC,UAAU,OAAO,CAAC,CAAA;QAC5B,QAAQ,CAAC,IAAI,GAA4B;IAC7C;AACA;AAEA,yEAAA,GACO,SAAS,gBAAgB,IAAI,EAAyB,YAAY;IACvE,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE;QACvB,YAAY,CAAC,KAAI,GAAI;QACrB,IAAI;YACF;QACN,EAAM,OAAO,GAAG;YACVA,WAAAA,WAAA,IAAeC,OAAAA,MAAM,CAAC,KAAK,CAAC,CAAC,0BAA0B,EAAE,KAAK,CAAA,EAAA;QACA;IACA;AACA;AAEA,uDAAA,GACA,SAAA,gBAAA,IAAA,EAAA,IAAA;IACA,MAAA,eAAA,QAAA,QAAA,CAAA,KAAA;IACA,IAAA,CAAA,cAAA;QACA;IACA;IAEA,KAAA,MAAA,WAAA,aAAA;QACA,IAAA;YACA,QAAA;QACA,EAAA,OAAA,GAAA;YACAD,WAAAA,WAAA,IACAC,OAAAA,MAAA,CAAA,KAAA,CACA,CAAA,uDAAA,EAAA,KAAA,QAAA,EAAAC,WAAAA,eAAA,CAAA,SAAA,QAAA,CAAA,EACA;QAEA;IACA;AACA"}},
    {"offset": {"line": 366, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 370, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/instrument/globalError.ts"],"sourcesContent":["import type { HandlerDataError } from '../types-hoist/instrument';\nimport { GLOBAL_OBJ } from '../utils/worldwide';\nimport { addHandler, maybeInstrument, triggerHandlers } from './handlers';\n\nlet _oldOnErrorHandler: (typeof GLOBAL_OBJ)['onerror'] | null = null;\n\n/**\n * Add an instrumentation handler for when an error is captured by the global error handler.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nexport function addGlobalErrorInstrumentationHandler(handler: (data: HandlerDataError) => void): void {\n  const type = 'error';\n  addHandler(type, handler);\n  maybeInstrument(type, instrumentError);\n}\n\nfunction instrumentError(): void {\n  _oldOnErrorHandler = GLOBAL_OBJ.onerror;\n\n  // Note: The reason we are doing window.onerror instead of window.addEventListener('error')\n  // is that we are using this handler in the Loader Script, to handle buffered errors consistently\n  GLOBAL_OBJ.onerror = function (\n    msg: string | object,\n    url?: string,\n    line?: number,\n    column?: number,\n    error?: Error,\n  ): boolean {\n    const handlerData: HandlerDataError = {\n      column,\n      error,\n      line,\n      msg,\n      url,\n    };\n    triggerHandlers('error', handlerData);\n\n    if (_oldOnErrorHandler) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnErrorHandler.apply(this, arguments);\n    }\n\n    return false;\n  };\n\n  GLOBAL_OBJ.onerror.__SENTRY_INSTRUMENTED__ = true;\n}\n"],"names":["addHandler","maybeInstrument","GLOBAL_OBJ","triggerHandlers"],"mappings":";;;;;AAIA,IAAI,qBAA4D;AAEhE;;;;;CAKA,GACO,SAAS,qCAAqC,OAAO;IAC1D,MAAM,OAAO;IACbA,SAAAA,UAAU,CAAC,MAAM;IACjBC,SAAAA,eAAe,CAAC,MAAM;AACxB;AAEA,SAAS;IACP,qBAAqBC,UAAAA,UAAU,CAAC,OAAO;IAEzC,2FAAA;IACA,iGAAA;IACEA,UAAAA,UAAU,CAAC,OAAA,GAAU,SACnB,GAAG,EACH,GAAG,EACH,IAAI,EACJ,MAAM,EACN,KAAK;QAEL,MAAM,cAAgC;YACpC;YACA;YACA;YACA;YACA;QACN;QACIC,SAAAA,eAAe,CAAC,SAAS;QAEzB,IAAI,oBAAoB;YAC5B,8CAAA;YACM,OAAO,mBAAmB,KAAK,CAAC,IAAI,EAAE;QAC5C;QAEI,OAAO;IACX;IAEED,UAAAA,UAAU,CAAC,OAAO,CAAC,uBAAA,GAA0B;AAC/C"}},
    {"offset": {"line": 408, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 412, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/instrument/globalUnhandledRejection.ts"],"sourcesContent":["import type { HandlerDataUnhandledRejection } from '../types-hoist/instrument';\nimport { GLOBAL_OBJ } from '../utils/worldwide';\nimport { addHandler, maybeInstrument, triggerHandlers } from './handlers';\n\nlet _oldOnUnhandledRejectionHandler: (typeof GLOBAL_OBJ)['onunhandledrejection'] | null = null;\n\n/**\n * Add an instrumentation handler for when an unhandled promise rejection is captured.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nexport function addGlobalUnhandledRejectionInstrumentationHandler(\n  handler: (data: HandlerDataUnhandledRejection) => void,\n): void {\n  const type = 'unhandledrejection';\n  addHandler(type, handler);\n  maybeInstrument(type, instrumentUnhandledRejection);\n}\n\nfunction instrumentUnhandledRejection(): void {\n  _oldOnUnhandledRejectionHandler = GLOBAL_OBJ.onunhandledrejection;\n\n  // Note: The reason we are doing window.onunhandledrejection instead of window.addEventListener('unhandledrejection')\n  // is that we are using this handler in the Loader Script, to handle buffered rejections consistently\n  GLOBAL_OBJ.onunhandledrejection = function (e: unknown): boolean {\n    const handlerData: HandlerDataUnhandledRejection = e;\n    triggerHandlers('unhandledrejection', handlerData);\n\n    if (_oldOnUnhandledRejectionHandler) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnUnhandledRejectionHandler.apply(this, arguments);\n    }\n\n    return true;\n  };\n\n  GLOBAL_OBJ.onunhandledrejection.__SENTRY_INSTRUMENTED__ = true;\n}\n"],"names":["addHandler","maybeInstrument","GLOBAL_OBJ","triggerHandlers"],"mappings":";;;;;AAIA,IAAI,kCAAsF;AAE1F;;;;;CAKA,GACO,SAAS,kDACd,OAAO;IAEP,MAAM,OAAO;IACbA,SAAAA,UAAU,CAAC,MAAM;IACjBC,SAAAA,eAAe,CAAC,MAAM;AACxB;AAEA,SAAS;IACP,kCAAkCC,UAAAA,UAAU,CAAC,oBAAoB;IAEnE,qHAAA;IACA,qGAAA;IACEA,UAAAA,UAAU,CAAC,oBAAA,GAAuB,SAAU,CAAC;QAC3C,MAAM,cAA6C;QACnDC,SAAAA,eAAe,CAAC,sBAAsB;QAEtC,IAAI,iCAAiC;YACzC,8CAAA;YACM,OAAO,gCAAgC,KAAK,CAAC,IAAI,EAAE;QACzD;QAEI,OAAO;IACX;IAEED,UAAAA,UAAU,CAAC,oBAAoB,CAAC,uBAAA,GAA0B;AAC5D"}},
    {"offset": {"line": 444, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 448, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/utils/is.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport type { Primitive } from '../types-hoist/misc';\nimport type { ParameterizedString } from '../types-hoist/parameterize';\nimport type { PolymorphicEvent } from '../types-hoist/polymorphics';\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nconst objectToString = Object.prototype.toString;\n\n/**\n * Checks whether given value's type is one of a few Error or Error-like\n * {@link isError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isError(wat: unknown): wat is Error {\n  switch (objectToString.call(wat)) {\n    case '[object Error]':\n    case '[object Exception]':\n    case '[object DOMException]':\n    case '[object WebAssembly.Exception]':\n      return true;\n    default:\n      return isInstanceOf(wat, Error);\n  }\n}\n/**\n * Checks whether given value is an instance of the given built-in class.\n *\n * @param wat The value to be checked\n * @param className\n * @returns A boolean representing the result.\n */\nfunction isBuiltin(wat: unknown, className: string): boolean {\n  return objectToString.call(wat) === `[object ${className}]`;\n}\n\n/**\n * Checks whether given value's type is ErrorEvent\n * {@link isErrorEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isErrorEvent(wat: unknown): boolean {\n  return isBuiltin(wat, 'ErrorEvent');\n}\n\n/**\n * Checks whether given value's type is DOMError\n * {@link isDOMError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isDOMError(wat: unknown): boolean {\n  return isBuiltin(wat, 'DOMError');\n}\n\n/**\n * Checks whether given value's type is DOMException\n * {@link isDOMException}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isDOMException(wat: unknown): boolean {\n  return isBuiltin(wat, 'DOMException');\n}\n\n/**\n * Checks whether given value's type is a string\n * {@link isString}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isString(wat: unknown): wat is string {\n  return isBuiltin(wat, 'String');\n}\n\n/**\n * Checks whether given string is parameterized\n * {@link isParameterizedString}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isParameterizedString(wat: unknown): wat is ParameterizedString {\n  return (\n    typeof wat === 'object' &&\n    wat !== null &&\n    '__sentry_template_string__' in wat &&\n    '__sentry_template_values__' in wat\n  );\n}\n\n/**\n * Checks whether given value is a primitive (undefined, null, number, boolean, string, bigint, symbol)\n * {@link isPrimitive}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isPrimitive(wat: unknown): wat is Primitive {\n  return wat === null || isParameterizedString(wat) || (typeof wat !== 'object' && typeof wat !== 'function');\n}\n\n/**\n * Checks whether given value's type is an object literal, or a class instance.\n * {@link isPlainObject}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isPlainObject(wat: unknown): wat is Record<string, unknown> {\n  return isBuiltin(wat, 'Object');\n}\n\n/**\n * Checks whether given value's type is an Event instance\n * {@link isEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isEvent(wat: unknown): wat is PolymorphicEvent {\n  return typeof Event !== 'undefined' && isInstanceOf(wat, Event);\n}\n\n/**\n * Checks whether given value's type is an Element instance\n * {@link isElement}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isElement(wat: unknown): boolean {\n  return typeof Element !== 'undefined' && isInstanceOf(wat, Element);\n}\n\n/**\n * Checks whether given value's type is an regexp\n * {@link isRegExp}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isRegExp(wat: unknown): wat is RegExp {\n  return isBuiltin(wat, 'RegExp');\n}\n\n/**\n * Checks whether given value has a then function.\n * @param wat A value to be checked.\n */\nexport function isThenable(wat: any): wat is PromiseLike<any> {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return Boolean(wat?.then && typeof wat.then === 'function');\n}\n\n/**\n * Checks whether given value's type is a SyntheticEvent\n * {@link isSyntheticEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isSyntheticEvent(wat: unknown): boolean {\n  return isPlainObject(wat) && 'nativeEvent' in wat && 'preventDefault' in wat && 'stopPropagation' in wat;\n}\n\n/**\n * Checks whether given value's type is an instance of provided constructor.\n * {@link isInstanceOf}.\n *\n * @param wat A value to be checked.\n * @param base A constructor to be used in a check.\n * @returns A boolean representing the result.\n */\nexport function isInstanceOf(wat: any, base: any): boolean {\n  try {\n    return wat instanceof base;\n  } catch (_e) {\n    return false;\n  }\n}\n\ninterface VueViewModel {\n  // Vue3\n  __isVue?: boolean;\n  // Vue2\n  _isVue?: boolean;\n}\n/**\n * Checks whether given value's type is a Vue ViewModel.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isVueViewModel(wat: unknown): boolean {\n  // Not using Object.prototype.toString because in Vue 3 it would read the instance's Symbol(Symbol.toStringTag) property.\n  return !!(typeof wat === 'object' && wat !== null && ((wat as VueViewModel).__isVue || (wat as VueViewModel)._isVue));\n}\n\n/**\n * Checks whether the given parameter is a Standard Web API Request instance.\n *\n * Returns false if Request is not available in the current runtime.\n */\nexport function isRequest(request: unknown): request is Request {\n  return typeof Request !== 'undefined' && isInstanceOf(request, Request);\n}\n"],"names":[],"mappings":";;;AAMA,6DAAA;AACA,MAAM,iBAAiB,OAAO,SAAS,CAAC,QAAQ;AAEhD;;;;;;CAMA,GACO,SAAS,QAAQ,GAAG;IACzB,OAAQ,eAAe,IAAI,CAAC;QAC1B,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;YACH,OAAO;QACT;YACE,OAAO,aAAa,KAAK;IAC/B;AACA;AACA;;;;;;CAMA,GACA,SAAS,UAAU,GAAG,EAAW,SAAS;IACxC,OAAO,eAAe,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;AAC7D;AAEA;;;;;;CAMA,GACO,SAAS,aAAa,GAAG;IAC9B,OAAO,UAAU,KAAK;AACxB;AAEA;;;;;;CAMA,GACO,SAAS,WAAW,GAAG;IAC5B,OAAO,UAAU,KAAK;AACxB;AAEA;;;;;;CAMA,GACO,SAAS,eAAe,GAAG;IAChC,OAAO,UAAU,KAAK;AACxB;AAEA;;;;;;CAMA,GACO,SAAS,SAAS,GAAG;IAC1B,OAAO,UAAU,KAAK;AACxB;AAEA;;;;;;CAMA,GACO,SAAS,sBAAsB,GAAG;IACvC,OACE,OAAO,QAAQ,YACf,QAAQ,QACR,gCAAgC,OAChC,gCAAgC;AAEpC;AAEA;;;;;;CAMA,GACO,SAAS,YAAY,GAAG;IAC7B,OAAO,QAAQ,QAAQ,sBAAsB,QAAS,OAAO,QAAQ,YAAY,OAAO,QAAQ;AAClG;AAEA;;;;;;CAMA,GACO,SAAS,cAAc,GAAG;IAC/B,OAAO,UAAU,KAAK;AACxB;AAEA;;;;;;CAMA,GACO,SAAS,QAAQ,GAAG;IACzB,OAAO,OAAO,UAAU,eAAe,aAAa,KAAK;AAC3D;AAEA;;;;;;CAMA,GACO,SAAS,UAAU,GAAG;IAC3B,OAAO,OAAO,YAAY,eAAe,aAAa,KAAK;AAC7D;AAEA;;;;;;CAMA,GACO,SAAS,SAAS,GAAG;IAC1B,OAAO,UAAU,KAAK;AACxB;AAEA;;;CAGA,GACO,SAAS,WAAW,GAAG;IAC9B,sEAAA;IACE,OAAO,QAAQ,KAAK,QAAQ,OAAO,IAAI,IAAA,KAAS;AAClD;AAEA;;;;;;CAMA,GACO,SAAS,iBAAiB,GAAG;IAClC,OAAO,cAAc,QAAQ,iBAAiB,OAAO,oBAAoB,OAAO,qBAAqB;AACvG;AAEA;;;;;;;CAOA,GACO,SAAS,aAAa,GAAG,EAAO,IAAI;IACzC,IAAI;QACF,OAAO,eAAe;IAC1B,EAAI,OAAO,IAAI;QACX,OAAO;IACX;AACA;AAQA;;;;;CAKA,GACO,SAAS,eAAe,GAAG;IAClC,yHAAA;IACE,OAAO,CAAC,CAAA,CAAE,OAAO,QAAQ,YAAY,QAAQ,QAAA,CAAS,AAAC,IAAqB,OAAA,IAAW,AAAC,IAAqB,MAAM,CAAC;AACtH;AAEA;;;;CAIA,GACO,SAAS,UAAU,OAAO;IAC/B,OAAO,OAAO,YAAY,eAAe,aAAa,SAAS;AACjE"}},
    {"offset": {"line": 631, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 635, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/utils/browser.ts"],"sourcesContent":["import { isString } from './is';\nimport { GLOBAL_OBJ } from './worldwide';\n\nconst WINDOW = GLOBAL_OBJ as unknown as Window;\n\nconst DEFAULT_MAX_STRING_LENGTH = 80;\n\ntype SimpleNode = {\n  parentNode: SimpleNode;\n} | null;\n\n/**\n * Given a child DOM element, returns a query-selector statement describing that\n * and its ancestors\n * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nexport function htmlTreeAsString(\n  elem: unknown,\n  options: string[] | { keyAttrs?: string[]; maxStringLength?: number } = {},\n): string {\n  if (!elem) {\n    return '<unknown>';\n  }\n\n  // try/catch both:\n  // - accessing event.target (see getsentry/raven-js#838, #768)\n  // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly\n  // - can throw an exception in some circumstances.\n  try {\n    let currentElem = elem as SimpleNode;\n    const MAX_TRAVERSE_HEIGHT = 5;\n    const out = [];\n    let height = 0;\n    let len = 0;\n    const separator = ' > ';\n    const sepLength = separator.length;\n    let nextStr;\n    const keyAttrs = Array.isArray(options) ? options : options.keyAttrs;\n    const maxStringLength = (!Array.isArray(options) && options.maxStringLength) || DEFAULT_MAX_STRING_LENGTH;\n\n    while (currentElem && height++ < MAX_TRAVERSE_HEIGHT) {\n      nextStr = _htmlElementAsString(currentElem, keyAttrs);\n      // bail out if\n      // - nextStr is the 'html' element\n      // - the length of the string that would be created exceeds maxStringLength\n      //   (ignore this limit if we are on the first iteration)\n      if (nextStr === 'html' || (height > 1 && len + out.length * sepLength + nextStr.length >= maxStringLength)) {\n        break;\n      }\n\n      out.push(nextStr);\n\n      len += nextStr.length;\n      currentElem = currentElem.parentNode;\n    }\n\n    return out.reverse().join(separator);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n\n/**\n * Returns a simple, query-selector representation of a DOM element\n * e.g. [HTMLElement] => input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nfunction _htmlElementAsString(el: unknown, keyAttrs?: string[]): string {\n  const elem = el as {\n    tagName?: string;\n    id?: string;\n    className?: string;\n    getAttribute(key: string): string;\n  };\n\n  const out = [];\n\n  if (!elem?.tagName) {\n    return '';\n  }\n\n  // @ts-expect-error WINDOW has HTMLElement\n  if (WINDOW.HTMLElement) {\n    // If using the component name annotation plugin, this value may be available on the DOM node\n    if (elem instanceof HTMLElement && elem.dataset) {\n      if (elem.dataset['sentryComponent']) {\n        return elem.dataset['sentryComponent'];\n      }\n      if (elem.dataset['sentryElement']) {\n        return elem.dataset['sentryElement'];\n      }\n    }\n  }\n\n  out.push(elem.tagName.toLowerCase());\n\n  // Pairs of attribute keys defined in `serializeAttribute` and their values on element.\n  const keyAttrPairs = keyAttrs?.length\n    ? keyAttrs.filter(keyAttr => elem.getAttribute(keyAttr)).map(keyAttr => [keyAttr, elem.getAttribute(keyAttr)])\n    : null;\n\n  if (keyAttrPairs?.length) {\n    keyAttrPairs.forEach(keyAttrPair => {\n      out.push(`[${keyAttrPair[0]}=\"${keyAttrPair[1]}\"]`);\n    });\n  } else {\n    if (elem.id) {\n      out.push(`#${elem.id}`);\n    }\n\n    const className = elem.className;\n    if (className && isString(className)) {\n      const classes = className.split(/\\s+/);\n      for (const c of classes) {\n        out.push(`.${c}`);\n      }\n    }\n  }\n  const allowedAttrs = ['aria-label', 'type', 'name', 'title', 'alt'];\n  for (const k of allowedAttrs) {\n    const attr = elem.getAttribute(k);\n    if (attr) {\n      out.push(`[${k}=\"${attr}\"]`);\n    }\n  }\n\n  return out.join('');\n}\n\n/**\n * A safe form of location.href\n */\nexport function getLocationHref(): string {\n  try {\n    return WINDOW.document.location.href;\n  } catch (oO) {\n    return '';\n  }\n}\n\n/**\n * Given a DOM element, traverses up the tree until it finds the first ancestor node\n * that has the `data-sentry-component` or `data-sentry-element` attribute with `data-sentry-component` taking\n * precedence. This attribute is added at build-time by projects that have the component name annotation plugin installed.\n *\n * @returns a string representation of the component for the provided DOM element, or `null` if not found\n */\nexport function getComponentName(elem: unknown): string | null {\n  // @ts-expect-error WINDOW has HTMLElement\n  if (!WINDOW.HTMLElement) {\n    return null;\n  }\n\n  let currentElem = elem as SimpleNode;\n  const MAX_TRAVERSE_HEIGHT = 5;\n  for (let i = 0; i < MAX_TRAVERSE_HEIGHT; i++) {\n    if (!currentElem) {\n      return null;\n    }\n\n    if (currentElem instanceof HTMLElement) {\n      if (currentElem.dataset['sentryComponent']) {\n        return currentElem.dataset['sentryComponent'];\n      }\n      if (currentElem.dataset['sentryElement']) {\n        return currentElem.dataset['sentryElement'];\n      }\n    }\n\n    currentElem = currentElem.parentNode;\n  }\n\n  return null;\n}\n"],"names":["GLOBAL_OBJ","isString"],"mappings":"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"}},
    {"offset": {"line": 784, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 788, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/utils/string.ts"],"sourcesContent":["import { isRegExp, isString, isVueViewModel } from './is';\n\nexport { escapeStringForRegex } from '../vendor/escapeStringForRegex';\n\n/**\n * Truncates given string to the maximum characters count\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string (0 = unlimited)\n * @returns string Encoded\n */\nexport function truncate(str: string, max: number = 0): string {\n  if (typeof str !== 'string' || max === 0) {\n    return str;\n  }\n  return str.length <= max ? str : `${str.slice(0, max)}...`;\n}\n\n/**\n * This is basically just `trim_line` from\n * https://github.com/getsentry/sentry/blob/master/src/sentry/lang/javascript/processor.py#L67\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string\n * @returns string Encoded\n */\nexport function snipLine(line: string, colno: number): string {\n  let newLine = line;\n  const lineLength = newLine.length;\n  if (lineLength <= 150) {\n    return newLine;\n  }\n  if (colno > lineLength) {\n    // eslint-disable-next-line no-param-reassign\n    colno = lineLength;\n  }\n\n  let start = Math.max(colno - 60, 0);\n  if (start < 5) {\n    start = 0;\n  }\n\n  let end = Math.min(start + 140, lineLength);\n  if (end > lineLength - 5) {\n    end = lineLength;\n  }\n  if (end === lineLength) {\n    start = Math.max(end - 140, 0);\n  }\n\n  newLine = newLine.slice(start, end);\n  if (start > 0) {\n    newLine = `'{snip} ${newLine}`;\n  }\n  if (end < lineLength) {\n    newLine += ' {snip}';\n  }\n\n  return newLine;\n}\n\n/**\n * Join values in array\n * @param input array of values to be joined together\n * @param delimiter string to be placed in-between values\n * @returns Joined values\n */\nexport function safeJoin(input: unknown[], delimiter?: string): string {\n  if (!Array.isArray(input)) {\n    return '';\n  }\n\n  const output = [];\n  // eslint-disable-next-line @typescript-eslint/prefer-for-of\n  for (let i = 0; i < input.length; i++) {\n    const value = input[i];\n    try {\n      // This is a hack to fix a Vue3-specific bug that causes an infinite loop of\n      // console warnings. This happens when a Vue template is rendered with\n      // an undeclared variable, which we try to stringify, ultimately causing\n      // Vue to issue another warning which repeats indefinitely.\n      // see: https://github.com/getsentry/sentry-javascript/pull/8981\n      if (isVueViewModel(value)) {\n        output.push('[VueViewModel]');\n      } else {\n        output.push(String(value));\n      }\n    } catch (e) {\n      output.push('[value cannot be serialized]');\n    }\n  }\n\n  return output.join(delimiter);\n}\n\n/**\n * Checks if the given value matches a regex or string\n *\n * @param value The string to test\n * @param pattern Either a regex or a string against which `value` will be matched\n * @param requireExactStringMatch If true, `value` must match `pattern` exactly. If false, `value` will match\n * `pattern` if it contains `pattern`. Only applies to string-type patterns.\n */\nexport function isMatchingPattern(\n  value: string,\n  pattern: RegExp | string,\n  requireExactStringMatch: boolean = false,\n): boolean {\n  if (!isString(value)) {\n    return false;\n  }\n\n  if (isRegExp(pattern)) {\n    return pattern.test(value);\n  }\n  if (isString(pattern)) {\n    return requireExactStringMatch ? value === pattern : value.includes(pattern);\n  }\n\n  return false;\n}\n\n/**\n * Test the given string against an array of strings and regexes. By default, string matching is done on a\n * substring-inclusion basis rather than a strict equality basis\n *\n * @param testString The string to test\n * @param patterns The patterns against which to test the string\n * @param requireExactStringMatch If true, `testString` must match one of the given string patterns exactly in order to\n * count. If false, `testString` will match a string pattern if it contains that pattern.\n * @returns\n */\nexport function stringMatchesSomePattern(\n  testString: string,\n  patterns: Array<string | RegExp> = [],\n  requireExactStringMatch: boolean = false,\n): boolean {\n  return patterns.some(pattern => isMatchingPattern(testString, pattern, requireExactStringMatch));\n}\n"],"names":["isVueViewModel","isString","isRegExp"],"mappings":";;;;AAIA;;;;;;CAMA,GACO,SAAS,SAAS,GAAG,EAAU,MAAc,CAAC;IACnD,IAAI,OAAO,QAAQ,YAAY,QAAQ,GAAG;QACxC,OAAO;IACX;IACE,OAAO,IAAI,MAAA,IAAU,MAAM,MAAM,CAAC,EAAA,IAAA,KAAA,CAAA,GAAA,KAAA,GAAA,CAAA;AACA;AAEA;;;;;;;CAOA,GACA,SAAA,SAAA,IAAA,EAAA,KAAA;IACA,IAAA,UAAA;IACA,MAAA,aAAA,QAAA,MAAA;IACA,IAAA,cAAA,KAAA;QACA,OAAA;IACA;IACA,IAAA,QAAA,YAAA;QACA,6CAAA;QACA,QAAA;IACA;IAEA,IAAA,QAAA,KAAA,GAAA,CAAA,QAAA,IAAA;IACA,IAAA,QAAA,GAAA;QACA,QAAA;IACA;IAEA,IAAA,MAAA,KAAA,GAAA,CAAA,QAAA,KAAA;IACA,IAAA,MAAA,aAAA,GAAA;QACA,MAAA;IACA;IACA,IAAA,QAAA,YAAA;QACA,QAAA,KAAA,GAAA,CAAA,MAAA,KAAA;IACA;IAEA,UAAA,QAAA,KAAA,CAAA,OAAA;IACA,IAAA,QAAA,GAAA;QACA,UAAA,CAAA,QAAA,EAAA,QAAA,CAAA;IACA;IACA,IAAA,MAAA,YAAA;QACA,WAAA;IACA;IAEA,OAAA;AACA;AAEA;;;;;CAKA,GACA,SAAA,SAAA,KAAA,EAAA,SAAA;IACA,IAAA,CAAA,MAAA,OAAA,CAAA,QAAA;QACA,OAAA;IACA;IAEA,MAAA,SAAA,EAAA;IACA,4DAAA;IACA,IAAA,IAAA,IAAA,GAAA,IAAA,MAAA,MAAA,EAAA,IAAA;QACA,MAAA,QAAA,KAAA,CAAA,EAAA;QACA,IAAA;YACA,4EAAA;YACA,sEAAA;YACA,wEAAA;YACA,2DAAA;YACA,gEAAA;YACA,IAAAA,GAAAA,cAAA,CAAA,QAAA;gBACA,OAAA,IAAA,CAAA;YACA,OAAA;gBACA,OAAA,IAAA,CAAA,OAAA;YACA;QACA,EAAA,OAAA,GAAA;YACA,OAAA,IAAA,CAAA;QACA;IACA;IAEA,OAAA,OAAA,IAAA,CAAA;AACA;AAEA;;;;;;;CAOA,GACA,SAAA,kBACA,KAAA,EACA,OAAA,EACA,0BAAA,KAAA;IAEA,IAAA,CAAAC,GAAAA,QAAA,CAAA,QAAA;QACA,OAAA;IACA;IAEA,IAAAC,GAAAA,QAAA,CAAA,UAAA;QACA,OAAA,QAAA,IAAA,CAAA;IACA;IACA,IAAAD,GAAAA,QAAA,CAAA,UAAA;QACA,OAAA,0BAAA,UAAA,UAAA,MAAA,QAAA,CAAA;IACA;IAEA,OAAA;AACA;AAEA;;;;;;;;;CASA,GACA,SAAA,yBACA,UAAA,EACA,WAAA,EAAA,EACA,0BAAA,KAAA;IAEA,OAAA,SAAA,IAAA,CAAA,CAAA,UAAA,kBAAA,YAAA,SAAA;AACA"}},
    {"offset": {"line": 907, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 911, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/utils/object.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { DEBUG_BUILD } from '../debug-build';\nimport type { WrappedFunction } from '../types-hoist/wrappedfunction';\nimport { htmlTreeAsString } from './browser';\nimport { isElement, isError, isEvent, isInstanceOf, isPrimitive } from './is';\nimport { logger } from './logger';\nimport { truncate } from './string';\n\n/**\n * Replace a method in an object with a wrapped version of itself.\n *\n * If the method on the passed object is not a function, the wrapper will not be applied.\n *\n * @param source An object that contains a method to be wrapped.\n * @param name The name of the method to be wrapped.\n * @param replacementFactory A higher-order function that takes the original version of the given method and returns a\n * wrapped version. Note: The function returned by `replacementFactory` needs to be a non-arrow function, in order to\n * preserve the correct value of `this`, and the original method must be called using `origMethod.call(this, <other\n * args>)` or `origMethod.apply(this, [<other args>])` (rather than being called directly), again to preserve `this`.\n * @returns void\n */\nexport function fill(source: { [key: string]: any }, name: string, replacementFactory: (...args: any[]) => any): void {\n  if (!(name in source)) {\n    return;\n  }\n\n  // explicitly casting to unknown because we don't know the type of the method initially at all\n  const original = source[name] as unknown;\n\n  if (typeof original !== 'function') {\n    return;\n  }\n\n  const wrapped = replacementFactory(original) as WrappedFunction;\n\n  // Make sure it's a function first, as we need to attach an empty prototype for `defineProperties` to work\n  // otherwise it'll throw \"TypeError: Object.defineProperties called on non-object\"\n  if (typeof wrapped === 'function') {\n    markFunctionWrapped(wrapped, original);\n  }\n\n  try {\n    source[name] = wrapped;\n  } catch {\n    DEBUG_BUILD && logger.log(`Failed to replace method \"${name}\" in object`, source);\n  }\n}\n\n/**\n * Defines a non-enumerable property on the given object.\n *\n * @param obj The object on which to set the property\n * @param name The name of the property to be set\n * @param value The value to which to set the property\n */\nexport function addNonEnumerableProperty(obj: object, name: string, value: unknown): void {\n  try {\n    Object.defineProperty(obj, name, {\n      // enumerable: false, // the default, so we can save on bundle size by not explicitly setting it\n      value: value,\n      writable: true,\n      configurable: true,\n    });\n  } catch (o_O) {\n    DEBUG_BUILD && logger.log(`Failed to add non-enumerable property \"${name}\" to object`, obj);\n  }\n}\n\n/**\n * Remembers the original function on the wrapped function and\n * patches up the prototype.\n *\n * @param wrapped the wrapper function\n * @param original the original function that gets wrapped\n */\nexport function markFunctionWrapped(wrapped: WrappedFunction, original: WrappedFunction): void {\n  try {\n    const proto = original.prototype || {};\n    wrapped.prototype = original.prototype = proto;\n    addNonEnumerableProperty(wrapped, '__sentry_original__', original);\n  } catch (o_O) {} // eslint-disable-line no-empty\n}\n\n/**\n * This extracts the original function if available.  See\n * `markFunctionWrapped` for more information.\n *\n * @param func the function to unwrap\n * @returns the unwrapped version of the function if available.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function getOriginalFunction<T extends Function>(func: WrappedFunction<T>): T | undefined {\n  return func.__sentry_original__;\n}\n\n/**\n * Transforms any `Error` or `Event` into a plain object with all of their enumerable properties, and some of their\n * non-enumerable properties attached.\n *\n * @param value Initial source that we have to transform in order for it to be usable by the serializer\n * @returns An Event or Error turned into an object - or the value argument itself, when value is neither an Event nor\n *  an Error.\n */\nexport function convertToPlainObject<V>(value: V):\n  | {\n      [ownProps: string]: unknown;\n      type: string;\n      target: string;\n      currentTarget: string;\n      detail?: unknown;\n    }\n  | {\n      [ownProps: string]: unknown;\n      message: string;\n      name: string;\n      stack?: string;\n    }\n  | V {\n  if (isError(value)) {\n    return {\n      message: value.message,\n      name: value.name,\n      stack: value.stack,\n      ...getOwnProperties(value),\n    };\n  } else if (isEvent(value)) {\n    const newObj: {\n      [ownProps: string]: unknown;\n      type: string;\n      target: string;\n      currentTarget: string;\n      detail?: unknown;\n    } = {\n      type: value.type,\n      target: serializeEventTarget(value.target),\n      currentTarget: serializeEventTarget(value.currentTarget),\n      ...getOwnProperties(value),\n    };\n\n    if (typeof CustomEvent !== 'undefined' && isInstanceOf(value, CustomEvent)) {\n      newObj.detail = value.detail;\n    }\n\n    return newObj;\n  } else {\n    return value;\n  }\n}\n\n/** Creates a string representation of the target of an `Event` object */\nfunction serializeEventTarget(target: unknown): string {\n  try {\n    return isElement(target) ? htmlTreeAsString(target) : Object.prototype.toString.call(target);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n\n/** Filters out all but an object's own properties */\nfunction getOwnProperties(obj: unknown): { [key: string]: unknown } {\n  if (typeof obj === 'object' && obj !== null) {\n    const extractedProps: { [key: string]: unknown } = {};\n    for (const property in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, property)) {\n        extractedProps[property] = (obj as Record<string, unknown>)[property];\n      }\n    }\n    return extractedProps;\n  } else {\n    return {};\n  }\n}\n\n/**\n * Given any captured exception, extract its keys and create a sorted\n * and truncated list that will be used inside the event message.\n * eg. `Non-error exception captured with keys: foo, bar, baz`\n */\nexport function extractExceptionKeysForMessage(exception: Record<string, unknown>, maxLength: number = 40): string {\n  const keys = Object.keys(convertToPlainObject(exception));\n  keys.sort();\n\n  const firstKey = keys[0];\n\n  if (!firstKey) {\n    return '[object has no keys]';\n  }\n\n  if (firstKey.length >= maxLength) {\n    return truncate(firstKey, maxLength);\n  }\n\n  for (let includedKeys = keys.length; includedKeys > 0; includedKeys--) {\n    const serialized = keys.slice(0, includedKeys).join(', ');\n    if (serialized.length > maxLength) {\n      continue;\n    }\n    if (includedKeys === keys.length) {\n      return serialized;\n    }\n    return truncate(serialized, maxLength);\n  }\n\n  return '';\n}\n\n/**\n * Given any object, return a new object having removed all fields whose value was `undefined`.\n * Works recursively on objects and arrays.\n *\n * Attention: This function keeps circular references in the returned object.\n *\n * @deprecated This function is no longer used by the SDK and will be removed in a future major version.\n */\nexport function dropUndefinedKeys<T>(inputValue: T): T {\n  // This map keeps track of what already visited nodes map to.\n  // Our Set - based memoBuilder doesn't work here because we want to the output object to have the same circular\n  // references as the input object.\n  const memoizationMap = new Map<unknown, unknown>();\n\n  // This function just proxies `_dropUndefinedKeys` to keep the `memoBuilder` out of this function's API\n  return _dropUndefinedKeys(inputValue, memoizationMap);\n}\n\nfunction _dropUndefinedKeys<T>(inputValue: T, memoizationMap: Map<unknown, unknown>): T {\n  // Early return for primitive values\n  if (inputValue === null || typeof inputValue !== 'object') {\n    return inputValue;\n  }\n\n  // Check memo map first for all object types\n  const memoVal = memoizationMap.get(inputValue);\n  if (memoVal !== undefined) {\n    return memoVal as T;\n  }\n\n  // handle arrays\n  if (Array.isArray(inputValue)) {\n    const returnValue: unknown[] = [];\n    // Store mapping to handle circular references\n    memoizationMap.set(inputValue, returnValue);\n\n    inputValue.forEach(value => {\n      returnValue.push(_dropUndefinedKeys(value, memoizationMap));\n    });\n\n    return returnValue as unknown as T;\n  }\n\n  if (isPojo(inputValue)) {\n    const returnValue: { [key: string]: unknown } = {};\n    // Store mapping to handle circular references\n    memoizationMap.set(inputValue, returnValue);\n\n    const keys = Object.keys(inputValue);\n\n    keys.forEach(key => {\n      const val = inputValue[key];\n      if (val !== undefined) {\n        returnValue[key] = _dropUndefinedKeys(val, memoizationMap);\n      }\n    });\n\n    return returnValue as T;\n  }\n\n  // For other object types, return as is\n  return inputValue;\n}\n\nfunction isPojo(input: unknown): input is Record<string, unknown> {\n  // Plain objects have Object as constructor or no constructor\n  const constructor = (input as object).constructor;\n  return constructor === Object || constructor === undefined;\n}\n\n/**\n * Ensure that something is an object.\n *\n * Turns `undefined` and `null` into `String`s and all other primitives into instances of their respective wrapper\n * classes (String, Boolean, Number, etc.). Acts as the identity function on non-primitives.\n *\n * @param wat The subject of the objectification\n * @returns A version of `wat` which can safely be used with `Object` class methods\n */\nexport function objectify(wat: unknown): typeof Object {\n  let objectified;\n  switch (true) {\n    // this will catch both undefined and null\n    case wat == undefined:\n      objectified = new String(wat);\n      break;\n\n    // Though symbols and bigints do have wrapper classes (`Symbol` and `BigInt`, respectively), for whatever reason\n    // those classes don't have constructors which can be used with the `new` keyword. We therefore need to cast each as\n    // an object in order to wrap it.\n    case typeof wat === 'symbol' || typeof wat === 'bigint':\n      objectified = Object(wat);\n      break;\n\n    // this will catch the remaining primitives: `String`, `Number`, and `Boolean`\n    case isPrimitive(wat):\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      objectified = new (wat as any).constructor(wat);\n      break;\n\n    // by process of elimination, at this point we know that `wat` must already be an object\n    default:\n      objectified = wat;\n      break;\n  }\n  return objectified;\n}\n"],"names":["DEBUG_BUILD","logger","isError","isEvent","isInstanceOf","isElement","htmlTreeAsString","truncate","isPrimitive"],"mappings":";;;;;;;;AAAA,qDAAA,GAQA;;;;;;;;;;;;CAYA,GACO,SAAS,KAAK,MAAM,EAA0B,IAAI,EAAU,kBAAkB;IACnF,IAAI,CAAA,CAAE,QAAQ,MAAM,GAAG;QACrB;IACJ;IAEA,8FAAA;IACE,MAAM,WAAW,MAAM,CAAC,KAAI;IAE5B,IAAI,OAAO,aAAa,YAAY;QAClC;IACJ;IAEE,MAAM,UAAU,mBAAmB;IAErC,0GAAA;IACA,kFAAA;IACE,IAAI,OAAO,YAAY,YAAY;QACjC,oBAAoB,SAAS;IACjC;IAEE,IAAI;QACF,MAAM,CAAC,KAAI,GAAI;IACnB,EAAI,OAAM;QACNA,WAAAA,WAAA,IAAeC,OAAAA,MAAM,CAAC,GAAG,CAAC,CAAC,0BAA0B,EAAE,KAAK,WAAW,CAAC,EAAE;IAC9E;AACA;AAEA;;;;;;CAMA,GACO,SAAS,yBAAyB,GAAG,EAAU,IAAI,EAAU,KAAK;IACvE,IAAI;QACF,OAAO,cAAc,CAAC,KAAK,MAAM;YACrC,gGAAA;YACM,OAAO;YACP,UAAU;YACV,cAAc;QACpB;IACA,EAAI,OAAO,KAAK;QACZD,WAAAA,WAAA,IAAeC,OAAAA,MAAM,CAAC,GAAG,CAAC,CAAC,uCAAuC,EAAE,KAAK,WAAW,CAAC,EAAE;IAC3F;AACA;AAEA;;;;;;CAMA,GACO,SAAS,oBAAoB,OAAO,EAAmB,QAAQ;IACpE,IAAI;QACF,MAAM,QAAQ,SAAS,SAAA,IAAa,CAAA;QACpC,QAAQ,SAAA,GAAY,SAAS,SAAA,GAAY;QACzC,yBAAyB,SAAS,uBAAuB;IAC7D,EAAI,OAAO,KAAK,CAAA,EAAC,+BAAA;AACjB;AAEA;;;;;;CAMA,GACA,wDAAA;AACO,SAAS,oBAAwC,IAAI;IAC1D,OAAO,KAAK,mBAAmB;AACjC;AAEA;;;;;;;CAOA,GACO,SAAS,qBAAwB,KAAK;IAe3C,IAAIC,GAAAA,OAAO,CAAC,QAAQ;QAClB,OAAO;YACL,SAAS,MAAM,OAAO;YACtB,MAAM,MAAM,IAAI;YAChB,OAAO,MAAM,KAAK;YAClB,GAAG,iBAAiB,MAAM;QAChC;IACA,OAAS,IAAIC,GAAAA,OAAO,CAAC,QAAQ;QACzB,MAAM,SAMF;YACF,MAAM,MAAM,IAAI;YAChB,QAAQ,qBAAqB,MAAM,MAAM;YACzC,eAAe,qBAAqB,MAAM,aAAa;YACvD,GAAG,iBAAiB,MAAM;QAChC;QAEI,IAAI,OAAO,gBAAgB,eAAeC,GAAAA,YAAY,CAAC,OAAO,cAAc;YAC1E,OAAO,MAAA,GAAS,MAAM,MAAM;QAClC;QAEI,OAAO;IACX,OAAS;QACL,OAAO;IACX;AACA;AAEA,uEAAA,GACA,SAAS,qBAAqB,MAAM;IAClC,IAAI;QACF,OAAOC,GAAAA,SAAS,CAAC,UAAUC,QAAAA,gBAAgB,CAAC,UAAU,OAAO,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC;IACzF,EAAI,OAAO,KAAK;QACZ,OAAO;IACX;AACA;AAEA,mDAAA,GACA,SAAS,iBAAiB,GAAG;IAC3B,IAAI,OAAO,QAAQ,YAAY,QAAQ,MAAM;QAC3C,MAAM,iBAA6C,CAAA;QACnD,IAAK,MAAM,YAAY,IAAK;YAC1B,IAAI,OAAO,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,WAAW;gBACvD,cAAc,CAAC,SAAQ,GAAI,AAAC,GAAA,CAAgC,SAAS;YAC7E;QACA;QACI,OAAO;IACX,OAAS;QACL,OAAO,CAAA;IACX;AACA;AAEA;;;;CAIA,GACO,SAAS,+BAA+B,SAAS,EAA2B,YAAoB,EAAE;IACvG,MAAM,OAAO,OAAO,IAAI,CAAC,qBAAqB;IAC9C,KAAK,IAAI;IAET,MAAM,WAAW,IAAI,CAAC,EAAE;IAExB,IAAI,CAAC,UAAU;QACb,OAAO;IACX;IAEE,IAAI,SAAS,MAAA,IAAU,WAAW;QAChC,OAAOC,OAAAA,QAAQ,CAAC,UAAU;IAC9B;IAEE,IAAK,IAAI,eAAe,KAAK,MAAM,EAAE,eAAe,GAAG,eAAgB;QACrE,MAAM,aAAa,KAAK,KAAK,CAAC,GAAG,cAAc,IAAI,CAAC;QACpD,IAAI,WAAW,MAAA,GAAS,WAAW;YACjC;QACN;QACI,IAAI,iBAAiB,KAAK,MAAM,EAAE;YAChC,OAAO;QACb;QACI,OAAOA,OAAAA,QAAQ,CAAC,YAAY;IAChC;IAEE,OAAO;AACT;AAEA;;;;;;;CAOA,GACO,SAAS,kBAAqB,UAAU;IAC/C,6DAAA;IACA,+GAAA;IACA,kCAAA;IACE,MAAM,iBAAiB,IAAI;IAE7B,uGAAA;IACE,OAAO,mBAAmB,YAAY;AACxC;AAEA,SAAS,mBAAsB,UAAU,EAAK,cAAc;IAC5D,oCAAA;IACE,IAAI,eAAe,QAAQ,OAAO,eAAe,UAAU;QACzD,OAAO;IACX;IAEA,4CAAA;IACE,MAAM,UAAU,eAAe,GAAG,CAAC;IACnC,IAAI,YAAY,WAAW;QACzB,OAAO;IACX;IAEA,gBAAA;IACE,IAAI,MAAM,OAAO,CAAC,aAAa;QAC7B,MAAM,cAAyB,EAAE;QACrC,8CAAA;QACI,eAAe,GAAG,CAAC,YAAY;QAE/B,WAAW,OAAO,CAAC,CAAA;YACjB,YAAY,IAAI,CAAC,mBAAmB,OAAO;QACjD;QAEI,OAAO;IACX;IAEE,IAAI,OAAO,aAAa;QACtB,MAAM,cAA0C,CAAA;QACpD,8CAAA;QACI,eAAe,GAAG,CAAC,YAAY;QAE/B,MAAM,OAAO,OAAO,IAAI,CAAC;QAEzB,KAAK,OAAO,CAAC,CAAA;YACX,MAAM,MAAM,UAAU,CAAC,IAAI;YAC3B,IAAI,QAAQ,WAAW;gBACrB,WAAW,CAAC,IAAG,GAAI,mBAAmB,KAAK;YACnD;QACA;QAEI,OAAO;IACX;IAEA,uCAAA;IACE,OAAO;AACT;AAEA,SAAS,OAAO,KAAK;IACrB,6DAAA;IACE,MAAM,cAAc,AAAC,MAAiB,WAAW;IACjD,OAAO,gBAAgB,UAAU,gBAAgB;AACnD;AAEA;;;;;;;;CAQA,GACO,SAAS,UAAU,GAAG;IAC3B,IAAI;IACJ,OAAQ;QACV,0CAAA;QACI,KAAK,OAAO;YACV,cAAc,IAAI,OAAO;YACzB;QAEN,gHAAA;QACA,oHAAA;QACA,iCAAA;QACI,KAAK,OAAO,QAAQ,YAAY,OAAO,QAAQ;YAC7C,cAAc,OAAO;YACrB;QAEN,8EAAA;QACI,KAAKC,GAAAA,WAAW,CAAC;YACrB,sEAAA;YACM,cAAc,IAAI,AAAC,IAAY,WAAW,CAAC;YAC3C;QAEN,wFAAA;QACI;YACE,cAAc;YACd;IACN;IACE,OAAO;AACT"}},
    {"offset": {"line": 1166, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1170, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/utils/misc.ts"],"sourcesContent":["import type { Event } from '../types-hoist/event';\nimport type { Exception } from '../types-hoist/exception';\nimport type { Mechanism } from '../types-hoist/mechanism';\nimport type { StackFrame } from '../types-hoist/stackframe';\nimport { addNonEnumerableProperty } from './object';\nimport { snipLine } from './string';\nimport { GLOBAL_OBJ } from './worldwide';\n\ninterface CryptoInternal {\n  getRandomValues(array: Uint8Array): Uint8Array;\n  randomUUID?(): string;\n}\n\n/** An interface for common properties on global */\ninterface CryptoGlobal {\n  msCrypto?: CryptoInternal;\n  crypto?: CryptoInternal;\n}\n\nfunction getCrypto(): CryptoInternal | undefined {\n  const gbl = GLOBAL_OBJ as typeof GLOBAL_OBJ & CryptoGlobal;\n  return gbl.crypto || gbl.msCrypto;\n}\n\n/**\n * UUID4 generator\n * @param crypto Object that provides the crypto API.\n * @returns string Generated UUID4.\n */\nexport function uuid4(crypto = getCrypto()): string {\n  let getRandomByte = (): number => Math.random() * 16;\n  try {\n    if (crypto?.randomUUID) {\n      return crypto.randomUUID().replace(/-/g, '');\n    }\n    if (crypto?.getRandomValues) {\n      getRandomByte = () => {\n        // crypto.getRandomValues might return undefined instead of the typed array\n        // in old Chromium versions (e.g. 23.0.1235.0 (151422))\n        // However, `typedArray` is still filled in-place.\n        // @see https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues#typedarray\n        const typedArray = new Uint8Array(1);\n        crypto.getRandomValues(typedArray);\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return typedArray[0]!;\n      };\n    }\n  } catch (_) {\n    // some runtimes can crash invoking crypto\n    // https://github.com/getsentry/sentry-javascript/issues/8935\n  }\n\n  // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523\n  // Concatenating the following numbers as strings results in '10000000100040008000100000000000'\n  return (([1e7] as unknown as string) + 1e3 + 4e3 + 8e3 + 1e11).replace(/[018]/g, c =>\n    // eslint-disable-next-line no-bitwise\n    ((c as unknown as number) ^ ((getRandomByte() & 15) >> ((c as unknown as number) / 4))).toString(16),\n  );\n}\n\nfunction getFirstException(event: Event): Exception | undefined {\n  return event.exception?.values?.[0];\n}\n\n/**\n * Extracts either message or type+value from an event that can be used for user-facing logs\n * @returns event's description\n */\nexport function getEventDescription(event: Event): string {\n  const { message, event_id: eventId } = event;\n  if (message) {\n    return message;\n  }\n\n  const firstException = getFirstException(event);\n  if (firstException) {\n    if (firstException.type && firstException.value) {\n      return `${firstException.type}: ${firstException.value}`;\n    }\n    return firstException.type || firstException.value || eventId || '<unknown>';\n  }\n  return eventId || '<unknown>';\n}\n\n/**\n * Adds exception values, type and value to an synthetic Exception.\n * @param event The event to modify.\n * @param value Value of the exception.\n * @param type Type of the exception.\n * @hidden\n */\nexport function addExceptionTypeValue(event: Event, value?: string, type?: string): void {\n  const exception = (event.exception = event.exception || {});\n  const values = (exception.values = exception.values || []);\n  const firstException = (values[0] = values[0] || {});\n  if (!firstException.value) {\n    firstException.value = value || '';\n  }\n  if (!firstException.type) {\n    firstException.type = type || 'Error';\n  }\n}\n\n/**\n * Adds exception mechanism data to a given event. Uses defaults if the second parameter is not passed.\n *\n * @param event The event to modify.\n * @param newMechanism Mechanism data to add to the event.\n * @hidden\n */\nexport function addExceptionMechanism(event: Event, newMechanism?: Partial<Mechanism>): void {\n  const firstException = getFirstException(event);\n  if (!firstException) {\n    return;\n  }\n\n  const defaultMechanism = { type: 'generic', handled: true };\n  const currentMechanism = firstException.mechanism;\n  firstException.mechanism = { ...defaultMechanism, ...currentMechanism, ...newMechanism };\n\n  if (newMechanism && 'data' in newMechanism) {\n    const mergedData = { ...currentMechanism?.data, ...newMechanism.data };\n    firstException.mechanism.data = mergedData;\n  }\n}\n\n// https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string\nconst SEMVER_REGEXP =\n  /^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$/;\n\n/**\n * Represents Semantic Versioning object\n */\ninterface SemVer {\n  major?: number;\n  minor?: number;\n  patch?: number;\n  prerelease?: string;\n  buildmetadata?: string;\n}\n\nfunction _parseInt(input: string | undefined): number {\n  return parseInt(input || '', 10);\n}\n\n/**\n * Parses input into a SemVer interface\n * @param input string representation of a semver version\n */\nexport function parseSemver(input: string): SemVer {\n  const match = input.match(SEMVER_REGEXP) || [];\n  const major = _parseInt(match[1]);\n  const minor = _parseInt(match[2]);\n  const patch = _parseInt(match[3]);\n  return {\n    buildmetadata: match[5],\n    major: isNaN(major) ? undefined : major,\n    minor: isNaN(minor) ? undefined : minor,\n    patch: isNaN(patch) ? undefined : patch,\n    prerelease: match[4],\n  };\n}\n\n/**\n * This function adds context (pre/post/line) lines to the provided frame\n *\n * @param lines string[] containing all lines\n * @param frame StackFrame that will be mutated\n * @param linesOfContext number of context lines we want to add pre/post\n */\nexport function addContextToFrame(lines: string[], frame: StackFrame, linesOfContext: number = 5): void {\n  // When there is no line number in the frame, attaching context is nonsensical and will even break grouping\n  if (frame.lineno === undefined) {\n    return;\n  }\n\n  const maxLines = lines.length;\n  const sourceLine = Math.max(Math.min(maxLines - 1, frame.lineno - 1), 0);\n\n  frame.pre_context = lines\n    .slice(Math.max(0, sourceLine - linesOfContext), sourceLine)\n    .map((line: string) => snipLine(line, 0));\n\n  // We guard here to ensure this is not larger than the existing number of lines\n  const lineIndex = Math.min(maxLines - 1, sourceLine);\n\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  frame.context_line = snipLine(lines[lineIndex]!, frame.colno || 0);\n\n  frame.post_context = lines\n    .slice(Math.min(sourceLine + 1, maxLines), sourceLine + 1 + linesOfContext)\n    .map((line: string) => snipLine(line, 0));\n}\n\n/**\n * Checks whether or not we've already captured the given exception (note: not an identical exception - the very object\n * in question), and marks it captured if not.\n *\n * This is useful because it's possible for an error to get captured by more than one mechanism. After we intercept and\n * record an error, we rethrow it (assuming we've intercepted it before it's reached the top-level global handlers), so\n * that we don't interfere with whatever effects the error might have had were the SDK not there. At that point, because\n * the error has been rethrown, it's possible for it to bubble up to some other code we've instrumented. If it's not\n * caught after that, it will bubble all the way up to the global handlers (which of course we also instrument). This\n * function helps us ensure that even if we encounter the same error more than once, we only record it the first time we\n * see it.\n *\n * Note: It will ignore primitives (always return `false` and not mark them as seen), as properties can't be set on\n * them. {@link: Object.objectify} can be used on exceptions to convert any that are primitives into their equivalent\n * object wrapper forms so that this check will always work. However, because we need to flag the exact object which\n * will get rethrown, and because that rethrowing happens outside of the event processing pipeline, the objectification\n * must be done before the exception captured.\n *\n * @param A thrown exception to check or flag as having been seen\n * @returns `true` if the exception has already been captured, `false` if not (with the side effect of marking it seen)\n */\nexport function checkOrSetAlreadyCaught(exception: unknown): boolean {\n  if (isAlreadyCaptured(exception)) {\n    return true;\n  }\n\n  try {\n    // set it this way rather than by assignment so that it's not ennumerable and therefore isn't recorded by the\n    // `ExtraErrorData` integration\n    addNonEnumerableProperty(exception as { [key: string]: unknown }, '__sentry_captured__', true);\n  } catch (err) {\n    // `exception` is a primitive, so we can't mark it seen\n  }\n\n  return false;\n}\n\nfunction isAlreadyCaptured(exception: unknown): boolean | void {\n  try {\n    return (exception as { __sentry_captured__?: boolean }).__sentry_captured__;\n  } catch {} // eslint-disable-line no-empty\n}\n"],"names":["GLOBAL_OBJ","snipLine","addNonEnumerableProperty"],"mappings":"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"}},
    {"offset": {"line": 1367, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1371, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/utils/time.ts"],"sourcesContent":["import { GLOBAL_OBJ } from './worldwide';\n\nconst ONE_SECOND_IN_MS = 1000;\n\n/**\n * A partial definition of the [Performance Web API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Performance}\n * for accessing a high-resolution monotonic clock.\n */\ninterface Performance {\n  /**\n   * The millisecond timestamp at which measurement began, measured in Unix time.\n   */\n  timeOrigin: number;\n  /**\n   * Returns the current millisecond timestamp, where 0 represents the start of measurement.\n   */\n  now(): number;\n}\n\n/**\n * Returns a timestamp in seconds since the UNIX epoch using the Date API.\n */\nexport function dateTimestampInSeconds(): number {\n  return Date.now() / ONE_SECOND_IN_MS;\n}\n\n/**\n * Returns a wrapper around the native Performance API browser implementation, or undefined for browsers that do not\n * support the API.\n *\n * Wrapping the native API works around differences in behavior from different browsers.\n */\nfunction createUnixTimestampInSecondsFunc(): () => number {\n  const { performance } = GLOBAL_OBJ as typeof GLOBAL_OBJ & { performance?: Performance };\n  if (!performance?.now) {\n    return dateTimestampInSeconds;\n  }\n\n  // Some browser and environments don't have a timeOrigin, so we fallback to\n  // using Date.now() to compute the starting time.\n  const approxStartingTimeOrigin = Date.now() - performance.now();\n  const timeOrigin = performance.timeOrigin == undefined ? approxStartingTimeOrigin : performance.timeOrigin;\n\n  // performance.now() is a monotonic clock, which means it starts at 0 when the process begins. To get the current\n  // wall clock time (actual UNIX timestamp), we need to add the starting time origin and the current time elapsed.\n  //\n  // TODO: This does not account for the case where the monotonic clock that powers performance.now() drifts from the\n  // wall clock time, which causes the returned timestamp to be inaccurate. We should investigate how to detect and\n  // correct for this.\n  // See: https://github.com/getsentry/sentry-javascript/issues/2590\n  // See: https://github.com/mdn/content/issues/4713\n  // See: https://dev.to/noamr/when-a-millisecond-is-not-a-millisecond-3h6\n  return () => {\n    return (timeOrigin + performance.now()) / ONE_SECOND_IN_MS;\n  };\n}\n\n/**\n * Returns a timestamp in seconds since the UNIX epoch using either the Performance or Date APIs, depending on the\n * availability of the Performance API.\n *\n * BUG: Note that because of how browsers implement the Performance API, the clock might stop when the computer is\n * asleep. This creates a skew between `dateTimestampInSeconds` and `timestampInSeconds`. The\n * skew can grow to arbitrary amounts like days, weeks or months.\n * See https://github.com/getsentry/sentry-javascript/issues/2590.\n */\nexport const timestampInSeconds = createUnixTimestampInSecondsFunc();\n\n/**\n * Cached result of getBrowserTimeOrigin.\n */\nlet cachedTimeOrigin: [number | undefined, string] | undefined;\n\n/**\n * Gets the time origin and the mode used to determine it.\n */\nfunction getBrowserTimeOrigin(): [number | undefined, string] {\n  // Unfortunately browsers may report an inaccurate time origin data, through either performance.timeOrigin or\n  // performance.timing.navigationStart, which results in poor results in performance data. We only treat time origin\n  // data as reliable if they are within a reasonable threshold of the current time.\n\n  const { performance } = GLOBAL_OBJ as typeof GLOBAL_OBJ & Window;\n  if (!performance?.now) {\n    return [undefined, 'none'];\n  }\n\n  const threshold = 3600 * 1000;\n  const performanceNow = performance.now();\n  const dateNow = Date.now();\n\n  // if timeOrigin isn't available set delta to threshold so it isn't used\n  const timeOriginDelta = performance.timeOrigin\n    ? Math.abs(performance.timeOrigin + performanceNow - dateNow)\n    : threshold;\n  const timeOriginIsReliable = timeOriginDelta < threshold;\n\n  // While performance.timing.navigationStart is deprecated in favor of performance.timeOrigin, performance.timeOrigin\n  // is not as widely supported. Namely, performance.timeOrigin is undefined in Safari as of writing.\n  // Also as of writing, performance.timing is not available in Web Workers in mainstream browsers, so it is not always\n  // a valid fallback. In the absence of an initial time provided by the browser, fallback to the current time from the\n  // Date API.\n  // eslint-disable-next-line deprecation/deprecation\n  const navigationStart = performance.timing?.navigationStart;\n  const hasNavigationStart = typeof navigationStart === 'number';\n  // if navigationStart isn't available set delta to threshold so it isn't used\n  const navigationStartDelta = hasNavigationStart ? Math.abs(navigationStart + performanceNow - dateNow) : threshold;\n  const navigationStartIsReliable = navigationStartDelta < threshold;\n\n  if (timeOriginIsReliable || navigationStartIsReliable) {\n    // Use the more reliable time origin\n    if (timeOriginDelta <= navigationStartDelta) {\n      return [performance.timeOrigin, 'timeOrigin'];\n    } else {\n      return [navigationStart, 'navigationStart'];\n    }\n  }\n\n  // Either both timeOrigin and navigationStart are skewed or neither is available, fallback to Date.\n  return [dateNow, 'dateNow'];\n}\n\n/**\n * The number of milliseconds since the UNIX epoch. This value is only usable in a browser, and only when the\n * performance API is available.\n */\nexport function browserPerformanceTimeOrigin(): number | undefined {\n  if (!cachedTimeOrigin) {\n    cachedTimeOrigin = getBrowserTimeOrigin();\n  }\n\n  return cachedTimeOrigin[0];\n}\n"],"names":["GLOBAL_OBJ"],"mappings":";;;;AAEA,MAAM,mBAAmB;AAEzB;;;CAGA,GAYA;;CAEA,GACO,SAAS;IACd,OAAO,KAAK,GAAG,KAAK;AACtB;AAEA;;;;;CAKA,GACA,SAAS;IACP,MAAM,EAAE,WAAA,EAAY,GAAIA,UAAAA,UAAA;IACxB,IAAI,CAAC,aAAa,KAAK;QACrB,OAAO;IACX;IAEA,2EAAA;IACA,iDAAA;IACE,MAAM,2BAA2B,KAAK,GAAG,KAAK,YAAY,GAAG;IAC7D,MAAM,aAAa,YAAY,UAAA,IAAc,YAAY,2BAA2B,YAAY,UAAU;IAE5G,iHAAA;IACA,iHAAA;IACA,EAAA;IACA,mHAAA;IACA,iHAAA;IACA,oBAAA;IACA,kEAAA;IACA,kDAAA;IACA,wEAAA;IACE,OAAO;QACL,OAAO,CAAC,aAAa,YAAY,GAAG,EAAE,IAAI;IAC9C;AACA;AAEA;;;;;;;;CAQA,GACO,MAAM,qBAAqB;AAElC;;CAEA,GACA,IAAI;AAEJ;;CAEA,GACA,SAAS;IACT,6GAAA;IACA,mHAAA;IACA,kFAAA;IAEE,MAAM,EAAE,WAAA,EAAY,GAAIA,UAAAA,UAAA;IACxB,IAAI,CAAC,aAAa,KAAK;QACrB,OAAO;YAAC;YAAW;SAAO;IAC9B;IAEE,MAAM,YAAY,OAAO;IACzB,MAAM,iBAAiB,YAAY,GAAG;IACtC,MAAM,UAAU,KAAK,GAAG;IAE1B,wEAAA;IACE,MAAM,kBAAkB,YAAY,UAAA,GAChC,KAAK,GAAG,CAAC,YAAY,UAAA,GAAa,iBAAiB,WACnD;IACJ,MAAM,uBAAuB,kBAAkB;IAEjD,oHAAA;IACA,mGAAA;IACA,qHAAA;IACA,qHAAA;IACA,YAAA;IACA,mDAAA;IACE,MAAM,kBAAkB,YAAY,MAAM,EAAE;IAC5C,MAAM,qBAAqB,OAAO,oBAAoB;IACxD,6EAAA;IACE,MAAM,uBAAuB,qBAAqB,KAAK,GAAG,CAAC,kBAAkB,iBAAiB,WAAW;IACzG,MAAM,4BAA4B,uBAAuB;IAEzD,IAAI,wBAAwB,2BAA2B;QACzD,oCAAA;QACI,IAAI,mBAAmB,sBAAsB;YAC3C,OAAO;gBAAC,YAAY,UAAU;gBAAE;aAAa;QACnD,OAAW;YACL,OAAO;gBAAC;gBAAiB;aAAkB;QACjD;IACA;IAEA,mGAAA;IACE,OAAO;QAAC;QAAS;KAAU;AAC7B;AAEA;;;CAGA,GACO,SAAS;IACd,IAAI,CAAC,kBAAkB;QACrB,mBAAmB;IACvB;IAEE,OAAO,gBAAgB,CAAC,EAAE;AAC5B"}},
    {"offset": {"line": 1485, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1489, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/session.ts"],"sourcesContent":["import type { SerializedSession, Session, SessionContext, SessionStatus } from './types-hoist/session';\nimport { uuid4 } from './utils/misc';\nimport { timestampInSeconds } from './utils/time';\n\n/**\n * Creates a new `Session` object by setting certain default parameters. If optional @param context\n * is passed, the passed properties are applied to the session object.\n *\n * @param context (optional) additional properties to be applied to the returned session object\n *\n * @returns a new `Session` object\n */\nexport function makeSession(context?: Omit<SessionContext, 'started' | 'status'>): Session {\n  // Both timestamp and started are in seconds since the UNIX epoch.\n  const startingTime = timestampInSeconds();\n\n  const session: Session = {\n    sid: uuid4(),\n    init: true,\n    timestamp: startingTime,\n    started: startingTime,\n    duration: 0,\n    status: 'ok',\n    errors: 0,\n    ignoreDuration: false,\n    toJSON: () => sessionToJSON(session),\n  };\n\n  if (context) {\n    updateSession(session, context);\n  }\n\n  return session;\n}\n\n/**\n * Updates a session object with the properties passed in the context.\n *\n * Note that this function mutates the passed object and returns void.\n * (Had to do this instead of returning a new and updated session because closing and sending a session\n * makes an update to the session after it was passed to the sending logic.\n * @see Client.captureSession )\n *\n * @param session the `Session` to update\n * @param context the `SessionContext` holding the properties that should be updated in @param session\n */\n// eslint-disable-next-line complexity\nexport function updateSession(session: Session, context: SessionContext = {}): void {\n  if (context.user) {\n    if (!session.ipAddress && context.user.ip_address) {\n      session.ipAddress = context.user.ip_address;\n    }\n\n    if (!session.did && !context.did) {\n      session.did = context.user.id || context.user.email || context.user.username;\n    }\n  }\n\n  session.timestamp = context.timestamp || timestampInSeconds();\n\n  if (context.abnormal_mechanism) {\n    session.abnormal_mechanism = context.abnormal_mechanism;\n  }\n\n  if (context.ignoreDuration) {\n    session.ignoreDuration = context.ignoreDuration;\n  }\n  if (context.sid) {\n    // Good enough uuid validation. — Kamil\n    session.sid = context.sid.length === 32 ? context.sid : uuid4();\n  }\n  if (context.init !== undefined) {\n    session.init = context.init;\n  }\n  if (!session.did && context.did) {\n    session.did = `${context.did}`;\n  }\n  if (typeof context.started === 'number') {\n    session.started = context.started;\n  }\n  if (session.ignoreDuration) {\n    session.duration = undefined;\n  } else if (typeof context.duration === 'number') {\n    session.duration = context.duration;\n  } else {\n    const duration = session.timestamp - session.started;\n    session.duration = duration >= 0 ? duration : 0;\n  }\n  if (context.release) {\n    session.release = context.release;\n  }\n  if (context.environment) {\n    session.environment = context.environment;\n  }\n  if (!session.ipAddress && context.ipAddress) {\n    session.ipAddress = context.ipAddress;\n  }\n  if (!session.userAgent && context.userAgent) {\n    session.userAgent = context.userAgent;\n  }\n  if (typeof context.errors === 'number') {\n    session.errors = context.errors;\n  }\n  if (context.status) {\n    session.status = context.status;\n  }\n}\n\n/**\n * Closes a session by setting its status and updating the session object with it.\n * Internally calls `updateSession` to update the passed session object.\n *\n * Note that this function mutates the passed session (@see updateSession for explanation).\n *\n * @param session the `Session` object to be closed\n * @param status the `SessionStatus` with which the session was closed. If you don't pass a status,\n *               this function will keep the previously set status, unless it was `'ok'` in which case\n *               it is changed to `'exited'`.\n */\nexport function closeSession(session: Session, status?: Exclude<SessionStatus, 'ok'>): void {\n  let context = {};\n  if (status) {\n    context = { status };\n  } else if (session.status === 'ok') {\n    context = { status: 'exited' };\n  }\n\n  updateSession(session, context);\n}\n\n/**\n * Serializes a passed session object to a JSON object with a slightly different structure.\n * This is necessary because the Sentry backend requires a slightly different schema of a session\n * than the one the JS SDKs use internally.\n *\n * @param session the session to be converted\n *\n * @returns a JSON object of the passed session\n */\nfunction sessionToJSON(session: Session): SerializedSession {\n  return {\n    sid: `${session.sid}`,\n    init: session.init,\n    // Make sure that sec is converted to ms for date constructor\n    started: new Date(session.started * 1000).toISOString(),\n    timestamp: new Date(session.timestamp * 1000).toISOString(),\n    status: session.status,\n    errors: session.errors,\n    did: typeof session.did === 'number' || typeof session.did === 'string' ? `${session.did}` : undefined,\n    duration: session.duration,\n    abnormal_mechanism: session.abnormal_mechanism,\n    attrs: {\n      release: session.release,\n      environment: session.environment,\n      ip_address: session.ipAddress,\n      user_agent: session.userAgent,\n    },\n  };\n}\n"],"names":["timestampInSeconds","uuid4"],"mappings":"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"}},
    {"offset": {"line": 1641, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1645, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/utils/merge.ts"],"sourcesContent":["/**\n * Shallow merge two objects.\n * Does not mutate the passed in objects.\n * Undefined/empty values in the merge object will overwrite existing values.\n *\n * By default, this merges 2 levels deep.\n */\nexport function merge<T>(initialObj: T, mergeObj: T, levels = 2): T {\n  // If the merge value is not an object, or we have no merge levels left,\n  // we just set the value to the merge value\n  if (!mergeObj || typeof mergeObj !== 'object' || levels <= 0) {\n    return mergeObj;\n  }\n\n  // If the merge object is an empty object, and the initial object is not undefined, we return the initial object\n  if (initialObj && Object.keys(mergeObj).length === 0) {\n    return initialObj;\n  }\n\n  // Clone object\n  const output = { ...initialObj };\n\n  // Merge values into output, resursively\n  for (const key in mergeObj) {\n    if (Object.prototype.hasOwnProperty.call(mergeObj, key)) {\n      output[key] = merge(output[key], mergeObj[key], levels - 1);\n    }\n  }\n\n  return output;\n}\n"],"names":[],"mappings":";;;AAAA;;;;;;CAMA,GACO,SAAS,MAAS,UAAU,EAAK,QAAQ,EAAK,SAAS,CAAC;IAC/D,wEAAA;IACA,2CAAA;IACE,IAAI,CAAC,YAAY,OAAO,aAAa,YAAY,UAAU,GAAG;QAC5D,OAAO;IACX;IAEA,gHAAA;IACE,IAAI,cAAc,OAAO,IAAI,CAAC,UAAU,MAAA,KAAW,GAAG;QACpD,OAAO;IACX;IAEA,eAAA;IACE,MAAM,SAAS;QAAE,GAAG,UAAA;IAAA;IAEtB,wCAAA;IACE,IAAK,MAAM,OAAO,SAAU;QAC1B,IAAI,OAAO,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,UAAU,MAAM;YACvD,MAAM,CAAC,IAAG,GAAI,MAAM,MAAM,CAAC,IAAI,EAAE,QAAQ,CAAC,IAAI,EAAE,SAAS;QAC/D;IACA;IAEE,OAAO;AACT"}},
    {"offset": {"line": 1677, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1681, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/utils/propagationContext.ts"],"sourcesContent":["import { uuid4 } from './misc';\n\n/**\n * Generate a random, valid trace ID.\n */\nexport function generateTraceId(): string {\n  return uuid4();\n}\n\n/**\n * Generate a random, valid span ID.\n */\nexport function generateSpanId(): string {\n  return uuid4().substring(16);\n}\n"],"names":["uuid4"],"mappings":";;;;AAEA;;CAEA,GACO,SAAS;IACd,OAAOA,KAAAA,KAAK;AACd;AAEA;;CAEA,GACO,SAAS;IACd,OAAOA,KAAAA,KAAK,GAAG,SAAS,CAAC;AAC3B"}},
    {"offset": {"line": 1697, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1701, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/utils/spanOnScope.ts"],"sourcesContent":["import type { Scope } from '../scope';\nimport type { Span } from '../types-hoist/span';\nimport { addNonEnumerableProperty } from '../utils/object';\n\nconst SCOPE_SPAN_FIELD = '_sentrySpan';\n\ntype ScopeWithMaybeSpan = Scope & {\n  [SCOPE_SPAN_FIELD]?: Span;\n};\n\n/**\n * Set the active span for a given scope.\n * NOTE: This should NOT be used directly, but is only used internally by the trace methods.\n */\nexport function _setSpanForScope(scope: Scope, span: Span | undefined): void {\n  if (span) {\n    addNonEnumerableProperty(scope as ScopeWithMaybeSpan, SCOPE_SPAN_FIELD, span);\n  } else {\n    // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n    delete (scope as ScopeWithMaybeSpan)[SCOPE_SPAN_FIELD];\n  }\n}\n\n/**\n * Get the active span for a given scope.\n * NOTE: This should NOT be used directly, but is only used internally by the trace methods.\n */\nexport function _getSpanForScope(scope: ScopeWithMaybeSpan): Span | undefined {\n  return scope[SCOPE_SPAN_FIELD];\n}\n"],"names":["addNonEnumerableProperty"],"mappings":";;;;AAIA,MAAM,mBAAmB;AAMzB;;;CAGA,GACO,SAAS,iBAAiB,KAAK,EAAS,IAAI;IACjD,IAAI,MAAM;QACRA,OAAAA,wBAAwB,CAAC,OAA6B,kBAAkB;IAC5E,OAAS;QACT,gEAAA;QACI,OAAO,AAAC,KAAA,CAA6B,iBAAiB;IAC1D;AACA;AAEA;;;CAGA,GACO,SAAS,iBAAiB,KAAK;IACpC,OAAO,KAAK,CAAC,iBAAiB;AAChC"}},
    {"offset": {"line": 1725, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1729, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/scope.ts"],"sourcesContent":["/* eslint-disable max-lines */\nimport type { Client } from './client';\nimport { updateSession } from './session';\nimport type { Attachment } from './types-hoist/attachment';\nimport type { Breadcrumb } from './types-hoist/breadcrumb';\nimport type { Context, Contexts } from './types-hoist/context';\nimport type { DynamicSamplingContext } from './types-hoist/envelope';\nimport type { Event, EventHint } from './types-hoist/event';\nimport type { EventProcessor } from './types-hoist/eventprocessor';\nimport type { Extra, Extras } from './types-hoist/extra';\nimport type { Primitive } from './types-hoist/misc';\nimport type { RequestEventData } from './types-hoist/request';\nimport type { Session } from './types-hoist/session';\nimport type { SeverityLevel } from './types-hoist/severity';\nimport type { Span } from './types-hoist/span';\nimport type { PropagationContext } from './types-hoist/tracing';\nimport type { User } from './types-hoist/user';\nimport { isPlainObject } from './utils/is';\nimport { logger } from './utils/logger';\nimport { merge } from './utils/merge';\nimport { uuid4 } from './utils/misc';\nimport { generateTraceId } from './utils/propagationContext';\nimport { _getSpanForScope, _setSpanForScope } from './utils/spanOnScope';\nimport { truncate } from './utils/string';\nimport { dateTimestampInSeconds } from './utils/time';\n\n/**\n * Default value for maximum number of breadcrumbs added to an event.\n */\nconst DEFAULT_MAX_BREADCRUMBS = 100;\n\n/**\n * A context to be used for capturing an event.\n * This can either be a Scope, or a partial ScopeContext,\n * or a callback that receives the current scope and returns a new scope to use.\n */\nexport type CaptureContext = Scope | Partial<ScopeContext> | ((scope: Scope) => Scope);\n\n/**\n * Data that can be converted to a Scope.\n */\nexport interface ScopeContext {\n  user: User;\n  level: SeverityLevel;\n  extra: Extras;\n  contexts: Contexts;\n  tags: { [key: string]: Primitive };\n  fingerprint: string[];\n  propagationContext: PropagationContext;\n}\n\nexport interface SdkProcessingMetadata {\n  [key: string]: unknown;\n  requestSession?: {\n    status: 'ok' | 'errored' | 'crashed';\n  };\n  normalizedRequest?: RequestEventData;\n  dynamicSamplingContext?: Partial<DynamicSamplingContext>;\n  capturedSpanScope?: Scope;\n  capturedSpanIsolationScope?: Scope;\n  spanCountBeforeProcessing?: number;\n  ipAddress?: string;\n}\n\n/**\n * Normalized data of the Scope, ready to be used.\n */\nexport interface ScopeData {\n  eventProcessors: EventProcessor[];\n  breadcrumbs: Breadcrumb[];\n  user: User;\n  tags: { [key: string]: Primitive };\n  extra: Extras;\n  contexts: Contexts;\n  attachments: Attachment[];\n  propagationContext: PropagationContext;\n  sdkProcessingMetadata: SdkProcessingMetadata;\n  fingerprint: string[];\n  level?: SeverityLevel;\n  transactionName?: string;\n  span?: Span;\n}\n\n/**\n * Holds additional event information.\n */\nexport class Scope {\n  /** Flag if notifying is happening. */\n  protected _notifyingListeners: boolean;\n\n  /** Callback for client to receive scope changes. */\n  protected _scopeListeners: Array<(scope: Scope) => void>;\n\n  /** Callback list that will be called during event processing. */\n  protected _eventProcessors: EventProcessor[];\n\n  /** Array of breadcrumbs. */\n  protected _breadcrumbs: Breadcrumb[];\n\n  /** User */\n  protected _user: User;\n\n  /** Tags */\n  protected _tags: { [key: string]: Primitive };\n\n  /** Extra */\n  protected _extra: Extras;\n\n  /** Contexts */\n  protected _contexts: Contexts;\n\n  /** Attachments */\n  protected _attachments: Attachment[];\n\n  /** Propagation Context for distributed tracing */\n  protected _propagationContext: PropagationContext;\n\n  /**\n   * A place to stash data which is needed at some point in the SDK's event processing pipeline but which shouldn't get\n   * sent to Sentry\n   */\n  protected _sdkProcessingMetadata: SdkProcessingMetadata;\n\n  /** Fingerprint */\n  protected _fingerprint?: string[];\n\n  /** Severity */\n  protected _level?: SeverityLevel;\n\n  /**\n   * Transaction Name\n   *\n   * IMPORTANT: The transaction name on the scope has nothing to do with root spans/transaction objects.\n   * It's purpose is to assign a transaction to the scope that's added to non-transaction events.\n   */\n  protected _transactionName?: string;\n\n  /** Session */\n  protected _session?: Session;\n\n  /** The client on this scope */\n  protected _client?: Client;\n\n  /** Contains the last event id of a captured event.  */\n  protected _lastEventId?: string;\n\n  // NOTE: Any field which gets added here should get added not only to the constructor but also to the `clone` method.\n\n  public constructor() {\n    this._notifyingListeners = false;\n    this._scopeListeners = [];\n    this._eventProcessors = [];\n    this._breadcrumbs = [];\n    this._attachments = [];\n    this._user = {};\n    this._tags = {};\n    this._extra = {};\n    this._contexts = {};\n    this._sdkProcessingMetadata = {};\n    this._propagationContext = {\n      traceId: generateTraceId(),\n      sampleRand: Math.random(),\n    };\n  }\n\n  /**\n   * Clone all data from this scope into a new scope.\n   */\n  public clone(): Scope {\n    const newScope = new Scope();\n    newScope._breadcrumbs = [...this._breadcrumbs];\n    newScope._tags = { ...this._tags };\n    newScope._extra = { ...this._extra };\n    newScope._contexts = { ...this._contexts };\n    if (this._contexts.flags) {\n      // We need to copy the `values` array so insertions on a cloned scope\n      // won't affect the original array.\n      newScope._contexts.flags = {\n        values: [...this._contexts.flags.values],\n      };\n    }\n\n    newScope._user = this._user;\n    newScope._level = this._level;\n    newScope._session = this._session;\n    newScope._transactionName = this._transactionName;\n    newScope._fingerprint = this._fingerprint;\n    newScope._eventProcessors = [...this._eventProcessors];\n    newScope._attachments = [...this._attachments];\n    newScope._sdkProcessingMetadata = { ...this._sdkProcessingMetadata };\n    newScope._propagationContext = { ...this._propagationContext };\n    newScope._client = this._client;\n    newScope._lastEventId = this._lastEventId;\n\n    _setSpanForScope(newScope, _getSpanForScope(this));\n\n    return newScope;\n  }\n\n  /**\n   * Update the client assigned to this scope.\n   * Note that not every scope will have a client assigned - isolation scopes & the global scope will generally not have a client,\n   * as well as manually created scopes.\n   */\n  public setClient(client: Client | undefined): void {\n    this._client = client;\n  }\n\n  /**\n   * Set the ID of the last captured error event.\n   * This is generally only captured on the isolation scope.\n   */\n  public setLastEventId(lastEventId: string | undefined): void {\n    this._lastEventId = lastEventId;\n  }\n\n  /**\n   * Get the client assigned to this scope.\n   */\n  public getClient<C extends Client>(): C | undefined {\n    return this._client as C | undefined;\n  }\n\n  /**\n   * Get the ID of the last captured error event.\n   * This is generally only available on the isolation scope.\n   */\n  public lastEventId(): string | undefined {\n    return this._lastEventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addScopeListener(callback: (scope: Scope) => void): void {\n    this._scopeListeners.push(callback);\n  }\n\n  /**\n   * Add an event processor that will be called before an event is sent.\n   */\n  public addEventProcessor(callback: EventProcessor): this {\n    this._eventProcessors.push(callback);\n    return this;\n  }\n\n  /**\n   * Set the user for this scope.\n   * Set to `null` to unset the user.\n   */\n  public setUser(user: User | null): this {\n    // If null is passed we want to unset everything, but still define keys,\n    // so that later down in the pipeline any existing values are cleared.\n    this._user = user || {\n      email: undefined,\n      id: undefined,\n      ip_address: undefined,\n      username: undefined,\n    };\n\n    if (this._session) {\n      updateSession(this._session, { user });\n    }\n\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Get the user from this scope.\n   */\n  public getUser(): User | undefined {\n    return this._user;\n  }\n\n  /**\n   * Set an object that will be merged into existing tags on the scope,\n   * and will be sent as tags data with the event.\n   */\n  public setTags(tags: { [key: string]: Primitive }): this {\n    this._tags = {\n      ...this._tags,\n      ...tags,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Set a single tag that will be sent as tags data with the event.\n   */\n  public setTag(key: string, value: Primitive): this {\n    this._tags = { ...this._tags, [key]: value };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Set an object that will be merged into existing extra on the scope,\n   * and will be sent as extra data with the event.\n   */\n  public setExtras(extras: Extras): this {\n    this._extra = {\n      ...this._extra,\n      ...extras,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Set a single key:value extra entry that will be sent as extra data with the event.\n   */\n  public setExtra(key: string, extra: Extra): this {\n    this._extra = { ...this._extra, [key]: extra };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Sets the fingerprint on the scope to send with the events.\n   * @param {string[]} fingerprint Fingerprint to group events in Sentry.\n   */\n  public setFingerprint(fingerprint: string[]): this {\n    this._fingerprint = fingerprint;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Sets the level on the scope for future events.\n   */\n  public setLevel(level: SeverityLevel): this {\n    this._level = level;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Sets the transaction name on the scope so that the name of e.g. taken server route or\n   * the page location is attached to future events.\n   *\n   * IMPORTANT: Calling this function does NOT change the name of the currently active\n   * root span. If you want to change the name of the active root span, use\n   * `Sentry.updateSpanName(rootSpan, 'new name')` instead.\n   *\n   * By default, the SDK updates the scope's transaction name automatically on sensible\n   * occasions, such as a page navigation or when handling a new request on the server.\n   */\n  public setTransactionName(name?: string): this {\n    this._transactionName = name;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Sets context data with the given name.\n   * Data passed as context will be normalized. You can also pass `null` to unset the context.\n   * Note that context data will not be merged - calling `setContext` will overwrite an existing context with the same key.\n   */\n  public setContext(key: string, context: Context | null): this {\n    if (context === null) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._contexts[key];\n    } else {\n      this._contexts[key] = context;\n    }\n\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Set the session for the scope.\n   */\n  public setSession(session?: Session): this {\n    if (!session) {\n      delete this._session;\n    } else {\n      this._session = session;\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Get the session from the scope.\n   */\n  public getSession(): Session | undefined {\n    return this._session;\n  }\n\n  /**\n   * Updates the scope with provided data. Can work in three variations:\n   * - plain object containing updatable attributes\n   * - Scope instance that'll extract the attributes from\n   * - callback function that'll receive the current scope as an argument and allow for modifications\n   */\n  public update(captureContext?: CaptureContext): this {\n    if (!captureContext) {\n      return this;\n    }\n\n    const scopeToMerge = typeof captureContext === 'function' ? captureContext(this) : captureContext;\n\n    const scopeInstance =\n      scopeToMerge instanceof Scope\n        ? scopeToMerge.getScopeData()\n        : isPlainObject(scopeToMerge)\n          ? (captureContext as ScopeContext)\n          : undefined;\n\n    const { tags, extra, user, contexts, level, fingerprint = [], propagationContext } = scopeInstance || {};\n\n    this._tags = { ...this._tags, ...tags };\n    this._extra = { ...this._extra, ...extra };\n    this._contexts = { ...this._contexts, ...contexts };\n\n    if (user && Object.keys(user).length) {\n      this._user = user;\n    }\n\n    if (level) {\n      this._level = level;\n    }\n\n    if (fingerprint.length) {\n      this._fingerprint = fingerprint;\n    }\n\n    if (propagationContext) {\n      this._propagationContext = propagationContext;\n    }\n\n    return this;\n  }\n\n  /**\n   * Clears the current scope and resets its properties.\n   * Note: The client will not be cleared.\n   */\n  public clear(): this {\n    // client is not cleared here on purpose!\n    this._breadcrumbs = [];\n    this._tags = {};\n    this._extra = {};\n    this._user = {};\n    this._contexts = {};\n    this._level = undefined;\n    this._transactionName = undefined;\n    this._fingerprint = undefined;\n    this._session = undefined;\n    _setSpanForScope(this, undefined);\n    this._attachments = [];\n    this.setPropagationContext({ traceId: generateTraceId(), sampleRand: Math.random() });\n\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Adds a breadcrumb to the scope.\n   * By default, the last 100 breadcrumbs are kept.\n   */\n  public addBreadcrumb(breadcrumb: Breadcrumb, maxBreadcrumbs?: number): this {\n    const maxCrumbs = typeof maxBreadcrumbs === 'number' ? maxBreadcrumbs : DEFAULT_MAX_BREADCRUMBS;\n\n    // No data has been changed, so don't notify scope listeners\n    if (maxCrumbs <= 0) {\n      return this;\n    }\n\n    const mergedBreadcrumb: Breadcrumb = {\n      timestamp: dateTimestampInSeconds(),\n      ...breadcrumb,\n      // Breadcrumb messages can theoretically be infinitely large and they're held in memory so we truncate them not to leak (too much) memory\n      message: breadcrumb.message ? truncate(breadcrumb.message, 2048) : breadcrumb.message,\n    };\n\n    this._breadcrumbs.push(mergedBreadcrumb);\n    if (this._breadcrumbs.length > maxCrumbs) {\n      this._breadcrumbs = this._breadcrumbs.slice(-maxCrumbs);\n      this._client?.recordDroppedEvent('buffer_overflow', 'log_item');\n    }\n\n    this._notifyScopeListeners();\n\n    return this;\n  }\n\n  /**\n   * Get the last breadcrumb of the scope.\n   */\n  public getLastBreadcrumb(): Breadcrumb | undefined {\n    return this._breadcrumbs[this._breadcrumbs.length - 1];\n  }\n\n  /**\n   * Clear all breadcrumbs from the scope.\n   */\n  public clearBreadcrumbs(): this {\n    this._breadcrumbs = [];\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Add an attachment to the scope.\n   */\n  public addAttachment(attachment: Attachment): this {\n    this._attachments.push(attachment);\n    return this;\n  }\n\n  /**\n   * Clear all attachments from the scope.\n   */\n  public clearAttachments(): this {\n    this._attachments = [];\n    return this;\n  }\n\n  /**\n   * Get the data of this scope, which should be applied to an event during processing.\n   */\n  public getScopeData(): ScopeData {\n    return {\n      breadcrumbs: this._breadcrumbs,\n      attachments: this._attachments,\n      contexts: this._contexts,\n      tags: this._tags,\n      extra: this._extra,\n      user: this._user,\n      level: this._level,\n      fingerprint: this._fingerprint || [],\n      eventProcessors: this._eventProcessors,\n      propagationContext: this._propagationContext,\n      sdkProcessingMetadata: this._sdkProcessingMetadata,\n      transactionName: this._transactionName,\n      span: _getSpanForScope(this),\n    };\n  }\n\n  /**\n   * Add data which will be accessible during event processing but won't get sent to Sentry.\n   */\n  public setSDKProcessingMetadata(newData: SdkProcessingMetadata): this {\n    this._sdkProcessingMetadata = merge(this._sdkProcessingMetadata, newData, 2);\n    return this;\n  }\n\n  /**\n   * Add propagation context to the scope, used for distributed tracing\n   */\n  public setPropagationContext(context: PropagationContext): this {\n    this._propagationContext = context;\n    return this;\n  }\n\n  /**\n   * Get propagation context from the scope, used for distributed tracing\n   */\n  public getPropagationContext(): PropagationContext {\n    return this._propagationContext;\n  }\n\n  /**\n   * Capture an exception for this scope.\n   *\n   * @returns {string} The id of the captured Sentry event.\n   */\n  public captureException(exception: unknown, hint?: EventHint): string {\n    const eventId = hint?.event_id || uuid4();\n\n    if (!this._client) {\n      logger.warn('No client configured on scope - will not capture exception!');\n      return eventId;\n    }\n\n    const syntheticException = new Error('Sentry syntheticException');\n\n    this._client.captureException(\n      exception,\n      {\n        originalException: exception,\n        syntheticException,\n        ...hint,\n        event_id: eventId,\n      },\n      this,\n    );\n\n    return eventId;\n  }\n\n  /**\n   * Capture a message for this scope.\n   *\n   * @returns {string} The id of the captured message.\n   */\n  public captureMessage(message: string, level?: SeverityLevel, hint?: EventHint): string {\n    const eventId = hint?.event_id || uuid4();\n\n    if (!this._client) {\n      logger.warn('No client configured on scope - will not capture message!');\n      return eventId;\n    }\n\n    const syntheticException = new Error(message);\n\n    this._client.captureMessage(\n      message,\n      level,\n      {\n        originalException: message,\n        syntheticException,\n        ...hint,\n        event_id: eventId,\n      },\n      this,\n    );\n\n    return eventId;\n  }\n\n  /**\n   * Capture a Sentry event for this scope.\n   *\n   * @returns {string} The id of the captured event.\n   */\n  public captureEvent(event: Event, hint?: EventHint): string {\n    const eventId = hint?.event_id || uuid4();\n\n    if (!this._client) {\n      logger.warn('No client configured on scope - will not capture event!');\n      return eventId;\n    }\n\n    this._client.captureEvent(event, { ...hint, event_id: eventId }, this);\n\n    return eventId;\n  }\n\n  /**\n   * This will be called on every set call.\n   */\n  protected _notifyScopeListeners(): void {\n    // We need this check for this._notifyingListeners to be able to work on scope during updates\n    // If this check is not here we'll produce endless recursion when something is done with the scope\n    // during the callback.\n    if (!this._notifyingListeners) {\n      this._notifyingListeners = true;\n      this._scopeListeners.forEach(callback => {\n        callback(this);\n      });\n      this._notifyingListeners = false;\n    }\n  }\n}\n"],"names":["generateTraceId","_setSpanForScope","_getSpanForScope","updateSession","isPlainObject","dateTimestampInSeconds","truncate","merge","uuid4","logger"],"mappings":"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"}},
    {"offset": {"line": 2199, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2203, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/defaultScopes.ts"],"sourcesContent":["import { getGlobalSingleton } from './carrier';\nimport { Scope } from './scope';\n\n/** Get the default current scope. */\nexport function getDefaultCurrentScope(): Scope {\n  return getGlobalSingleton('defaultCurrentScope', () => new Scope());\n}\n\n/** Get the default isolation scope. */\nexport function getDefaultIsolationScope(): Scope {\n  return getGlobalSingleton('defaultIsolationScope', () => new Scope());\n}\n"],"names":["getGlobalSingleton","Scope"],"mappings":";;;;;AAGA,mCAAA,GACO,SAAS;IACd,OAAOA,QAAAA,kBAAkB,CAAC,uBAAuB,IAAM,IAAIC,MAAAA,KAAK;AAClE;AAEA,qCAAA,GACO,SAAS;IACd,OAAOD,QAAAA,kBAAkB,CAAC,yBAAyB,IAAM,IAAIC,MAAAA,KAAK;AACpE"}},
    {"offset": {"line": 2216, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2220, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/asyncContext/stackStrategy.ts"],"sourcesContent":["import type { Client } from '../client';\nimport { getDefaultCurrentScope, getDefaultIsolationScope } from '../defaultScopes';\nimport { Scope } from '../scope';\nimport { isThenable } from '../utils/is';\nimport { getMainCarrier, getSentryCarrier } from './../carrier';\nimport type { AsyncContextStrategy } from './types';\n\ninterface Layer {\n  client?: Client;\n  scope: Scope;\n}\n\n/**\n * This is an object that holds a stack of scopes.\n */\nexport class AsyncContextStack {\n  private readonly _stack: [Layer, ...Layer[]];\n  private _isolationScope: Scope;\n\n  public constructor(scope?: Scope, isolationScope?: Scope) {\n    let assignedScope;\n    if (!scope) {\n      assignedScope = new Scope();\n    } else {\n      assignedScope = scope;\n    }\n\n    let assignedIsolationScope;\n    if (!isolationScope) {\n      assignedIsolationScope = new Scope();\n    } else {\n      assignedIsolationScope = isolationScope;\n    }\n\n    // scope stack for domains or the process\n    this._stack = [{ scope: assignedScope }];\n    this._isolationScope = assignedIsolationScope;\n  }\n\n  /**\n   * Fork a scope for the stack.\n   */\n  public withScope<T>(callback: (scope: Scope) => T): T {\n    const scope = this._pushScope();\n\n    let maybePromiseResult: T;\n    try {\n      maybePromiseResult = callback(scope);\n    } catch (e) {\n      this._popScope();\n      throw e;\n    }\n\n    if (isThenable(maybePromiseResult)) {\n      // @ts-expect-error - isThenable returns the wrong type\n      return maybePromiseResult.then(\n        res => {\n          this._popScope();\n          return res;\n        },\n        e => {\n          this._popScope();\n          throw e;\n        },\n      );\n    }\n\n    this._popScope();\n    return maybePromiseResult;\n  }\n\n  /**\n   * Get the client of the stack.\n   */\n  public getClient<C extends Client>(): C | undefined {\n    return this.getStackTop().client as C;\n  }\n\n  /**\n   * Returns the scope of the top stack.\n   */\n  public getScope(): Scope {\n    return this.getStackTop().scope;\n  }\n\n  /**\n   * Get the isolation scope for the stack.\n   */\n  public getIsolationScope(): Scope {\n    return this._isolationScope;\n  }\n\n  /**\n   * Returns the topmost scope layer in the order domain > local > process.\n   */\n  public getStackTop(): Layer {\n    return this._stack[this._stack.length - 1] as Layer;\n  }\n\n  /**\n   * Push a scope to the stack.\n   */\n  private _pushScope(): Scope {\n    // We want to clone the content of prev scope\n    const scope = this.getScope().clone();\n    this._stack.push({\n      client: this.getClient(),\n      scope,\n    });\n    return scope;\n  }\n\n  /**\n   * Pop a scope from the stack.\n   */\n  private _popScope(): boolean {\n    if (this._stack.length <= 1) return false;\n    return !!this._stack.pop();\n  }\n}\n\n/**\n * Get the global async context stack.\n * This will be removed during the v8 cycle and is only here to make migration easier.\n */\nfunction getAsyncContextStack(): AsyncContextStack {\n  const registry = getMainCarrier();\n  const sentry = getSentryCarrier(registry);\n\n  return (sentry.stack = sentry.stack || new AsyncContextStack(getDefaultCurrentScope(), getDefaultIsolationScope()));\n}\n\nfunction withScope<T>(callback: (scope: Scope) => T): T {\n  return getAsyncContextStack().withScope(callback);\n}\n\nfunction withSetScope<T>(scope: Scope, callback: (scope: Scope) => T): T {\n  const stack = getAsyncContextStack() as AsyncContextStack;\n  return stack.withScope(() => {\n    stack.getStackTop().scope = scope;\n    return callback(scope);\n  });\n}\n\nfunction withIsolationScope<T>(callback: (isolationScope: Scope) => T): T {\n  return getAsyncContextStack().withScope(() => {\n    return callback(getAsyncContextStack().getIsolationScope());\n  });\n}\n\n/**\n * Get the stack-based async context strategy.\n */\nexport function getStackAsyncContextStrategy(): AsyncContextStrategy {\n  return {\n    withIsolationScope,\n    withScope,\n    withSetScope,\n    withSetIsolationScope: <T>(_isolationScope: Scope, callback: (isolationScope: Scope) => T) => {\n      return withIsolationScope(callback);\n    },\n    getCurrentScope: () => getAsyncContextStack().getScope(),\n    getIsolationScope: () => getAsyncContextStack().getIsolationScope(),\n  };\n}\n"],"names":["scope","Scope","isThenable","getMainCarrier","getSentryCarrier","getDefaultCurrentScope","getDefaultIsolationScope"],"mappings":";;;;;;;AAYA;;CAEA,GACO,MAAM;IAIJ,YAAYA,OAAK,EAAU,cAAc,CAAU;QACxD,IAAI;QACJ,IAAI,CAACA,SAAO;YACV,gBAAgB,IAAIC,MAAAA,KAAK;QAC/B,OAAW;YACL,gBAAgBD;QACtB;QAEI,IAAI;QACJ,IAAI,CAAC,gBAAgB;YACnB,yBAAyB,IAAIC,MAAAA,KAAK;QACxC,OAAW;YACL,yBAAyB;QAC/B;QAEA,yCAAA;QACI,IAAI,CAAC,MAAA,GAAS;YAAC;gBAAE,OAAO;YAAA;SAAgB;QACxC,IAAI,CAAC,eAAA,GAAkB;IAC3B;IAEA;;GAEA,GACS,UAAa,QAAQ,EAA0B;QACpD,MAAM,QAAQ,IAAI,CAAC,UAAU;QAE7B,IAAI;QACJ,IAAI;YACF,qBAAqB,SAAS;QACpC,EAAM,OAAO,GAAG;YACV,IAAI,CAAC,SAAS;YACd,MAAM;QACZ;QAEI,IAAIC,GAAAA,UAAU,CAAC,qBAAqB;YACxC,uDAAA;YACM,OAAO,mBAAmB,IAAI,CAC5B,CAAA;gBACE,IAAI,CAAC,SAAS;gBACd,OAAO;YACjB,GACQ,CAAA;gBACE,IAAI,CAAC,SAAS;gBACd,MAAM;YAChB;QAEA;QAEI,IAAI,CAAC,SAAS;QACd,OAAO;IACX;IAEA;;GAEA,GACS,YAA6C;QAClD,OAAO,IAAI,CAAC,WAAW,GAAG,MAAA;IAC9B;IAEA;;GAEA,GACS,WAAkB;QACvB,OAAO,IAAI,CAAC,WAAW,GAAG,KAAK;IACnC;IAEA;;GAEA,GACS,oBAA2B;QAChC,OAAO,IAAI,CAAC,eAAe;IAC/B;IAEA;;GAEA,GACS,cAAqB;QAC1B,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAA,GAAS,EAAC;IAC7C;IAEA;;GAEA,GACU,aAAoB;QAC9B,6CAAA;QACI,MAAM,QAAQ,IAAI,CAAC,QAAQ,GAAG,KAAK;QACnC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;YACf,QAAQ,IAAI,CAAC,SAAS;YACtB;QACN;QACI,OAAO;IACX;IAEA;;GAEA,GACU,YAAqB;QAC3B,IAAI,IAAI,CAAC,MAAM,CAAC,MAAA,IAAU,GAAG,OAAO;QACpC,OAAO,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG;IAC5B;AACA;AAEA;;;CAGA,GACA,SAAS;IACP,MAAM,WAAWC,QAAAA,cAAc;IAC/B,MAAM,SAASC,QAAAA,gBAAgB,CAAC;IAEhC,OAAQ,OAAO,KAAA,GAAQ,OAAO,KAAA,IAAS,IAAI,kBAAkBC,cAAAA,sBAAsB,IAAIC,cAAAA,wBAAwB;AACjH;AAEA,SAAS,UAAa,QAAQ;IAC5B,OAAO,uBAAuB,SAAS,CAAC;AAC1C;AAEA,SAAS,aAAgB,KAAK,EAAS,QAAQ;IAC7C,MAAM,QAAQ;IACd,OAAO,MAAM,SAAS,CAAC;QACrB,MAAM,WAAW,GAAG,KAAA,GAAQ;QAC5B,OAAO,SAAS;IACpB;AACA;AAEA,SAAS,mBAAsB,QAAQ;IACrC,OAAO,uBAAuB,SAAS,CAAC;QACtC,OAAO,SAAS,uBAAuB,iBAAiB;IAC5D;AACA;AAEA;;CAEA,GACO,SAAS;IACd,OAAO;QACL;QACA;QACA;QACA,uBAAuB,CAAI,iBAAwB;YACjD,OAAO,mBAAmB;QAChC;QACI,iBAAiB,IAAM,uBAAuB,QAAQ;QACtD,mBAAmB,IAAM,uBAAuB,iBAAiB;IACrE;AACA"}},
    {"offset": {"line": 2352, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2356, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/asyncContext/index.ts"],"sourcesContent":["import type { Carrier } from './../carrier';\nimport { getMainCarrier, getSentryCarrier } from './../carrier';\nimport { getStackAsyncContextStrategy } from './stackStrategy';\nimport type { AsyncContextStrategy } from './types';\n\n/**\n * @private Private API with no semver guarantees!\n *\n * Sets the global async context strategy\n */\nexport function setAsyncContextStrategy(strategy: AsyncContextStrategy | undefined): void {\n  // Get main carrier (global for every environment)\n  const registry = getMainCarrier();\n  const sentry = getSentryCarrier(registry);\n  sentry.acs = strategy;\n}\n\n/**\n * Get the current async context strategy.\n * If none has been setup, the default will be used.\n */\nexport function getAsyncContextStrategy(carrier: Carrier): AsyncContextStrategy {\n  const sentry = getSentryCarrier(carrier);\n\n  if (sentry.acs) {\n    return sentry.acs;\n  }\n\n  // Otherwise, use the default one (stack)\n  return getStackAsyncContextStrategy();\n}\n"],"names":["getMainCarrier","getSentryCarrier","carrier","getStackAsyncContextStrategy"],"mappings":";;;;;AAKA;;;;CAIA,GACO,SAAS,wBAAwB,QAAQ;IAChD,kDAAA;IACE,MAAM,WAAWA,QAAAA,cAAc;IAC/B,MAAM,SAASC,QAAAA,gBAAgB,CAAC;IAChC,OAAO,GAAA,GAAM;AACf;AAEA;;;CAGA,GACO,SAAS,wBAAwBC,SAAO;IAC7C,MAAM,SAASD,QAAAA,gBAAgB,CAACC;IAEhC,IAAI,OAAO,GAAG,EAAE;QACd,OAAO,OAAO,GAAG;IACrB;IAEA,yCAAA;IACE,OAAOC,cAAAA,4BAA4B;AACrC"}},
    {"offset": {"line": 2384, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2388, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/currentScopes.ts"],"sourcesContent":["import { getAsyncContextStrategy } from './asyncContext';\nimport { getGlobalSingleton, getMainCarrier } from './carrier';\nimport type { Client } from './client';\nimport { Scope } from './scope';\nimport type { TraceContext } from './types-hoist/context';\nimport { generateSpanId } from './utils/propagationContext';\n\n/**\n * Get the currently active scope.\n */\nexport function getCurrentScope(): Scope {\n  const carrier = getMainCarrier();\n  const acs = getAsyncContextStrategy(carrier);\n  return acs.getCurrentScope();\n}\n\n/**\n * Get the currently active isolation scope.\n * The isolation scope is active for the current execution context.\n */\nexport function getIsolationScope(): Scope {\n  const carrier = getMainCarrier();\n  const acs = getAsyncContextStrategy(carrier);\n  return acs.getIsolationScope();\n}\n\n/**\n * Get the global scope.\n * This scope is applied to _all_ events.\n */\nexport function getGlobalScope(): Scope {\n  return getGlobalSingleton('globalScope', () => new Scope());\n}\n\n/**\n * Creates a new scope with and executes the given operation within.\n * The scope is automatically removed once the operation\n * finishes or throws.\n */\nexport function withScope<T>(callback: (scope: Scope) => T): T;\n/**\n * Set the given scope as the active scope in the callback.\n */\nexport function withScope<T>(scope: Scope | undefined, callback: (scope: Scope) => T): T;\n/**\n * Either creates a new active scope, or sets the given scope as active scope in the given callback.\n */\nexport function withScope<T>(\n  ...rest: [callback: (scope: Scope) => T] | [scope: Scope | undefined, callback: (scope: Scope) => T]\n): T {\n  const carrier = getMainCarrier();\n  const acs = getAsyncContextStrategy(carrier);\n\n  // If a scope is defined, we want to make this the active scope instead of the default one\n  if (rest.length === 2) {\n    const [scope, callback] = rest;\n\n    if (!scope) {\n      return acs.withScope(callback);\n    }\n\n    return acs.withSetScope(scope, callback);\n  }\n\n  return acs.withScope(rest[0]);\n}\n\n/**\n * Attempts to fork the current isolation scope and the current scope based on the current async context strategy. If no\n * async context strategy is set, the isolation scope and the current scope will not be forked (this is currently the\n * case, for example, in the browser).\n *\n * Usage of this function in environments without async context strategy is discouraged and may lead to unexpected behaviour.\n *\n * This function is intended for Sentry SDK and SDK integration development. It is not recommended to be used in \"normal\"\n * applications directly because it comes with pitfalls. Use at your own risk!\n */\nexport function withIsolationScope<T>(callback: (isolationScope: Scope) => T): T;\n/**\n * Set the provided isolation scope as active in the given callback. If no\n * async context strategy is set, the isolation scope and the current scope will not be forked (this is currently the\n * case, for example, in the browser).\n *\n * Usage of this function in environments without async context strategy is discouraged and may lead to unexpected behaviour.\n *\n * This function is intended for Sentry SDK and SDK integration development. It is not recommended to be used in \"normal\"\n * applications directly because it comes with pitfalls. Use at your own risk!\n *\n * If you pass in `undefined` as a scope, it will fork a new isolation scope, the same as if no scope is passed.\n */\nexport function withIsolationScope<T>(isolationScope: Scope | undefined, callback: (isolationScope: Scope) => T): T;\n/**\n * Either creates a new active isolation scope, or sets the given isolation scope as active scope in the given callback.\n */\nexport function withIsolationScope<T>(\n  ...rest:\n    | [callback: (isolationScope: Scope) => T]\n    | [isolationScope: Scope | undefined, callback: (isolationScope: Scope) => T]\n): T {\n  const carrier = getMainCarrier();\n  const acs = getAsyncContextStrategy(carrier);\n\n  // If a scope is defined, we want to make this the active scope instead of the default one\n  if (rest.length === 2) {\n    const [isolationScope, callback] = rest;\n\n    if (!isolationScope) {\n      return acs.withIsolationScope(callback);\n    }\n\n    return acs.withSetIsolationScope(isolationScope, callback);\n  }\n\n  return acs.withIsolationScope(rest[0]);\n}\n\n/**\n * Get the currently active client.\n */\nexport function getClient<C extends Client>(): C | undefined {\n  return getCurrentScope().getClient<C>();\n}\n\n/**\n * Get a trace context for the given scope.\n */\nexport function getTraceContextFromScope(scope: Scope): TraceContext {\n  const propagationContext = scope.getPropagationContext();\n\n  const { traceId, parentSpanId, propagationSpanId } = propagationContext;\n\n  const traceContext: TraceContext = {\n    trace_id: traceId,\n    span_id: propagationSpanId || generateSpanId(),\n  };\n\n  if (parentSpanId) {\n    traceContext.parent_span_id = parentSpanId;\n  }\n\n  return traceContext;\n}\n"],"names":["carrier","getMainCarrier","getAsyncContextStrategy","getGlobalSingleton","Scope","propagationContext","generateSpanId"],"mappings":";;;;;;;AAOA;;CAEA,GACO,SAAS;IACd,MAAMA,YAAUC,QAAAA,cAAc;IAC9B,MAAM,MAAMC,MAAAA,uBAAuB,CAACF;IACpC,OAAO,IAAI,eAAe;AAC5B;AAEA;;;CAGA,GACO,SAAS;IACd,MAAMA,YAAUC,QAAAA,cAAc;IAC9B,MAAM,MAAMC,MAAAA,uBAAuB,CAACF;IACpC,OAAO,IAAI,iBAAiB;AAC9B;AAEA;;;CAGA,GACO,SAAS;IACd,OAAOG,QAAAA,kBAAkB,CAAC,eAAe,IAAM,IAAIC,MAAAA,KAAK;AAC1D;AAEA;;;;CAIA,GAMA;;CAEA,GACO,SAAS,UACd,GAAG,IAAA;IAEH,MAAMJ,YAAUC,QAAAA,cAAc;IAC9B,MAAM,MAAMC,MAAAA,uBAAuB,CAACF;IAEtC,0FAAA;IACE,IAAI,KAAK,MAAA,KAAW,GAAG;QACrB,MAAM,CAAC,OAAO,SAAQ,GAAI;QAE1B,IAAI,CAAC,OAAO;YACV,OAAO,IAAI,SAAS,CAAC;QAC3B;QAEI,OAAO,IAAI,YAAY,CAAC,OAAO;IACnC;IAEE,OAAO,IAAI,SAAS,CAAC,IAAI,CAAC,EAAE;AAC9B;AAEA;;;;;;;;;CASA,GAeA;;CAEA,GACO,SAAS,mBACd,GAAG,IAAA;IAIH,MAAMA,YAAUC,QAAAA,cAAc;IAC9B,MAAM,MAAMC,MAAAA,uBAAuB,CAACF;IAEtC,0FAAA;IACE,IAAI,KAAK,MAAA,KAAW,GAAG;QACrB,MAAM,CAAC,gBAAgB,SAAQ,GAAI;QAEnC,IAAI,CAAC,gBAAgB;YACnB,OAAO,IAAI,kBAAkB,CAAC;QACpC;QAEI,OAAO,IAAI,qBAAqB,CAAC,gBAAgB;IACrD;IAEE,OAAO,IAAI,kBAAkB,CAAC,IAAI,CAAC,EAAE;AACvC;AAEA;;CAEA,GACO,SAAS;IACd,OAAO,kBAAkB,SAAS;AACpC;AAEA;;CAEA,GACO,SAAS,yBAAyB,KAAK;IAC5C,MAAMK,uBAAqB,MAAM,qBAAqB;IAEtD,MAAM,EAAE,OAAO,EAAE,YAAY,EAAE,iBAAA,EAAkB,GAAIA;IAErD,MAAM,eAA6B;QACjC,UAAU;QACV,SAAS,qBAAqBC,mBAAAA,cAAc;IAChD;IAEE,IAAI,cAAc;QAChB,aAAa,cAAA,GAAiB;IAClC;IAEE,OAAO;AACT"}},
    {"offset": {"line": 2485, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2489, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/semanticAttributes.ts"],"sourcesContent":["/**\n * Use this attribute to represent the source of a span.\n * Should be one of: custom, url, route, view, component, task, unknown\n *\n */\nexport const SEMANTIC_ATTRIBUTE_SENTRY_SOURCE = 'sentry.source';\n\n/**\n * Attributes that holds the sample rate that was locally applied to a span.\n * If this attribute is not defined, it means that the span inherited a sampling decision.\n *\n * NOTE: Is only defined on root spans.\n */\nexport const SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE = 'sentry.sample_rate';\n\n/**\n * Attribute holding the sample rate of the previous trace.\n * This is used to sample consistently across subsequent traces in the browser SDK.\n *\n * Note: Only defined on root spans, if opted into consistent sampling\n */\nexport const SEMANTIC_ATTRIBUTE_SENTRY_PREVIOUS_TRACE_SAMPLE_RATE = 'sentry.previous_trace_sample_rate';\n\n/**\n * Use this attribute to represent the operation of a span.\n */\nexport const SEMANTIC_ATTRIBUTE_SENTRY_OP = 'sentry.op';\n\n/**\n * Use this attribute to represent the origin of a span.\n */\nexport const SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN = 'sentry.origin';\n\n/** The reason why an idle span finished. */\nexport const SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON = 'sentry.idle_span_finish_reason';\n\n/** The unit of a measurement, which may be stored as a TimedEvent. */\nexport const SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT = 'sentry.measurement_unit';\n\n/** The value of a measurement, which may be stored as a TimedEvent. */\nexport const SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE = 'sentry.measurement_value';\n\n/**\n * A custom span name set by users guaranteed to be taken over any automatically\n * inferred name. This attribute is removed before the span is sent.\n *\n * @internal only meant for internal SDK usage\n * @hidden\n */\nexport const SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME = 'sentry.custom_span_name';\n\n/**\n * The id of the profile that this span occurred in.\n */\nexport const SEMANTIC_ATTRIBUTE_PROFILE_ID = 'sentry.profile_id';\n\nexport const SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME = 'sentry.exclusive_time';\n\nexport const SEMANTIC_ATTRIBUTE_CACHE_HIT = 'cache.hit';\n\nexport const SEMANTIC_ATTRIBUTE_CACHE_KEY = 'cache.key';\n\nexport const SEMANTIC_ATTRIBUTE_CACHE_ITEM_SIZE = 'cache.item_size';\n\n/** TODO: Remove these once we update to latest semantic conventions */\nexport const SEMANTIC_ATTRIBUTE_HTTP_REQUEST_METHOD = 'http.request.method';\nexport const SEMANTIC_ATTRIBUTE_URL_FULL = 'url.full';\n\n/**\n * A span link attribute to mark the link as a special span link.\n *\n * Known values:\n * - `previous_trace`: The span links to the frontend root span of the previous trace.\n * - `next_trace`: The span links to the frontend root span of the next trace. (Not set by the SDK)\n *\n * Other values may be set as appropriate.\n * @see https://develop.sentry.dev/sdk/telemetry/traces/span-links/#link-types\n */\nexport const SEMANTIC_LINK_ATTRIBUTE_LINK_TYPE = 'sentry.link.type';\n"],"names":[],"mappings":";;;AAAA;;;;CAIA,GACO,MAAM,mCAAmC;AAEhD;;;;;CAKA,GACO,MAAM,wCAAwC;AAErD;;;;;CAKA,GACO,MAAM,uDAAuD;AAEpE;;CAEA,GACO,MAAM,+BAA+B;AAE5C;;CAEA,GACO,MAAM,mCAAmC;AAEhD,0CAAA,GACO,MAAM,oDAAoD;AAEjE,oEAAA,GACO,MAAM,6CAA6C;AAE1D,qEAAA,GACO,MAAM,8CAA8C;AAE3D;;;;;;CAMA,GACO,MAAM,6CAA6C;AAE1D;;CAEA,GACO,MAAM,gCAAgC;AAEtC,MAAM,oCAAoC;AAE1C,MAAM,+BAA+B;AAErC,MAAM,+BAA+B;AAErC,MAAM,qCAAqC;AAElD,qEAAA,GACO,MAAM,yCAAyC;AAC/C,MAAM,8BAA8B;AAE3C;;;;;;;;;CASA,GACO,MAAM,oCAAoC"}},
    {"offset": {"line": 2561, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2565, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/tracing/spanstatus.ts"],"sourcesContent":["import type { Span } from '../types-hoist/span';\nimport type { SpanStatus } from '../types-hoist/spanStatus';\n\nexport const SPAN_STATUS_UNSET = 0;\nexport const SPAN_STATUS_OK = 1;\nexport const SPAN_STATUS_ERROR = 2;\n\n/**\n * Converts a HTTP status code into a sentry status with a message.\n *\n * @param httpStatus The HTTP response status code.\n * @returns The span status or unknown_error.\n */\n// https://develop.sentry.dev/sdk/event-payloads/span/\nexport function getSpanStatusFromHttpCode(httpStatus: number): SpanStatus {\n  if (httpStatus < 400 && httpStatus >= 100) {\n    return { code: SPAN_STATUS_OK };\n  }\n\n  if (httpStatus >= 400 && httpStatus < 500) {\n    switch (httpStatus) {\n      case 401:\n        return { code: SPAN_STATUS_ERROR, message: 'unauthenticated' };\n      case 403:\n        return { code: SPAN_STATUS_ERROR, message: 'permission_denied' };\n      case 404:\n        return { code: SPAN_STATUS_ERROR, message: 'not_found' };\n      case 409:\n        return { code: SPAN_STATUS_ERROR, message: 'already_exists' };\n      case 413:\n        return { code: SPAN_STATUS_ERROR, message: 'failed_precondition' };\n      case 429:\n        return { code: SPAN_STATUS_ERROR, message: 'resource_exhausted' };\n      case 499:\n        return { code: SPAN_STATUS_ERROR, message: 'cancelled' };\n      default:\n        return { code: SPAN_STATUS_ERROR, message: 'invalid_argument' };\n    }\n  }\n\n  if (httpStatus >= 500 && httpStatus < 600) {\n    switch (httpStatus) {\n      case 501:\n        return { code: SPAN_STATUS_ERROR, message: 'unimplemented' };\n      case 503:\n        return { code: SPAN_STATUS_ERROR, message: 'unavailable' };\n      case 504:\n        return { code: SPAN_STATUS_ERROR, message: 'deadline_exceeded' };\n      default:\n        return { code: SPAN_STATUS_ERROR, message: 'internal_error' };\n    }\n  }\n\n  return { code: SPAN_STATUS_ERROR, message: 'unknown_error' };\n}\n\n/**\n * Sets the Http status attributes on the current span based on the http code.\n * Additionally, the span's status is updated, depending on the http code.\n */\nexport function setHttpStatus(span: Span, httpStatus: number): void {\n  span.setAttribute('http.response.status_code', httpStatus);\n\n  const spanStatus = getSpanStatusFromHttpCode(httpStatus);\n  if (spanStatus.message !== 'unknown_error') {\n    span.setStatus(spanStatus);\n  }\n}\n"],"names":[],"mappings":";;;AAGO,MAAM,oBAAoB;AAC1B,MAAM,iBAAiB;AACvB,MAAM,oBAAoB;AAEjC;;;;;CAKA,GACA,sDAAA;AACO,SAAS,0BAA0B,UAAU;IAClD,IAAI,aAAa,OAAO,cAAc,KAAK;QACzC,OAAO;YAAE,MAAM;QAAA;IACnB;IAEE,IAAI,cAAc,OAAO,aAAa,KAAK;QACzC,OAAQ;YACN,KAAK;gBACH,OAAO;oBAAE,MAAM;oBAAmB,SAAS;gBAAA;YAC7C,KAAK;gBACH,OAAO;oBAAE,MAAM;oBAAmB,SAAS;gBAAA;YAC7C,KAAK;gBACH,OAAO;oBAAE,MAAM;oBAAmB,SAAS;gBAAA;YAC7C,KAAK;gBACH,OAAO;oBAAE,MAAM;oBAAmB,SAAS;gBAAA;YAC7C,KAAK;gBACH,OAAO;oBAAE,MAAM;oBAAmB,SAAS;gBAAA;YAC7C,KAAK;gBACH,OAAO;oBAAE,MAAM;oBAAmB,SAAS;gBAAA;YAC7C,KAAK;gBACH,OAAO;oBAAE,MAAM;oBAAmB,SAAS;gBAAA;YAC7C;gBACE,OAAO;oBAAE,MAAM;oBAAmB,SAAS;gBAAA;QACnD;IACA;IAEE,IAAI,cAAc,OAAO,aAAa,KAAK;QACzC,OAAQ;YACN,KAAK;gBACH,OAAO;oBAAE,MAAM;oBAAmB,SAAS;gBAAA;YAC7C,KAAK;gBACH,OAAO;oBAAE,MAAM;oBAAmB,SAAS;gBAAA;YAC7C,KAAK;gBACH,OAAO;oBAAE,MAAM;oBAAmB,SAAS;gBAAA;YAC7C;gBACE,OAAO;oBAAE,MAAM;oBAAmB,SAAS;gBAAA;QACnD;IACA;IAEE,OAAO;QAAE,MAAM;QAAmB,SAAS;IAAA;AAC7C;AAEA;;;CAGA,GACO,SAAS,cAAc,IAAI,EAAQ,UAAU;IAClD,KAAK,YAAY,CAAC,6BAA6B;IAE/C,MAAM,aAAa,0BAA0B;IAC7C,IAAI,WAAW,OAAA,KAAY,iBAAiB;QAC1C,KAAK,SAAS,CAAC;IACnB;AACA"}},
    {"offset": {"line": 2671, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2675, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/tracing/utils.ts"],"sourcesContent":["import type { Scope } from '../scope';\nimport type { Span } from '../types-hoist/span';\nimport { addNonEnumerableProperty } from '../utils/object';\n\nconst SCOPE_ON_START_SPAN_FIELD = '_sentryScope';\nconst ISOLATION_SCOPE_ON_START_SPAN_FIELD = '_sentryIsolationScope';\n\ntype SpanWithScopes = Span & {\n  [SCOPE_ON_START_SPAN_FIELD]?: Scope;\n  [ISOLATION_SCOPE_ON_START_SPAN_FIELD]?: Scope;\n};\n\n/** Store the scope & isolation scope for a span, which can the be used when it is finished. */\nexport function setCapturedScopesOnSpan(span: Span | undefined, scope: Scope, isolationScope: Scope): void {\n  if (span) {\n    addNonEnumerableProperty(span, ISOLATION_SCOPE_ON_START_SPAN_FIELD, isolationScope);\n    addNonEnumerableProperty(span, SCOPE_ON_START_SPAN_FIELD, scope);\n  }\n}\n\n/**\n * Grabs the scope and isolation scope off a span that were active when the span was started.\n */\nexport function getCapturedScopesOnSpan(span: Span): { scope?: Scope; isolationScope?: Scope } {\n  return {\n    scope: (span as SpanWithScopes)[SCOPE_ON_START_SPAN_FIELD],\n    isolationScope: (span as SpanWithScopes)[ISOLATION_SCOPE_ON_START_SPAN_FIELD],\n  };\n}\n"],"names":["addNonEnumerableProperty"],"mappings":";;;;AAIA,MAAM,4BAA4B;AAClC,MAAM,sCAAsC;AAO5C,6FAAA,GACO,SAAS,wBAAwB,IAAI,EAAoB,KAAK,EAAS,cAAc;IAC1F,IAAI,MAAM;QACRA,OAAAA,wBAAwB,CAAC,MAAM,qCAAqC;QACpEA,OAAAA,wBAAwB,CAAC,MAAM,2BAA2B;IAC9D;AACA;AAEA;;CAEA,GACO,SAAS,wBAAwB,IAAI;IAC1C,OAAO;QACL,OAAO,AAAC,IAAA,CAAwB,0BAA0B;QAC1D,gBAAgB,AAAC,IAAA,CAAwB,oCAAoC;IACjF;AACA"}},
    {"offset": {"line": 2697, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2701, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/utils/baggage.ts"],"sourcesContent":["import { DEBUG_BUILD } from '../debug-build';\nimport type { DynamicSamplingContext } from '../types-hoist/envelope';\nimport { isString } from './is';\nimport { logger } from './logger';\n\nexport const SENTRY_BAGGAGE_KEY_PREFIX = 'sentry-';\n\nexport const SENTRY_BAGGAGE_KEY_PREFIX_REGEX = /^sentry-/;\n\n/**\n * Max length of a serialized baggage string\n *\n * https://www.w3.org/TR/baggage/#limits\n */\nexport const MAX_BAGGAGE_STRING_LENGTH = 8192;\n\n/**\n * Takes a baggage header and turns it into Dynamic Sampling Context, by extracting all the \"sentry-\" prefixed values\n * from it.\n *\n * @param baggageHeader A very bread definition of a baggage header as it might appear in various frameworks.\n * @returns The Dynamic Sampling Context that was found on `baggageHeader`, if there was any, `undefined` otherwise.\n */\nexport function baggageHeaderToDynamicSamplingContext(\n  // Very liberal definition of what any incoming header might look like\n  baggageHeader: string | string[] | number | null | undefined | boolean,\n): Partial<DynamicSamplingContext> | undefined {\n  const baggageObject = parseBaggageHeader(baggageHeader);\n\n  if (!baggageObject) {\n    return undefined;\n  }\n\n  // Read all \"sentry-\" prefixed values out of the baggage object and put it onto a dynamic sampling context object.\n  const dynamicSamplingContext = Object.entries(baggageObject).reduce<Record<string, string>>((acc, [key, value]) => {\n    if (key.match(SENTRY_BAGGAGE_KEY_PREFIX_REGEX)) {\n      const nonPrefixedKey = key.slice(SENTRY_BAGGAGE_KEY_PREFIX.length);\n      acc[nonPrefixedKey] = value;\n    }\n    return acc;\n  }, {});\n\n  // Only return a dynamic sampling context object if there are keys in it.\n  // A keyless object means there were no sentry values on the header, which means that there is no DSC.\n  if (Object.keys(dynamicSamplingContext).length > 0) {\n    return dynamicSamplingContext as Partial<DynamicSamplingContext>;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Turns a Dynamic Sampling Object into a baggage header by prefixing all the keys on the object with \"sentry-\".\n *\n * @param dynamicSamplingContext The Dynamic Sampling Context to turn into a header. For convenience and compatibility\n * with the `getDynamicSamplingContext` method on the Transaction class ,this argument can also be `undefined`. If it is\n * `undefined` the function will return `undefined`.\n * @returns a baggage header, created from `dynamicSamplingContext`, or `undefined` either if `dynamicSamplingContext`\n * was `undefined`, or if `dynamicSamplingContext` didn't contain any values.\n */\nexport function dynamicSamplingContextToSentryBaggageHeader(\n  // this also takes undefined for convenience and bundle size in other places\n  dynamicSamplingContext?: Partial<DynamicSamplingContext>,\n): string | undefined {\n  if (!dynamicSamplingContext) {\n    return undefined;\n  }\n\n  // Prefix all DSC keys with \"sentry-\" and put them into a new object\n  const sentryPrefixedDSC = Object.entries(dynamicSamplingContext).reduce<Record<string, string>>(\n    (acc, [dscKey, dscValue]) => {\n      if (dscValue) {\n        acc[`${SENTRY_BAGGAGE_KEY_PREFIX}${dscKey}`] = dscValue;\n      }\n      return acc;\n    },\n    {},\n  );\n\n  return objectToBaggageHeader(sentryPrefixedDSC);\n}\n\n/**\n * Take a baggage header and parse it into an object.\n */\nexport function parseBaggageHeader(\n  baggageHeader: string | string[] | number | null | undefined | boolean,\n): Record<string, string> | undefined {\n  if (!baggageHeader || (!isString(baggageHeader) && !Array.isArray(baggageHeader))) {\n    return undefined;\n  }\n\n  if (Array.isArray(baggageHeader)) {\n    // Combine all baggage headers into one object containing the baggage values so we can later read the Sentry-DSC-values from it\n    return baggageHeader.reduce<Record<string, string>>((acc, curr) => {\n      const currBaggageObject = baggageHeaderToObject(curr);\n      Object.entries(currBaggageObject).forEach(([key, value]) => {\n        acc[key] = value;\n      });\n      return acc;\n    }, {});\n  }\n\n  return baggageHeaderToObject(baggageHeader);\n}\n\n/**\n * Will parse a baggage header, which is a simple key-value map, into a flat object.\n *\n * @param baggageHeader The baggage header to parse.\n * @returns a flat object containing all the key-value pairs from `baggageHeader`.\n */\nfunction baggageHeaderToObject(baggageHeader: string): Record<string, string> {\n  return baggageHeader\n    .split(',')\n    .map(baggageEntry =>\n      baggageEntry.split('=').map(keyOrValue => {\n        try {\n          return decodeURIComponent(keyOrValue.trim());\n        } catch {\n          // We ignore errors here, e.g. if the value cannot be URL decoded.\n          // This will then be skipped in the next step\n          return;\n        }\n      }),\n    )\n    .reduce<Record<string, string>>((acc, [key, value]) => {\n      if (key && value) {\n        acc[key] = value;\n      }\n      return acc;\n    }, {});\n}\n\n/**\n * Turns a flat object (key-value pairs) into a baggage header, which is also just key-value pairs.\n *\n * @param object The object to turn into a baggage header.\n * @returns a baggage header string, or `undefined` if the object didn't have any values, since an empty baggage header\n * is not spec compliant.\n */\nexport function objectToBaggageHeader(object: Record<string, string>): string | undefined {\n  if (Object.keys(object).length === 0) {\n    // An empty baggage header is not spec compliant: We return undefined.\n    return undefined;\n  }\n\n  return Object.entries(object).reduce((baggageHeader, [objectKey, objectValue], currentIndex) => {\n    const baggageEntry = `${encodeURIComponent(objectKey)}=${encodeURIComponent(objectValue)}`;\n    const newBaggageHeader = currentIndex === 0 ? baggageEntry : `${baggageHeader},${baggageEntry}`;\n    if (newBaggageHeader.length > MAX_BAGGAGE_STRING_LENGTH) {\n      DEBUG_BUILD &&\n        logger.warn(\n          `Not adding key: ${objectKey} with val: ${objectValue} to baggage header due to exceeding baggage size limits.`,\n        );\n      return baggageHeader;\n    } else {\n      return newBaggageHeader;\n    }\n  }, '');\n}\n"],"names":["isString","DEBUG_BUILD","logger"],"mappings":";;;;;;AAKO,MAAM,4BAA4B;AAElC,MAAM,kCAAkC;AAE/C;;;;CAIA,GACO,MAAM,4BAA4B;AAEzC;;;;;;CAMA,GACO,SAAS,sCAChB,sEAAA;AACE,aAAa;IAEb,MAAM,gBAAgB,mBAAmB;IAEzC,IAAI,CAAC,eAAe;QAClB,OAAO;IACX;IAEA,kHAAA;IACE,MAAM,yBAAyB,OAAO,OAAO,CAAC,eAAe,MAAM,CAAyB,CAAC,KAAK,CAAC,KAAK,MAAM;QAC5G,IAAI,IAAI,KAAK,CAAC,kCAAkC;YAC9C,MAAM,iBAAiB,IAAI,KAAK,CAAC,0BAA0B,MAAM;YACjE,GAAG,CAAC,eAAc,GAAI;QAC5B;QACI,OAAO;IACX,GAAK,CAAA;IAEL,yEAAA;IACA,sGAAA;IACE,IAAI,OAAO,IAAI,CAAC,wBAAwB,MAAA,GAAS,GAAG;QAClD,OAAO;IACX,OAAS;QACL,OAAO;IACX;AACA;AAEA;;;;;;;;CAQA,GACO,SAAS,4CAChB,4EAAA;AACE,sBAAsB;IAEtB,IAAI,CAAC,wBAAwB;QAC3B,OAAO;IACX;IAEA,oEAAA;IACE,MAAM,oBAAoB,OAAO,OAAO,CAAC,wBAAwB,MAAM,CACrE,CAAC,KAAK,CAAC,QAAQ,SAAS;QACtB,IAAI,UAAU;YACZ,GAAG,CAAC,CAAC,EAAA,0BAAA,EAAA,OAAA,CAAA,CAAA,GAAA;QACA;QACA,OAAA;IACA,GACA,CAAA;IAGA,OAAA,sBAAA;AACA;AAEA;;CAEA,GACA,SAAA,mBACA,aAAA;IAEA,IAAA,CAAA,iBAAA,CAAAA,GAAAA,QAAA,CAAA,kBAAA,CAAA,MAAA,OAAA,CAAA,gBAAA;QACA,OAAA;IACA;IAEA,IAAA,MAAA,OAAA,CAAA,gBAAA;QACA,+HAAA;QACA,OAAA,cAAA,MAAA,CAAA,CAAA,KAAA;YACA,MAAA,oBAAA,sBAAA;YACA,OAAA,OAAA,CAAA,mBAAA,OAAA,CAAA,CAAA,CAAA,KAAA,MAAA;gBACA,GAAA,CAAA,IAAA,GAAA;YACA;YACA,OAAA;QACA,GAAA,CAAA;IACA;IAEA,OAAA,sBAAA;AACA;AAEA;;;;;CAKA,GACA,SAAA,sBAAA,aAAA;IACA,OAAA,cACA,KAAA,CAAA,KACA,GAAA,CAAA,CAAA,eACA,aAAA,KAAA,CAAA,KAAA,GAAA,CAAA,CAAA;YACA,IAAA;gBACA,OAAA,mBAAA,WAAA,IAAA;YACA,EAAA,OAAA;gBACA,kEAAA;gBACA,6CAAA;gBACA;YACA;QACA,IAEA,MAAA,CAAA,CAAA,KAAA,CAAA,KAAA,MAAA;QACA,IAAA,OAAA,OAAA;YACA,GAAA,CAAA,IAAA,GAAA;QACA;QACA,OAAA;IACA,GAAA,CAAA;AACA;AAEA;;;;;;CAMA,GACA,SAAA,sBAAA,MAAA;IACA,IAAA,OAAA,IAAA,CAAA,QAAA,MAAA,KAAA,GAAA;QACA,sEAAA;QACA,OAAA;IACA;IAEA,OAAA,OAAA,OAAA,CAAA,QAAA,MAAA,CAAA,CAAA,eAAA,CAAA,WAAA,YAAA,EAAA;QACA,MAAA,eAAA,CAAA,EAAA,mBAAA,WAAA,CAAA,EAAA,mBAAA,aAAA,CAAA;QACA,MAAA,mBAAA,iBAAA,IAAA,eAAA,CAAA,EAAA,cAAA,CAAA,EAAA,aAAA,CAAA;QACA,IAAA,iBAAA,MAAA,GAAA,2BAAA;YACAC,WAAAA,WAAA,IACAC,OAAAA,MAAA,CAAA,IAAA,CACA,CAAA,gBAAA,EAAA,UAAA,WAAA,EAAA,YAAA,wDAAA,CAAA;YAEA,OAAA;QACA,OAAA;YACA,OAAA;QACA;IACA,GAAA;AACA"}},
    {"offset": {"line": 2832, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2836, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/utils/parseSampleRate.ts"],"sourcesContent":["/**\n * Parse a sample rate from a given value.\n * This will either return a boolean or number sample rate, if the sample rate is valid (between 0 and 1).\n * If a string is passed, we try to convert it to a number.\n *\n * Any invalid sample rate will return `undefined`.\n */\nexport function parseSampleRate(sampleRate: unknown): number | undefined {\n  if (typeof sampleRate === 'boolean') {\n    return Number(sampleRate);\n  }\n\n  const rate = typeof sampleRate === 'string' ? parseFloat(sampleRate) : sampleRate;\n  if (typeof rate !== 'number' || isNaN(rate) || rate < 0 || rate > 1) {\n    return undefined;\n  }\n\n  return rate;\n}\n"],"names":[],"mappings":";;;AAAA;;;;;;CAMA,GACO,SAAS,gBAAgB,UAAU;IACxC,IAAI,OAAO,eAAe,WAAW;QACnC,OAAO,OAAO;IAClB;IAEE,MAAM,OAAO,OAAO,eAAe,WAAW,WAAW,cAAc;IACvE,IAAI,OAAO,SAAS,YAAY,MAAM,SAAS,OAAO,KAAK,OAAO,GAAG;QACnE,OAAO;IACX;IAEE,OAAO;AACT"}},
    {"offset": {"line": 2856, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2860, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/utils/tracing.ts"],"sourcesContent":["import type { DynamicSamplingContext } from '../types-hoist/envelope';\nimport type { PropagationContext } from '../types-hoist/tracing';\nimport type { TraceparentData } from '../types-hoist/transaction';\nimport { baggageHeaderToDynamicSamplingContext } from './baggage';\nimport { parseSampleRate } from './parseSampleRate';\nimport { generateSpanId, generateTraceId } from './propagationContext';\n\n// eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor -- RegExp is used for readability here\nexport const TRACEPARENT_REGEXP = new RegExp(\n  '^[ \\\\t]*' + // whitespace\n    '([0-9a-f]{32})?' + // trace_id\n    '-?([0-9a-f]{16})?' + // span_id\n    '-?([01])?' + // sampled\n    '[ \\\\t]*$', // whitespace\n);\n\n/**\n * Extract transaction context data from a `sentry-trace` header.\n *\n * @param traceparent Traceparent string\n *\n * @returns Object containing data from the header, or undefined if traceparent string is malformed\n */\nexport function extractTraceparentData(traceparent?: string): TraceparentData | undefined {\n  if (!traceparent) {\n    return undefined;\n  }\n\n  const matches = traceparent.match(TRACEPARENT_REGEXP);\n  if (!matches) {\n    return undefined;\n  }\n\n  let parentSampled: boolean | undefined;\n  if (matches[3] === '1') {\n    parentSampled = true;\n  } else if (matches[3] === '0') {\n    parentSampled = false;\n  }\n\n  return {\n    traceId: matches[1],\n    parentSampled,\n    parentSpanId: matches[2],\n  };\n}\n\n/**\n * Create a propagation context from incoming headers or\n * creates a minimal new one if the headers are undefined.\n */\nexport function propagationContextFromHeaders(\n  sentryTrace: string | undefined,\n  baggage: string | number | boolean | string[] | null | undefined,\n): PropagationContext {\n  const traceparentData = extractTraceparentData(sentryTrace);\n  const dynamicSamplingContext = baggageHeaderToDynamicSamplingContext(baggage);\n\n  if (!traceparentData?.traceId) {\n    return {\n      traceId: generateTraceId(),\n      sampleRand: Math.random(),\n    };\n  }\n\n  const sampleRand = getSampleRandFromTraceparentAndDsc(traceparentData, dynamicSamplingContext);\n\n  // The sample_rand on the DSC needs to be generated based on traceparent + baggage.\n  if (dynamicSamplingContext) {\n    dynamicSamplingContext.sample_rand = sampleRand.toString();\n  }\n\n  const { traceId, parentSpanId, parentSampled } = traceparentData;\n\n  return {\n    traceId,\n    parentSpanId,\n    sampled: parentSampled,\n    dsc: dynamicSamplingContext || {}, // If we have traceparent data but no DSC it means we are not head of trace and we must freeze it\n    sampleRand,\n  };\n}\n\n/**\n * Create sentry-trace header from span context values.\n */\nexport function generateSentryTraceHeader(\n  traceId: string | undefined = generateTraceId(),\n  spanId: string | undefined = generateSpanId(),\n  sampled?: boolean,\n): string {\n  let sampledString = '';\n  if (sampled !== undefined) {\n    sampledString = sampled ? '-1' : '-0';\n  }\n  return `${traceId}-${spanId}${sampledString}`;\n}\n\n/**\n * Given any combination of an incoming trace, generate a sample rand based on its defined semantics.\n *\n * Read more: https://develop.sentry.dev/sdk/telemetry/traces/#propagated-random-value\n */\nfunction getSampleRandFromTraceparentAndDsc(\n  traceparentData: TraceparentData | undefined,\n  dsc: Partial<DynamicSamplingContext> | undefined,\n): number {\n  // When there is an incoming sample rand use it.\n  const parsedSampleRand = parseSampleRate(dsc?.sample_rand);\n  if (parsedSampleRand !== undefined) {\n    return parsedSampleRand;\n  }\n\n  // Otherwise, if there is an incoming sampling decision + sample rate, generate a sample rand that would lead to the same sampling decision.\n  const parsedSampleRate = parseSampleRate(dsc?.sample_rate);\n  if (parsedSampleRate && traceparentData?.parentSampled !== undefined) {\n    return traceparentData.parentSampled\n      ? // Returns a sample rand with positive sampling decision [0, sampleRate)\n        Math.random() * parsedSampleRate\n      : // Returns a sample rand with negative sampling decision [sampleRate, 1)\n        parsedSampleRate + Math.random() * (1 - parsedSampleRate);\n  } else {\n    // If nothing applies, return a random sample rand.\n    return Math.random();\n  }\n}\n"],"names":["baggage","baggageHeaderToDynamicSamplingContext","generateTraceId","generateSpanId","parseSampleRate"],"mappings":";;;;;;AAOA,6GAAA;AACO,MAAM,qBAAqB,IAAI,OACpC,aAAA,aAAA;AACE,oBAAA,WAAA;AACA,sBAAA,UAAA;AACA,cAAA,UAAA;AACA;AAGJ;;;;;;CAMA,GACO,SAAS,uBAAuB,WAAW;IAChD,IAAI,CAAC,aAAa;QAChB,OAAO;IACX;IAEE,MAAM,UAAU,YAAY,KAAK,CAAC;IAClC,IAAI,CAAC,SAAS;QACZ,OAAO;IACX;IAEE,IAAI;IACJ,IAAI,OAAO,CAAC,EAAC,KAAM,KAAK;QACtB,gBAAgB;IACpB,OAAS,IAAI,OAAO,CAAC,EAAC,KAAM,KAAK;QAC7B,gBAAgB;IACpB;IAEE,OAAO;QACL,SAAS,OAAO,CAAC,EAAE;QACnB;QACA,cAAc,OAAO,CAAC,EAAE;IAC5B;AACA;AAEA;;;CAGA,GACO,SAAS,8BACd,WAAW,EACXA,SAAO;IAEP,MAAM,kBAAkB,uBAAuB;IAC/C,MAAM,yBAAyBC,QAAAA,qCAAqC,CAACD;IAErE,IAAI,CAAC,iBAAiB,SAAS;QAC7B,OAAO;YACL,SAASE,mBAAAA,eAAe;YACxB,YAAY,KAAK,MAAM;QAC7B;IACA;IAEE,MAAM,aAAa,mCAAmC,iBAAiB;IAEzE,mFAAA;IACE,IAAI,wBAAwB;QAC1B,uBAAuB,WAAA,GAAc,WAAW,QAAQ;IAC5D;IAEE,MAAM,EAAE,OAAO,EAAE,YAAY,EAAE,aAAA,EAAc,GAAI;IAEjD,OAAO;QACL;QACA;QACA,SAAS;QACT,KAAK,0BAA0B,CAAA;QAC/B;IACJ;AACA;AAEA;;CAEA,GACO,SAAS,0BACd,UAA8BA,mBAAAA,eAAe,EAAE,EAC/C,SAA6BC,mBAAAA,cAAc,EAAE,EAC7C,OAAO;IAEP,IAAI,gBAAgB;IACpB,IAAI,YAAY,WAAW;QACzB,gBAAgB,UAAU,OAAO;IACrC;IACE,OAAO,CAAC,EAAA,QAAA,CAAA,EAAA,OAAA,EAAA,cAAA,CAAA;AACA;AAEA;;;;CAIA,GACA,SAAA,mCACA,eAAA,EACA,GAAA;IAEA,gDAAA;IACA,MAAA,mBAAAC,gBAAAA,eAAA,CAAA,KAAA;IACA,IAAA,qBAAA,WAAA;QACA,OAAA;IACA;IAEA,4IAAA;IACA,MAAA,mBAAAA,gBAAAA,eAAA,CAAA,KAAA;IACA,IAAA,oBAAA,iBAAA,kBAAA,WAAA;QACA,OAAA,gBAAA,aAAA,GAEA,KAAA,MAAA,KAAA,mBAEA,mBAAA,KAAA,MAAA,KAAA,CAAA,IAAA,gBAAA;IACA,OAAA;QACA,mDAAA;QACA,OAAA,KAAA,MAAA;IACA;AACA"}},
    {"offset": {"line": 2956, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2960, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/utils/spanUtils.ts"],"sourcesContent":["import { getAsyncContextStrategy } from '../asyncContext';\nimport { getMainCarrier } from '../carrier';\nimport { getCurrentScope } from '../currentScopes';\nimport {\n  SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME,\n  SEMANTIC_ATTRIBUTE_SENTRY_OP,\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n  SEMANTIC_ATTRIBUTE_SENTRY_SOURCE,\n} from '../semanticAttributes';\nimport type { SentrySpan } from '../tracing/sentrySpan';\nimport { SPAN_STATUS_OK, SPAN_STATUS_UNSET } from '../tracing/spanstatus';\nimport { getCapturedScopesOnSpan } from '../tracing/utils';\nimport type { TraceContext } from '../types-hoist/context';\nimport type { SpanLink, SpanLinkJSON } from '../types-hoist/link';\nimport type { Span, SpanAttributes, SpanJSON, SpanOrigin, SpanTimeInput } from '../types-hoist/span';\nimport type { SpanStatus } from '../types-hoist/spanStatus';\nimport { consoleSandbox } from '../utils/logger';\nimport { addNonEnumerableProperty } from '../utils/object';\nimport { generateSpanId } from '../utils/propagationContext';\nimport { timestampInSeconds } from '../utils/time';\nimport { generateSentryTraceHeader } from '../utils/tracing';\nimport { _getSpanForScope } from './spanOnScope';\n\n// These are aligned with OpenTelemetry trace flags\nexport const TRACE_FLAG_NONE = 0x0;\nexport const TRACE_FLAG_SAMPLED = 0x1;\n\nlet hasShownSpanDropWarning = false;\n\n/**\n * Convert a span to a trace context, which can be sent as the `trace` context in an event.\n * By default, this will only include trace_id, span_id & parent_span_id.\n * If `includeAllData` is true, it will also include data, op, status & origin.\n */\nexport function spanToTransactionTraceContext(span: Span): TraceContext {\n  const { spanId: span_id, traceId: trace_id } = span.spanContext();\n  const { data, op, parent_span_id, status, origin, links } = spanToJSON(span);\n\n  return {\n    parent_span_id,\n    span_id,\n    trace_id,\n    data,\n    op,\n    status,\n    origin,\n    links,\n  };\n}\n\n/**\n * Convert a span to a trace context, which can be sent as the `trace` context in a non-transaction event.\n */\nexport function spanToTraceContext(span: Span): TraceContext {\n  const { spanId, traceId: trace_id, isRemote } = span.spanContext();\n\n  // If the span is remote, we use a random/virtual span as span_id to the trace context,\n  // and the remote span as parent_span_id\n  const parent_span_id = isRemote ? spanId : spanToJSON(span).parent_span_id;\n  const scope = getCapturedScopesOnSpan(span).scope;\n\n  const span_id = isRemote ? scope?.getPropagationContext().propagationSpanId || generateSpanId() : spanId;\n\n  return {\n    parent_span_id,\n    span_id,\n    trace_id,\n  };\n}\n\n/**\n * Convert a Span to a Sentry trace header.\n */\nexport function spanToTraceHeader(span: Span): string {\n  const { traceId, spanId } = span.spanContext();\n  const sampled = spanIsSampled(span);\n  return generateSentryTraceHeader(traceId, spanId, sampled);\n}\n\n/**\n *  Converts the span links array to a flattened version to be sent within an envelope.\n *\n *  If the links array is empty, it returns `undefined` so the empty value can be dropped before it's sent.\n */\nexport function convertSpanLinksForEnvelope(links?: SpanLink[]): SpanLinkJSON[] | undefined {\n  if (links && links.length > 0) {\n    return links.map(({ context: { spanId, traceId, traceFlags, ...restContext }, attributes }) => ({\n      span_id: spanId,\n      trace_id: traceId,\n      sampled: traceFlags === TRACE_FLAG_SAMPLED,\n      attributes,\n      ...restContext,\n    }));\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Convert a span time input into a timestamp in seconds.\n */\nexport function spanTimeInputToSeconds(input: SpanTimeInput | undefined): number {\n  if (typeof input === 'number') {\n    return ensureTimestampInSeconds(input);\n  }\n\n  if (Array.isArray(input)) {\n    // See {@link HrTime} for the array-based time format\n    return input[0] + input[1] / 1e9;\n  }\n\n  if (input instanceof Date) {\n    return ensureTimestampInSeconds(input.getTime());\n  }\n\n  return timestampInSeconds();\n}\n\n/**\n * Converts a timestamp to second, if it was in milliseconds, or keeps it as second.\n */\nfunction ensureTimestampInSeconds(timestamp: number): number {\n  const isMs = timestamp > 9999999999;\n  return isMs ? timestamp / 1000 : timestamp;\n}\n\n/**\n * Convert a span to a JSON representation.\n */\n// Note: Because of this, we currently have a circular type dependency (which we opted out of in package.json).\n// This is not avoidable as we need `spanToJSON` in `spanUtils.ts`, which in turn is needed by `span.ts` for backwards compatibility.\n// And `spanToJSON` needs the Span class from `span.ts` to check here.\nexport function spanToJSON(span: Span): SpanJSON {\n  if (spanIsSentrySpan(span)) {\n    return span.getSpanJSON();\n  }\n\n  const { spanId: span_id, traceId: trace_id } = span.spanContext();\n\n  // Handle a span from @opentelemetry/sdk-base-trace's `Span` class\n  if (spanIsOpenTelemetrySdkTraceBaseSpan(span)) {\n    const { attributes, startTime, name, endTime, status, links } = span;\n\n    // In preparation for the next major of OpenTelemetry, we want to support\n    // looking up the parent span id according to the new API\n    // In OTel v1, the parent span id is accessed as `parentSpanId`\n    // In OTel v2, the parent span id is accessed as `spanId` on the `parentSpanContext`\n    const parentSpanId =\n      'parentSpanId' in span\n        ? span.parentSpanId\n        : 'parentSpanContext' in span\n          ? (span.parentSpanContext as { spanId?: string } | undefined)?.spanId\n          : undefined;\n\n    return {\n      span_id,\n      trace_id,\n      data: attributes,\n      description: name,\n      parent_span_id: parentSpanId,\n      start_timestamp: spanTimeInputToSeconds(startTime),\n      // This is [0,0] by default in OTEL, in which case we want to interpret this as no end time\n      timestamp: spanTimeInputToSeconds(endTime) || undefined,\n      status: getStatusMessage(status),\n      op: attributes[SEMANTIC_ATTRIBUTE_SENTRY_OP],\n      origin: attributes[SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN] as SpanOrigin | undefined,\n      links: convertSpanLinksForEnvelope(links),\n    };\n  }\n\n  // Finally, at least we have `spanContext()`....\n  // This should not actually happen in reality, but we need to handle it for type safety.\n  return {\n    span_id,\n    trace_id,\n    start_timestamp: 0,\n    data: {},\n  };\n}\n\nfunction spanIsOpenTelemetrySdkTraceBaseSpan(span: Span): span is OpenTelemetrySdkTraceBaseSpan {\n  const castSpan = span as Partial<OpenTelemetrySdkTraceBaseSpan>;\n  return !!castSpan.attributes && !!castSpan.startTime && !!castSpan.name && !!castSpan.endTime && !!castSpan.status;\n}\n\n/** Exported only for tests. */\nexport interface OpenTelemetrySdkTraceBaseSpan extends Span {\n  attributes: SpanAttributes;\n  startTime: SpanTimeInput;\n  name: string;\n  status: SpanStatus;\n  endTime: SpanTimeInput;\n  parentSpanId?: string;\n  links?: SpanLink[];\n}\n\n/**\n * Sadly, due to circular dependency checks we cannot actually import the Span class here and check for instanceof.\n * :( So instead we approximate this by checking if it has the `getSpanJSON` method.\n */\nfunction spanIsSentrySpan(span: Span): span is SentrySpan {\n  return typeof (span as SentrySpan).getSpanJSON === 'function';\n}\n\n/**\n * Returns true if a span is sampled.\n * In most cases, you should just use `span.isRecording()` instead.\n * However, this has a slightly different semantic, as it also returns false if the span is finished.\n * So in the case where this distinction is important, use this method.\n */\nexport function spanIsSampled(span: Span): boolean {\n  // We align our trace flags with the ones OpenTelemetry use\n  // So we also check for sampled the same way they do.\n  const { traceFlags } = span.spanContext();\n  return traceFlags === TRACE_FLAG_SAMPLED;\n}\n\n/** Get the status message to use for a JSON representation of a span. */\nexport function getStatusMessage(status: SpanStatus | undefined): string | undefined {\n  if (!status || status.code === SPAN_STATUS_UNSET) {\n    return undefined;\n  }\n\n  if (status.code === SPAN_STATUS_OK) {\n    return 'ok';\n  }\n\n  return status.message || 'unknown_error';\n}\n\nconst CHILD_SPANS_FIELD = '_sentryChildSpans';\nconst ROOT_SPAN_FIELD = '_sentryRootSpan';\n\ntype SpanWithPotentialChildren = Span & {\n  [CHILD_SPANS_FIELD]?: Set<Span>;\n  [ROOT_SPAN_FIELD]?: Span;\n};\n\n/**\n * Adds an opaque child span reference to a span.\n */\nexport function addChildSpanToSpan(span: SpanWithPotentialChildren, childSpan: Span): void {\n  // We store the root span reference on the child span\n  // We need this for `getRootSpan()` to work\n  const rootSpan = span[ROOT_SPAN_FIELD] || span;\n  addNonEnumerableProperty(childSpan as SpanWithPotentialChildren, ROOT_SPAN_FIELD, rootSpan);\n\n  // We store a list of child spans on the parent span\n  // We need this for `getSpanDescendants()` to work\n  if (span[CHILD_SPANS_FIELD]) {\n    span[CHILD_SPANS_FIELD].add(childSpan);\n  } else {\n    addNonEnumerableProperty(span, CHILD_SPANS_FIELD, new Set([childSpan]));\n  }\n}\n\n/** This is only used internally by Idle Spans. */\nexport function removeChildSpanFromSpan(span: SpanWithPotentialChildren, childSpan: Span): void {\n  if (span[CHILD_SPANS_FIELD]) {\n    span[CHILD_SPANS_FIELD].delete(childSpan);\n  }\n}\n\n/**\n * Returns an array of the given span and all of its descendants.\n */\nexport function getSpanDescendants(span: SpanWithPotentialChildren): Span[] {\n  const resultSet = new Set<Span>();\n\n  function addSpanChildren(span: SpanWithPotentialChildren): void {\n    // This exit condition is required to not infinitely loop in case of a circular dependency.\n    if (resultSet.has(span)) {\n      return;\n      // We want to ignore unsampled spans (e.g. non recording spans)\n    } else if (spanIsSampled(span)) {\n      resultSet.add(span);\n      const childSpans = span[CHILD_SPANS_FIELD] ? Array.from(span[CHILD_SPANS_FIELD]) : [];\n      for (const childSpan of childSpans) {\n        addSpanChildren(childSpan);\n      }\n    }\n  }\n\n  addSpanChildren(span);\n\n  return Array.from(resultSet);\n}\n\n/**\n * Returns the root span of a given span.\n */\nexport function getRootSpan(span: SpanWithPotentialChildren): Span {\n  return span[ROOT_SPAN_FIELD] || span;\n}\n\n/**\n * Returns the currently active span.\n */\nexport function getActiveSpan(): Span | undefined {\n  const carrier = getMainCarrier();\n  const acs = getAsyncContextStrategy(carrier);\n  if (acs.getActiveSpan) {\n    return acs.getActiveSpan();\n  }\n\n  return _getSpanForScope(getCurrentScope());\n}\n\n/**\n * Logs a warning once if `beforeSendSpan` is used to drop spans.\n */\nexport function showSpanDropWarning(): void {\n  if (!hasShownSpanDropWarning) {\n    consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn(\n        '[Sentry] Returning null from `beforeSendSpan` is disallowed. To drop certain spans, configure the respective integrations directly.',\n      );\n    });\n    hasShownSpanDropWarning = true;\n  }\n}\n\n/**\n * Updates the name of the given span and ensures that the span name is not\n * overwritten by the Sentry SDK.\n *\n * Use this function instead of `span.updateName()` if you want to make sure that\n * your name is kept. For some spans, for example root `http.server` spans the\n * Sentry SDK would otherwise overwrite the span name with a high-quality name\n * it infers when the span ends.\n *\n * Use this function in server code or when your span is started on the server\n * and on the client (browser). If you only update a span name on the client,\n * you can also use `span.updateName()` the SDK does not overwrite the name.\n *\n * @param span - The span to update the name of.\n * @param name - The name to set on the span.\n */\nexport function updateSpanName(span: Span, name: string): void {\n  span.updateName(name);\n  span.setAttributes({\n    [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'custom',\n    [SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME]: name,\n  });\n}\n"],"names":["getCapturedScopesOnSpan","generateSpanId","generateSentryTraceHeader","timestampInSeconds","SEMANTIC_ATTRIBUTE_SENTRY_OP","SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN","SPAN_STATUS_UNSET","SPAN_STATUS_OK","addNonEnumerableProperty","carrier","getMainCarrier","getAsyncContextStrategy","_getSpanForScope","getCurrentScope","consoleSandbox","SEMANTIC_ATTRIBUTE_SENTRY_SOURCE","SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME"],"mappings":"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"}},
    {"offset": {"line": 3238, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3242, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/tracing/errors.ts"],"sourcesContent":["import { DEBUG_BUILD } from '../debug-build';\nimport { addGlobalErrorInstrumentationHandler } from '../instrument/globalError';\nimport { addGlobalUnhandledRejectionInstrumentationHandler } from '../instrument/globalUnhandledRejection';\nimport { logger } from '../utils/logger';\nimport { getActiveSpan, getRootSpan } from '../utils/spanUtils';\nimport { SPAN_STATUS_ERROR } from './spanstatus';\n\nlet errorsInstrumented = false;\n\n/**  Only exposed for testing */\nexport function _resetErrorsInstrumented(): void {\n  errorsInstrumented = false;\n}\n\n/**\n * Ensure that global errors automatically set the active span status.\n */\nexport function registerSpanErrorInstrumentation(): void {\n  if (errorsInstrumented) {\n    return;\n  }\n\n  errorsInstrumented = true;\n  addGlobalErrorInstrumentationHandler(errorCallback);\n  addGlobalUnhandledRejectionInstrumentationHandler(errorCallback);\n}\n\n/**\n * If an error or unhandled promise occurs, we mark the active root span as failed\n */\nfunction errorCallback(): void {\n  const activeSpan = getActiveSpan();\n  const rootSpan = activeSpan && getRootSpan(activeSpan);\n  if (rootSpan) {\n    const message = 'internal_error';\n    DEBUG_BUILD && logger.log(`[Tracing] Root span: ${message} -> Global error occurred`);\n    rootSpan.setStatus({ code: SPAN_STATUS_ERROR, message });\n  }\n}\n\n// The function name will be lost when bundling but we need to be able to identify this listener later to maintain the\n// node.js default exit behaviour\nerrorCallback.tag = 'sentry_tracingErrorCallback';\n"],"names":["addGlobalErrorInstrumentationHandler","addGlobalUnhandledRejectionInstrumentationHandler","getActiveSpan","getRootSpan","DEBUG_BUILD","logger","SPAN_STATUS_ERROR"],"mappings":";;;;;;;;;AAOA,IAAI,qBAAqB;AAOzB;;CAEA,GACO,SAAS;IACd,IAAI,oBAAoB;QACtB;IACJ;IAEE,qBAAqB;IACrBA,YAAAA,oCAAoC,CAAC;IACrCC,yBAAAA,iDAAiD,CAAC;AACpD;AAEA;;CAEA,GACA,SAAS;IACP,MAAM,aAAaC,UAAAA,aAAa;IAChC,MAAM,WAAW,cAAcC,UAAAA,WAAW,CAAC;IAC3C,IAAI,UAAU;QACZ,MAAM,UAAU;QAChBC,WAAAA,WAAA,IAAeC,OAAAA,MAAM,CAAC,GAAG,CAAC,CAAC,qBAAqB,EAAE,QAAQ,yBAAyB,CAAC;QACpF,SAAS,SAAS,CAAC;YAAE,MAAMC,WAAAA,iBAAiB;YAAE;QAAA;IAClD;AACA;AAEA,sHAAA;AACA,iCAAA;AACA,cAAc,GAAA,GAAM"}},
    {"offset": {"line": 3280, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3284, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/utils/hasSpansEnabled.ts"],"sourcesContent":["import { getClient } from '../currentScopes';\nimport type { Options } from '../types-hoist/options';\n\n// Treeshakable guard to remove all code related to tracing\ndeclare const __SENTRY_TRACING__: boolean | undefined;\n\n/**\n * Determines if span recording is currently enabled.\n *\n * Spans are recorded when at least one of `tracesSampleRate` and `tracesSampler`\n * is defined in the SDK config. This function does not make any assumption about\n * sampling decisions, it only checks if the SDK is configured to record spans.\n *\n * Important: This function only determines if span recording is enabled. Trace\n * continuation and propagation is separately controlled and not covered by this function.\n * If this function returns `false`, traces can still be propagated (which is what\n * we refer to by \"Tracing without Performance\")\n * @see https://develop.sentry.dev/sdk/telemetry/traces/tracing-without-performance/\n *\n * @param maybeOptions An SDK options object to be passed to this function.\n * If this option is not provided, the function will use the current client's options.\n */\nexport function hasSpansEnabled(\n  maybeOptions?: Pick<Options, 'tracesSampleRate' | 'tracesSampler'> | undefined,\n): boolean {\n  if (typeof __SENTRY_TRACING__ === 'boolean' && !__SENTRY_TRACING__) {\n    return false;\n  }\n\n  const options = maybeOptions || getClient()?.getOptions();\n  return (\n    !!options &&\n    // Note: This check is `!= null`, meaning \"nullish\". `0` is not \"nullish\", `undefined` and `null` are. (This comment was brought to you by 15 minutes of questioning life)\n    (options.tracesSampleRate != null || !!options.tracesSampler)\n  );\n}\n\n/**\n * @see JSDoc of `hasSpansEnabled`\n * @deprecated Use `hasSpansEnabled` instead, which is a more accurately named version of this function.\n * This function will be removed in the next major version of the SDK.\n */\n// TODO(v10): Remove this export\nexport const hasTracingEnabled = hasSpansEnabled;\n"],"names":["getClient"],"mappings":";;;;AAGA,2DAAA;AAGA;;;;;;;;;;;;;;;CAeA,GACO,SAAS,gBACd,YAAY;IAEZ,IAAI,OAAO,uBAAuB,aAAa,CAAC,oBAAoB;QAClE,OAAO;IACX;IAEE,MAAM,UAAU,gBAAgBA,cAAAA,SAAS,IAAI;IAC7C,OACE,CAAC,CAAC,WACN,0KAAA;IACA,CAAK,QAAQ,gBAAA,IAAoB,QAAQ,CAAC,CAAC,QAAQ,aAAa;AAEhE;AAEA;;;;CAIA,GACA,gCAAA;AACO,MAAM,oBAAoB"}},
    {"offset": {"line": 3320, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3324, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/constants.ts"],"sourcesContent":["export const DEFAULT_ENVIRONMENT = 'production';\n"],"names":[],"mappings":";;;AAAO,MAAM,sBAAsB"}},
    {"offset": {"line": 3329, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3333, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/utils/dsn.ts"],"sourcesContent":["import { DEBUG_BUILD } from '../debug-build';\nimport type { DsnComponents, DsnLike, DsnProtocol } from '../types-hoist/dsn';\nimport { consoleSandbox, logger } from './logger';\n\n/** Regular expression used to extract org ID from a DSN host. */\nconst ORG_ID_REGEX = /^o(\\d+)\\./;\n\n/** Regular expression used to parse a Dsn. */\nconst DSN_REGEX = /^(?:(\\w+):)\\/\\/(?:(\\w+)(?::(\\w+)?)?@)([\\w.-]+)(?::(\\d+))?\\/(.+)/;\n\nfunction isValidProtocol(protocol?: string): protocol is DsnProtocol {\n  return protocol === 'http' || protocol === 'https';\n}\n\n/**\n * Renders the string representation of this Dsn.\n *\n * By default, this will render the public representation without the password\n * component. To get the deprecated private representation, set `withPassword`\n * to true.\n *\n * @param withPassword When set to true, the password will be included.\n */\nexport function dsnToString(dsn: DsnComponents, withPassword: boolean = false): string {\n  const { host, path, pass, port, projectId, protocol, publicKey } = dsn;\n  return (\n    `${protocol}://${publicKey}${withPassword && pass ? `:${pass}` : ''}` +\n    `@${host}${port ? `:${port}` : ''}/${path ? `${path}/` : path}${projectId}`\n  );\n}\n\n/**\n * Parses a Dsn from a given string.\n *\n * @param str A Dsn as string\n * @returns Dsn as DsnComponents or undefined if @param str is not a valid DSN string\n */\nexport function dsnFromString(str: string): DsnComponents | undefined {\n  const match = DSN_REGEX.exec(str);\n\n  if (!match) {\n    // This should be logged to the console\n    consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.error(`Invalid Sentry Dsn: ${str}`);\n    });\n    return undefined;\n  }\n\n  const [protocol, publicKey, pass = '', host = '', port = '', lastPath = ''] = match.slice(1);\n  let path = '';\n  let projectId = lastPath;\n\n  const split = projectId.split('/');\n  if (split.length > 1) {\n    path = split.slice(0, -1).join('/');\n    projectId = split.pop() as string;\n  }\n\n  if (projectId) {\n    const projectMatch = projectId.match(/^\\d+/);\n    if (projectMatch) {\n      projectId = projectMatch[0];\n    }\n  }\n\n  return dsnFromComponents({ host, pass, path, projectId, port, protocol: protocol as DsnProtocol, publicKey });\n}\n\nfunction dsnFromComponents(components: DsnComponents): DsnComponents {\n  return {\n    protocol: components.protocol,\n    publicKey: components.publicKey || '',\n    pass: components.pass || '',\n    host: components.host,\n    port: components.port || '',\n    path: components.path || '',\n    projectId: components.projectId,\n  };\n}\n\nfunction validateDsn(dsn: DsnComponents): boolean {\n  if (!DEBUG_BUILD) {\n    return true;\n  }\n\n  const { port, projectId, protocol } = dsn;\n\n  const requiredComponents: ReadonlyArray<keyof DsnComponents> = ['protocol', 'publicKey', 'host', 'projectId'];\n  const hasMissingRequiredComponent = requiredComponents.find(component => {\n    if (!dsn[component]) {\n      logger.error(`Invalid Sentry Dsn: ${component} missing`);\n      return true;\n    }\n    return false;\n  });\n\n  if (hasMissingRequiredComponent) {\n    return false;\n  }\n\n  if (!projectId.match(/^\\d+$/)) {\n    logger.error(`Invalid Sentry Dsn: Invalid projectId ${projectId}`);\n    return false;\n  }\n\n  if (!isValidProtocol(protocol)) {\n    logger.error(`Invalid Sentry Dsn: Invalid protocol ${protocol}`);\n    return false;\n  }\n\n  if (port && isNaN(parseInt(port, 10))) {\n    logger.error(`Invalid Sentry Dsn: Invalid port ${port}`);\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Extract the org ID from a DSN host.\n *\n * @param host The host from a DSN\n * @returns The org ID if found, undefined otherwise\n */\nexport function extractOrgIdFromDsnHost(host: string): string | undefined {\n  const match = host.match(ORG_ID_REGEX);\n\n  return match?.[1];\n}\n\n/**\n * Creates a valid Sentry Dsn object, identifying a Sentry instance and project.\n * @returns a valid DsnComponents object or `undefined` if @param from is an invalid DSN source\n */\nexport function makeDsn(from: DsnLike): DsnComponents | undefined {\n  const components = typeof from === 'string' ? dsnFromString(from) : dsnFromComponents(from);\n  if (!components || !validateDsn(components)) {\n    return undefined;\n  }\n  return components;\n}\n"],"names":["consoleSandbox","DEBUG_BUILD","logger"],"mappings":"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"}},
    {"offset": {"line": 3463, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3467, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/tracing/dynamicSamplingContext.ts"],"sourcesContent":["import type { Client } from '../client';\nimport { DEFAULT_ENVIRONMENT } from '../constants';\nimport { getClient } from '../currentScopes';\nimport type { Scope } from '../scope';\nimport {\n  SEMANTIC_ATTRIBUTE_SENTRY_PREVIOUS_TRACE_SAMPLE_RATE,\n  SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE,\n  SEMANTIC_ATTRIBUTE_SENTRY_SOURCE,\n} from '../semanticAttributes';\nimport type { DynamicSamplingContext } from '../types-hoist/envelope';\nimport type { Span } from '../types-hoist/span';\nimport { baggageHeaderToDynamicSamplingContext, dynamicSamplingContextToSentryBaggageHeader } from '../utils/baggage';\nimport { extractOrgIdFromDsnHost } from '../utils/dsn';\nimport { hasSpansEnabled } from '../utils/hasSpansEnabled';\nimport { addNonEnumerableProperty } from '../utils/object';\nimport { getRootSpan, spanIsSampled, spanToJSON } from '../utils/spanUtils';\nimport { getCapturedScopesOnSpan } from './utils';\n\n/**\n * If you change this value, also update the terser plugin config to\n * avoid minification of the object property!\n */\nconst FROZEN_DSC_FIELD = '_frozenDsc';\n\ntype SpanWithMaybeDsc = Span & {\n  [FROZEN_DSC_FIELD]?: Partial<DynamicSamplingContext> | undefined;\n};\n\n/**\n * Freeze the given DSC on the given span.\n */\nexport function freezeDscOnSpan(span: Span, dsc: Partial<DynamicSamplingContext>): void {\n  const spanWithMaybeDsc = span as SpanWithMaybeDsc;\n  addNonEnumerableProperty(spanWithMaybeDsc, FROZEN_DSC_FIELD, dsc);\n}\n\n/**\n * Creates a dynamic sampling context from a client.\n *\n * Dispatches the `createDsc` lifecycle hook as a side effect.\n */\nexport function getDynamicSamplingContextFromClient(trace_id: string, client: Client): DynamicSamplingContext {\n  const options = client.getOptions();\n\n  const { publicKey: public_key, host } = client.getDsn() || {};\n\n  let org_id: string | undefined;\n  if (options.orgId) {\n    org_id = String(options.orgId);\n  } else if (host) {\n    org_id = extractOrgIdFromDsnHost(host);\n  }\n\n  // Instead of conditionally adding non-undefined values, we add them and then remove them if needed\n  // otherwise, the order of baggage entries changes, which \"breaks\" a bunch of tests etc.\n  const dsc: DynamicSamplingContext = {\n    environment: options.environment || DEFAULT_ENVIRONMENT,\n    release: options.release,\n    public_key,\n    trace_id,\n    org_id,\n  };\n\n  client.emit('createDsc', dsc);\n\n  return dsc;\n}\n\n/**\n * Get the dynamic sampling context for the currently active scopes.\n */\nexport function getDynamicSamplingContextFromScope(client: Client, scope: Scope): Partial<DynamicSamplingContext> {\n  const propagationContext = scope.getPropagationContext();\n  return propagationContext.dsc || getDynamicSamplingContextFromClient(propagationContext.traceId, client);\n}\n\n/**\n * Creates a dynamic sampling context from a span (and client and scope)\n *\n * @param span the span from which a few values like the root span name and sample rate are extracted.\n *\n * @returns a dynamic sampling context\n */\nexport function getDynamicSamplingContextFromSpan(span: Span): Readonly<Partial<DynamicSamplingContext>> {\n  const client = getClient();\n  if (!client) {\n    return {};\n  }\n\n  const rootSpan = getRootSpan(span);\n  const rootSpanJson = spanToJSON(rootSpan);\n  const rootSpanAttributes = rootSpanJson.data;\n  const traceState = rootSpan.spanContext().traceState;\n\n  // The span sample rate that was locally applied to the root span should also always be applied to the DSC, even if the DSC is frozen.\n  // This is so that the downstream traces/services can use parentSampleRate in their `tracesSampler` to make consistent sampling decisions across the entire trace.\n  const rootSpanSampleRate =\n    traceState?.get('sentry.sample_rate') ??\n    rootSpanAttributes[SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE] ??\n    rootSpanAttributes[SEMANTIC_ATTRIBUTE_SENTRY_PREVIOUS_TRACE_SAMPLE_RATE];\n\n  function applyLocalSampleRateToDsc(dsc: Partial<DynamicSamplingContext>): Partial<DynamicSamplingContext> {\n    if (typeof rootSpanSampleRate === 'number' || typeof rootSpanSampleRate === 'string') {\n      dsc.sample_rate = `${rootSpanSampleRate}`;\n    }\n    return dsc;\n  }\n\n  // For core implementation, we freeze the DSC onto the span as a non-enumerable property\n  const frozenDsc = (rootSpan as SpanWithMaybeDsc)[FROZEN_DSC_FIELD];\n  if (frozenDsc) {\n    return applyLocalSampleRateToDsc(frozenDsc);\n  }\n\n  // For OpenTelemetry, we freeze the DSC on the trace state\n  const traceStateDsc = traceState?.get('sentry.dsc');\n\n  // If the span has a DSC, we want it to take precedence\n  const dscOnTraceState = traceStateDsc && baggageHeaderToDynamicSamplingContext(traceStateDsc);\n\n  if (dscOnTraceState) {\n    return applyLocalSampleRateToDsc(dscOnTraceState);\n  }\n\n  // Else, we generate it from the span\n  const dsc = getDynamicSamplingContextFromClient(span.spanContext().traceId, client);\n\n  // We don't want to have a transaction name in the DSC if the source is \"url\" because URLs might contain PII\n  const source = rootSpanAttributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE];\n\n  // after JSON conversion, txn.name becomes jsonSpan.description\n  const name = rootSpanJson.description;\n  if (source !== 'url' && name) {\n    dsc.transaction = name;\n  }\n\n  // How can we even land here with hasSpansEnabled() returning false?\n  // Otel creates a Non-recording span in Tracing Without Performance mode when handling incoming requests\n  // So we end up with an active span that is not sampled (neither positively nor negatively)\n  if (hasSpansEnabled()) {\n    dsc.sampled = String(spanIsSampled(rootSpan));\n    dsc.sample_rand =\n      // In OTEL we store the sample rand on the trace state because we cannot access scopes for NonRecordingSpans\n      // The Sentry OTEL SpanSampler takes care of writing the sample rand on the root span\n      traceState?.get('sentry.sample_rand') ??\n      // On all other platforms we can actually get the scopes from a root span (we use this as a fallback)\n      getCapturedScopesOnSpan(rootSpan).scope?.getPropagationContext().sampleRand.toString();\n  }\n\n  applyLocalSampleRateToDsc(dsc);\n\n  client.emit('createDsc', dsc, rootSpan);\n\n  return dsc;\n}\n\n/**\n * Convert a Span to a baggage header.\n */\nexport function spanToBaggageHeader(span: Span): string | undefined {\n  const dsc = getDynamicSamplingContextFromSpan(span);\n  return dynamicSamplingContextToSentryBaggageHeader(dsc);\n}\n"],"names":["addNonEnumerableProperty","extractOrgIdFromDsnHost","DEFAULT_ENVIRONMENT","getClient","getRootSpan","spanToJSON","SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE","SEMANTIC_ATTRIBUTE_SENTRY_PREVIOUS_TRACE_SAMPLE_RATE","baggageHeaderToDynamicSamplingContext","SEMANTIC_ATTRIBUTE_SENTRY_SOURCE","hasSpansEnabled","spanIsSampled","getCapturedScopesOnSpan","dynamicSamplingContextToSentryBaggageHeader"],"mappings":";;;;;;;;;;;;AAkBA;;;CAGA,GACA,MAAM,mBAAmB;AAMzB;;CAEA,GACO,SAAS,gBAAgB,IAAI,EAAQ,GAAG;IAC7C,MAAM,mBAAmB;IACzBA,OAAAA,wBAAwB,CAAC,kBAAkB,kBAAkB;AAC/D;AAEA;;;;CAIA,GACO,SAAS,oCAAoC,QAAQ,EAAU,MAAM;IAC1E,MAAM,UAAU,OAAO,UAAU;IAEjC,MAAM,EAAE,WAAW,UAAU,EAAE,IAAA,EAAK,GAAI,OAAO,MAAM,MAAM,CAAA;IAE3D,IAAI;IACJ,IAAI,QAAQ,KAAK,EAAE;QACjB,SAAS,OAAO,QAAQ,KAAK;IACjC,OAAS,IAAI,MAAM;QACf,SAASC,IAAAA,uBAAuB,CAAC;IACrC;IAEA,mGAAA;IACA,wFAAA;IACE,MAAM,MAA8B;QAClC,aAAa,QAAQ,WAAA,IAAeC,UAAAA,mBAAmB;QACvD,SAAS,QAAQ,OAAO;QACxB;QACA;QACA;IACJ;IAEE,OAAO,IAAI,CAAC,aAAa;IAEzB,OAAO;AACT;AAEA;;CAEA,GACO,SAAS,mCAAmC,MAAM,EAAU,KAAK;IACtE,MAAM,qBAAqB,MAAM,qBAAqB;IACtD,OAAO,mBAAmB,GAAA,IAAO,oCAAoC,mBAAmB,OAAO,EAAE;AACnG;AAEA;;;;;;CAMA,GACO,SAAS,kCAAkC,IAAI;IACpD,MAAM,SAASC,cAAAA,SAAS;IACxB,IAAI,CAAC,QAAQ;QACX,OAAO,CAAA;IACX;IAEE,MAAM,WAAWC,UAAAA,WAAW,CAAC;IAC7B,MAAM,eAAeC,UAAAA,UAAU,CAAC;IAChC,MAAM,qBAAqB,aAAa,IAAI;IAC5C,MAAM,aAAa,SAAS,WAAW,GAAG,UAAU;IAEtD,sIAAA;IACA,kKAAA;IACE,MAAM,qBACJ,YAAY,IAAI,yBAChB,kBAAkB,CAACC,mBAAAA,qCAAqC,CAAA,IACxD,kBAAkB,CAACC,mBAAAA,oDAAoD,CAAC;IAE1E,SAAS,0BAA0B,GAAG;QACpC,IAAI,OAAO,uBAAuB,YAAY,OAAO,uBAAuB,UAAU;YACpF,IAAI,WAAA,GAAc,CAAC,EAAA,mBAAA,CAAA;QACA;QACA,OAAA;IACA;IAEA,wFAAA;IACA,MAAA,YAAA,QAAA,CAAA,iBAAA;IACA,IAAA,WAAA;QACA,OAAA,0BAAA;IACA;IAEA,0DAAA;IACA,MAAA,gBAAA,YAAA,IAAA;IAEA,uDAAA;IACA,MAAA,kBAAA,iBAAAC,QAAAA,qCAAA,CAAA;IAEA,IAAA,iBAAA;QACA,OAAA,0BAAA;IACA;IAEA,qCAAA;IACA,MAAA,MAAA,oCAAA,KAAA,WAAA,GAAA,OAAA,EAAA;IAEA,4GAAA;IACA,MAAA,SAAA,kBAAA,CAAAC,mBAAAA,gCAAA,CAAA;IAEA,+DAAA;IACA,MAAA,OAAA,aAAA,WAAA;IACA,IAAA,WAAA,SAAA,MAAA;QACA,IAAA,WAAA,GAAA;IACA;IAEA,oEAAA;IACA,wGAAA;IACA,2FAAA;IACA,IAAAC,gBAAAA,eAAA,IAAA;QACA,IAAA,OAAA,GAAA,OAAAC,UAAAA,aAAA,CAAA;QACA,IAAA,WAAA,GACA,4GAAA;QACA,qFAAA;QACA,YAAA,IAAA,yBACA,qGAAA;QACAC,MAAAA,uBAAA,CAAA,UAAA,KAAA,EAAA,wBAAA,WAAA;IACA;IAEA,0BAAA;IAEA,OAAA,IAAA,CAAA,aAAA,KAAA;IAEA,OAAA;AACA;AAEA;;CAEA,GACA,SAAA,oBAAA,IAAA;IACA,MAAA,MAAA,kCAAA;IACA,OAAAC,QAAAA,2CAAA,CAAA;AACA"}},
    {"offset": {"line": 3590, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3594, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/tracing/sentryNonRecordingSpan.ts"],"sourcesContent":["import type {\n  SentrySpanArguments,\n  Span,\n  SpanAttributes,\n  SpanAttributeValue,\n  SpanContextData,\n  SpanTimeInput,\n} from '../types-hoist/span';\nimport type { SpanStatus } from '../types-hoist/spanStatus';\nimport { generateSpanId, generateTraceId } from '../utils/propagationContext';\nimport { TRACE_FLAG_NONE } from '../utils/spanUtils';\n\n/**\n * A Sentry Span that is non-recording, meaning it will not be sent to Sentry.\n */\nexport class SentryNonRecordingSpan implements Span {\n  private _traceId: string;\n  private _spanId: string;\n\n  public constructor(spanContext: SentrySpanArguments = {}) {\n    this._traceId = spanContext.traceId || generateTraceId();\n    this._spanId = spanContext.spanId || generateSpanId();\n  }\n\n  /** @inheritdoc */\n  public spanContext(): SpanContextData {\n    return {\n      spanId: this._spanId,\n      traceId: this._traceId,\n      traceFlags: TRACE_FLAG_NONE,\n    };\n  }\n\n  /** @inheritdoc */\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  public end(_timestamp?: SpanTimeInput): void {}\n\n  /** @inheritdoc */\n  public setAttribute(_key: string, _value: SpanAttributeValue | undefined): this {\n    return this;\n  }\n\n  /** @inheritdoc */\n  public setAttributes(_values: SpanAttributes): this {\n    return this;\n  }\n\n  /** @inheritdoc */\n  public setStatus(_status: SpanStatus): this {\n    return this;\n  }\n\n  /** @inheritdoc */\n  public updateName(_name: string): this {\n    return this;\n  }\n\n  /** @inheritdoc */\n  public isRecording(): boolean {\n    return false;\n  }\n\n  /** @inheritdoc */\n  public addEvent(\n    _name: string,\n    _attributesOrStartTime?: SpanAttributes | SpanTimeInput,\n    _startTime?: SpanTimeInput,\n  ): this {\n    return this;\n  }\n\n  /** @inheritDoc */\n  public addLink(_link: unknown): this {\n    return this;\n  }\n\n  /** @inheritDoc */\n  public addLinks(_links: unknown[]): this {\n    return this;\n  }\n\n  /**\n   * This should generally not be used,\n   * but we need it for being compliant with the OTEL Span interface.\n   *\n   * @hidden\n   * @internal\n   */\n  public recordException(_exception: unknown, _time?: number | undefined): void {\n    // noop\n  }\n}\n"],"names":["generateTraceId","generateSpanId","TRACE_FLAG_NONE"],"mappings":";;;;;AAYA;;CAEA,GACO,MAAM;IAIJ,YAAY,cAAmC,CAAA,CAAE,CAAE;QACxD,IAAI,CAAC,QAAA,GAAW,YAAY,OAAA,IAAWA,mBAAAA,eAAe;QACtD,IAAI,CAAC,OAAA,GAAU,YAAY,MAAA,IAAUC,mBAAAA,cAAc;IACvD;IAEA,gBAAA,GACS,cAA+B;QACpC,OAAO;YACL,QAAQ,IAAI,CAAC,OAAO;YACpB,SAAS,IAAI,CAAC,QAAQ;YACtB,YAAYC,UAAAA,eAAe;QACjC;IACA;IAEA,gBAAA,GACA,gEAAA;IACS,IAAI,UAAU,EAAwB,CAAA;IAE/C,gBAAA,GACS,aAAa,IAAI,EAAU,MAAM,EAAwC;QAC9E,OAAO,IAAI;IACf;IAEA,gBAAA,GACS,cAAc,OAAO,EAAwB;QAClD,OAAO,IAAI;IACf;IAEA,gBAAA,GACS,UAAU,OAAO,EAAoB;QAC1C,OAAO,IAAI;IACf;IAEA,gBAAA,GACS,WAAW,KAAK,EAAgB;QACrC,OAAO,IAAI;IACf;IAEA,gBAAA,GACS,cAAuB;QAC5B,OAAO;IACX;IAEA,gBAAA,GACS,SACL,KAAK,EACL,sBAAsB,EACtB,UAAU,EACJ;QACN,OAAO,IAAI;IACf;IAEA,gBAAA,GACS,QAAQ,KAAK,EAAiB;QACnC,OAAO,IAAI;IACf;IAEA,gBAAA,GACS,SAAS,MAAM,EAAmB;QACvC,OAAO,IAAI;IACf;IAEA;;;;;;GAMA,GACS,gBAAgB,UAAU,EAAW,KAAK,EAA6B;IAChF,OAAA;IACA;AACA"}},
    {"offset": {"line": 3650, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3654, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/utils/handleCallbackErrors.ts"],"sourcesContent":["import { isThenable } from '../utils/is';\n\n/**\n * Wrap a callback function with error handling.\n * If an error is thrown, it will be passed to the `onError` callback and re-thrown.\n *\n * If the return value of the function is a promise, it will be handled with `maybeHandlePromiseRejection`.\n *\n * If an `onFinally` callback is provided, this will be called when the callback has finished\n * - so if it returns a promise, once the promise resolved/rejected,\n * else once the callback has finished executing.\n * The `onFinally` callback will _always_ be called, no matter if an error was thrown or not.\n */\nexport function handleCallbackErrors<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  Fn extends () => any,\n>(\n  fn: Fn,\n  onError: (error: unknown) => void,\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  onFinally: () => void = () => {},\n): ReturnType<Fn> {\n  let maybePromiseResult: ReturnType<Fn>;\n  try {\n    maybePromiseResult = fn();\n  } catch (e) {\n    onError(e);\n    onFinally();\n    throw e;\n  }\n\n  return maybeHandlePromiseRejection(maybePromiseResult, onError, onFinally);\n}\n\n/**\n * Maybe handle a promise rejection.\n * This expects to be given a value that _may_ be a promise, or any other value.\n * If it is a promise, and it rejects, it will call the `onError` callback.\n * Other than this, it will generally return the given value as-is.\n */\nfunction maybeHandlePromiseRejection<MaybePromise>(\n  value: MaybePromise,\n  onError: (error: unknown) => void,\n  onFinally: () => void,\n): MaybePromise {\n  if (isThenable(value)) {\n    // @ts-expect-error - the isThenable check returns the \"wrong\" type here\n    return value.then(\n      res => {\n        onFinally();\n        return res;\n      },\n      e => {\n        onError(e);\n        onFinally();\n        throw e;\n      },\n    );\n  }\n\n  onFinally();\n  return value;\n}\n"],"names":["isThenable"],"mappings":";;;;AAEA;;;;;;;;;;CAUA,GACO,SAAS,qBAId,EAAE,EACF,OAAO,EACT,gEAAA;AACE,YAAwB,KAAM,CAAE;IAEhC,IAAI;IACJ,IAAI;QACF,qBAAqB;IACzB,EAAI,OAAO,GAAG;QACV,QAAQ;QACR;QACA,MAAM;IACV;IAEE,OAAO,4BAA4B,oBAAoB,SAAS;AAClE;AAEA;;;;;CAKA,GACA,SAAS,4BACP,KAAK,EACL,OAAO,EACP,SAAS;IAET,IAAIA,GAAAA,UAAU,CAAC,QAAQ;QACzB,wEAAA;QACI,OAAO,MAAM,IAAI,CACf,CAAA;YACE;YACA,OAAO;QACf,GACM,CAAA;YACE,QAAQ;YACR;YACA,MAAM;QACd;IAEA;IAEE;IACA,OAAO;AACT"}},
    {"offset": {"line": 3701, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3705, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/tracing/logSpans.ts"],"sourcesContent":["import { DEBUG_BUILD } from '../debug-build';\nimport type { Span } from '../types-hoist/span';\nimport { logger } from '../utils/logger';\nimport { getRootSpan, spanIsSampled, spanToJSON } from '../utils/spanUtils';\n\n/**\n * Print a log message for a started span.\n */\nexport function logSpanStart(span: Span): void {\n  if (!DEBUG_BUILD) return;\n\n  const { description = '< unknown name >', op = '< unknown op >', parent_span_id: parentSpanId } = spanToJSON(span);\n  const { spanId } = span.spanContext();\n\n  const sampled = spanIsSampled(span);\n  const rootSpan = getRootSpan(span);\n  const isRootSpan = rootSpan === span;\n\n  const header = `[Tracing] Starting ${sampled ? 'sampled' : 'unsampled'} ${isRootSpan ? 'root ' : ''}span`;\n\n  const infoParts: string[] = [`op: ${op}`, `name: ${description}`, `ID: ${spanId}`];\n\n  if (parentSpanId) {\n    infoParts.push(`parent ID: ${parentSpanId}`);\n  }\n\n  if (!isRootSpan) {\n    const { op, description } = spanToJSON(rootSpan);\n    infoParts.push(`root ID: ${rootSpan.spanContext().spanId}`);\n    if (op) {\n      infoParts.push(`root op: ${op}`);\n    }\n    if (description) {\n      infoParts.push(`root description: ${description}`);\n    }\n  }\n\n  logger.log(`${header}\n  ${infoParts.join('\\n  ')}`);\n}\n\n/**\n * Print a log message for an ended span.\n */\nexport function logSpanEnd(span: Span): void {\n  if (!DEBUG_BUILD) return;\n\n  const { description = '< unknown name >', op = '< unknown op >' } = spanToJSON(span);\n  const { spanId } = span.spanContext();\n  const rootSpan = getRootSpan(span);\n  const isRootSpan = rootSpan === span;\n\n  const msg = `[Tracing] Finishing \"${op}\" ${isRootSpan ? 'root ' : ''}span \"${description}\" with ID ${spanId}`;\n  logger.log(msg);\n}\n"],"names":["DEBUG_BUILD","spanToJSON","spanIsSampled","getRootSpan","logger"],"mappings":";;;;;;AAKA;;CAEA,GACO,SAAS,aAAa,IAAI;IAC/B,IAAI,CAACA,WAAAA,WAAW,EAAE;IAElB,MAAM,EAAE,cAAc,kBAAkB,EAAE,KAAK,gBAAgB,EAAE,gBAAgB,YAAA,EAAa,GAAIC,UAAAA,UAAU,CAAC;IAC7G,MAAM,EAAE,MAAA,EAAO,GAAI,KAAK,WAAW;IAEnC,MAAM,UAAUC,UAAAA,aAAa,CAAC;IAC9B,MAAM,WAAWC,UAAAA,WAAW,CAAC;IAC7B,MAAM,aAAa,aAAa;IAEhC,MAAM,SAAS,CAAC,mBAAmB,EAAE,UAAU,YAAY,YAAY,CAAC,EAAE,aAAa,UAAU,GAAG,IAAI,CAAC;IAEzG,MAAM,YAAsB;QAAC,CAAC,IAAI,EAAE,GAAG,CAAA;QAAA,CAAA,MAAA,EAAA,YAAA,CAAA;QAAA,CAAA,IAAA,EAAA,OAAA,CAAA;KAAA;IAEA,IAAA,cAAA;QACA,UAAA,IAAA,CAAA,CAAA,WAAA,EAAA,aAAA,CAAA;IACA;IAEA,IAAA,CAAA,YAAA;QACA,MAAA,EAAA,EAAA,EAAA,WAAA,EAAA,GAAAF,UAAAA,UAAA,CAAA;QACA,UAAA,IAAA,CAAA,CAAA,SAAA,EAAA,SAAA,WAAA,GAAA,MAAA,CAAA,CAAA;QACA,IAAA,IAAA;YACA,UAAA,IAAA,CAAA,CAAA,SAAA,EAAA,GAAA,CAAA;QACA;QACA,IAAA,aAAA;YACA,UAAA,IAAA,CAAA,CAAA,kBAAA,EAAA,YAAA,CAAA;QACA;IACA;IAEAG,OAAAA,MAAA,CAAA,GAAA,CAAA,CAAA,EAAA,OAAA;EACA,EAAA,UAAA,IAAA,CAAA,QAAA,CAAA;AACA;AAEA;;CAEA,GACA,SAAA,WAAA,IAAA;IACA,IAAA,CAAAJ,WAAAA,WAAA,EAAA;IAEA,MAAA,EAAA,cAAA,kBAAA,EAAA,KAAA,gBAAA,EAAA,GAAAC,UAAAA,UAAA,CAAA;IACA,MAAA,EAAA,MAAA,EAAA,GAAA,KAAA,WAAA;IACA,MAAA,WAAAE,UAAAA,WAAA,CAAA;IACA,MAAA,aAAA,aAAA;IAEA,MAAA,MAAA,CAAA,qBAAA,EAAA,GAAA,EAAA,EAAA,aAAA,UAAA,GAAA,MAAA,EAAA,YAAA,UAAA,EAAA,OAAA,CAAA;IACAC,OAAAA,MAAA,CAAA,GAAA,CAAA;AACA"}},
    {"offset": {"line": 3755, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3759, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/tracing/sampling.ts"],"sourcesContent":["import { DEBUG_BUILD } from '../debug-build';\nimport type { Options } from '../types-hoist/options';\nimport type { SamplingContext } from '../types-hoist/samplingcontext';\nimport { hasSpansEnabled } from '../utils/hasSpansEnabled';\nimport { logger } from '../utils/logger';\nimport { parseSampleRate } from '../utils/parseSampleRate';\n\n/**\n * Makes a sampling decision for the given options.\n *\n * Called every time a root span is created. Only root spans which emerge with a `sampled` value of `true` will be\n * sent to Sentry.\n */\nexport function sampleSpan(\n  options: Pick<Options, 'tracesSampleRate' | 'tracesSampler'>,\n  samplingContext: SamplingContext,\n  sampleRand: number,\n): [sampled: boolean, sampleRate?: number, localSampleRateWasApplied?: boolean] {\n  // nothing to do if span recording is not enabled\n  if (!hasSpansEnabled(options)) {\n    return [false];\n  }\n\n  let localSampleRateWasApplied = undefined;\n\n  // we would have bailed already if neither `tracesSampler` nor `tracesSampleRate` were defined, so one of these should\n  // work; prefer the hook if so\n  let sampleRate;\n  if (typeof options.tracesSampler === 'function') {\n    sampleRate = options.tracesSampler({\n      ...samplingContext,\n      inheritOrSampleWith: fallbackSampleRate => {\n        // If we have an incoming parent sample rate, we'll just use that one.\n        // The sampling decision will be inherited because of the sample_rand that was generated when the trace reached the incoming boundaries of the SDK.\n        if (typeof samplingContext.parentSampleRate === 'number') {\n          return samplingContext.parentSampleRate;\n        }\n\n        // Fallback if parent sample rate is not on the incoming trace (e.g. if there is no baggage)\n        // This is to provide backwards compatibility if there are incoming traces from older SDKs that don't send a parent sample rate or a sample rand. In these cases we just want to force either a sampling decision on the downstream traces via the sample rate.\n        if (typeof samplingContext.parentSampled === 'boolean') {\n          return Number(samplingContext.parentSampled);\n        }\n\n        return fallbackSampleRate;\n      },\n    });\n    localSampleRateWasApplied = true;\n  } else if (samplingContext.parentSampled !== undefined) {\n    sampleRate = samplingContext.parentSampled;\n  } else if (typeof options.tracesSampleRate !== 'undefined') {\n    sampleRate = options.tracesSampleRate;\n    localSampleRateWasApplied = true;\n  }\n\n  // Since this is coming from the user (or from a function provided by the user), who knows what we might get.\n  // (The only valid values are booleans or numbers between 0 and 1.)\n  const parsedSampleRate = parseSampleRate(sampleRate);\n\n  if (parsedSampleRate === undefined) {\n    DEBUG_BUILD &&\n      logger.warn(\n        `[Tracing] Discarding root span because of invalid sample rate. Sample rate must be a boolean or a number between 0 and 1. Got ${JSON.stringify(\n          sampleRate,\n        )} of type ${JSON.stringify(typeof sampleRate)}.`,\n      );\n    return [false];\n  }\n\n  // if the function returned 0 (or false), or if `tracesSampleRate` is 0, it's a sign the transaction should be dropped\n  if (!parsedSampleRate) {\n    DEBUG_BUILD &&\n      logger.log(\n        `[Tracing] Discarding transaction because ${\n          typeof options.tracesSampler === 'function'\n            ? 'tracesSampler returned 0 or false'\n            : 'a negative sampling decision was inherited or tracesSampleRate is set to 0'\n        }`,\n      );\n    return [false, parsedSampleRate, localSampleRateWasApplied];\n  }\n\n  // We always compare the sample rand for the current execution context against the chosen sample rate.\n  // Read more: https://develop.sentry.dev/sdk/telemetry/traces/#propagated-random-value\n  const shouldSample = sampleRand < parsedSampleRate;\n\n  // if we're not going to keep it, we're done\n  if (!shouldSample) {\n    DEBUG_BUILD &&\n      logger.log(\n        `[Tracing] Discarding transaction because it's not included in the random sample (sampling rate = ${Number(\n          sampleRate,\n        )})`,\n      );\n  }\n\n  return [shouldSample, parsedSampleRate, localSampleRateWasApplied];\n}\n"],"names":["hasSpansEnabled","parseSampleRate","DEBUG_BUILD","logger"],"mappings":";;;;;;;AAOA;;;;;CAKA,GACO,SAAS,WACd,OAAO,EACP,eAAe,EACf,UAAU;IAEZ,iDAAA;IACE,IAAI,CAACA,gBAAAA,eAAe,CAAC,UAAU;QAC7B,OAAO;YAAC;SAAM;IAClB;IAEE,IAAI,4BAA4B;IAElC,sHAAA;IACA,8BAAA;IACE,IAAI;IACJ,IAAI,OAAO,QAAQ,aAAA,KAAkB,YAAY;QAC/C,aAAa,QAAQ,aAAa,CAAC;YACjC,GAAG,eAAe;YAClB,qBAAqB,CAAA;gBAC3B,sEAAA;gBACA,mJAAA;gBACQ,IAAI,OAAO,gBAAgB,gBAAA,KAAqB,UAAU;oBACxD,OAAO,gBAAgB,gBAAgB;gBACjD;gBAEA,4FAAA;gBACA,+PAAA;gBACQ,IAAI,OAAO,gBAAgB,aAAA,KAAkB,WAAW;oBACtD,OAAO,OAAO,gBAAgB,aAAa;gBACrD;gBAEQ,OAAO;YACf;QACA;QACI,4BAA4B;IAChC,OAAS,IAAI,gBAAgB,aAAA,KAAkB,WAAW;QACtD,aAAa,gBAAgB,aAAa;IAC9C,OAAS,IAAI,OAAO,QAAQ,gBAAA,KAAqB,aAAa;QAC1D,aAAa,QAAQ,gBAAgB;QACrC,4BAA4B;IAChC;IAEA,6GAAA;IACA,mEAAA;IACE,MAAM,mBAAmBC,gBAAAA,eAAe,CAAC;IAEzC,IAAI,qBAAqB,WAAW;QAClCC,WAAAA,WAAA,IACEC,OAAAA,MAAM,CAAC,IAAI,CACT,CAAC,8HAA8H,EAAE,KAAK,SAAS,CAC7I,YACA,SAAS,EAAE,KAAK,SAAS,CAAC,OAAO,YAAY,CAAC,CAAC;QAErD,OAAO;YAAC;SAAM;IAClB;IAEA,sHAAA;IACE,IAAI,CAAC,kBAAkB;QACrBD,WAAAA,WAAA,IACEC,OAAAA,MAAM,CAAC,GAAG,CACR,CAAC,yCAAyC,EACxC,OAAO,QAAQ,aAAA,KAAkB,aAC7B,sCACA,6EACL,CAAA;QAEA,OAAA;YAAA;YAAA;YAAA;SAAA;IACA;IAEA,sGAAA;IACA,sFAAA;IACA,MAAA,eAAA,aAAA;IAEA,4CAAA;IACA,IAAA,CAAA,cAAA;QACAD,WAAAA,WAAA,IACAC,OAAAA,MAAA,CAAA,GAAA,CACA,CAAA,iGAAA,EAAA,OACA,YACA,CAAA,CAAA;IAEA;IAEA,OAAA;QAAA;QAAA;QAAA;KAAA;AACA"}},
    {"offset": {"line": 3838, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3842, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/utils/normalize.ts"],"sourcesContent":["import type { Primitive } from '../types-hoist/misc';\nimport { isSyntheticEvent, isVueViewModel } from './is';\nimport { convertToPlainObject } from './object';\nimport { getFunctionName } from './stacktrace';\n\ntype Prototype = { constructor?: (...args: unknown[]) => unknown };\n// This is a hack to placate TS, relying on the fact that technically, arrays are objects with integer keys. Normally we\n// think of those keys as actual numbers, but `arr['0']` turns out to work just as well as `arr[0]`, and doing it this\n// way lets us use a single type in the places where behave as if we are only dealing with objects, even if some of them\n// might be arrays.\ntype ObjOrArray<T> = { [key: string]: T };\n\ntype MemoFunc = [\n  // memoize\n  (obj: object) => boolean,\n  // unmemoize\n  (obj: object) => void,\n];\n\n/**\n * Recursively normalizes the given object.\n *\n * - Creates a copy to prevent original input mutation\n * - Skips non-enumerable properties\n * - When stringifying, calls `toJSON` if implemented\n * - Removes circular references\n * - Translates non-serializable values (`undefined`/`NaN`/functions) to serializable format\n * - Translates known global objects/classes to a string representations\n * - Takes care of `Error` object serialization\n * - Optionally limits depth of final output\n * - Optionally limits number of properties/elements included in any single object/array\n *\n * @param input The object to be normalized.\n * @param depth The max depth to which to normalize the object. (Anything deeper stringified whole.)\n * @param maxProperties The max number of elements or properties to be included in any single array or\n * object in the normalized output.\n * @returns A normalized version of the object, or `\"**non-serializable**\"` if any errors are thrown during normalization.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function normalize(input: unknown, depth: number = 100, maxProperties: number = +Infinity): any {\n  try {\n    // since we're at the outermost level, we don't provide a key\n    return visit('', input, depth, maxProperties);\n  } catch (err) {\n    return { ERROR: `**non-serializable** (${err})` };\n  }\n}\n\n/** JSDoc */\nexport function normalizeToSize<T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  object: { [key: string]: any },\n  // Default Node.js REPL depth\n  depth: number = 3,\n  // 100kB, as 200kB is max payload size, so half sounds reasonable\n  maxSize: number = 100 * 1024,\n): T {\n  const normalized = normalize(object, depth);\n\n  if (jsonSize(normalized) > maxSize) {\n    return normalizeToSize(object, depth - 1, maxSize);\n  }\n\n  return normalized as T;\n}\n\n/**\n * Visits a node to perform normalization on it\n *\n * @param key The key corresponding to the given node\n * @param value The node to be visited\n * @param depth Optional number indicating the maximum recursion depth\n * @param maxProperties Optional maximum number of properties/elements included in any single object/array\n * @param memo Optional Memo class handling decycling\n */\nfunction visit(\n  key: string,\n  value: unknown,\n  depth: number = +Infinity,\n  maxProperties: number = +Infinity,\n  memo = memoBuilder(),\n): Primitive | ObjOrArray<unknown> {\n  const [memoize, unmemoize] = memo;\n\n  // Get the simple cases out of the way first\n  if (\n    value == null || // this matches null and undefined -> eqeq not eqeqeq\n    ['boolean', 'string'].includes(typeof value) ||\n    (typeof value === 'number' && Number.isFinite(value))\n  ) {\n    return value as Primitive;\n  }\n\n  const stringified = stringifyValue(key, value);\n\n  // Anything we could potentially dig into more (objects or arrays) will have come back as `\"[object XXXX]\"`.\n  // Everything else will have already been serialized, so if we don't see that pattern, we're done.\n  if (!stringified.startsWith('[object ')) {\n    return stringified;\n  }\n\n  // From here on, we can assert that `value` is either an object or an array.\n\n  // Do not normalize objects that we know have already been normalized. As a general rule, the\n  // \"__sentry_skip_normalization__\" property should only be used sparingly and only should only be set on objects that\n  // have already been normalized.\n  if ((value as ObjOrArray<unknown>)['__sentry_skip_normalization__']) {\n    return value as ObjOrArray<unknown>;\n  }\n\n  // We can set `__sentry_override_normalization_depth__` on an object to ensure that from there\n  // We keep a certain amount of depth.\n  // This should be used sparingly, e.g. we use it for the redux integration to ensure we get a certain amount of state.\n  const remainingDepth =\n    typeof (value as ObjOrArray<unknown>)['__sentry_override_normalization_depth__'] === 'number'\n      ? ((value as ObjOrArray<unknown>)['__sentry_override_normalization_depth__'] as number)\n      : depth;\n\n  // We're also done if we've reached the max depth\n  if (remainingDepth === 0) {\n    // At this point we know `serialized` is a string of the form `\"[object XXXX]\"`. Clean it up so it's just `\"[XXXX]\"`.\n    return stringified.replace('object ', '');\n  }\n\n  // If we've already visited this branch, bail out, as it's circular reference. If not, note that we're seeing it now.\n  if (memoize(value)) {\n    return '[Circular ~]';\n  }\n\n  // If the value has a `toJSON` method, we call it to extract more information\n  const valueWithToJSON = value as unknown & { toJSON?: () => unknown };\n  if (valueWithToJSON && typeof valueWithToJSON.toJSON === 'function') {\n    try {\n      const jsonValue = valueWithToJSON.toJSON();\n      // We need to normalize the return value of `.toJSON()` in case it has circular references\n      return visit('', jsonValue, remainingDepth - 1, maxProperties, memo);\n    } catch (err) {\n      // pass (The built-in `toJSON` failed, but we can still try to do it ourselves)\n    }\n  }\n\n  // At this point we know we either have an object or an array, we haven't seen it before, and we're going to recurse\n  // because we haven't yet reached the max depth. Create an accumulator to hold the results of visiting each\n  // property/entry, and keep track of the number of items we add to it.\n  const normalized = (Array.isArray(value) ? [] : {}) as ObjOrArray<unknown>;\n  let numAdded = 0;\n\n  // Before we begin, convert`Error` and`Event` instances into plain objects, since some of each of their relevant\n  // properties are non-enumerable and otherwise would get missed.\n  const visitable = convertToPlainObject(value as ObjOrArray<unknown>);\n\n  for (const visitKey in visitable) {\n    // Avoid iterating over fields in the prototype if they've somehow been exposed to enumeration.\n    if (!Object.prototype.hasOwnProperty.call(visitable, visitKey)) {\n      continue;\n    }\n\n    if (numAdded >= maxProperties) {\n      normalized[visitKey] = '[MaxProperties ~]';\n      break;\n    }\n\n    // Recursively visit all the child nodes\n    const visitValue = visitable[visitKey];\n    normalized[visitKey] = visit(visitKey, visitValue, remainingDepth - 1, maxProperties, memo);\n\n    numAdded++;\n  }\n\n  // Once we've visited all the branches, remove the parent from memo storage\n  unmemoize(value);\n\n  // Return accumulated values\n  return normalized;\n}\n\n/* eslint-disable complexity */\n/**\n * Stringify the given value. Handles various known special values and types.\n *\n * Not meant to be used on simple primitives which already have a string representation, as it will, for example, turn\n * the number 1231 into \"[Object Number]\", nor on `null`, as it will throw.\n *\n * @param value The value to stringify\n * @returns A stringified representation of the given value\n */\nfunction stringifyValue(\n  key: unknown,\n  // this type is a tiny bit of a cheat, since this function does handle NaN (which is technically a number), but for\n  // our internal use, it'll do\n  value: Exclude<unknown, string | number | boolean | null>,\n): string {\n  try {\n    if (key === 'domain' && value && typeof value === 'object' && (value as { _events: unknown })._events) {\n      return '[Domain]';\n    }\n\n    if (key === 'domainEmitter') {\n      return '[DomainEmitter]';\n    }\n\n    // It's safe to use `global`, `window`, and `document` here in this manner, as we are asserting using `typeof` first\n    // which won't throw if they are not present.\n\n    if (typeof global !== 'undefined' && value === global) {\n      return '[Global]';\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    if (typeof window !== 'undefined' && value === window) {\n      return '[Window]';\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    if (typeof document !== 'undefined' && value === document) {\n      return '[Document]';\n    }\n\n    if (isVueViewModel(value)) {\n      return '[VueViewModel]';\n    }\n\n    // React's SyntheticEvent thingy\n    if (isSyntheticEvent(value)) {\n      return '[SyntheticEvent]';\n    }\n\n    if (typeof value === 'number' && !Number.isFinite(value)) {\n      return `[${value}]`;\n    }\n\n    if (typeof value === 'function') {\n      return `[Function: ${getFunctionName(value)}]`;\n    }\n\n    if (typeof value === 'symbol') {\n      return `[${String(value)}]`;\n    }\n\n    // stringified BigInts are indistinguishable from regular numbers, so we need to label them to avoid confusion\n    if (typeof value === 'bigint') {\n      return `[BigInt: ${String(value)}]`;\n    }\n\n    // Now that we've knocked out all the special cases and the primitives, all we have left are objects. Simply casting\n    // them to strings means that instances of classes which haven't defined their `toStringTag` will just come out as\n    // `\"[object Object]\"`. If we instead look at the constructor's name (which is the same as the name of the class),\n    // we can make sure that only plain objects come out that way.\n    const objName = getConstructorName(value);\n\n    // Handle HTML Elements\n    if (/^HTML(\\w*)Element$/.test(objName)) {\n      return `[HTMLElement: ${objName}]`;\n    }\n\n    return `[object ${objName}]`;\n  } catch (err) {\n    return `**non-serializable** (${err})`;\n  }\n}\n/* eslint-enable complexity */\n\nfunction getConstructorName(value: unknown): string {\n  const prototype: Prototype | null = Object.getPrototypeOf(value);\n\n  return prototype?.constructor ? prototype.constructor.name : 'null prototype';\n}\n\n/** Calculates bytes size of input string */\nfunction utf8Length(value: string): number {\n  // eslint-disable-next-line no-bitwise\n  return ~-encodeURI(value).split(/%..|./).length;\n}\n\n/** Calculates bytes size of input object */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction jsonSize(value: any): number {\n  return utf8Length(JSON.stringify(value));\n}\n\n/**\n * Normalizes URLs in exceptions and stacktraces to a base path so Sentry can fingerprint\n * across platforms and working directory.\n *\n * @param url The URL to be normalized.\n * @param basePath The application base path.\n * @returns The normalized URL.\n */\nexport function normalizeUrlToBase(url: string, basePath: string): string {\n  const escapedBase = basePath\n    // Backslash to forward\n    .replace(/\\\\/g, '/')\n    // Escape RegExp special characters\n    .replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&');\n\n  let newUrl = url;\n  try {\n    newUrl = decodeURI(url);\n  } catch (_Oo) {\n    // Sometime this breaks\n  }\n  return (\n    newUrl\n      .replace(/\\\\/g, '/')\n      .replace(/webpack:\\/?/g, '') // Remove intermediate base path\n      // eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor\n      .replace(new RegExp(`(file://)?/*${escapedBase}/*`, 'ig'), 'app:///')\n  );\n}\n\n/**\n * Helper to decycle json objects\n */\nfunction memoBuilder(): MemoFunc {\n  const inner = new WeakSet<object>();\n  function memoize(obj: object): boolean {\n    if (inner.has(obj)) {\n      return true;\n    }\n    inner.add(obj);\n    return false;\n  }\n\n  function unmemoize(obj: object): void {\n    inner.delete(obj);\n  }\n  return [memoize, unmemoize];\n}\n"],"names":["convertToPlainObject","isVueViewModel","isSyntheticEvent","getFunctionName"],"mappings":"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"}},
    {"offset": {"line": 4089, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4093, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/utils/envelope.ts"],"sourcesContent":["import { getSentryCarrier } from '../carrier';\nimport type { Attachment } from '../types-hoist/attachment';\nimport type { DataCategory } from '../types-hoist/datacategory';\nimport type { DsnComponents } from '../types-hoist/dsn';\nimport type {\n  AttachmentItem,\n  BaseEnvelopeHeaders,\n  BaseEnvelopeItemHeaders,\n  Envelope,\n  EnvelopeItemType,\n  EventEnvelopeHeaders,\n  SpanItem,\n} from '../types-hoist/envelope';\nimport type { Event } from '../types-hoist/event';\nimport type { SdkInfo } from '../types-hoist/sdkinfo';\nimport type { SdkMetadata } from '../types-hoist/sdkmetadata';\nimport type { SpanJSON } from '../types-hoist/span';\nimport { dsnToString } from './dsn';\nimport { normalize } from './normalize';\nimport { GLOBAL_OBJ } from './worldwide';\n\n/**\n * Creates an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */\nexport function createEnvelope<E extends Envelope>(headers: E[0], items: E[1] = []): E {\n  return [headers, items] as E;\n}\n\n/**\n * Add an item to an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */\nexport function addItemToEnvelope<E extends Envelope>(envelope: E, newItem: E[1][number]): E {\n  const [headers, items] = envelope;\n  return [headers, [...items, newItem]] as unknown as E;\n}\n\n/**\n * Convenience function to loop through the items and item types of an envelope.\n * (This function was mostly created because working with envelope types is painful at the moment)\n *\n * If the callback returns true, the rest of the items will be skipped.\n */\nexport function forEachEnvelopeItem<E extends Envelope>(\n  envelope: Envelope,\n  callback: (envelopeItem: E[1][number], envelopeItemType: E[1][number][0]['type']) => boolean | void,\n): boolean {\n  const envelopeItems = envelope[1];\n\n  for (const envelopeItem of envelopeItems) {\n    const envelopeItemType = envelopeItem[0].type;\n    const result = callback(envelopeItem, envelopeItemType);\n\n    if (result) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Returns true if the envelope contains any of the given envelope item types\n */\nexport function envelopeContainsItemType(envelope: Envelope, types: EnvelopeItemType[]): boolean {\n  return forEachEnvelopeItem(envelope, (_, type) => types.includes(type));\n}\n\n/**\n * Encode a string to UTF8 array.\n */\nfunction encodeUTF8(input: string): Uint8Array {\n  const carrier = getSentryCarrier(GLOBAL_OBJ);\n  return carrier.encodePolyfill ? carrier.encodePolyfill(input) : new TextEncoder().encode(input);\n}\n\n/**\n * Decode a UTF8 array to string.\n */\nfunction decodeUTF8(input: Uint8Array): string {\n  const carrier = getSentryCarrier(GLOBAL_OBJ);\n  return carrier.decodePolyfill ? carrier.decodePolyfill(input) : new TextDecoder().decode(input);\n}\n\n/**\n * Serializes an envelope.\n */\nexport function serializeEnvelope(envelope: Envelope): string | Uint8Array {\n  const [envHeaders, items] = envelope;\n  // Initially we construct our envelope as a string and only convert to binary chunks if we encounter binary data\n  let parts: string | Uint8Array[] = JSON.stringify(envHeaders);\n\n  function append(next: string | Uint8Array): void {\n    if (typeof parts === 'string') {\n      parts = typeof next === 'string' ? parts + next : [encodeUTF8(parts), next];\n    } else {\n      parts.push(typeof next === 'string' ? encodeUTF8(next) : next);\n    }\n  }\n\n  for (const item of items) {\n    const [itemHeaders, payload] = item;\n\n    append(`\\n${JSON.stringify(itemHeaders)}\\n`);\n\n    if (typeof payload === 'string' || payload instanceof Uint8Array) {\n      append(payload);\n    } else {\n      let stringifiedPayload: string;\n      try {\n        stringifiedPayload = JSON.stringify(payload);\n      } catch (e) {\n        // In case, despite all our efforts to keep `payload` circular-dependency-free, `JSON.stringify()` still\n        // fails, we try again after normalizing it again with infinite normalization depth. This of course has a\n        // performance impact but in this case a performance hit is better than throwing.\n        stringifiedPayload = JSON.stringify(normalize(payload));\n      }\n      append(stringifiedPayload);\n    }\n  }\n\n  return typeof parts === 'string' ? parts : concatBuffers(parts);\n}\n\nfunction concatBuffers(buffers: Uint8Array[]): Uint8Array {\n  const totalLength = buffers.reduce((acc, buf) => acc + buf.length, 0);\n\n  const merged = new Uint8Array(totalLength);\n  let offset = 0;\n  for (const buffer of buffers) {\n    merged.set(buffer, offset);\n    offset += buffer.length;\n  }\n\n  return merged;\n}\n\n/**\n * Parses an envelope\n */\nexport function parseEnvelope(env: string | Uint8Array): Envelope {\n  let buffer = typeof env === 'string' ? encodeUTF8(env) : env;\n\n  function readBinary(length: number): Uint8Array {\n    const bin = buffer.subarray(0, length);\n    // Replace the buffer with the remaining data excluding trailing newline\n    buffer = buffer.subarray(length + 1);\n    return bin;\n  }\n\n  function readJson<T>(): T {\n    let i = buffer.indexOf(0xa);\n    // If we couldn't find a newline, we must have found the end of the buffer\n    if (i < 0) {\n      i = buffer.length;\n    }\n\n    return JSON.parse(decodeUTF8(readBinary(i))) as T;\n  }\n\n  const envelopeHeader = readJson<BaseEnvelopeHeaders>();\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const items: [any, any][] = [];\n\n  while (buffer.length) {\n    const itemHeader = readJson<BaseEnvelopeItemHeaders>();\n    const binaryLength = typeof itemHeader.length === 'number' ? itemHeader.length : undefined;\n\n    items.push([itemHeader, binaryLength ? readBinary(binaryLength) : readJson()]);\n  }\n\n  return [envelopeHeader, items];\n}\n\n/**\n * Creates envelope item for a single span\n */\nexport function createSpanEnvelopeItem(spanJson: Partial<SpanJSON>): SpanItem {\n  const spanHeaders: SpanItem[0] = {\n    type: 'span',\n  };\n\n  return [spanHeaders, spanJson];\n}\n\n/**\n * Creates attachment envelope items\n */\nexport function createAttachmentEnvelopeItem(attachment: Attachment): AttachmentItem {\n  const buffer = typeof attachment.data === 'string' ? encodeUTF8(attachment.data) : attachment.data;\n\n  return [\n    {\n      type: 'attachment',\n      length: buffer.length,\n      filename: attachment.filename,\n      content_type: attachment.contentType,\n      attachment_type: attachment.attachmentType,\n    },\n    buffer,\n  ];\n}\n\nconst ITEM_TYPE_TO_DATA_CATEGORY_MAP: Record<EnvelopeItemType, DataCategory> = {\n  session: 'session',\n  sessions: 'session',\n  attachment: 'attachment',\n  transaction: 'transaction',\n  event: 'error',\n  client_report: 'internal',\n  user_report: 'default',\n  profile: 'profile',\n  profile_chunk: 'profile',\n  replay_event: 'replay',\n  replay_recording: 'replay',\n  check_in: 'monitor',\n  feedback: 'feedback',\n  span: 'span',\n  raw_security: 'security',\n  log: 'log_item',\n};\n\n/**\n * Maps the type of an envelope item to a data category.\n */\nexport function envelopeItemTypeToDataCategory(type: EnvelopeItemType): DataCategory {\n  return ITEM_TYPE_TO_DATA_CATEGORY_MAP[type];\n}\n\n/** Extracts the minimal SDK info from the metadata or an events */\nexport function getSdkMetadataForEnvelopeHeader(metadataOrEvent?: SdkMetadata | Event): SdkInfo | undefined {\n  if (!metadataOrEvent?.sdk) {\n    return;\n  }\n  const { name, version } = metadataOrEvent.sdk;\n  return { name, version };\n}\n\n/**\n * Creates event envelope headers, based on event, sdk info and tunnel\n * Note: This function was extracted from the core package to make it available in Replay\n */\nexport function createEventEnvelopeHeaders(\n  event: Event,\n  sdkInfo: SdkInfo | undefined,\n  tunnel: string | undefined,\n  dsn?: DsnComponents,\n): EventEnvelopeHeaders {\n  const dynamicSamplingContext = event.sdkProcessingMetadata?.dynamicSamplingContext;\n  return {\n    event_id: event.event_id as string,\n    sent_at: new Date().toISOString(),\n    ...(sdkInfo && { sdk: sdkInfo }),\n    ...(!!tunnel && dsn && { dsn: dsnToString(dsn) }),\n    ...(dynamicSamplingContext && {\n      trace: dynamicSamplingContext,\n    }),\n  };\n}\n"],"names":["carrier","getSentryCarrier","GLOBAL_OBJ","normalize","dsn","dsnToString"],"mappings":"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"}},
    {"offset": {"line": 4326, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4330, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/envelope.ts"],"sourcesContent":["import type { Client } from './client';\nimport { getDynamicSamplingContextFromSpan } from './tracing/dynamicSamplingContext';\nimport type { SentrySpan } from './tracing/sentrySpan';\nimport type { LegacyCSPReport } from './types-hoist/csp';\nimport type { DsnComponents } from './types-hoist/dsn';\nimport type {\n  DynamicSamplingContext,\n  EventEnvelope,\n  EventItem,\n  RawSecurityEnvelope,\n  RawSecurityItem,\n  SessionEnvelope,\n  SessionItem,\n  SpanEnvelope,\n  SpanItem,\n} from './types-hoist/envelope';\nimport type { Event } from './types-hoist/event';\nimport type { SdkInfo } from './types-hoist/sdkinfo';\nimport type { SdkMetadata } from './types-hoist/sdkmetadata';\nimport type { Session, SessionAggregates } from './types-hoist/session';\nimport { dsnToString } from './utils/dsn';\nimport {\n  createEnvelope,\n  createEventEnvelopeHeaders,\n  createSpanEnvelopeItem,\n  getSdkMetadataForEnvelopeHeader,\n} from './utils/envelope';\nimport { uuid4 } from './utils/misc';\nimport { showSpanDropWarning, spanToJSON } from './utils/spanUtils';\n\n/**\n * Apply SdkInfo (name, version, packages, integrations) to the corresponding event key.\n * Merge with existing data if any.\n **/\nfunction enhanceEventWithSdkInfo(event: Event, sdkInfo?: SdkInfo): Event {\n  if (!sdkInfo) {\n    return event;\n  }\n  event.sdk = event.sdk || {};\n  event.sdk.name = event.sdk.name || sdkInfo.name;\n  event.sdk.version = event.sdk.version || sdkInfo.version;\n  event.sdk.integrations = [...(event.sdk.integrations || []), ...(sdkInfo.integrations || [])];\n  event.sdk.packages = [...(event.sdk.packages || []), ...(sdkInfo.packages || [])];\n  return event;\n}\n\n/** Creates an envelope from a Session */\nexport function createSessionEnvelope(\n  session: Session | SessionAggregates,\n  dsn?: DsnComponents,\n  metadata?: SdkMetadata,\n  tunnel?: string,\n): SessionEnvelope {\n  const sdkInfo = getSdkMetadataForEnvelopeHeader(metadata);\n  const envelopeHeaders = {\n    sent_at: new Date().toISOString(),\n    ...(sdkInfo && { sdk: sdkInfo }),\n    ...(!!tunnel && dsn && { dsn: dsnToString(dsn) }),\n  };\n\n  const envelopeItem: SessionItem =\n    'aggregates' in session ? [{ type: 'sessions' }, session] : [{ type: 'session' }, session.toJSON()];\n\n  return createEnvelope<SessionEnvelope>(envelopeHeaders, [envelopeItem]);\n}\n\n/**\n * Create an Envelope from an event.\n */\nexport function createEventEnvelope(\n  event: Event,\n  dsn?: DsnComponents,\n  metadata?: SdkMetadata,\n  tunnel?: string,\n): EventEnvelope {\n  const sdkInfo = getSdkMetadataForEnvelopeHeader(metadata);\n\n  /*\n    Note: Due to TS, event.type may be `replay_event`, theoretically.\n    In practice, we never call `createEventEnvelope` with `replay_event` type,\n    and we'd have to adjust a looot of types to make this work properly.\n    We want to avoid casting this around, as that could lead to bugs (e.g. when we add another type)\n    So the safe choice is to really guard against the replay_event type here.\n  */\n  const eventType = event.type && event.type !== 'replay_event' ? event.type : 'event';\n\n  enhanceEventWithSdkInfo(event, metadata?.sdk);\n\n  const envelopeHeaders = createEventEnvelopeHeaders(event, sdkInfo, tunnel, dsn);\n\n  // Prevent this data (which, if it exists, was used in earlier steps in the processing pipeline) from being sent to\n  // sentry. (Note: Our use of this property comes and goes with whatever we might be debugging, whatever hacks we may\n  // have temporarily added, etc. Even if we don't happen to be using it at some point in the future, let's not get rid\n  // of this `delete`, lest we miss putting it back in the next time the property is in use.)\n  delete event.sdkProcessingMetadata;\n\n  const eventItem: EventItem = [{ type: eventType }, event];\n  return createEnvelope<EventEnvelope>(envelopeHeaders, [eventItem]);\n}\n\n/**\n * Create envelope from Span item.\n *\n * Takes an optional client and runs spans through `beforeSendSpan` if available.\n */\nexport function createSpanEnvelope(spans: [SentrySpan, ...SentrySpan[]], client?: Client): SpanEnvelope {\n  function dscHasRequiredProps(dsc: Partial<DynamicSamplingContext>): dsc is DynamicSamplingContext {\n    return !!dsc.trace_id && !!dsc.public_key;\n  }\n\n  // For the moment we'll obtain the DSC from the first span in the array\n  // This might need to be changed if we permit sending multiple spans from\n  // different segments in one envelope\n  const dsc = getDynamicSamplingContextFromSpan(spans[0]);\n\n  const dsn = client?.getDsn();\n  const tunnel = client?.getOptions().tunnel;\n\n  const headers: SpanEnvelope[0] = {\n    sent_at: new Date().toISOString(),\n    ...(dscHasRequiredProps(dsc) && { trace: dsc }),\n    ...(!!tunnel && dsn && { dsn: dsnToString(dsn) }),\n  };\n\n  const beforeSendSpan = client?.getOptions().beforeSendSpan;\n  const convertToSpanJSON = beforeSendSpan\n    ? (span: SentrySpan) => {\n        const spanJson = spanToJSON(span);\n        const processedSpan = beforeSendSpan(spanJson);\n\n        if (!processedSpan) {\n          showSpanDropWarning();\n          return spanJson;\n        }\n\n        return processedSpan;\n      }\n    : spanToJSON;\n\n  const items: SpanItem[] = [];\n  for (const span of spans) {\n    const spanJson = convertToSpanJSON(span);\n    if (spanJson) {\n      items.push(createSpanEnvelopeItem(spanJson));\n    }\n  }\n\n  return createEnvelope<SpanEnvelope>(headers, items);\n}\n\n/**\n * Create an Envelope from a CSP report.\n */\nexport function createRawSecurityEnvelope(\n  report: LegacyCSPReport,\n  dsn: DsnComponents,\n  tunnel?: string,\n  release?: string,\n  environment?: string,\n): RawSecurityEnvelope {\n  const envelopeHeaders = {\n    event_id: uuid4(),\n    ...(!!tunnel && dsn && { dsn: dsnToString(dsn) }),\n  };\n\n  const eventItem: RawSecurityItem = [\n    { type: 'raw_security', sentry_release: release, sentry_environment: environment },\n    report,\n  ];\n\n  return createEnvelope<RawSecurityEnvelope>(envelopeHeaders, [eventItem]);\n}\n"],"names":["dsn","getSdkMetadataForEnvelopeHeader","dsnToString","createEnvelope","createEventEnvelopeHeaders","getDynamicSamplingContextFromSpan","spanToJSON","showSpanDropWarning","createSpanEnvelopeItem"],"mappings":"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"}},
    {"offset": {"line": 4458, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4462, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/tracing/measurement.ts"],"sourcesContent":["import { DEBUG_BUILD } from '../debug-build';\nimport {\n  SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT,\n  SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE,\n} from '../semanticAttributes';\nimport type { Measurements, MeasurementUnit } from '../types-hoist/measurement';\nimport type { TimedEvent } from '../types-hoist/timedEvent';\nimport { logger } from '../utils/logger';\nimport { getActiveSpan, getRootSpan } from '../utils/spanUtils';\n\n/**\n * Adds a measurement to the active transaction on the current global scope. You can optionally pass in a different span\n * as the 4th parameter.\n */\nexport function setMeasurement(name: string, value: number, unit: MeasurementUnit, activeSpan = getActiveSpan()): void {\n  const rootSpan = activeSpan && getRootSpan(activeSpan);\n\n  if (rootSpan) {\n    DEBUG_BUILD && logger.log(`[Measurement] Setting measurement on root span: ${name} = ${value} ${unit}`);\n    rootSpan.addEvent(name, {\n      [SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE]: value,\n      [SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT]: unit as string,\n    });\n  }\n}\n\n/**\n * Convert timed events to measurements.\n */\nexport function timedEventsToMeasurements(events: TimedEvent[]): Measurements | undefined {\n  if (!events || events.length === 0) {\n    return undefined;\n  }\n\n  const measurements: Measurements = {};\n  events.forEach(event => {\n    const attributes = event.attributes || {};\n    const unit = attributes[SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT] as MeasurementUnit | undefined;\n    const value = attributes[SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE] as number | undefined;\n\n    if (typeof unit === 'string' && typeof value === 'number') {\n      measurements[event.name] = { value, unit };\n    }\n  });\n\n  return measurements;\n}\n"],"names":["getActiveSpan","getRootSpan","DEBUG_BUILD","logger","SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE","SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT"],"mappings":";;;;;;;AAUA;;;CAGA,GACO,SAAS,eAAe,IAAI,EAAU,KAAK,EAAU,IAAI,EAAmB,aAAaA,UAAAA,aAAa,EAAE;IAC7G,MAAM,WAAW,cAAcC,UAAAA,WAAW,CAAC;IAE3C,IAAI,UAAU;QACZC,WAAAA,WAAAA,IAAeC,OAAAA,MAAM,CAAC,GAAG,CAAC,CAAC,gDAAgD,EAAE,KAAK,GAAG,EAAE,MAAM,CAAC,EAAE,KAAK,CAAA;QACA,SAAA,QAAA,CAAA,MAAA;YACA,CAAAC,mBAAAA,2CAAA,CAAA,EAAA;YACA,CAAAC,mBAAAA,0CAAA,CAAA,EAAA;QACA;IACA;AACA;AAEA;;CAEA,GACA,SAAA,0BAAA,MAAA;IACA,IAAA,CAAA,UAAA,OAAA,MAAA,KAAA,GAAA;QACA,OAAA;IACA;IAEA,MAAA,eAAA,CAAA;IACA,OAAA,OAAA,CAAA,CAAA;QACA,MAAA,aAAA,MAAA,UAAA,IAAA,CAAA;QACA,MAAA,OAAA,UAAA,CAAAA,mBAAAA,0CAAA,CAAA;QACA,MAAA,QAAA,UAAA,CAAAD,mBAAAA,2CAAA,CAAA;QAEA,IAAA,OAAA,SAAA,YAAA,OAAA,UAAA,UAAA;YACA,YAAA,CAAA,MAAA,IAAA,CAAA,GAAA;gBAAA;gBAAA;YAAA;QACA;IACA;IAEA,OAAA;AACA"}},
    {"offset": {"line": 4504, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4508, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/tracing/sentrySpan.ts"],"sourcesContent":["import { getClient, getCurrentScope } from '../currentScopes';\nimport { DEBUG_BUILD } from '../debug-build';\nimport { createSpanEnvelope } from '../envelope';\nimport {\n  SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME,\n  SEMANTIC_ATTRIBUTE_PROFILE_ID,\n  SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME,\n  SEMANTIC_ATTRIBUTE_SENTRY_OP,\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n  SEMANTIC_ATTRIBUTE_SENTRY_SOURCE,\n} from '../semanticAttributes';\nimport type { SpanEnvelope } from '../types-hoist/envelope';\nimport type { TransactionEvent } from '../types-hoist/event';\nimport type { SpanLink } from '../types-hoist/link';\nimport type {\n  SentrySpanArguments,\n  Span,\n  SpanAttributes,\n  SpanAttributeValue,\n  SpanContextData,\n  SpanJSON,\n  SpanOrigin,\n  SpanTimeInput,\n} from '../types-hoist/span';\nimport type { SpanStatus } from '../types-hoist/spanStatus';\nimport type { TimedEvent } from '../types-hoist/timedEvent';\nimport type { TransactionSource } from '../types-hoist/transaction';\nimport { logger } from '../utils/logger';\nimport { generateSpanId, generateTraceId } from '../utils/propagationContext';\nimport {\n  convertSpanLinksForEnvelope,\n  getRootSpan,\n  getSpanDescendants,\n  getStatusMessage,\n  spanTimeInputToSeconds,\n  spanToJSON,\n  spanToTransactionTraceContext,\n  TRACE_FLAG_NONE,\n  TRACE_FLAG_SAMPLED,\n} from '../utils/spanUtils';\nimport { timestampInSeconds } from '../utils/time';\nimport { getDynamicSamplingContextFromSpan } from './dynamicSamplingContext';\nimport { logSpanEnd } from './logSpans';\nimport { timedEventsToMeasurements } from './measurement';\nimport { getCapturedScopesOnSpan } from './utils';\n\nconst MAX_SPAN_COUNT = 1000;\n\n/**\n * Span contains all data about a span\n */\nexport class SentrySpan implements Span {\n  protected _traceId: string;\n  protected _spanId: string;\n  protected _parentSpanId?: string | undefined;\n  protected _sampled: boolean | undefined;\n  protected _name?: string | undefined;\n  protected _attributes: SpanAttributes;\n  protected _links?: SpanLink[];\n  /** Epoch timestamp in seconds when the span started. */\n  protected _startTime: number;\n  /** Epoch timestamp in seconds when the span ended. */\n  protected _endTime?: number | undefined;\n  /** Internal keeper of the status */\n  protected _status?: SpanStatus;\n  /** The timed events added to this span. */\n  protected _events: TimedEvent[];\n\n  /** if true, treat span as a standalone span (not part of a transaction) */\n  private _isStandaloneSpan?: boolean;\n\n  /**\n   * You should never call the constructor manually, always use `Sentry.startSpan()`\n   * or other span methods.\n   * @internal\n   * @hideconstructor\n   * @hidden\n   */\n  public constructor(spanContext: SentrySpanArguments = {}) {\n    this._traceId = spanContext.traceId || generateTraceId();\n    this._spanId = spanContext.spanId || generateSpanId();\n    this._startTime = spanContext.startTimestamp || timestampInSeconds();\n    this._links = spanContext.links;\n\n    this._attributes = {};\n    this.setAttributes({\n      [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'manual',\n      [SEMANTIC_ATTRIBUTE_SENTRY_OP]: spanContext.op,\n      ...spanContext.attributes,\n    });\n\n    this._name = spanContext.name;\n\n    if (spanContext.parentSpanId) {\n      this._parentSpanId = spanContext.parentSpanId;\n    }\n    // We want to include booleans as well here\n    if ('sampled' in spanContext) {\n      this._sampled = spanContext.sampled;\n    }\n    if (spanContext.endTimestamp) {\n      this._endTime = spanContext.endTimestamp;\n    }\n\n    this._events = [];\n\n    this._isStandaloneSpan = spanContext.isStandalone;\n\n    // If the span is already ended, ensure we finalize the span immediately\n    if (this._endTime) {\n      this._onSpanEnded();\n    }\n  }\n\n  /** @inheritDoc */\n  public addLink(link: SpanLink): this {\n    if (this._links) {\n      this._links.push(link);\n    } else {\n      this._links = [link];\n    }\n    return this;\n  }\n\n  /** @inheritDoc */\n  public addLinks(links: SpanLink[]): this {\n    if (this._links) {\n      this._links.push(...links);\n    } else {\n      this._links = links;\n    }\n    return this;\n  }\n\n  /**\n   * This should generally not be used,\n   * but it is needed for being compliant with the OTEL Span interface.\n   *\n   * @hidden\n   * @internal\n   */\n  public recordException(_exception: unknown, _time?: number | undefined): void {\n    // noop\n  }\n\n  /** @inheritdoc */\n  public spanContext(): SpanContextData {\n    const { _spanId: spanId, _traceId: traceId, _sampled: sampled } = this;\n    return {\n      spanId,\n      traceId,\n      traceFlags: sampled ? TRACE_FLAG_SAMPLED : TRACE_FLAG_NONE,\n    };\n  }\n\n  /** @inheritdoc */\n  public setAttribute(key: string, value: SpanAttributeValue | undefined): this {\n    if (value === undefined) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._attributes[key];\n    } else {\n      this._attributes[key] = value;\n    }\n\n    return this;\n  }\n\n  /** @inheritdoc */\n  public setAttributes(attributes: SpanAttributes): this {\n    Object.keys(attributes).forEach(key => this.setAttribute(key, attributes[key]));\n    return this;\n  }\n\n  /**\n   * This should generally not be used,\n   * but we need it for browser tracing where we want to adjust the start time afterwards.\n   * USE THIS WITH CAUTION!\n   *\n   * @hidden\n   * @internal\n   */\n  public updateStartTime(timeInput: SpanTimeInput): void {\n    this._startTime = spanTimeInputToSeconds(timeInput);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setStatus(value: SpanStatus): this {\n    this._status = value;\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public updateName(name: string): this {\n    this._name = name;\n    this.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, 'custom');\n    return this;\n  }\n\n  /** @inheritdoc */\n  public end(endTimestamp?: SpanTimeInput): void {\n    // If already ended, skip\n    if (this._endTime) {\n      return;\n    }\n\n    this._endTime = spanTimeInputToSeconds(endTimestamp);\n    logSpanEnd(this);\n\n    this._onSpanEnded();\n  }\n\n  /**\n   * Get JSON representation of this span.\n   *\n   * @hidden\n   * @internal This method is purely for internal purposes and should not be used outside\n   * of SDK code. If you need to get a JSON representation of a span,\n   * use `spanToJSON(span)` instead.\n   */\n  public getSpanJSON(): SpanJSON {\n    return {\n      data: this._attributes,\n      description: this._name,\n      op: this._attributes[SEMANTIC_ATTRIBUTE_SENTRY_OP],\n      parent_span_id: this._parentSpanId,\n      span_id: this._spanId,\n      start_timestamp: this._startTime,\n      status: getStatusMessage(this._status),\n      timestamp: this._endTime,\n      trace_id: this._traceId,\n      origin: this._attributes[SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN] as SpanOrigin | undefined,\n      profile_id: this._attributes[SEMANTIC_ATTRIBUTE_PROFILE_ID] as string | undefined,\n      exclusive_time: this._attributes[SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME] as number | undefined,\n      measurements: timedEventsToMeasurements(this._events),\n      is_segment: (this._isStandaloneSpan && getRootSpan(this) === this) || undefined,\n      segment_id: this._isStandaloneSpan ? getRootSpan(this).spanContext().spanId : undefined,\n      links: convertSpanLinksForEnvelope(this._links),\n    };\n  }\n\n  /** @inheritdoc */\n  public isRecording(): boolean {\n    return !this._endTime && !!this._sampled;\n  }\n\n  /**\n   * @inheritdoc\n   */\n  public addEvent(\n    name: string,\n    attributesOrStartTime?: SpanAttributes | SpanTimeInput,\n    startTime?: SpanTimeInput,\n  ): this {\n    DEBUG_BUILD && logger.log('[Tracing] Adding an event to span:', name);\n\n    const time = isSpanTimeInput(attributesOrStartTime) ? attributesOrStartTime : startTime || timestampInSeconds();\n    const attributes = isSpanTimeInput(attributesOrStartTime) ? {} : attributesOrStartTime || {};\n\n    const event: TimedEvent = {\n      name,\n      time: spanTimeInputToSeconds(time),\n      attributes,\n    };\n\n    this._events.push(event);\n\n    return this;\n  }\n\n  /**\n   * This method should generally not be used,\n   * but for now we need a way to publicly check if the `_isStandaloneSpan` flag is set.\n   * USE THIS WITH CAUTION!\n   * @internal\n   * @hidden\n   * @experimental\n   */\n  public isStandaloneSpan(): boolean {\n    return !!this._isStandaloneSpan;\n  }\n\n  /** Emit `spanEnd` when the span is ended. */\n  private _onSpanEnded(): void {\n    const client = getClient();\n    if (client) {\n      client.emit('spanEnd', this);\n    }\n\n    // A segment span is basically the root span of a local span tree.\n    // So for now, this is either what we previously refer to as the root span,\n    // or a standalone span.\n    const isSegmentSpan = this._isStandaloneSpan || this === getRootSpan(this);\n\n    if (!isSegmentSpan) {\n      return;\n    }\n\n    // if this is a standalone span, we send it immediately\n    if (this._isStandaloneSpan) {\n      if (this._sampled) {\n        sendSpanEnvelope(createSpanEnvelope([this], client));\n      } else {\n        DEBUG_BUILD &&\n          logger.log('[Tracing] Discarding standalone span because its trace was not chosen to be sampled.');\n        if (client) {\n          client.recordDroppedEvent('sample_rate', 'span');\n        }\n      }\n      return;\n    }\n\n    const transactionEvent = this._convertSpanToTransaction();\n    if (transactionEvent) {\n      const scope = getCapturedScopesOnSpan(this).scope || getCurrentScope();\n      scope.captureEvent(transactionEvent);\n    }\n  }\n\n  /**\n   * Finish the transaction & prepare the event to send to Sentry.\n   */\n  private _convertSpanToTransaction(): TransactionEvent | undefined {\n    // We can only convert finished spans\n    if (!isFullFinishedSpan(spanToJSON(this))) {\n      return undefined;\n    }\n\n    if (!this._name) {\n      DEBUG_BUILD && logger.warn('Transaction has no name, falling back to `<unlabeled transaction>`.');\n      this._name = '<unlabeled transaction>';\n    }\n\n    const { scope: capturedSpanScope, isolationScope: capturedSpanIsolationScope } = getCapturedScopesOnSpan(this);\n\n    const normalizedRequest = capturedSpanScope?.getScopeData().sdkProcessingMetadata?.normalizedRequest;\n\n    if (this._sampled !== true) {\n      return undefined;\n    }\n\n    // The transaction span itself as well as any potential standalone spans should be filtered out\n    const finishedSpans = getSpanDescendants(this).filter(span => span !== this && !isStandaloneSpan(span));\n\n    const spans = finishedSpans.map(span => spanToJSON(span)).filter(isFullFinishedSpan);\n\n    const source = this._attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] as TransactionSource | undefined;\n\n    // remove internal root span attributes we don't need to send.\n    /* eslint-disable @typescript-eslint/no-dynamic-delete */\n    delete this._attributes[SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME];\n    spans.forEach(span => {\n      delete span.data[SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME];\n    });\n    // eslint-enabled-next-line @typescript-eslint/no-dynamic-delete\n\n    const transaction: TransactionEvent = {\n      contexts: {\n        trace: spanToTransactionTraceContext(this),\n      },\n      spans:\n        // spans.sort() mutates the array, but `spans` is already a copy so we can safely do this here\n        // we do not use spans anymore after this point\n        spans.length > MAX_SPAN_COUNT\n          ? spans.sort((a, b) => a.start_timestamp - b.start_timestamp).slice(0, MAX_SPAN_COUNT)\n          : spans,\n      start_timestamp: this._startTime,\n      timestamp: this._endTime,\n      transaction: this._name,\n      type: 'transaction',\n      sdkProcessingMetadata: {\n        capturedSpanScope,\n        capturedSpanIsolationScope,\n        dynamicSamplingContext: getDynamicSamplingContextFromSpan(this),\n      },\n      request: normalizedRequest,\n      ...(source && {\n        transaction_info: {\n          source,\n        },\n      }),\n    };\n\n    const measurements = timedEventsToMeasurements(this._events);\n    const hasMeasurements = measurements && Object.keys(measurements).length;\n\n    if (hasMeasurements) {\n      DEBUG_BUILD &&\n        logger.log(\n          '[Measurements] Adding measurements to transaction event',\n          JSON.stringify(measurements, undefined, 2),\n        );\n      transaction.measurements = measurements;\n    }\n\n    return transaction;\n  }\n}\n\nfunction isSpanTimeInput(value: undefined | SpanAttributes | SpanTimeInput): value is SpanTimeInput {\n  return (value && typeof value === 'number') || value instanceof Date || Array.isArray(value);\n}\n\n// We want to filter out any incomplete SpanJSON objects\nfunction isFullFinishedSpan(input: Partial<SpanJSON>): input is SpanJSON {\n  return !!input.start_timestamp && !!input.timestamp && !!input.span_id && !!input.trace_id;\n}\n\n/** `SentrySpan`s can be sent as a standalone span rather than belonging to a transaction */\nfunction isStandaloneSpan(span: Span): boolean {\n  return span instanceof SentrySpan && span.isStandaloneSpan();\n}\n\n/**\n * Sends a `SpanEnvelope`.\n *\n * Note: If the envelope's spans are dropped, e.g. via `beforeSendSpan`,\n * the envelope will not be sent either.\n */\nfunction sendSpanEnvelope(envelope: SpanEnvelope): void {\n  const client = getClient();\n  if (!client) {\n    return;\n  }\n\n  const spanItems = envelope[1];\n  if (!spanItems || spanItems.length === 0) {\n    client.recordDroppedEvent('before_send', 'span');\n    return;\n  }\n\n  // sendEnvelope should not throw\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  client.sendEnvelope(envelope);\n}\n"],"names":["generateTraceId","generateSpanId","timestampInSeconds","SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN","SEMANTIC_ATTRIBUTE_SENTRY_OP","TRACE_FLAG_SAMPLED","TRACE_FLAG_NONE","spanTimeInputToSeconds","SEMANTIC_ATTRIBUTE_SENTRY_SOURCE","logSpanEnd","getStatusMessage","SEMANTIC_ATTRIBUTE_PROFILE_ID","SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME","timedEventsToMeasurements","getRootSpan","convertSpanLinksForEnvelope","DEBUG_BUILD","logger","time","getClient","createSpanEnvelope","getCapturedScopesOnSpan","getCurrentScope","spanToJSON","getSpanDescendants","SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME","spanToTransactionTraceContext","getDynamicSamplingContextFromSpan"],"mappings":"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"}},
    {"offset": {"line": 4816, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4820, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/tracing/trace.ts"],"sourcesContent":["/* eslint-disable max-lines */\n\nimport { getAsyncContextStrategy } from '../asyncContext';\nimport type { AsyncContextStrategy } from '../asyncContext/types';\nimport { getMainCarrier } from '../carrier';\nimport { getClient, getCurrentScope, getIsolationScope, withScope } from '../currentScopes';\nimport { DEBUG_BUILD } from '../debug-build';\nimport type { Scope } from '../scope';\nimport { SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE, SEMANTIC_ATTRIBUTE_SENTRY_SOURCE } from '../semanticAttributes';\nimport type { DynamicSamplingContext } from '../types-hoist/envelope';\nimport type { ClientOptions } from '../types-hoist/options';\nimport type { SentrySpanArguments, Span, SpanTimeInput } from '../types-hoist/span';\nimport type { StartSpanOptions } from '../types-hoist/startSpanOptions';\nimport { handleCallbackErrors } from '../utils/handleCallbackErrors';\nimport { hasSpansEnabled } from '../utils/hasSpansEnabled';\nimport { logger } from '../utils/logger';\nimport { parseSampleRate } from '../utils/parseSampleRate';\nimport { generateTraceId } from '../utils/propagationContext';\nimport { _getSpanForScope, _setSpanForScope } from '../utils/spanOnScope';\nimport { addChildSpanToSpan, getRootSpan, spanIsSampled, spanTimeInputToSeconds, spanToJSON } from '../utils/spanUtils';\nimport { propagationContextFromHeaders } from '../utils/tracing';\nimport { freezeDscOnSpan, getDynamicSamplingContextFromSpan } from './dynamicSamplingContext';\nimport { logSpanStart } from './logSpans';\nimport { sampleSpan } from './sampling';\nimport { SentryNonRecordingSpan } from './sentryNonRecordingSpan';\nimport { SentrySpan } from './sentrySpan';\nimport { SPAN_STATUS_ERROR } from './spanstatus';\nimport { setCapturedScopesOnSpan } from './utils';\n\nconst SUPPRESS_TRACING_KEY = '__SENTRY_SUPPRESS_TRACING__';\n\n/**\n * Wraps a function with a transaction/span and finishes the span after the function is done.\n * The created span is the active span and will be used as parent by other spans created inside the function\n * and can be accessed via `Sentry.getActiveSpan()`, as long as the function is executed while the scope is active.\n *\n * If you want to create a span that is not set as active, use {@link startInactiveSpan}.\n *\n * You'll always get a span passed to the callback,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nexport function startSpan<T>(options: StartSpanOptions, callback: (span: Span) => T): T {\n  const acs = getAcs();\n  if (acs.startSpan) {\n    return acs.startSpan(options, callback);\n  }\n\n  const spanArguments = parseSentrySpanArguments(options);\n  const { forceTransaction, parentSpan: customParentSpan, scope: customScope } = options;\n\n  // We still need to fork a potentially passed scope, as we set the active span on it\n  // and we need to ensure that it is cleaned up properly once the span ends.\n  const customForkedScope = customScope?.clone();\n\n  return withScope(customForkedScope, () => {\n    // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n    const wrapper = getActiveSpanWrapper<T>(customParentSpan);\n\n    return wrapper(() => {\n      const scope = getCurrentScope();\n      const parentSpan = getParentSpan(scope, customParentSpan);\n\n      const shouldSkipSpan = options.onlyIfParent && !parentSpan;\n      const activeSpan = shouldSkipSpan\n        ? new SentryNonRecordingSpan()\n        : createChildOrRootSpan({\n            parentSpan,\n            spanArguments,\n            forceTransaction,\n            scope,\n          });\n\n      _setSpanForScope(scope, activeSpan);\n\n      return handleCallbackErrors(\n        () => callback(activeSpan),\n        () => {\n          // Only update the span status if it hasn't been changed yet, and the span is not yet finished\n          const { status } = spanToJSON(activeSpan);\n          if (activeSpan.isRecording() && (!status || status === 'ok')) {\n            activeSpan.setStatus({ code: SPAN_STATUS_ERROR, message: 'internal_error' });\n          }\n        },\n        () => {\n          activeSpan.end();\n        },\n      );\n    });\n  });\n}\n\n/**\n * Similar to `Sentry.startSpan`. Wraps a function with a transaction/span, but does not finish the span\n * after the function is done automatically. Use `span.end()` to end the span.\n *\n * The created span is the active span and will be used as parent by other spans created inside the function\n * and can be accessed via `Sentry.getActiveSpan()`, as long as the function is executed while the scope is active.\n *\n * You'll always get a span passed to the callback,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nexport function startSpanManual<T>(options: StartSpanOptions, callback: (span: Span, finish: () => void) => T): T {\n  const acs = getAcs();\n  if (acs.startSpanManual) {\n    return acs.startSpanManual(options, callback);\n  }\n\n  const spanArguments = parseSentrySpanArguments(options);\n  const { forceTransaction, parentSpan: customParentSpan, scope: customScope } = options;\n\n  const customForkedScope = customScope?.clone();\n\n  return withScope(customForkedScope, () => {\n    // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n    const wrapper = getActiveSpanWrapper<T>(customParentSpan);\n\n    return wrapper(() => {\n      const scope = getCurrentScope();\n      const parentSpan = getParentSpan(scope, customParentSpan);\n\n      const shouldSkipSpan = options.onlyIfParent && !parentSpan;\n      const activeSpan = shouldSkipSpan\n        ? new SentryNonRecordingSpan()\n        : createChildOrRootSpan({\n            parentSpan,\n            spanArguments,\n            forceTransaction,\n            scope,\n          });\n\n      _setSpanForScope(scope, activeSpan);\n\n      return handleCallbackErrors(\n        // We pass the `finish` function to the callback, so the user can finish the span manually\n        // this is mainly here for historic purposes because previously, we instructed users to call\n        // `finish` instead of `span.end()` to also clean up the scope. Nowadays, calling `span.end()`\n        // or `finish` has the same effect and we simply leave it here to avoid breaking user code.\n        () => callback(activeSpan, () => activeSpan.end()),\n        () => {\n          // Only update the span status if it hasn't been changed yet, and the span is not yet finished\n          const { status } = spanToJSON(activeSpan);\n          if (activeSpan.isRecording() && (!status || status === 'ok')) {\n            activeSpan.setStatus({ code: SPAN_STATUS_ERROR, message: 'internal_error' });\n          }\n        },\n      );\n    });\n  });\n}\n\n/**\n * Creates a span. This span is not set as active, so will not get automatic instrumentation spans\n * as children or be able to be accessed via `Sentry.getActiveSpan()`.\n *\n * If you want to create a span that is set as active, use {@link startSpan}.\n *\n * This function will always return a span,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nexport function startInactiveSpan(options: StartSpanOptions): Span {\n  const acs = getAcs();\n  if (acs.startInactiveSpan) {\n    return acs.startInactiveSpan(options);\n  }\n\n  const spanArguments = parseSentrySpanArguments(options);\n  const { forceTransaction, parentSpan: customParentSpan } = options;\n\n  // If `options.scope` is defined, we use this as as a wrapper,\n  // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n  const wrapper = options.scope\n    ? (callback: () => Span) => withScope(options.scope, callback)\n    : customParentSpan !== undefined\n      ? (callback: () => Span) => withActiveSpan(customParentSpan, callback)\n      : (callback: () => Span) => callback();\n\n  return wrapper(() => {\n    const scope = getCurrentScope();\n    const parentSpan = getParentSpan(scope, customParentSpan);\n\n    const shouldSkipSpan = options.onlyIfParent && !parentSpan;\n\n    if (shouldSkipSpan) {\n      return new SentryNonRecordingSpan();\n    }\n\n    return createChildOrRootSpan({\n      parentSpan,\n      spanArguments,\n      forceTransaction,\n      scope,\n    });\n  });\n}\n\n/**\n * Continue a trace from `sentry-trace` and `baggage` values.\n * These values can be obtained from incoming request headers, or in the browser from `<meta name=\"sentry-trace\">`\n * and `<meta name=\"baggage\">` HTML tags.\n *\n * Spans started with `startSpan`, `startSpanManual` and `startInactiveSpan`, within the callback will automatically\n * be attached to the incoming trace.\n */\nexport const continueTrace = <V>(\n  options: {\n    sentryTrace: Parameters<typeof propagationContextFromHeaders>[0];\n    baggage: Parameters<typeof propagationContextFromHeaders>[1];\n  },\n  callback: () => V,\n): V => {\n  const carrier = getMainCarrier();\n  const acs = getAsyncContextStrategy(carrier);\n  if (acs.continueTrace) {\n    return acs.continueTrace(options, callback);\n  }\n\n  const { sentryTrace, baggage } = options;\n\n  return withScope(scope => {\n    const propagationContext = propagationContextFromHeaders(sentryTrace, baggage);\n    scope.setPropagationContext(propagationContext);\n    return callback();\n  });\n};\n\n/**\n * Forks the current scope and sets the provided span as active span in the context of the provided callback. Can be\n * passed `null` to start an entirely new span tree.\n *\n * @param span Spans started in the context of the provided callback will be children of this span. If `null` is passed,\n * spans started within the callback will not be attached to a parent span.\n * @param callback Execution context in which the provided span will be active. Is passed the newly forked scope.\n * @returns the value returned from the provided callback function.\n */\nexport function withActiveSpan<T>(span: Span | null, callback: (scope: Scope) => T): T {\n  const acs = getAcs();\n  if (acs.withActiveSpan) {\n    return acs.withActiveSpan(span, callback);\n  }\n\n  return withScope(scope => {\n    _setSpanForScope(scope, span || undefined);\n    return callback(scope);\n  });\n}\n\n/** Suppress tracing in the given callback, ensuring no spans are generated inside of it. */\nexport function suppressTracing<T>(callback: () => T): T {\n  const acs = getAcs();\n\n  if (acs.suppressTracing) {\n    return acs.suppressTracing(callback);\n  }\n\n  return withScope(scope => {\n    // Note: We do not wait for the callback to finish before we reset the metadata\n    // the reason for this is that otherwise, in the browser this can lead to very weird behavior\n    // as there is only a single top scope, if the callback takes longer to finish,\n    // other, unrelated spans may also be suppressed, which we do not want\n    // so instead, we only suppress tracing synchronoysly in the browser\n    scope.setSDKProcessingMetadata({ [SUPPRESS_TRACING_KEY]: true });\n    const res = callback();\n    scope.setSDKProcessingMetadata({ [SUPPRESS_TRACING_KEY]: undefined });\n    return res;\n  });\n}\n\n/**\n * Starts a new trace for the duration of the provided callback. Spans started within the\n * callback will be part of the new trace instead of a potentially previously started trace.\n *\n * Important: Only use this function if you want to override the default trace lifetime and\n * propagation mechanism of the SDK for the duration and scope of the provided callback.\n * The newly created trace will also be the root of a new distributed trace, for example if\n * you make http requests within the callback.\n * This function might be useful if the operation you want to instrument should not be part\n * of a potentially ongoing trace.\n *\n * Default behavior:\n * - Server-side: A new trace is started for each incoming request.\n * - Browser: A new trace is started for each page our route. Navigating to a new route\n *            or page will automatically create a new trace.\n */\nexport function startNewTrace<T>(callback: () => T): T {\n  return withScope(scope => {\n    scope.setPropagationContext({\n      traceId: generateTraceId(),\n      sampleRand: Math.random(),\n    });\n    DEBUG_BUILD && logger.info(`Starting a new trace with id ${scope.getPropagationContext().traceId}`);\n    return withActiveSpan(null, callback);\n  });\n}\n\nfunction createChildOrRootSpan({\n  parentSpan,\n  spanArguments,\n  forceTransaction,\n  scope,\n}: {\n  parentSpan: SentrySpan | undefined;\n  spanArguments: SentrySpanArguments;\n  forceTransaction?: boolean;\n  scope: Scope;\n}): Span {\n  if (!hasSpansEnabled()) {\n    const span = new SentryNonRecordingSpan();\n\n    // If this is a root span, we ensure to freeze a DSC\n    // So we can have at least partial data here\n    if (forceTransaction || !parentSpan) {\n      const dsc = {\n        sampled: 'false',\n        sample_rate: '0',\n        transaction: spanArguments.name,\n        ...getDynamicSamplingContextFromSpan(span),\n      } satisfies Partial<DynamicSamplingContext>;\n      freezeDscOnSpan(span, dsc);\n    }\n\n    return span;\n  }\n\n  const isolationScope = getIsolationScope();\n\n  let span: Span;\n  if (parentSpan && !forceTransaction) {\n    span = _startChildSpan(parentSpan, scope, spanArguments);\n    addChildSpanToSpan(parentSpan, span);\n  } else if (parentSpan) {\n    // If we forced a transaction but have a parent span, make sure to continue from the parent span, not the scope\n    const dsc = getDynamicSamplingContextFromSpan(parentSpan);\n    const { traceId, spanId: parentSpanId } = parentSpan.spanContext();\n    const parentSampled = spanIsSampled(parentSpan);\n\n    span = _startRootSpan(\n      {\n        traceId,\n        parentSpanId,\n        ...spanArguments,\n      },\n      scope,\n      parentSampled,\n    );\n\n    freezeDscOnSpan(span, dsc);\n  } else {\n    const {\n      traceId,\n      dsc,\n      parentSpanId,\n      sampled: parentSampled,\n    } = {\n      ...isolationScope.getPropagationContext(),\n      ...scope.getPropagationContext(),\n    };\n\n    span = _startRootSpan(\n      {\n        traceId,\n        parentSpanId,\n        ...spanArguments,\n      },\n      scope,\n      parentSampled,\n    );\n\n    if (dsc) {\n      freezeDscOnSpan(span, dsc);\n    }\n  }\n\n  logSpanStart(span);\n\n  setCapturedScopesOnSpan(span, scope, isolationScope);\n\n  return span;\n}\n\n/**\n * This converts StartSpanOptions to SentrySpanArguments.\n * For the most part (for now) we accept the same options,\n * but some of them need to be transformed.\n */\nfunction parseSentrySpanArguments(options: StartSpanOptions): SentrySpanArguments {\n  const exp = options.experimental || {};\n  const initialCtx: SentrySpanArguments = {\n    isStandalone: exp.standalone,\n    ...options,\n  };\n\n  if (options.startTime) {\n    const ctx: SentrySpanArguments & { startTime?: SpanTimeInput } = { ...initialCtx };\n    ctx.startTimestamp = spanTimeInputToSeconds(options.startTime);\n    delete ctx.startTime;\n    return ctx;\n  }\n\n  return initialCtx;\n}\n\nfunction getAcs(): AsyncContextStrategy {\n  const carrier = getMainCarrier();\n  return getAsyncContextStrategy(carrier);\n}\n\nfunction _startRootSpan(spanArguments: SentrySpanArguments, scope: Scope, parentSampled?: boolean): SentrySpan {\n  const client = getClient();\n  const options: Partial<ClientOptions> = client?.getOptions() || {};\n\n  const { name = '' } = spanArguments;\n\n  const mutableSpanSamplingData = { spanAttributes: { ...spanArguments.attributes }, spanName: name, parentSampled };\n\n  // we don't care about the decision for the moment; this is just a placeholder\n  client?.emit('beforeSampling', mutableSpanSamplingData, { decision: false });\n\n  // If hook consumers override the parentSampled flag, we will use that value instead of the actual one\n  const finalParentSampled = mutableSpanSamplingData.parentSampled ?? parentSampled;\n  const finalAttributes = mutableSpanSamplingData.spanAttributes;\n\n  const currentPropagationContext = scope.getPropagationContext();\n  const [sampled, sampleRate, localSampleRateWasApplied] = scope.getScopeData().sdkProcessingMetadata[\n    SUPPRESS_TRACING_KEY\n  ]\n    ? [false]\n    : sampleSpan(\n        options,\n        {\n          name,\n          parentSampled: finalParentSampled,\n          attributes: finalAttributes,\n          parentSampleRate: parseSampleRate(currentPropagationContext.dsc?.sample_rate),\n        },\n        currentPropagationContext.sampleRand,\n      );\n\n  const rootSpan = new SentrySpan({\n    ...spanArguments,\n    attributes: {\n      [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'custom',\n      [SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE]:\n        sampleRate !== undefined && localSampleRateWasApplied ? sampleRate : undefined,\n      ...finalAttributes,\n    },\n    sampled,\n  });\n\n  if (!sampled && client) {\n    DEBUG_BUILD && logger.log('[Tracing] Discarding root span because its trace was not chosen to be sampled.');\n    client.recordDroppedEvent('sample_rate', 'transaction');\n  }\n\n  if (client) {\n    client.emit('spanStart', rootSpan);\n  }\n\n  return rootSpan;\n}\n\n/**\n * Creates a new `Span` while setting the current `Span.id` as `parentSpanId`.\n * This inherits the sampling decision from the parent span.\n */\nfunction _startChildSpan(parentSpan: Span, scope: Scope, spanArguments: SentrySpanArguments): Span {\n  const { spanId, traceId } = parentSpan.spanContext();\n  const sampled = scope.getScopeData().sdkProcessingMetadata[SUPPRESS_TRACING_KEY] ? false : spanIsSampled(parentSpan);\n\n  const childSpan = sampled\n    ? new SentrySpan({\n        ...spanArguments,\n        parentSpanId: spanId,\n        traceId,\n        sampled,\n      })\n    : new SentryNonRecordingSpan({ traceId });\n\n  addChildSpanToSpan(parentSpan, childSpan);\n\n  const client = getClient();\n  if (client) {\n    client.emit('spanStart', childSpan);\n    // If it has an endTimestamp, it's already ended\n    if (spanArguments.endTimestamp) {\n      client.emit('spanEnd', childSpan);\n    }\n  }\n\n  return childSpan;\n}\n\nfunction getParentSpan(scope: Scope, customParentSpan: Span | null | undefined): SentrySpan | undefined {\n  // always use the passed in span directly\n  if (customParentSpan) {\n    return customParentSpan as SentrySpan;\n  }\n\n  // This is different from `undefined` as it means the user explicitly wants no parent span\n  if (customParentSpan === null) {\n    return undefined;\n  }\n\n  const span = _getSpanForScope(scope) as SentrySpan | undefined;\n\n  if (!span) {\n    return undefined;\n  }\n\n  const client = getClient();\n  const options: Partial<ClientOptions> = client ? client.getOptions() : {};\n  if (options.parentSpanIsAlwaysRootSpan) {\n    return getRootSpan(span) as SentrySpan;\n  }\n\n  return span;\n}\n\nfunction getActiveSpanWrapper<T>(parentSpan: Span | undefined | null): (callback: () => T) => T {\n  return parentSpan !== undefined\n    ? (callback: () => T) => {\n        return withActiveSpan(parentSpan, callback);\n      }\n    : (callback: () => T) => callback();\n}\n"],"names":["withScope","getCurrentScope","SentryNonRecordingSpan","_setSpanForScope","handleCallbackErrors","spanToJSON","SPAN_STATUS_ERROR","carrier","getMainCarrier","getAsyncContextStrategy","propagationContextFromHeaders","generateTraceId","DEBUG_BUILD","logger","hasSpansEnabled","getDynamicSamplingContextFromSpan","freezeDscOnSpan","getIsolationScope","addChildSpanToSpan","spanIsSampled","logSpanStart","setCapturedScopesOnSpan","spanTimeInputToSeconds","getClient","sampleSpan","parseSampleRate","SentrySpan","SEMANTIC_ATTRIBUTE_SENTRY_SOURCE","SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE","_getSpanForScope","getRootSpan"],"mappings":"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"}},
    {"offset": {"line": 5233, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5237, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/tracing/idleSpan.ts"],"sourcesContent":["import { getClient, getCurrentScope } from '../currentScopes';\nimport { DEBUG_BUILD } from '../debug-build';\nimport { SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON } from '../semanticAttributes';\nimport type { DynamicSamplingContext } from '../types-hoist/envelope';\nimport type { Span } from '../types-hoist/span';\nimport type { StartSpanOptions } from '../types-hoist/startSpanOptions';\nimport { hasSpansEnabled } from '../utils/hasSpansEnabled';\nimport { logger } from '../utils/logger';\nimport { _setSpanForScope } from '../utils/spanOnScope';\nimport {\n  getActiveSpan,\n  getSpanDescendants,\n  removeChildSpanFromSpan,\n  spanTimeInputToSeconds,\n  spanToJSON,\n} from '../utils/spanUtils';\nimport { timestampInSeconds } from '../utils/time';\nimport { freezeDscOnSpan, getDynamicSamplingContextFromSpan } from './dynamicSamplingContext';\nimport { SentryNonRecordingSpan } from './sentryNonRecordingSpan';\nimport { SPAN_STATUS_ERROR } from './spanstatus';\nimport { startInactiveSpan } from './trace';\n\nexport const TRACING_DEFAULTS = {\n  idleTimeout: 1_000,\n  finalTimeout: 30_000,\n  childSpanTimeout: 15_000,\n};\n\nconst FINISH_REASON_HEARTBEAT_FAILED = 'heartbeatFailed';\nconst FINISH_REASON_IDLE_TIMEOUT = 'idleTimeout';\nconst FINISH_REASON_FINAL_TIMEOUT = 'finalTimeout';\nconst FINISH_REASON_EXTERNAL_FINISH = 'externalFinish';\nconst FINISH_REASON_CANCELLED = 'cancelled';\n\n// unused\nconst FINISH_REASON_DOCUMENT_HIDDEN = 'documentHidden';\n\n// unused in this file, but used in BrowserTracing\nconst FINISH_REASON_INTERRUPTED = 'interactionInterrupted';\n\ntype IdleSpanFinishReason =\n  | typeof FINISH_REASON_CANCELLED\n  | typeof FINISH_REASON_DOCUMENT_HIDDEN\n  | typeof FINISH_REASON_EXTERNAL_FINISH\n  | typeof FINISH_REASON_FINAL_TIMEOUT\n  | typeof FINISH_REASON_HEARTBEAT_FAILED\n  | typeof FINISH_REASON_IDLE_TIMEOUT\n  | typeof FINISH_REASON_INTERRUPTED;\n\ninterface IdleSpanOptions {\n  /**\n   * The time that has to pass without any span being created.\n   * If this time is exceeded, the idle span will finish.\n   */\n  idleTimeout: number;\n  /**\n   * The max. time an idle span may run.\n   * If this time is exceeded, the idle span will finish no matter what.\n   */\n  finalTimeout: number;\n  /**\n   * The max. time a child span may run.\n   * If the time since the last span was started exceeds this time, the idle span will finish.\n   */\n  childSpanTimeout?: number;\n  /**\n   * When set to `true`, will disable the idle timeout and child timeout\n   * until the `idleSpanEnableAutoFinish` hook is emitted for the idle span.\n   * The final timeout mechanism will not be affected by this option,\n   * meaning the idle span will definitely be finished when the final timeout is\n   * reached, no matter what this option is configured to.\n   *\n   * Defaults to `false`.\n   */\n  disableAutoFinish?: boolean;\n  /** Allows to configure a hook that is called when the idle span is ended, before it is processed. */\n  beforeSpanEnd?: (span: Span) => void;\n}\n\n/**\n * An idle span is a span that automatically finishes. It does this by tracking child spans as activities.\n * An idle span is always the active span.\n */\nexport function startIdleSpan(startSpanOptions: StartSpanOptions, options: Partial<IdleSpanOptions> = {}): Span {\n  // Activities store a list of active spans\n  const activities = new Map<string, boolean>();\n\n  // We should not use heartbeat if we finished a span\n  let _finished = false;\n\n  // Timer that tracks idleTimeout\n  let _idleTimeoutID: ReturnType<typeof setTimeout> | undefined;\n\n  // Timer that tracks maxSpanTime for child spans\n  let _childSpanTimeoutID: ReturnType<typeof setTimeout> | undefined;\n\n  // The reason why the span was finished\n  let _finishReason: IdleSpanFinishReason = FINISH_REASON_EXTERNAL_FINISH;\n\n  let _autoFinishAllowed: boolean = !options.disableAutoFinish;\n\n  const _cleanupHooks: (() => void)[] = [];\n\n  const {\n    idleTimeout = TRACING_DEFAULTS.idleTimeout,\n    finalTimeout = TRACING_DEFAULTS.finalTimeout,\n    childSpanTimeout = TRACING_DEFAULTS.childSpanTimeout,\n    beforeSpanEnd,\n  } = options;\n\n  const client = getClient();\n\n  if (!client || !hasSpansEnabled()) {\n    const span = new SentryNonRecordingSpan();\n\n    const dsc = {\n      sample_rate: '0',\n      sampled: 'false',\n      ...getDynamicSamplingContextFromSpan(span),\n    } satisfies Partial<DynamicSamplingContext>;\n    freezeDscOnSpan(span, dsc);\n\n    return span;\n  }\n\n  const scope = getCurrentScope();\n  const previousActiveSpan = getActiveSpan();\n  const span = _startIdleSpan(startSpanOptions);\n\n  // We patch span.end to ensure we can run some things before the span is ended\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  span.end = new Proxy(span.end, {\n    apply(target, thisArg, args: Parameters<Span['end']>) {\n      if (beforeSpanEnd) {\n        beforeSpanEnd(span);\n      }\n\n      // If the span is non-recording, nothing more to do here...\n      // This is the case if tracing is enabled but this specific span was not sampled\n      if (thisArg instanceof SentryNonRecordingSpan) {\n        return;\n      }\n\n      // Just ensuring that this keeps working, even if we ever have more arguments here\n      const [definedEndTimestamp, ...rest] = args;\n      const timestamp = definedEndTimestamp || timestampInSeconds();\n      const spanEndTimestamp = spanTimeInputToSeconds(timestamp);\n\n      // Ensure we end with the last span timestamp, if possible\n      const spans = getSpanDescendants(span).filter(child => child !== span);\n\n      // If we have no spans, we just end, nothing else to do here\n      if (!spans.length) {\n        onIdleSpanEnded(spanEndTimestamp);\n        return Reflect.apply(target, thisArg, [spanEndTimestamp, ...rest]);\n      }\n\n      const childEndTimestamps = spans\n        .map(span => spanToJSON(span).timestamp)\n        .filter(timestamp => !!timestamp) as number[];\n      const latestSpanEndTimestamp = childEndTimestamps.length ? Math.max(...childEndTimestamps) : undefined;\n\n      // In reality this should always exist here, but type-wise it may be undefined...\n      const spanStartTimestamp = spanToJSON(span).start_timestamp;\n\n      // The final endTimestamp should:\n      // * Never be before the span start timestamp\n      // * Be the latestSpanEndTimestamp, if there is one, and it is smaller than the passed span end timestamp\n      // * Otherwise be the passed end timestamp\n      // Final timestamp can never be after finalTimeout\n      const endTimestamp = Math.min(\n        spanStartTimestamp ? spanStartTimestamp + finalTimeout / 1000 : Infinity,\n        Math.max(spanStartTimestamp || -Infinity, Math.min(spanEndTimestamp, latestSpanEndTimestamp || Infinity)),\n      );\n\n      onIdleSpanEnded(endTimestamp);\n      return Reflect.apply(target, thisArg, [endTimestamp, ...rest]);\n    },\n  });\n\n  /**\n   * Cancels the existing idle timeout, if there is one.\n   */\n  function _cancelIdleTimeout(): void {\n    if (_idleTimeoutID) {\n      clearTimeout(_idleTimeoutID);\n      _idleTimeoutID = undefined;\n    }\n  }\n\n  /**\n   * Cancels the existing child span timeout, if there is one.\n   */\n  function _cancelChildSpanTimeout(): void {\n    if (_childSpanTimeoutID) {\n      clearTimeout(_childSpanTimeoutID);\n      _childSpanTimeoutID = undefined;\n    }\n  }\n\n  /**\n   * Restarts idle timeout, if there is no running idle timeout it will start one.\n   */\n  function _restartIdleTimeout(endTimestamp?: number): void {\n    _cancelIdleTimeout();\n    _idleTimeoutID = setTimeout(() => {\n      if (!_finished && activities.size === 0 && _autoFinishAllowed) {\n        _finishReason = FINISH_REASON_IDLE_TIMEOUT;\n        span.end(endTimestamp);\n      }\n    }, idleTimeout);\n  }\n\n  /**\n   * Restarts child span timeout, if there is none running it will start one.\n   */\n  function _restartChildSpanTimeout(endTimestamp?: number): void {\n    _cancelChildSpanTimeout();\n    _idleTimeoutID = setTimeout(() => {\n      if (!_finished && _autoFinishAllowed) {\n        _finishReason = FINISH_REASON_HEARTBEAT_FAILED;\n        span.end(endTimestamp);\n      }\n    }, childSpanTimeout);\n  }\n\n  /**\n   * Start tracking a specific activity.\n   * @param spanId The span id that represents the activity\n   */\n  function _pushActivity(spanId: string): void {\n    _cancelIdleTimeout();\n    activities.set(spanId, true);\n\n    const endTimestamp = timestampInSeconds();\n    // We need to add the timeout here to have the real endtimestamp of the idle span\n    // Remember timestampInSeconds is in seconds, timeout is in ms\n    _restartChildSpanTimeout(endTimestamp + childSpanTimeout / 1000);\n  }\n\n  /**\n   * Remove an activity from usage\n   * @param spanId The span id that represents the activity\n   */\n  function _popActivity(spanId: string): void {\n    if (activities.has(spanId)) {\n      activities.delete(spanId);\n    }\n\n    if (activities.size === 0) {\n      const endTimestamp = timestampInSeconds();\n      // We need to add the timeout here to have the real endtimestamp of the idle span\n      // Remember timestampInSeconds is in seconds, timeout is in ms\n      _restartIdleTimeout(endTimestamp + idleTimeout / 1000);\n      _cancelChildSpanTimeout();\n    }\n  }\n\n  function onIdleSpanEnded(endTimestamp: number): void {\n    _finished = true;\n    activities.clear();\n\n    _cleanupHooks.forEach(cleanup => cleanup());\n\n    _setSpanForScope(scope, previousActiveSpan);\n\n    const spanJSON = spanToJSON(span);\n\n    const { start_timestamp: startTimestamp } = spanJSON;\n    // This should never happen, but to make TS happy...\n    if (!startTimestamp) {\n      return;\n    }\n\n    const attributes = spanJSON.data;\n    if (!attributes[SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON]) {\n      span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON, _finishReason);\n    }\n\n    logger.log(`[Tracing] Idle span \"${spanJSON.op}\" finished`);\n\n    const childSpans = getSpanDescendants(span).filter(child => child !== span);\n\n    let discardedSpans = 0;\n    childSpans.forEach(childSpan => {\n      // We cancel all pending spans with status \"cancelled\" to indicate the idle span was finished early\n      if (childSpan.isRecording()) {\n        childSpan.setStatus({ code: SPAN_STATUS_ERROR, message: 'cancelled' });\n        childSpan.end(endTimestamp);\n        DEBUG_BUILD &&\n          logger.log('[Tracing] Cancelling span since span ended early', JSON.stringify(childSpan, undefined, 2));\n      }\n\n      const childSpanJSON = spanToJSON(childSpan);\n      const { timestamp: childEndTimestamp = 0, start_timestamp: childStartTimestamp = 0 } = childSpanJSON;\n\n      const spanStartedBeforeIdleSpanEnd = childStartTimestamp <= endTimestamp;\n\n      // Add a delta with idle timeout so that we prevent false positives\n      const timeoutWithMarginOfError = (finalTimeout + idleTimeout) / 1000;\n      const spanEndedBeforeFinalTimeout = childEndTimestamp - childStartTimestamp <= timeoutWithMarginOfError;\n\n      if (DEBUG_BUILD) {\n        const stringifiedSpan = JSON.stringify(childSpan, undefined, 2);\n        if (!spanStartedBeforeIdleSpanEnd) {\n          logger.log('[Tracing] Discarding span since it happened after idle span was finished', stringifiedSpan);\n        } else if (!spanEndedBeforeFinalTimeout) {\n          logger.log('[Tracing] Discarding span since it finished after idle span final timeout', stringifiedSpan);\n        }\n      }\n\n      if (!spanEndedBeforeFinalTimeout || !spanStartedBeforeIdleSpanEnd) {\n        removeChildSpanFromSpan(span, childSpan);\n        discardedSpans++;\n      }\n    });\n\n    if (discardedSpans > 0) {\n      span.setAttribute('sentry.idle_span_discarded_spans', discardedSpans);\n    }\n  }\n\n  _cleanupHooks.push(\n    client.on('spanStart', startedSpan => {\n      // If we already finished the idle span,\n      // or if this is the idle span itself being started,\n      // or if the started span has already been closed,\n      // we don't care about it for activity\n      if (_finished || startedSpan === span || !!spanToJSON(startedSpan).timestamp) {\n        return;\n      }\n\n      const allSpans = getSpanDescendants(span);\n\n      // If the span that was just started is a child of the idle span, we should track it\n      if (allSpans.includes(startedSpan)) {\n        _pushActivity(startedSpan.spanContext().spanId);\n      }\n    }),\n  );\n\n  _cleanupHooks.push(\n    client.on('spanEnd', endedSpan => {\n      if (_finished) {\n        return;\n      }\n\n      _popActivity(endedSpan.spanContext().spanId);\n    }),\n  );\n\n  _cleanupHooks.push(\n    client.on('idleSpanEnableAutoFinish', spanToAllowAutoFinish => {\n      if (spanToAllowAutoFinish === span) {\n        _autoFinishAllowed = true;\n        _restartIdleTimeout();\n\n        if (activities.size) {\n          _restartChildSpanTimeout();\n        }\n      }\n    }),\n  );\n\n  // We only start the initial idle timeout if we are not delaying the auto finish\n  if (!options.disableAutoFinish) {\n    _restartIdleTimeout();\n  }\n\n  setTimeout(() => {\n    if (!_finished) {\n      span.setStatus({ code: SPAN_STATUS_ERROR, message: 'deadline_exceeded' });\n      _finishReason = FINISH_REASON_FINAL_TIMEOUT;\n      span.end();\n    }\n  }, finalTimeout);\n\n  return span;\n}\n\nfunction _startIdleSpan(options: StartSpanOptions): Span {\n  const span = startInactiveSpan(options);\n\n  _setSpanForScope(getCurrentScope(), span);\n\n  DEBUG_BUILD && logger.log('[Tracing] Started span is an idle span');\n\n  return span;\n}\n"],"names":["getClient","hasSpansEnabled","SentryNonRecordingSpan","getDynamicSamplingContextFromSpan","freezeDscOnSpan","getCurrentScope","getActiveSpan","timestampInSeconds","spanTimeInputToSeconds","getSpanDescendants","spanToJSON","_setSpanForScope","SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON","logger","SPAN_STATUS_ERROR","DEBUG_BUILD","removeChildSpanFromSpan","startInactiveSpan"],"mappings":"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"}},
    {"offset": {"line": 5491, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5495, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/utils/syncpromise.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { isThenable } from './is';\n\n/** SyncPromise internal states */\nconst enum States {\n  /** Pending */\n  PENDING = 0,\n  /** Resolved / OK */\n  RESOLVED = 1,\n  /** Rejected / Error */\n  REJECTED = 2,\n}\n\n// Overloads so we can call resolvedSyncPromise without arguments and generic argument\nexport function resolvedSyncPromise(): PromiseLike<void>;\nexport function resolvedSyncPromise<T>(value: T | PromiseLike<T>): PromiseLike<T>;\n\n/**\n * Creates a resolved sync promise.\n *\n * @param value the value to resolve the promise with\n * @returns the resolved sync promise\n */\nexport function resolvedSyncPromise<T>(value?: T | PromiseLike<T>): PromiseLike<T> {\n  return new SyncPromise(resolve => {\n    resolve(value);\n  });\n}\n\n/**\n * Creates a rejected sync promise.\n *\n * @param value the value to reject the promise with\n * @returns the rejected sync promise\n */\nexport function rejectedSyncPromise<T = never>(reason?: any): PromiseLike<T> {\n  return new SyncPromise((_, reject) => {\n    reject(reason);\n  });\n}\n\ntype Executor<T> = (resolve: (value?: T | PromiseLike<T> | null) => void, reject: (reason?: any) => void) => void;\n\n/**\n * Thenable class that behaves like a Promise and follows it's interface\n * but is not async internally\n */\nexport class SyncPromise<T> implements PromiseLike<T> {\n  private _state: States;\n  private _handlers: Array<[boolean, (value: T) => void, (reason: any) => any]>;\n  private _value: any;\n\n  public constructor(executor: Executor<T>) {\n    this._state = States.PENDING;\n    this._handlers = [];\n\n    this._runExecutor(executor);\n  }\n\n  /** @inheritdoc */\n  public then<TResult1 = T, TResult2 = never>(\n    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null,\n    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null,\n  ): PromiseLike<TResult1 | TResult2> {\n    return new SyncPromise((resolve, reject) => {\n      this._handlers.push([\n        false,\n        result => {\n          if (!onfulfilled) {\n            // TODO: ¯\\_(ツ)_/¯\n            // TODO: FIXME\n            resolve(result as any);\n          } else {\n            try {\n              resolve(onfulfilled(result));\n            } catch (e) {\n              reject(e);\n            }\n          }\n        },\n        reason => {\n          if (!onrejected) {\n            reject(reason);\n          } else {\n            try {\n              resolve(onrejected(reason));\n            } catch (e) {\n              reject(e);\n            }\n          }\n        },\n      ]);\n      this._executeHandlers();\n    });\n  }\n\n  /** @inheritdoc */\n  public catch<TResult = never>(\n    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null,\n  ): PromiseLike<T | TResult> {\n    return this.then(val => val, onrejected);\n  }\n\n  /** @inheritdoc */\n  public finally<TResult>(onfinally?: (() => void) | null): PromiseLike<TResult> {\n    return new SyncPromise<TResult>((resolve, reject) => {\n      let val: TResult | any;\n      let isRejected: boolean;\n\n      return this.then(\n        value => {\n          isRejected = false;\n          val = value;\n          if (onfinally) {\n            onfinally();\n          }\n        },\n        reason => {\n          isRejected = true;\n          val = reason;\n          if (onfinally) {\n            onfinally();\n          }\n        },\n      ).then(() => {\n        if (isRejected) {\n          reject(val);\n          return;\n        }\n\n        resolve(val as unknown as any);\n      });\n    });\n  }\n\n  /** Excute the resolve/reject handlers. */\n  private _executeHandlers(): void {\n    if (this._state === States.PENDING) {\n      return;\n    }\n\n    const cachedHandlers = this._handlers.slice();\n    this._handlers = [];\n\n    cachedHandlers.forEach(handler => {\n      if (handler[0]) {\n        return;\n      }\n\n      if (this._state === States.RESOLVED) {\n        handler[1](this._value as unknown as any);\n      }\n\n      if (this._state === States.REJECTED) {\n        handler[2](this._value);\n      }\n\n      handler[0] = true;\n    });\n  }\n\n  /** Run the executor for the SyncPromise. */\n  private _runExecutor(executor: Executor<T>): void {\n    const setResult = (state: States, value?: T | PromiseLike<T> | any): void => {\n      if (this._state !== States.PENDING) {\n        return;\n      }\n\n      if (isThenable(value)) {\n        void (value as PromiseLike<T>).then(resolve, reject);\n        return;\n      }\n\n      this._state = state;\n      this._value = value;\n\n      this._executeHandlers();\n    };\n\n    const resolve = (value: unknown): void => {\n      setResult(States.RESOLVED, value);\n    };\n\n    const reject = (reason: unknown): void => {\n      setResult(States.REJECTED, reason);\n    };\n\n    try {\n      executor(resolve, reject);\n    } catch (e) {\n      reject(e);\n    }\n  }\n}\n"],"names":["isThenable"],"mappings":"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"}},
    {"offset": {"line": 5646, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5650, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/eventProcessors.ts"],"sourcesContent":["import { DEBUG_BUILD } from './debug-build';\nimport type { Event, EventHint } from './types-hoist/event';\nimport type { EventProcessor } from './types-hoist/eventprocessor';\nimport { isThenable } from './utils/is';\nimport { logger } from './utils/logger';\nimport { SyncPromise } from './utils/syncpromise';\n\n/**\n * Process an array of event processors, returning the processed event (or `null` if the event was dropped).\n */\nexport function notifyEventProcessors(\n  processors: EventProcessor[],\n  event: Event | null,\n  hint: EventHint,\n  index: number = 0,\n): PromiseLike<Event | null> {\n  return new SyncPromise<Event | null>((resolve, reject) => {\n    const processor = processors[index];\n    if (event === null || typeof processor !== 'function') {\n      resolve(event);\n    } else {\n      const result = processor({ ...event }, hint) as Event | null;\n\n      DEBUG_BUILD && processor.id && result === null && logger.log(`Event processor \"${processor.id}\" dropped event`);\n\n      if (isThenable(result)) {\n        void result\n          .then(final => notifyEventProcessors(processors, final, hint, index + 1).then(resolve))\n          .then(null, reject);\n      } else {\n        void notifyEventProcessors(processors, result, hint, index + 1)\n          .then(resolve)\n          .then(null, reject);\n      }\n    }\n  });\n}\n"],"names":["SyncPromise","DEBUG_BUILD","logger","isThenable"],"mappings":";;;;;;;AAOA;;CAEA,GACO,SAAS,sBACd,UAAU,EACV,KAAK,EACL,IAAI,EACJ,QAAgB,CAAC;IAEjB,OAAO,IAAIA,YAAAA,WAAW,CAAe,CAAC,SAAS;QAC7C,MAAM,YAAY,UAAU,CAAC,MAAM;QACnC,IAAI,UAAU,QAAQ,OAAO,cAAc,YAAY;YACrD,QAAQ;QACd,OAAW;YACL,MAAM,SAAS,UAAU;gBAAE,GAAG,KAAA;YAAA,GAAS;YAEvCC,WAAAA,WAAA,IAAe,UAAU,EAAA,IAAM,WAAW,QAAQC,OAAAA,MAAM,CAAC,GAAG,CAAC,CAAC,iBAAiB,EAAE,UAAU,EAAE,CAAC,eAAe,CAAC;YAE9G,IAAIC,GAAAA,UAAU,CAAC,SAAS;gBACtB,KAAK,OACF,IAAI,CAAC,CAAA,QAAS,sBAAsB,YAAY,OAAO,MAAM,QAAQ,GAAG,IAAI,CAAC,UAC7E,IAAI,CAAC,MAAM;YACtB,OAAa;gBACL,KAAK,sBAAsB,YAAY,QAAQ,MAAM,QAAQ,GAC1D,IAAI,CAAC,SACL,IAAI,CAAC,MAAM;YACtB;QACA;IACA;AACA"}},
    {"offset": {"line": 5678, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5682, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/utils/applyScopeDataToEvent.ts"],"sourcesContent":["import type { ScopeData } from '../scope';\nimport { getDynamicSamplingContextFromSpan } from '../tracing/dynamicSamplingContext';\nimport type { Breadcrumb } from '../types-hoist/breadcrumb';\nimport type { Event } from '../types-hoist/event';\nimport type { Span } from '../types-hoist/span';\nimport { merge } from './merge';\nimport { getRootSpan, spanToJSON, spanToTraceContext } from './spanUtils';\n\n/**\n * Applies data from the scope to the event and runs all event processors on it.\n */\nexport function applyScopeDataToEvent(event: Event, data: ScopeData): void {\n  const { fingerprint, span, breadcrumbs, sdkProcessingMetadata } = data;\n\n  // Apply general data\n  applyDataToEvent(event, data);\n\n  // We want to set the trace context for normal events only if there isn't already\n  // a trace context on the event. There is a product feature in place where we link\n  // errors with transaction and it relies on that.\n  if (span) {\n    applySpanToEvent(event, span);\n  }\n\n  applyFingerprintToEvent(event, fingerprint);\n  applyBreadcrumbsToEvent(event, breadcrumbs);\n  applySdkMetadataToEvent(event, sdkProcessingMetadata);\n}\n\n/** Merge data of two scopes together. */\nexport function mergeScopeData(data: ScopeData, mergeData: ScopeData): void {\n  const {\n    extra,\n    tags,\n    user,\n    contexts,\n    level,\n    sdkProcessingMetadata,\n    breadcrumbs,\n    fingerprint,\n    eventProcessors,\n    attachments,\n    propagationContext,\n    transactionName,\n    span,\n  } = mergeData;\n\n  mergeAndOverwriteScopeData(data, 'extra', extra);\n  mergeAndOverwriteScopeData(data, 'tags', tags);\n  mergeAndOverwriteScopeData(data, 'user', user);\n  mergeAndOverwriteScopeData(data, 'contexts', contexts);\n\n  data.sdkProcessingMetadata = merge(data.sdkProcessingMetadata, sdkProcessingMetadata, 2);\n\n  if (level) {\n    data.level = level;\n  }\n\n  if (transactionName) {\n    data.transactionName = transactionName;\n  }\n\n  if (span) {\n    data.span = span;\n  }\n\n  if (breadcrumbs.length) {\n    data.breadcrumbs = [...data.breadcrumbs, ...breadcrumbs];\n  }\n\n  if (fingerprint.length) {\n    data.fingerprint = [...data.fingerprint, ...fingerprint];\n  }\n\n  if (eventProcessors.length) {\n    data.eventProcessors = [...data.eventProcessors, ...eventProcessors];\n  }\n\n  if (attachments.length) {\n    data.attachments = [...data.attachments, ...attachments];\n  }\n\n  data.propagationContext = { ...data.propagationContext, ...propagationContext };\n}\n\n/**\n * Merges certain scope data. Undefined values will overwrite any existing values.\n * Exported only for tests.\n */\nexport function mergeAndOverwriteScopeData<\n  Prop extends 'extra' | 'tags' | 'user' | 'contexts' | 'sdkProcessingMetadata',\n  Data extends ScopeData,\n>(data: Data, prop: Prop, mergeVal: Data[Prop]): void {\n  data[prop] = merge(data[prop], mergeVal, 1);\n}\n\n/** Exported only for tests */\nexport function mergeArray<Prop extends 'breadcrumbs' | 'fingerprint'>(\n  event: Event,\n  prop: Prop,\n  mergeVal: ScopeData[Prop],\n): void {\n  const prevVal = event[prop];\n  // If we are not merging any new values,\n  // we only need to proceed if there was an empty array before (as we want to replace it with undefined)\n  if (!mergeVal.length && (!prevVal || prevVal.length)) {\n    return;\n  }\n\n  const merged = [...(prevVal || []), ...mergeVal] as ScopeData[Prop];\n  event[prop] = merged.length ? merged : undefined;\n}\n\nfunction applyDataToEvent(event: Event, data: ScopeData): void {\n  const { extra, tags, user, contexts, level, transactionName } = data;\n\n  if (Object.keys(extra).length) {\n    event.extra = { ...extra, ...event.extra };\n  }\n\n  if (Object.keys(tags).length) {\n    event.tags = { ...tags, ...event.tags };\n  }\n\n  if (Object.keys(user).length) {\n    event.user = { ...user, ...event.user };\n  }\n\n  if (Object.keys(contexts).length) {\n    event.contexts = { ...contexts, ...event.contexts };\n  }\n\n  if (level) {\n    event.level = level;\n  }\n\n  // transaction events get their `transaction` from the root span name\n  if (transactionName && event.type !== 'transaction') {\n    event.transaction = transactionName;\n  }\n}\n\nfunction applyBreadcrumbsToEvent(event: Event, breadcrumbs: Breadcrumb[]): void {\n  const mergedBreadcrumbs = [...(event.breadcrumbs || []), ...breadcrumbs];\n  event.breadcrumbs = mergedBreadcrumbs.length ? mergedBreadcrumbs : undefined;\n}\n\nfunction applySdkMetadataToEvent(event: Event, sdkProcessingMetadata: ScopeData['sdkProcessingMetadata']): void {\n  event.sdkProcessingMetadata = {\n    ...event.sdkProcessingMetadata,\n    ...sdkProcessingMetadata,\n  };\n}\n\nfunction applySpanToEvent(event: Event, span: Span): void {\n  event.contexts = {\n    trace: spanToTraceContext(span),\n    ...event.contexts,\n  };\n\n  event.sdkProcessingMetadata = {\n    dynamicSamplingContext: getDynamicSamplingContextFromSpan(span),\n    ...event.sdkProcessingMetadata,\n  };\n\n  const rootSpan = getRootSpan(span);\n  const transactionName = spanToJSON(rootSpan).description;\n  if (transactionName && !event.transaction && event.type === 'transaction') {\n    event.transaction = transactionName;\n  }\n}\n\n/**\n * Applies fingerprint from the scope to the event if there's one,\n * uses message if there's one instead or get rid of empty fingerprint\n */\nfunction applyFingerprintToEvent(event: Event, fingerprint: ScopeData['fingerprint'] | undefined): void {\n  // Make sure it's an array first and we actually have something in place\n  event.fingerprint = event.fingerprint\n    ? Array.isArray(event.fingerprint)\n      ? event.fingerprint\n      : [event.fingerprint]\n    : [];\n\n  // If we have something on the scope, then merge it with event\n  if (fingerprint) {\n    event.fingerprint = event.fingerprint.concat(fingerprint);\n  }\n\n  // If we have no data at all, remove empty array default\n  if (!event.fingerprint.length) {\n    delete event.fingerprint;\n  }\n}\n"],"names":["merge","spanToTraceContext","getDynamicSamplingContextFromSpan","getRootSpan","spanToJSON"],"mappings":"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"}},
    {"offset": {"line": 5837, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5841, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/utils/debug-ids.ts"],"sourcesContent":["import type { DebugImage } from '../types-hoist/debugMeta';\nimport type { StackParser } from '../types-hoist/stacktrace';\nimport { GLOBAL_OBJ } from './worldwide';\n\ntype StackString = string;\ntype CachedResult = [string, string];\n\nlet parsedStackResults: Record<StackString, CachedResult> | undefined;\nlet lastKeysCount: number | undefined;\nlet cachedFilenameDebugIds: Record<string, string> | undefined;\n\n/**\n * Returns a map of filenames to debug identifiers.\n */\nexport function getFilenameToDebugIdMap(stackParser: StackParser): Record<string, string> {\n  const debugIdMap = GLOBAL_OBJ._sentryDebugIds;\n  if (!debugIdMap) {\n    return {};\n  }\n\n  const debugIdKeys = Object.keys(debugIdMap);\n\n  // If the count of registered globals hasn't changed since the last call, we\n  // can just return the cached result.\n  if (cachedFilenameDebugIds && debugIdKeys.length === lastKeysCount) {\n    return cachedFilenameDebugIds;\n  }\n\n  lastKeysCount = debugIdKeys.length;\n\n  // Build a map of filename -> debug_id.\n  cachedFilenameDebugIds = debugIdKeys.reduce<Record<string, string>>((acc, stackKey) => {\n    if (!parsedStackResults) {\n      parsedStackResults = {};\n    }\n\n    const result = parsedStackResults[stackKey];\n\n    if (result) {\n      acc[result[0]] = result[1];\n    } else {\n      const parsedStack = stackParser(stackKey);\n\n      for (let i = parsedStack.length - 1; i >= 0; i--) {\n        const stackFrame = parsedStack[i];\n        const filename = stackFrame?.filename;\n        const debugId = debugIdMap[stackKey];\n\n        if (filename && debugId) {\n          acc[filename] = debugId;\n          parsedStackResults[stackKey] = [filename, debugId];\n          break;\n        }\n      }\n    }\n\n    return acc;\n  }, {});\n\n  return cachedFilenameDebugIds;\n}\n\n/**\n * Returns a list of debug images for the given resources.\n */\nexport function getDebugImagesForResources(\n  stackParser: StackParser,\n  resource_paths: ReadonlyArray<string>,\n): DebugImage[] {\n  const filenameDebugIdMap = getFilenameToDebugIdMap(stackParser);\n\n  if (!filenameDebugIdMap) {\n    return [];\n  }\n\n  const images: DebugImage[] = [];\n  for (const path of resource_paths) {\n    if (path && filenameDebugIdMap[path]) {\n      images.push({\n        type: 'sourcemap',\n        code_file: path,\n        debug_id: filenameDebugIdMap[path] as string,\n      });\n    }\n  }\n\n  return images;\n}\n"],"names":["GLOBAL_OBJ"],"mappings":";;;;AAOA,IAAI;AACJ,IAAI;AACJ,IAAI;AAEJ;;CAEA,GACO,SAAS,wBAAwB,WAAW;IACjD,MAAM,aAAaA,UAAAA,UAAU,CAAC,eAAe;IAC7C,IAAI,CAAC,YAAY;QACf,OAAO,CAAA;IACX;IAEE,MAAM,cAAc,OAAO,IAAI,CAAC;IAElC,4EAAA;IACA,qCAAA;IACE,IAAI,0BAA0B,YAAY,MAAA,KAAW,eAAe;QAClE,OAAO;IACX;IAEE,gBAAgB,YAAY,MAAM;IAEpC,uCAAA;IACE,yBAAyB,YAAY,MAAM,CAAyB,CAAC,KAAK;QACxE,IAAI,CAAC,oBAAoB;YACvB,qBAAqB,CAAA;QAC3B;QAEI,MAAM,SAAS,kBAAkB,CAAC,SAAS;QAE3C,IAAI,QAAQ;YACV,GAAG,CAAC,MAAM,CAAC,EAAE,CAAA,GAAI,MAAM,CAAC,EAAE;QAChC,OAAW;YACL,MAAM,cAAc,YAAY;YAEhC,IAAK,IAAI,IAAI,YAAY,MAAA,GAAS,GAAG,KAAK,GAAG,IAAK;gBAChD,MAAM,aAAa,WAAW,CAAC,EAAE;gBACjC,MAAM,WAAW,YAAY;gBAC7B,MAAM,UAAU,UAAU,CAAC,SAAS;gBAEpC,IAAI,YAAY,SAAS;oBACvB,GAAG,CAAC,SAAQ,GAAI;oBAChB,kBAAkB,CAAC,SAAQ,GAAI;wBAAC;wBAAU;qBAAQ;oBAClD;gBACV;YACA;QACA;QAEI,OAAO;IACX,GAAK,CAAA;IAEH,OAAO;AACT;AAEA;;CAEA,GACO,SAAS,2BACd,WAAW,EACX,cAAc;IAEd,MAAM,qBAAqB,wBAAwB;IAEnD,IAAI,CAAC,oBAAoB;QACvB,OAAO,EAAE;IACb;IAEE,MAAM,SAAuB,EAAE;IAC/B,KAAK,MAAM,QAAQ,eAAgB;QACjC,IAAI,QAAQ,kBAAkB,CAAC,KAAK,EAAE;YACpC,OAAO,IAAI,CAAC;gBACV,MAAM;gBACN,WAAW;gBACX,UAAU,kBAAkB,CAAC,KAAI;YACzC;QACA;IACA;IAEE,OAAO;AACT"}},
    {"offset": {"line": 5911, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5915, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/utils/prepareEvent.ts"],"sourcesContent":["import type { Client } from '../client';\nimport { DEFAULT_ENVIRONMENT } from '../constants';\nimport { getGlobalScope } from '../currentScopes';\nimport { notifyEventProcessors } from '../eventProcessors';\nimport type { CaptureContext, ScopeContext } from '../scope';\nimport { Scope } from '../scope';\nimport type { Event, EventHint } from '../types-hoist/event';\nimport type { ClientOptions } from '../types-hoist/options';\nimport type { StackParser } from '../types-hoist/stacktrace';\nimport { applyScopeDataToEvent, mergeScopeData } from './applyScopeDataToEvent';\nimport { getFilenameToDebugIdMap } from './debug-ids';\nimport { addExceptionMechanism, uuid4 } from './misc';\nimport { normalize } from './normalize';\nimport { truncate } from './string';\nimport { dateTimestampInSeconds } from './time';\n\n/**\n * This type makes sure that we get either a CaptureContext, OR an EventHint.\n * It does not allow mixing them, which could lead to unexpected outcomes, e.g. this is disallowed:\n * { user: { id: '123' }, mechanism: { handled: false } }\n */\nexport type ExclusiveEventHintOrCaptureContext =\n  | (CaptureContext & Partial<{ [key in keyof EventHint]: never }>)\n  | (EventHint & Partial<{ [key in keyof ScopeContext]: never }>);\n\n/**\n * Adds common information to events.\n *\n * The information includes release and environment from `options`,\n * breadcrumbs and context (extra, tags and user) from the scope.\n *\n * Information that is already present in the event is never overwritten. For\n * nested objects, such as the context, keys are merged.\n *\n * @param event The original event.\n * @param hint May contain additional information about the original exception.\n * @param scope A scope containing event metadata.\n * @returns A new event with more information.\n * @hidden\n */\nexport function prepareEvent(\n  options: ClientOptions,\n  event: Event,\n  hint: EventHint,\n  scope?: Scope,\n  client?: Client,\n  isolationScope?: Scope,\n): PromiseLike<Event | null> {\n  const { normalizeDepth = 3, normalizeMaxBreadth = 1_000 } = options;\n  const prepared: Event = {\n    ...event,\n    event_id: event.event_id || hint.event_id || uuid4(),\n    timestamp: event.timestamp || dateTimestampInSeconds(),\n  };\n  const integrations = hint.integrations || options.integrations.map(i => i.name);\n\n  applyClientOptions(prepared, options);\n  applyIntegrationsMetadata(prepared, integrations);\n\n  if (client) {\n    client.emit('applyFrameMetadata', event);\n  }\n\n  // Only put debug IDs onto frames for error events.\n  if (event.type === undefined) {\n    applyDebugIds(prepared, options.stackParser);\n  }\n\n  // If we have scope given to us, use it as the base for further modifications.\n  // This allows us to prevent unnecessary copying of data if `captureContext` is not provided.\n  const finalScope = getFinalScope(scope, hint.captureContext);\n\n  if (hint.mechanism) {\n    addExceptionMechanism(prepared, hint.mechanism);\n  }\n\n  const clientEventProcessors = client ? client.getEventProcessors() : [];\n\n  // This should be the last thing called, since we want that\n  // {@link Scope.addEventProcessor} gets the finished prepared event.\n  // Merge scope data together\n  const data = getGlobalScope().getScopeData();\n\n  if (isolationScope) {\n    const isolationData = isolationScope.getScopeData();\n    mergeScopeData(data, isolationData);\n  }\n\n  if (finalScope) {\n    const finalScopeData = finalScope.getScopeData();\n    mergeScopeData(data, finalScopeData);\n  }\n\n  const attachments = [...(hint.attachments || []), ...data.attachments];\n  if (attachments.length) {\n    hint.attachments = attachments;\n  }\n\n  applyScopeDataToEvent(prepared, data);\n\n  const eventProcessors = [\n    ...clientEventProcessors,\n    // Run scope event processors _after_ all other processors\n    ...data.eventProcessors,\n  ];\n\n  const result = notifyEventProcessors(eventProcessors, prepared, hint);\n\n  return result.then(evt => {\n    if (evt) {\n      // We apply the debug_meta field only after all event processors have ran, so that if any event processors modified\n      // file names (e.g.the RewriteFrames integration) the filename -> debug ID relationship isn't destroyed.\n      // This should not cause any PII issues, since we're only moving data that is already on the event and not adding\n      // any new data\n      applyDebugMeta(evt);\n    }\n\n    if (typeof normalizeDepth === 'number' && normalizeDepth > 0) {\n      return normalizeEvent(evt, normalizeDepth, normalizeMaxBreadth);\n    }\n    return evt;\n  });\n}\n\n/**\n * Enhances event using the client configuration.\n * It takes care of all \"static\" values like environment, release and `dist`,\n * as well as truncating overly long values.\n *\n * Only exported for tests.\n *\n * @param event event instance to be enhanced\n */\nexport function applyClientOptions(event: Event, options: ClientOptions): void {\n  const { environment, release, dist, maxValueLength = 250 } = options;\n\n  // empty strings do not make sense for environment, release, and dist\n  // so we handle them the same as if they were not provided\n  event.environment = event.environment || environment || DEFAULT_ENVIRONMENT;\n\n  if (!event.release && release) {\n    event.release = release;\n  }\n\n  if (!event.dist && dist) {\n    event.dist = dist;\n  }\n\n  const request = event.request;\n  if (request?.url) {\n    request.url = truncate(request.url, maxValueLength);\n  }\n}\n\n/**\n * Puts debug IDs into the stack frames of an error event.\n */\nexport function applyDebugIds(event: Event, stackParser: StackParser): void {\n  // Build a map of filename -> debug_id\n  const filenameDebugIdMap = getFilenameToDebugIdMap(stackParser);\n\n  event.exception?.values?.forEach(exception => {\n    exception.stacktrace?.frames?.forEach(frame => {\n      if (frame.filename) {\n        frame.debug_id = filenameDebugIdMap[frame.filename];\n      }\n    });\n  });\n}\n\n/**\n * Moves debug IDs from the stack frames of an error event into the debug_meta field.\n */\nexport function applyDebugMeta(event: Event): void {\n  // Extract debug IDs and filenames from the stack frames on the event.\n  const filenameDebugIdMap: Record<string, string> = {};\n  event.exception?.values?.forEach(exception => {\n    exception.stacktrace?.frames?.forEach(frame => {\n      if (frame.debug_id) {\n        if (frame.abs_path) {\n          filenameDebugIdMap[frame.abs_path] = frame.debug_id;\n        } else if (frame.filename) {\n          filenameDebugIdMap[frame.filename] = frame.debug_id;\n        }\n        delete frame.debug_id;\n      }\n    });\n  });\n\n  if (Object.keys(filenameDebugIdMap).length === 0) {\n    return;\n  }\n\n  // Fill debug_meta information\n  event.debug_meta = event.debug_meta || {};\n  event.debug_meta.images = event.debug_meta.images || [];\n  const images = event.debug_meta.images;\n  Object.entries(filenameDebugIdMap).forEach(([filename, debug_id]) => {\n    images.push({\n      type: 'sourcemap',\n      code_file: filename,\n      debug_id,\n    });\n  });\n}\n\n/**\n * This function adds all used integrations to the SDK info in the event.\n * @param event The event that will be filled with all integrations.\n */\nfunction applyIntegrationsMetadata(event: Event, integrationNames: string[]): void {\n  if (integrationNames.length > 0) {\n    event.sdk = event.sdk || {};\n    event.sdk.integrations = [...(event.sdk.integrations || []), ...integrationNames];\n  }\n}\n\n/**\n * Applies `normalize` function on necessary `Event` attributes to make them safe for serialization.\n * Normalized keys:\n * - `breadcrumbs.data`\n * - `user`\n * - `contexts`\n * - `extra`\n * @param event Event\n * @returns Normalized event\n */\nfunction normalizeEvent(event: Event | null, depth: number, maxBreadth: number): Event | null {\n  if (!event) {\n    return null;\n  }\n\n  const normalized: Event = {\n    ...event,\n    ...(event.breadcrumbs && {\n      breadcrumbs: event.breadcrumbs.map(b => ({\n        ...b,\n        ...(b.data && {\n          data: normalize(b.data, depth, maxBreadth),\n        }),\n      })),\n    }),\n    ...(event.user && {\n      user: normalize(event.user, depth, maxBreadth),\n    }),\n    ...(event.contexts && {\n      contexts: normalize(event.contexts, depth, maxBreadth),\n    }),\n    ...(event.extra && {\n      extra: normalize(event.extra, depth, maxBreadth),\n    }),\n  };\n\n  // event.contexts.trace stores information about a Transaction. Similarly,\n  // event.spans[] stores information about child Spans. Given that a\n  // Transaction is conceptually a Span, normalization should apply to both\n  // Transactions and Spans consistently.\n  // For now the decision is to skip normalization of Transactions and Spans,\n  // so this block overwrites the normalized event to add back the original\n  // Transaction information prior to normalization.\n  if (event.contexts?.trace && normalized.contexts) {\n    normalized.contexts.trace = event.contexts.trace;\n\n    // event.contexts.trace.data may contain circular/dangerous data so we need to normalize it\n    if (event.contexts.trace.data) {\n      normalized.contexts.trace.data = normalize(event.contexts.trace.data, depth, maxBreadth);\n    }\n  }\n\n  // event.spans[].data may contain circular/dangerous data so we need to normalize it\n  if (event.spans) {\n    normalized.spans = event.spans.map(span => {\n      return {\n        ...span,\n        ...(span.data && {\n          data: normalize(span.data, depth, maxBreadth),\n        }),\n      };\n    });\n  }\n\n  // event.contexts.flags (FeatureFlagContext) stores context for our feature\n  // flag integrations. It has a greater nesting depth than our other typed\n  // Contexts, so we re-normalize with a fixed depth of 3 here. We do not want\n  // to skip this in case of conflicting, user-provided context.\n  if (event.contexts?.flags && normalized.contexts) {\n    normalized.contexts.flags = normalize(event.contexts.flags, 3, maxBreadth);\n  }\n\n  return normalized;\n}\n\nfunction getFinalScope(scope: Scope | undefined, captureContext: CaptureContext | undefined): Scope | undefined {\n  if (!captureContext) {\n    return scope;\n  }\n\n  const finalScope = scope ? scope.clone() : new Scope();\n  finalScope.update(captureContext);\n  return finalScope;\n}\n\n/**\n * Parse either an `EventHint` directly, or convert a `CaptureContext` to an `EventHint`.\n * This is used to allow to update method signatures that used to accept a `CaptureContext` but should now accept an `EventHint`.\n */\nexport function parseEventHintOrCaptureContext(\n  hint: ExclusiveEventHintOrCaptureContext | undefined,\n): EventHint | undefined {\n  if (!hint) {\n    return undefined;\n  }\n\n  // If you pass a Scope or `() => Scope` as CaptureContext, we just return this as captureContext\n  if (hintIsScopeOrFunction(hint)) {\n    return { captureContext: hint };\n  }\n\n  if (hintIsScopeContext(hint)) {\n    return {\n      captureContext: hint,\n    };\n  }\n\n  return hint;\n}\n\nfunction hintIsScopeOrFunction(hint: CaptureContext | EventHint): hint is Scope | ((scope: Scope) => Scope) {\n  return hint instanceof Scope || typeof hint === 'function';\n}\n\ntype ScopeContextProperty = keyof ScopeContext;\nconst captureContextKeys: readonly ScopeContextProperty[] = [\n  'user',\n  'level',\n  'extra',\n  'contexts',\n  'tags',\n  'fingerprint',\n  'propagationContext',\n] as const;\n\nfunction hintIsScopeContext(hint: Partial<ScopeContext> | EventHint): hint is Partial<ScopeContext> {\n  return Object.keys(hint).some(key => captureContextKeys.includes(key as ScopeContextProperty));\n}\n"],"names":["uuid4","dateTimestampInSeconds","addExceptionMechanism","getGlobalScope","mergeScopeData","applyScopeDataToEvent","eventProcessors","notifyEventProcessors","DEFAULT_ENVIRONMENT","truncate","getFilenameToDebugIdMap","normalize","scope","Scope"],"mappings":"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"}},
    {"offset": {"line": 6206, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6210, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/exports.ts"],"sourcesContent":["import { getClient, getCurrentScope, getIsolationScope, withIsolationScope } from './currentScopes';\nimport { DEBUG_BUILD } from './debug-build';\nimport type { CaptureContext } from './scope';\nimport { closeSession, makeSession, updateSession } from './session';\nimport type { CheckIn, FinishedCheckIn, MonitorConfig } from './types-hoist/checkin';\nimport type { Event, EventHint } from './types-hoist/event';\nimport type { EventProcessor } from './types-hoist/eventprocessor';\nimport type { Extra, Extras } from './types-hoist/extra';\nimport type { Primitive } from './types-hoist/misc';\nimport type { Session, SessionContext } from './types-hoist/session';\nimport type { SeverityLevel } from './types-hoist/severity';\nimport type { User } from './types-hoist/user';\nimport { isThenable } from './utils/is';\nimport { logger } from './utils/logger';\nimport { uuid4 } from './utils/misc';\nimport type { ExclusiveEventHintOrCaptureContext } from './utils/prepareEvent';\nimport { parseEventHintOrCaptureContext } from './utils/prepareEvent';\nimport { timestampInSeconds } from './utils/time';\nimport { GLOBAL_OBJ } from './utils/worldwide';\n\n/**\n * Captures an exception event and sends it to Sentry.\n *\n * @param exception The exception to capture.\n * @param hint Optional additional data to attach to the Sentry event.\n * @returns the id of the captured Sentry event.\n */\nexport function captureException(exception: unknown, hint?: ExclusiveEventHintOrCaptureContext): string {\n  return getCurrentScope().captureException(exception, parseEventHintOrCaptureContext(hint));\n}\n\n/**\n * Captures a message event and sends it to Sentry.\n *\n * @param message The message to send to Sentry.\n * @param captureContext Define the level of the message or pass in additional data to attach to the message.\n * @returns the id of the captured message.\n */\nexport function captureMessage(message: string, captureContext?: CaptureContext | SeverityLevel): string {\n  // This is necessary to provide explicit scopes upgrade, without changing the original\n  // arity of the `captureMessage(message, level)` method.\n  const level = typeof captureContext === 'string' ? captureContext : undefined;\n  const context = typeof captureContext !== 'string' ? { captureContext } : undefined;\n  return getCurrentScope().captureMessage(message, level, context);\n}\n\n/**\n * Captures a manually created event and sends it to Sentry.\n *\n * @param event The event to send to Sentry.\n * @param hint Optional additional data to attach to the Sentry event.\n * @returns the id of the captured event.\n */\nexport function captureEvent(event: Event, hint?: EventHint): string {\n  return getCurrentScope().captureEvent(event, hint);\n}\n\n/**\n * Sets context data with the given name.\n * @param name of the context\n * @param context Any kind of data. This data will be normalized.\n */\nexport function setContext(name: string, context: { [key: string]: unknown } | null): void {\n  getIsolationScope().setContext(name, context);\n}\n\n/**\n * Set an object that will be merged sent as extra data with the event.\n * @param extras Extras object to merge into current context.\n */\nexport function setExtras(extras: Extras): void {\n  getIsolationScope().setExtras(extras);\n}\n\n/**\n * Set key:value that will be sent as extra data with the event.\n * @param key String of extra\n * @param extra Any kind of data. This data will be normalized.\n */\nexport function setExtra(key: string, extra: Extra): void {\n  getIsolationScope().setExtra(key, extra);\n}\n\n/**\n * Set an object that will be merged sent as tags data with the event.\n * @param tags Tags context object to merge into current context.\n */\nexport function setTags(tags: { [key: string]: Primitive }): void {\n  getIsolationScope().setTags(tags);\n}\n\n/**\n * Set key:value that will be sent as tags data with the event.\n *\n * Can also be used to unset a tag, by passing `undefined`.\n *\n * @param key String key of tag\n * @param value Value of tag\n */\nexport function setTag(key: string, value: Primitive): void {\n  getIsolationScope().setTag(key, value);\n}\n\n/**\n * Updates user context information for future events.\n *\n * @param user User context object to be set in the current context. Pass `null` to unset the user.\n */\nexport function setUser(user: User | null): void {\n  getIsolationScope().setUser(user);\n}\n\n/**\n * The last error event id of the isolation scope.\n *\n * Warning: This function really returns the last recorded error event id on the current\n * isolation scope. If you call this function after handling a certain error and another error\n * is captured in between, the last one is returned instead of the one you might expect.\n * Also, ids of events that were never sent to Sentry (for example because\n * they were dropped in `beforeSend`) could be returned.\n *\n * @returns The last event id of the isolation scope.\n */\nexport function lastEventId(): string | undefined {\n  return getIsolationScope().lastEventId();\n}\n\n/**\n * Create a cron monitor check in and send it to Sentry.\n *\n * @param checkIn An object that describes a check in.\n * @param upsertMonitorConfig An optional object that describes a monitor config. Use this if you want\n * to create a monitor automatically when sending a check in.\n */\nexport function captureCheckIn(checkIn: CheckIn, upsertMonitorConfig?: MonitorConfig): string {\n  const scope = getCurrentScope();\n  const client = getClient();\n  if (!client) {\n    DEBUG_BUILD && logger.warn('Cannot capture check-in. No client defined.');\n  } else if (!client.captureCheckIn) {\n    DEBUG_BUILD && logger.warn('Cannot capture check-in. Client does not support sending check-ins.');\n  } else {\n    return client.captureCheckIn(checkIn, upsertMonitorConfig, scope);\n  }\n\n  return uuid4();\n}\n\n/**\n * Wraps a callback with a cron monitor check in. The check in will be sent to Sentry when the callback finishes.\n *\n * @param monitorSlug The distinct slug of the monitor.\n * @param callback Callback to be monitored\n * @param upsertMonitorConfig An optional object that describes a monitor config. Use this if you want\n * to create a monitor automatically when sending a check in.\n */\nexport function withMonitor<T>(\n  monitorSlug: CheckIn['monitorSlug'],\n  callback: () => T,\n  upsertMonitorConfig?: MonitorConfig,\n): T {\n  const checkInId = captureCheckIn({ monitorSlug, status: 'in_progress' }, upsertMonitorConfig);\n  const now = timestampInSeconds();\n\n  function finishCheckIn(status: FinishedCheckIn['status']): void {\n    captureCheckIn({ monitorSlug, status, checkInId, duration: timestampInSeconds() - now });\n  }\n\n  return withIsolationScope(() => {\n    let maybePromiseResult: T;\n    try {\n      maybePromiseResult = callback();\n    } catch (e) {\n      finishCheckIn('error');\n      throw e;\n    }\n\n    if (isThenable(maybePromiseResult)) {\n      return maybePromiseResult.then(\n        r => {\n          finishCheckIn('ok');\n          return r;\n        },\n        e => {\n          finishCheckIn('error');\n          throw e;\n        },\n      ) as T;\n    }\n    finishCheckIn('ok');\n\n    return maybePromiseResult;\n  });\n}\n\n/**\n * Call `flush()` on the current client, if there is one. See {@link Client.flush}.\n *\n * @param timeout Maximum time in ms the client should wait to flush its event queue. Omitting this parameter will cause\n * the client to wait until all events are sent before resolving the promise.\n * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it\n * doesn't (or if there's no client defined).\n */\nexport async function flush(timeout?: number): Promise<boolean> {\n  const client = getClient();\n  if (client) {\n    return client.flush(timeout);\n  }\n  DEBUG_BUILD && logger.warn('Cannot flush events. No client defined.');\n  return Promise.resolve(false);\n}\n\n/**\n * Call `close()` on the current client, if there is one. See {@link Client.close}.\n *\n * @param timeout Maximum time in ms the client should wait to flush its event queue before shutting down. Omitting this\n * parameter will cause the client to wait until all events are sent before disabling itself.\n * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it\n * doesn't (or if there's no client defined).\n */\nexport async function close(timeout?: number): Promise<boolean> {\n  const client = getClient();\n  if (client) {\n    return client.close(timeout);\n  }\n  DEBUG_BUILD && logger.warn('Cannot flush events and disable SDK. No client defined.');\n  return Promise.resolve(false);\n}\n\n/**\n * Returns true if Sentry has been properly initialized.\n */\nexport function isInitialized(): boolean {\n  return !!getClient();\n}\n\n/** If the SDK is initialized & enabled. */\nexport function isEnabled(): boolean {\n  const client = getClient();\n  return client?.getOptions().enabled !== false && !!client?.getTransport();\n}\n\n/**\n * Add an event processor.\n * This will be added to the current isolation scope, ensuring any event that is processed in the current execution\n * context will have the processor applied.\n */\nexport function addEventProcessor(callback: EventProcessor): void {\n  getIsolationScope().addEventProcessor(callback);\n}\n\n/**\n * Start a session on the current isolation scope.\n *\n * @param context (optional) additional properties to be applied to the returned session object\n *\n * @returns the new active session\n */\nexport function startSession(context?: SessionContext): Session {\n  const isolationScope = getIsolationScope();\n  const currentScope = getCurrentScope();\n\n  // Will fetch userAgent if called from browser sdk\n  const { userAgent } = GLOBAL_OBJ.navigator || {};\n\n  const session = makeSession({\n    user: currentScope.getUser() || isolationScope.getUser(),\n    ...(userAgent && { userAgent }),\n    ...context,\n  });\n\n  // End existing session if there's one\n  const currentSession = isolationScope.getSession();\n  if (currentSession?.status === 'ok') {\n    updateSession(currentSession, { status: 'exited' });\n  }\n\n  endSession();\n\n  // Afterwards we set the new session on the scope\n  isolationScope.setSession(session);\n\n  return session;\n}\n\n/**\n * End the session on the current isolation scope.\n */\nexport function endSession(): void {\n  const isolationScope = getIsolationScope();\n  const currentScope = getCurrentScope();\n\n  const session = currentScope.getSession() || isolationScope.getSession();\n  if (session) {\n    closeSession(session);\n  }\n  _sendSessionUpdate();\n\n  // the session is over; take it off of the scope\n  isolationScope.setSession();\n}\n\n/**\n * Sends the current Session on the scope\n */\nfunction _sendSessionUpdate(): void {\n  const isolationScope = getIsolationScope();\n  const client = getClient();\n  const session = isolationScope.getSession();\n  if (session && client) {\n    client.captureSession(session);\n  }\n}\n\n/**\n * Sends the current session on the scope to Sentry\n *\n * @param end If set the session will be marked as exited and removed from the scope.\n *            Defaults to `false`.\n */\nexport function captureSession(end: boolean = false): void {\n  // both send the update and pull the session from the scope\n  if (end) {\n    endSession();\n    return;\n  }\n\n  // only send the update\n  _sendSessionUpdate();\n}\n"],"names":["getCurrentScope","parseEventHintOrCaptureContext","getIsolationScope","getClient","DEBUG_BUILD","logger","uuid4","timestampInSeconds","withIsolationScope","isThenable","GLOBAL_OBJ","session","makeSession","updateSession","closeSession"],"mappings":"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"}},
    {"offset": {"line": 6504, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6508, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/api.ts"],"sourcesContent":["import type { ReportDialogOptions } from './report-dialog';\nimport type { DsnComponents, DsnLike } from './types-hoist/dsn';\nimport type { SdkInfo } from './types-hoist/sdkinfo';\nimport { dsnToString, makeDsn } from './utils/dsn';\n\nconst SENTRY_API_VERSION = '7';\n\n/** Returns the prefix to construct Sentry ingestion API endpoints. */\nfunction getBaseApiEndpoint(dsn: DsnComponents): string {\n  const protocol = dsn.protocol ? `${dsn.protocol}:` : '';\n  const port = dsn.port ? `:${dsn.port}` : '';\n  return `${protocol}//${dsn.host}${port}${dsn.path ? `/${dsn.path}` : ''}/api/`;\n}\n\n/** Returns the ingest API endpoint for target. */\nfunction _getIngestEndpoint(dsn: DsnComponents): string {\n  return `${getBaseApiEndpoint(dsn)}${dsn.projectId}/envelope/`;\n}\n\n/** Returns a URL-encoded string with auth config suitable for a query string. */\nfunction _encodedAuth(dsn: DsnComponents, sdkInfo: SdkInfo | undefined): string {\n  const params: Record<string, string> = {\n    sentry_version: SENTRY_API_VERSION,\n  };\n\n  if (dsn.publicKey) {\n    // We send only the minimum set of required information. See\n    // https://github.com/getsentry/sentry-javascript/issues/2572.\n    params.sentry_key = dsn.publicKey;\n  }\n\n  if (sdkInfo) {\n    params.sentry_client = `${sdkInfo.name}/${sdkInfo.version}`;\n  }\n\n  return new URLSearchParams(params).toString();\n}\n\n/**\n * Returns the envelope endpoint URL with auth in the query string.\n *\n * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n */\nexport function getEnvelopeEndpointWithUrlEncodedAuth(dsn: DsnComponents, tunnel?: string, sdkInfo?: SdkInfo): string {\n  return tunnel ? tunnel : `${_getIngestEndpoint(dsn)}?${_encodedAuth(dsn, sdkInfo)}`;\n}\n\n/** Returns the url to the report dialog endpoint. */\nexport function getReportDialogEndpoint(dsnLike: DsnLike, dialogOptions: ReportDialogOptions): string {\n  const dsn = makeDsn(dsnLike);\n  if (!dsn) {\n    return '';\n  }\n\n  const endpoint = `${getBaseApiEndpoint(dsn)}embed/error-page/`;\n\n  let encodedOptions = `dsn=${dsnToString(dsn)}`;\n  for (const key in dialogOptions) {\n    if (key === 'dsn') {\n      continue;\n    }\n\n    if (key === 'onClose') {\n      continue;\n    }\n\n    if (key === 'user') {\n      const user = dialogOptions.user;\n      if (!user) {\n        continue;\n      }\n      if (user.name) {\n        encodedOptions += `&name=${encodeURIComponent(user.name)}`;\n      }\n      if (user.email) {\n        encodedOptions += `&email=${encodeURIComponent(user.email)}`;\n      }\n    } else {\n      encodedOptions += `&${encodeURIComponent(key)}=${encodeURIComponent(dialogOptions[key] as string)}`;\n    }\n  }\n\n  return `${endpoint}?${encodedOptions}`;\n}\n"],"names":["dsn","makeDsn","dsnToString"],"mappings":";;;;AAKA,MAAM,qBAAqB;AAE3B,oEAAA,GACA,SAAS,mBAAmB,GAAG;IAC7B,MAAM,WAAW,IAAI,QAAA,GAAW,CAAC,EAAA,IAAA,QAAA,CAAA,CAAA,CAAA,GAAA;IACA,MAAA,OAAA,IAAA,IAAA,GAAA,CAAA,CAAA,EAAA,IAAA,IAAA,CAAA,CAAA,GAAA;IACA,OAAA,CAAA,EAAA,SAAA,EAAA,EAAA,IAAA,IAAA,CAAA,EAAA,KAAA,EAAA,IAAA,IAAA,GAAA,CAAA,CAAA,EAAA,IAAA,IAAA,CAAA,CAAA,GAAA,GAAA,KAAA,CAAA;AACA;AAEA,gDAAA,GACA,SAAA,mBAAA,GAAA;IACA,OAAA,CAAA,EAAA,mBAAA,KAAA,EAAA,IAAA,SAAA,CAAA,UAAA,CAAA;AACA;AAEA,+EAAA,GACA,SAAA,aAAA,GAAA,EAAA,OAAA;IACA,MAAA,SAAA;QACA,gBAAA;IACA;IAEA,IAAA,IAAA,SAAA,EAAA;QACA,4DAAA;QACA,8DAAA;QACA,OAAA,UAAA,GAAA,IAAA,SAAA;IACA;IAEA,IAAA,SAAA;QACA,OAAA,aAAA,GAAA,CAAA,EAAA,QAAA,IAAA,CAAA,CAAA,EAAA,QAAA,OAAA,CAAA,CAAA;IACA;IAEA,OAAA,IAAA,gBAAA,QAAA,QAAA;AACA;AAEA;;;;CAIA,GACA,SAAA,sCAAA,GAAA,EAAA,MAAA,EAAA,OAAA;IACA,OAAA,SAAA,SAAA,CAAA,EAAA,mBAAA,KAAA,CAAA,EAAA,aAAA,KAAA,SAAA,CAAA;AACA;AAEA,mDAAA,GACA,SAAA,wBAAA,OAAA,EAAA,aAAA;IACA,MAAAA,QAAAC,IAAAA,OAAA,CAAA;IACA,IAAA,CAAAD,OAAA;QACA,OAAA;IACA;IAEA,MAAA,WAAA,CAAA,EAAA,mBAAAA,OAAA,iBAAA,CAAA;IAEA,IAAA,iBAAA,CAAA,IAAA,EAAAE,IAAAA,WAAA,CAAAF,OAAA,CAAA;IACA,IAAA,MAAA,OAAA,cAAA;QACA,IAAA,QAAA,OAAA;YACA;QACA;QAEA,IAAA,QAAA,WAAA;YACA;QACA;QAEA,IAAA,QAAA,QAAA;YACA,MAAA,OAAA,cAAA,IAAA;YACA,IAAA,CAAA,MAAA;gBACA;YACA;YACA,IAAA,KAAA,IAAA,EAAA;gBACA,kBAAA,CAAA,MAAA,EAAA,mBAAA,KAAA,IAAA,EAAA,CAAA;YACA;YACA,IAAA,KAAA,KAAA,EAAA;gBACA,kBAAA,CAAA,OAAA,EAAA,mBAAA,KAAA,KAAA,EAAA,CAAA;YACA;QACA,OAAA;YACA,kBAAA,CAAA,CAAA,EAAA,mBAAA,KAAA,CAAA,EAAA,mBAAA,aAAA,CAAA,IAAA,EAAA,CAAA;QACA;IACA;IAEA,OAAA,CAAA,EAAA,SAAA,CAAA,EAAA,eAAA,CAAA;AACA"}},
    {"offset": {"line": 6575, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6579, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/integration.ts"],"sourcesContent":["import type { Client } from './client';\nimport { getClient } from './currentScopes';\nimport { DEBUG_BUILD } from './debug-build';\nimport type { Event, EventHint } from './types-hoist/event';\nimport type { Integration, IntegrationFn } from './types-hoist/integration';\nimport type { Options } from './types-hoist/options';\nimport { logger } from './utils/logger';\n\nexport const installedIntegrations: string[] = [];\n\n/** Map of integrations assigned to a client */\nexport type IntegrationIndex = {\n  [key: string]: Integration;\n};\n\ntype IntegrationWithDefaultInstance = Integration & { isDefaultInstance?: true };\n\n/**\n * Remove duplicates from the given array, preferring the last instance of any duplicate. Not guaranteed to\n * preserve the order of integrations in the array.\n *\n * @private\n */\nfunction filterDuplicates(integrations: Integration[]): Integration[] {\n  const integrationsByName: { [key: string]: Integration } = {};\n\n  integrations.forEach((currentInstance: IntegrationWithDefaultInstance) => {\n    const { name } = currentInstance;\n\n    const existingInstance: IntegrationWithDefaultInstance | undefined = integrationsByName[name];\n\n    // We want integrations later in the array to overwrite earlier ones of the same type, except that we never want a\n    // default instance to overwrite an existing user instance\n    if (existingInstance && !existingInstance.isDefaultInstance && currentInstance.isDefaultInstance) {\n      return;\n    }\n\n    integrationsByName[name] = currentInstance;\n  });\n\n  return Object.values(integrationsByName);\n}\n\n/** Gets integrations to install */\nexport function getIntegrationsToSetup(options: Pick<Options, 'defaultIntegrations' | 'integrations'>): Integration[] {\n  const defaultIntegrations = options.defaultIntegrations || [];\n  const userIntegrations = options.integrations;\n\n  // We flag default instances, so that later we can tell them apart from any user-created instances of the same class\n  defaultIntegrations.forEach((integration: IntegrationWithDefaultInstance) => {\n    integration.isDefaultInstance = true;\n  });\n\n  let integrations: Integration[];\n\n  if (Array.isArray(userIntegrations)) {\n    integrations = [...defaultIntegrations, ...userIntegrations];\n  } else if (typeof userIntegrations === 'function') {\n    const resolvedUserIntegrations = userIntegrations(defaultIntegrations);\n    integrations = Array.isArray(resolvedUserIntegrations) ? resolvedUserIntegrations : [resolvedUserIntegrations];\n  } else {\n    integrations = defaultIntegrations;\n  }\n\n  return filterDuplicates(integrations);\n}\n\n/**\n * Given a list of integration instances this installs them all. When `withDefaults` is set to `true` then all default\n * integrations are added unless they were already provided before.\n * @param integrations array of integration instances\n * @param withDefault should enable default integrations\n */\nexport function setupIntegrations(client: Client, integrations: Integration[]): IntegrationIndex {\n  const integrationIndex: IntegrationIndex = {};\n\n  integrations.forEach((integration: Integration | undefined) => {\n    // guard against empty provided integrations\n    if (integration) {\n      setupIntegration(client, integration, integrationIndex);\n    }\n  });\n\n  return integrationIndex;\n}\n\n/**\n * Execute the `afterAllSetup` hooks of the given integrations.\n */\nexport function afterSetupIntegrations(client: Client, integrations: Integration[]): void {\n  for (const integration of integrations) {\n    // guard against empty provided integrations\n    if (integration?.afterAllSetup) {\n      integration.afterAllSetup(client);\n    }\n  }\n}\n\n/** Setup a single integration.  */\nexport function setupIntegration(client: Client, integration: Integration, integrationIndex: IntegrationIndex): void {\n  if (integrationIndex[integration.name]) {\n    DEBUG_BUILD && logger.log(`Integration skipped because it was already installed: ${integration.name}`);\n    return;\n  }\n  integrationIndex[integration.name] = integration;\n\n  // `setupOnce` is only called the first time\n  if (installedIntegrations.indexOf(integration.name) === -1 && typeof integration.setupOnce === 'function') {\n    integration.setupOnce();\n    installedIntegrations.push(integration.name);\n  }\n\n  // `setup` is run for each client\n  if (integration.setup && typeof integration.setup === 'function') {\n    integration.setup(client);\n  }\n\n  if (typeof integration.preprocessEvent === 'function') {\n    const callback = integration.preprocessEvent.bind(integration) as typeof integration.preprocessEvent;\n    client.on('preprocessEvent', (event, hint) => callback(event, hint, client));\n  }\n\n  if (typeof integration.processEvent === 'function') {\n    const callback = integration.processEvent.bind(integration) as typeof integration.processEvent;\n\n    const processor = Object.assign((event: Event, hint: EventHint) => callback(event, hint, client), {\n      id: integration.name,\n    });\n\n    client.addEventProcessor(processor);\n  }\n\n  DEBUG_BUILD && logger.log(`Integration installed: ${integration.name}`);\n}\n\n/** Add an integration to the current scope's client. */\nexport function addIntegration(integration: Integration): void {\n  const client = getClient();\n\n  if (!client) {\n    DEBUG_BUILD && logger.warn(`Cannot add integration \"${integration.name}\" because no SDK Client is available.`);\n    return;\n  }\n\n  client.addIntegration(integration);\n}\n\n/**\n * Define an integration function that can be used to create an integration instance.\n * Note that this by design hides the implementation details of the integration, as they are considered internal.\n */\nexport function defineIntegration<Fn extends IntegrationFn>(fn: Fn): (...args: Parameters<Fn>) => Integration {\n  return fn;\n}\n"],"names":["DEBUG_BUILD","logger","getClient"],"mappings":"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"}},
    {"offset": {"line": 6702, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6706, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/utils/clientreport.ts"],"sourcesContent":["import type { ClientReport } from '../types-hoist/clientreport';\nimport type { ClientReportEnvelope, ClientReportItem } from '../types-hoist/envelope';\nimport { createEnvelope } from './envelope';\nimport { dateTimestampInSeconds } from './time';\n\n/**\n * Creates client report envelope\n * @param discarded_events An array of discard events\n * @param dsn A DSN that can be set on the header. Optional.\n */\nexport function createClientReportEnvelope(\n  discarded_events: ClientReport['discarded_events'],\n  dsn?: string,\n  timestamp?: number,\n): ClientReportEnvelope {\n  const clientReportItem: ClientReportItem = [\n    { type: 'client_report' },\n    {\n      timestamp: timestamp || dateTimestampInSeconds(),\n      discarded_events,\n    },\n  ];\n  return createEnvelope<ClientReportEnvelope>(dsn ? { dsn } : {}, [clientReportItem]);\n}\n"],"names":["dateTimestampInSeconds","createEnvelope"],"mappings":";;;;;AAKA;;;;CAIA,GACO,SAAS,2BACd,gBAAgB,EAChB,GAAG,EACH,SAAS;IAET,MAAM,mBAAqC;QACzC;YAAE,MAAM;QAAA;QACR;YACE,WAAW,aAAaA,KAAAA,sBAAsB;YAC9C;QACN;KACG;IACD,OAAOC,SAAAA,cAAc,CAAuB,MAAM;QAAE;IAAA,IAAQ,CAAA,GAAI;QAAC;KAAiB;AACpF"}},
    {"offset": {"line": 6732, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6736, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/utils/eventUtils.ts"],"sourcesContent":["import type { Event } from '../types-hoist/event';\n\n/**\n * Get a list of possible event messages from a Sentry event.\n */\nexport function getPossibleEventMessages(event: Event): string[] {\n  const possibleMessages: string[] = [];\n\n  if (event.message) {\n    possibleMessages.push(event.message);\n  }\n\n  try {\n    // @ts-expect-error Try catching to save bundle size\n    const lastException = event.exception.values[event.exception.values.length - 1];\n    if (lastException?.value) {\n      possibleMessages.push(lastException.value);\n      if (lastException.type) {\n        possibleMessages.push(`${lastException.type}: ${lastException.value}`);\n      }\n    }\n  } catch (e) {\n    // ignore errors here\n  }\n\n  return possibleMessages;\n}\n"],"names":[],"mappings":";;;AAEA;;CAEA,GACO,SAAS,yBAAyB,KAAK;IAC5C,MAAM,mBAA6B,EAAE;IAErC,IAAI,MAAM,OAAO,EAAE;QACjB,iBAAiB,IAAI,CAAC,MAAM,OAAO;IACvC;IAEE,IAAI;QACN,oDAAA;QACI,MAAM,gBAAgB,MAAM,SAAS,CAAC,MAAM,CAAC,MAAM,SAAS,CAAC,MAAM,CAAC,MAAA,GAAS,EAAE;QAC/E,IAAI,eAAe,OAAO;YACxB,iBAAiB,IAAI,CAAC,cAAc,KAAK;YACzC,IAAI,cAAc,IAAI,EAAE;gBACtB,iBAAiB,IAAI,CAAC,CAAC,EAAA,cAAA,IAAA,CAAA,EAAA,EAAA,cAAA,KAAA,CAAA,CAAA;YACA;QACA;IACA,EAAA,OAAA,GAAA;IACA,qBAAA;IACA;IAEA,OAAA;AACA"}},
    {"offset": {"line": 6761, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6765, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/utils/transactionEvent.ts"],"sourcesContent":["import { SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME, SEMANTIC_ATTRIBUTE_PROFILE_ID } from '../semanticAttributes';\nimport type { TransactionEvent } from '../types-hoist/event';\nimport type { SpanJSON } from '../types-hoist/span';\n\n/**\n * Converts a transaction event to a span JSON object.\n */\nexport function convertTransactionEventToSpanJson(event: TransactionEvent): SpanJSON {\n  const { trace_id, parent_span_id, span_id, status, origin, data, op } = event.contexts?.trace ?? {};\n\n  return {\n    data: data ?? {},\n    description: event.transaction,\n    op,\n    parent_span_id,\n    span_id: span_id ?? '',\n    start_timestamp: event.start_timestamp ?? 0,\n    status,\n    timestamp: event.timestamp,\n    trace_id: trace_id ?? '',\n    origin,\n    profile_id: data?.[SEMANTIC_ATTRIBUTE_PROFILE_ID] as string | undefined,\n    exclusive_time: data?.[SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME] as number | undefined,\n    measurements: event.measurements,\n    is_segment: true,\n  };\n}\n\n/**\n * Converts a span JSON object to a transaction event.\n */\nexport function convertSpanJsonToTransactionEvent(span: SpanJSON): TransactionEvent {\n  return {\n    type: 'transaction',\n    timestamp: span.timestamp,\n    start_timestamp: span.start_timestamp,\n    transaction: span.description,\n    contexts: {\n      trace: {\n        trace_id: span.trace_id,\n        span_id: span.span_id,\n        parent_span_id: span.parent_span_id,\n        op: span.op,\n        status: span.status,\n        origin: span.origin,\n        data: {\n          ...span.data,\n          ...(span.profile_id && { [SEMANTIC_ATTRIBUTE_PROFILE_ID]: span.profile_id }),\n          ...(span.exclusive_time && { [SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME]: span.exclusive_time }),\n        },\n      },\n    },\n    measurements: span.measurements,\n  };\n}\n"],"names":["SEMANTIC_ATTRIBUTE_PROFILE_ID","SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME"],"mappings":";;;;AAIA;;CAEA,GACO,SAAS,kCAAkC,KAAK;IACrD,MAAM,EAAE,QAAQ,EAAE,cAAc,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,EAAA,EAAG,GAAI,MAAM,QAAQ,EAAE,SAAS,CAAA;IAEjG,OAAO;QACL,MAAM,QAAQ,CAAA;QACd,aAAa,MAAM,WAAW;QAC9B;QACA;QACA,SAAS,WAAW;QACpB,iBAAiB,MAAM,eAAA,IAAmB;QAC1C;QACA,WAAW,MAAM,SAAS;QAC1B,UAAU,YAAY;QACtB;QACA,YAAY,MAAI,CAAGA,mBAAAA,6BAA6B,CAAA;QAChD,gBAAgB,MAAI,CAAGC,mBAAAA,iCAAiC,CAAA;QACxD,cAAc,MAAM,YAAY;QAChC,YAAY;IAChB;AACA;AAEA;;CAEA,GACO,SAAS,kCAAkC,IAAI;IACpD,OAAO;QACL,MAAM;QACN,WAAW,KAAK,SAAS;QACzB,iBAAiB,KAAK,eAAe;QACrC,aAAa,KAAK,WAAW;QAC7B,UAAU;YACR,OAAO;gBACL,UAAU,KAAK,QAAQ;gBACvB,SAAS,KAAK,OAAO;gBACrB,gBAAgB,KAAK,cAAc;gBACnC,IAAI,KAAK,EAAE;gBACX,QAAQ,KAAK,MAAM;gBACnB,QAAQ,KAAK,MAAM;gBACnB,MAAM;oBACJ,GAAG,KAAK,IAAI;oBACZ,GAAI,KAAK,UAAA,IAAc;wBAAE,CAACD,mBAAAA,6BAA6B,CAAA,EAAG,KAAK,UAAA;oBAAA,CAAY;oBAC3E,GAAI,KAAK,cAAA,IAAkB;wBAAE,CAACC,mBAAAA,iCAAiC,CAAA,EAAG,KAAK,cAAA;oBAAA,CAAgB;gBACjG;YACA;QACA;QACI,cAAc,KAAK,YAAY;IACnC;AACA"}},
    {"offset": {"line": 6822, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6826, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/client.ts"],"sourcesContent":["/* eslint-disable max-lines */\nimport { getEnvelopeEndpointWithUrlEncodedAuth } from './api';\nimport { DEFAULT_ENVIRONMENT } from './constants';\nimport { getCurrentScope, getIsolationScope, getTraceContextFromScope, withScope } from './currentScopes';\nimport { DEBUG_BUILD } from './debug-build';\nimport { createEventEnvelope, createSessionEnvelope } from './envelope';\nimport type { IntegrationIndex } from './integration';\nimport { afterSetupIntegrations, setupIntegration, setupIntegrations } from './integration';\nimport type { Scope } from './scope';\nimport { updateSession } from './session';\nimport {\n  getDynamicSamplingContextFromScope,\n  getDynamicSamplingContextFromSpan,\n} from './tracing/dynamicSamplingContext';\nimport type { Breadcrumb, BreadcrumbHint, FetchBreadcrumbHint, XhrBreadcrumbHint } from './types-hoist/breadcrumb';\nimport type { CheckIn, MonitorConfig } from './types-hoist/checkin';\nimport type { EventDropReason, Outcome } from './types-hoist/clientreport';\nimport type { TraceContext } from './types-hoist/context';\nimport type { DataCategory } from './types-hoist/datacategory';\nimport type { DsnComponents } from './types-hoist/dsn';\nimport type { DynamicSamplingContext, Envelope } from './types-hoist/envelope';\nimport type { ErrorEvent, Event, EventHint, TransactionEvent } from './types-hoist/event';\nimport type { EventProcessor } from './types-hoist/eventprocessor';\nimport type { FeedbackEvent } from './types-hoist/feedback';\nimport type { Integration } from './types-hoist/integration';\nimport type { Log } from './types-hoist/log';\nimport type { ClientOptions } from './types-hoist/options';\nimport type { ParameterizedString } from './types-hoist/parameterize';\nimport type { SdkMetadata } from './types-hoist/sdkmetadata';\nimport type { Session, SessionAggregates } from './types-hoist/session';\nimport type { SeverityLevel } from './types-hoist/severity';\nimport type { Span, SpanAttributes, SpanContextData, SpanJSON } from './types-hoist/span';\nimport type { StartSpanOptions } from './types-hoist/startSpanOptions';\nimport type { Transport, TransportMakeRequestResponse } from './types-hoist/transport';\nimport { createClientReportEnvelope } from './utils/clientreport';\nimport { dsnToString, makeDsn } from './utils/dsn';\nimport { addItemToEnvelope, createAttachmentEnvelopeItem } from './utils/envelope';\nimport { getPossibleEventMessages } from './utils/eventUtils';\nimport { isParameterizedString, isPlainObject, isPrimitive, isThenable } from './utils/is';\nimport { logger } from './utils/logger';\nimport { merge } from './utils/merge';\nimport { checkOrSetAlreadyCaught, uuid4 } from './utils/misc';\nimport { parseSampleRate } from './utils/parseSampleRate';\nimport { prepareEvent } from './utils/prepareEvent';\nimport { getActiveSpan, showSpanDropWarning, spanToTraceContext } from './utils/spanUtils';\nimport { rejectedSyncPromise, resolvedSyncPromise, SyncPromise } from './utils/syncpromise';\nimport { convertSpanJsonToTransactionEvent, convertTransactionEventToSpanJson } from './utils/transactionEvent';\n\nconst ALREADY_SEEN_ERROR = \"Not capturing exception because it's already been captured.\";\nconst MISSING_RELEASE_FOR_SESSION_ERROR = 'Discarded session because of missing or non-string release';\n\nconst INTERNAL_ERROR_SYMBOL = Symbol.for('SentryInternalError');\nconst DO_NOT_SEND_EVENT_SYMBOL = Symbol.for('SentryDoNotSendEventError');\n\ninterface InternalError {\n  message: string;\n  [INTERNAL_ERROR_SYMBOL]: true;\n}\n\ninterface DoNotSendEventError {\n  message: string;\n  [DO_NOT_SEND_EVENT_SYMBOL]: true;\n}\n\nfunction _makeInternalError(message: string): InternalError {\n  return {\n    message,\n    [INTERNAL_ERROR_SYMBOL]: true,\n  };\n}\n\nfunction _makeDoNotSendEventError(message: string): DoNotSendEventError {\n  return {\n    message,\n    [DO_NOT_SEND_EVENT_SYMBOL]: true,\n  };\n}\n\nfunction _isInternalError(error: unknown): error is InternalError {\n  return !!error && typeof error === 'object' && INTERNAL_ERROR_SYMBOL in error;\n}\n\nfunction _isDoNotSendEventError(error: unknown): error is DoNotSendEventError {\n  return !!error && typeof error === 'object' && DO_NOT_SEND_EVENT_SYMBOL in error;\n}\n\n/**\n * Base implementation for all JavaScript SDK clients.\n *\n * Call the constructor with the corresponding options\n * specific to the client subclass. To access these options later, use\n * {@link Client.getOptions}.\n *\n * If a Dsn is specified in the options, it will be parsed and stored. Use\n * {@link Client.getDsn} to retrieve the Dsn at any moment. In case the Dsn is\n * invalid, the constructor will throw a {@link SentryException}. Note that\n * without a valid Dsn, the SDK will not send any events to Sentry.\n *\n * Before sending an event, it is passed through\n * {@link Client._prepareEvent} to add SDK information and scope data\n * (breadcrumbs and context). To add more custom information, override this\n * method and extend the resulting prepared event.\n *\n * To issue automatically created events (e.g. via instrumentation), use\n * {@link Client.captureEvent}. It will prepare the event and pass it through\n * the callback lifecycle. To issue auto-breadcrumbs, use\n * {@link Client.addBreadcrumb}.\n *\n * @example\n * class NodeClient extends Client<NodeOptions> {\n *   public constructor(options: NodeOptions) {\n *     super(options);\n *   }\n *\n *   // ...\n * }\n */\nexport abstract class Client<O extends ClientOptions = ClientOptions> {\n  /** Options passed to the SDK. */\n  protected readonly _options: O;\n\n  /** The client Dsn, if specified in options. Without this Dsn, the SDK will be disabled. */\n  protected readonly _dsn?: DsnComponents;\n\n  protected readonly _transport?: Transport;\n\n  /** Array of set up integrations. */\n  protected _integrations: IntegrationIndex;\n\n  /** Number of calls being processed */\n  protected _numProcessing: number;\n\n  protected _eventProcessors: EventProcessor[];\n\n  /** Holds flushable  */\n  private _outcomes: { [key: string]: number };\n\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  private _hooks: Record<string, Function[]>;\n\n  /**\n   * Initializes this client instance.\n   *\n   * @param options Options for the client.\n   */\n  protected constructor(options: O) {\n    this._options = options;\n    this._integrations = {};\n    this._numProcessing = 0;\n    this._outcomes = {};\n    this._hooks = {};\n    this._eventProcessors = [];\n\n    if (options.dsn) {\n      this._dsn = makeDsn(options.dsn);\n    } else {\n      DEBUG_BUILD && logger.warn('No DSN provided, client will not send events.');\n    }\n\n    if (this._dsn) {\n      const url = getEnvelopeEndpointWithUrlEncodedAuth(\n        this._dsn,\n        options.tunnel,\n        options._metadata ? options._metadata.sdk : undefined,\n      );\n      this._transport = options.transport({\n        tunnel: this._options.tunnel,\n        recordDroppedEvent: this.recordDroppedEvent.bind(this),\n        ...options.transportOptions,\n        url,\n      });\n    }\n  }\n\n  /**\n   * Captures an exception event and sends it to Sentry.\n   *\n   * Unlike `captureException` exported from every SDK, this method requires that you pass it the current scope.\n   */\n  public captureException(exception: unknown, hint?: EventHint, scope?: Scope): string {\n    const eventId = uuid4();\n\n    // ensure we haven't captured this very object before\n    if (checkOrSetAlreadyCaught(exception)) {\n      DEBUG_BUILD && logger.log(ALREADY_SEEN_ERROR);\n      return eventId;\n    }\n\n    const hintWithEventId = {\n      event_id: eventId,\n      ...hint,\n    };\n\n    this._process(\n      this.eventFromException(exception, hintWithEventId).then(event =>\n        this._captureEvent(event, hintWithEventId, scope),\n      ),\n    );\n\n    return hintWithEventId.event_id;\n  }\n\n  /**\n   * Captures a message event and sends it to Sentry.\n   *\n   * Unlike `captureMessage` exported from every SDK, this method requires that you pass it the current scope.\n   */\n  public captureMessage(\n    message: ParameterizedString,\n    level?: SeverityLevel,\n    hint?: EventHint,\n    currentScope?: Scope,\n  ): string {\n    const hintWithEventId = {\n      event_id: uuid4(),\n      ...hint,\n    };\n\n    const eventMessage = isParameterizedString(message) ? message : String(message);\n\n    const promisedEvent = isPrimitive(message)\n      ? this.eventFromMessage(eventMessage, level, hintWithEventId)\n      : this.eventFromException(message, hintWithEventId);\n\n    this._process(promisedEvent.then(event => this._captureEvent(event, hintWithEventId, currentScope)));\n\n    return hintWithEventId.event_id;\n  }\n\n  /**\n   * Captures a manually created event and sends it to Sentry.\n   *\n   * Unlike `captureEvent` exported from every SDK, this method requires that you pass it the current scope.\n   */\n  public captureEvent(event: Event, hint?: EventHint, currentScope?: Scope): string {\n    const eventId = uuid4();\n\n    // ensure we haven't captured this very object before\n    if (hint?.originalException && checkOrSetAlreadyCaught(hint.originalException)) {\n      DEBUG_BUILD && logger.log(ALREADY_SEEN_ERROR);\n      return eventId;\n    }\n\n    const hintWithEventId = {\n      event_id: eventId,\n      ...hint,\n    };\n\n    const sdkProcessingMetadata = event.sdkProcessingMetadata || {};\n    const capturedSpanScope: Scope | undefined = sdkProcessingMetadata.capturedSpanScope;\n    const capturedSpanIsolationScope: Scope | undefined = sdkProcessingMetadata.capturedSpanIsolationScope;\n\n    this._process(\n      this._captureEvent(event, hintWithEventId, capturedSpanScope || currentScope, capturedSpanIsolationScope),\n    );\n\n    return hintWithEventId.event_id;\n  }\n\n  /**\n   * Captures a session.\n   */\n  public captureSession(session: Session): void {\n    this.sendSession(session);\n    // After sending, we set init false to indicate it's not the first occurrence\n    updateSession(session, { init: false });\n  }\n\n  /**\n   * Create a cron monitor check in and send it to Sentry. This method is not available on all clients.\n   *\n   * @param checkIn An object that describes a check in.\n   * @param upsertMonitorConfig An optional object that describes a monitor config. Use this if you want\n   * to create a monitor automatically when sending a check in.\n   * @param scope An optional scope containing event metadata.\n   * @returns A string representing the id of the check in.\n   */\n  public captureCheckIn?(checkIn: CheckIn, monitorConfig?: MonitorConfig, scope?: Scope): string;\n\n  /**\n   * Get the current Dsn.\n   */\n  public getDsn(): DsnComponents | undefined {\n    return this._dsn;\n  }\n\n  /**\n   * Get the current options.\n   */\n  public getOptions(): O {\n    return this._options;\n  }\n\n  /**\n   * Get the SDK metadata.\n   * @see SdkMetadata\n   */\n  public getSdkMetadata(): SdkMetadata | undefined {\n    return this._options._metadata;\n  }\n\n  /**\n   * Returns the transport that is used by the client.\n   * Please note that the transport gets lazy initialized so it will only be there once the first event has been sent.\n   */\n  public getTransport(): Transport | undefined {\n    return this._transport;\n  }\n\n  /**\n   * Wait for all events to be sent or the timeout to expire, whichever comes first.\n   *\n   * @param timeout Maximum time in ms the client should wait for events to be flushed. Omitting this parameter will\n   *   cause the client to wait until all events are sent before resolving the promise.\n   * @returns A promise that will resolve with `true` if all events are sent before the timeout, or `false` if there are\n   * still events in the queue when the timeout is reached.\n   */\n  public flush(timeout?: number): PromiseLike<boolean> {\n    const transport = this._transport;\n    if (transport) {\n      this.emit('flush');\n      return this._isClientDoneProcessing(timeout).then(clientFinished => {\n        return transport.flush(timeout).then(transportFlushed => clientFinished && transportFlushed);\n      });\n    } else {\n      return resolvedSyncPromise(true);\n    }\n  }\n\n  /**\n   * Flush the event queue and set the client to `enabled = false`. See {@link Client.flush}.\n   *\n   * @param {number} timeout Maximum time in ms the client should wait before shutting down. Omitting this parameter will cause\n   *   the client to wait until all events are sent before disabling itself.\n   * @returns {Promise<boolean>} A promise which resolves to `true` if the flush completes successfully before the timeout, or `false` if\n   * it doesn't.\n   */\n  public close(timeout?: number): PromiseLike<boolean> {\n    return this.flush(timeout).then(result => {\n      this.getOptions().enabled = false;\n      this.emit('close');\n      return result;\n    });\n  }\n\n  /**\n   * Get all installed event processors.\n   */\n  public getEventProcessors(): EventProcessor[] {\n    return this._eventProcessors;\n  }\n\n  /**\n   * Adds an event processor that applies to any event processed by this client.\n   */\n  public addEventProcessor(eventProcessor: EventProcessor): void {\n    this._eventProcessors.push(eventProcessor);\n  }\n\n  /**\n   * Initialize this client.\n   * Call this after the client was set on a scope.\n   */\n  public init(): void {\n    if (\n      this._isEnabled() ||\n      // Force integrations to be setup even if no DSN was set when we have\n      // Spotlight enabled. This is particularly important for browser as we\n      // don't support the `spotlight` option there and rely on the users\n      // adding the `spotlightBrowserIntegration()` to their integrations which\n      // wouldn't get initialized with the check below when there's no DSN set.\n      this._options.integrations.some(({ name }) => name.startsWith('Spotlight'))\n    ) {\n      this._setupIntegrations();\n    }\n  }\n\n  /**\n   * Gets an installed integration by its name.\n   *\n   * @returns {Integration|undefined} The installed integration or `undefined` if no integration with that `name` was installed.\n   */\n  public getIntegrationByName<T extends Integration = Integration>(integrationName: string): T | undefined {\n    return this._integrations[integrationName] as T | undefined;\n  }\n\n  /**\n   * Add an integration to the client.\n   * This can be used to e.g. lazy load integrations.\n   * In most cases, this should not be necessary,\n   * and you're better off just passing the integrations via `integrations: []` at initialization time.\n   * However, if you find the need to conditionally load & add an integration, you can use `addIntegration` to do so.\n   */\n  public addIntegration(integration: Integration): void {\n    const isAlreadyInstalled = this._integrations[integration.name];\n\n    // This hook takes care of only installing if not already installed\n    setupIntegration(this, integration, this._integrations);\n    // Here we need to check manually to make sure to not run this multiple times\n    if (!isAlreadyInstalled) {\n      afterSetupIntegrations(this, [integration]);\n    }\n  }\n\n  /**\n   * Send a fully prepared event to Sentry.\n   */\n  public sendEvent(event: Event, hint: EventHint = {}): void {\n    this.emit('beforeSendEvent', event, hint);\n\n    let env = createEventEnvelope(event, this._dsn, this._options._metadata, this._options.tunnel);\n\n    for (const attachment of hint.attachments || []) {\n      env = addItemToEnvelope(env, createAttachmentEnvelopeItem(attachment));\n    }\n\n    const promise = this.sendEnvelope(env);\n    if (promise) {\n      promise.then(sendResponse => this.emit('afterSendEvent', event, sendResponse), null);\n    }\n  }\n\n  /**\n   * Send a session or session aggregrates to Sentry.\n   */\n  public sendSession(session: Session | SessionAggregates): void {\n    // Backfill release and environment on session\n    const { release: clientReleaseOption, environment: clientEnvironmentOption = DEFAULT_ENVIRONMENT } = this._options;\n    if ('aggregates' in session) {\n      const sessionAttrs = session.attrs || {};\n      if (!sessionAttrs.release && !clientReleaseOption) {\n        DEBUG_BUILD && logger.warn(MISSING_RELEASE_FOR_SESSION_ERROR);\n        return;\n      }\n      sessionAttrs.release = sessionAttrs.release || clientReleaseOption;\n      sessionAttrs.environment = sessionAttrs.environment || clientEnvironmentOption;\n      session.attrs = sessionAttrs;\n    } else {\n      if (!session.release && !clientReleaseOption) {\n        DEBUG_BUILD && logger.warn(MISSING_RELEASE_FOR_SESSION_ERROR);\n        return;\n      }\n      session.release = session.release || clientReleaseOption;\n      session.environment = session.environment || clientEnvironmentOption;\n    }\n\n    this.emit('beforeSendSession', session);\n\n    const env = createSessionEnvelope(session, this._dsn, this._options._metadata, this._options.tunnel);\n\n    // sendEnvelope should not throw\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.sendEnvelope(env);\n  }\n\n  /**\n   * Record on the client that an event got dropped (ie, an event that will not be sent to Sentry).\n   */\n  public recordDroppedEvent(reason: EventDropReason, category: DataCategory, count: number = 1): void {\n    if (this._options.sendClientReports) {\n      // We want to track each category (error, transaction, session, replay_event) separately\n      // but still keep the distinction between different type of outcomes.\n      // We could use nested maps, but it's much easier to read and type this way.\n      // A correct type for map-based implementation if we want to go that route\n      // would be `Partial<Record<SentryRequestType, Partial<Record<Outcome, number>>>>`\n      // With typescript 4.1 we could even use template literal types\n      const key = `${reason}:${category}`;\n      DEBUG_BUILD && logger.log(`Recording outcome: \"${key}\"${count > 1 ? ` (${count} times)` : ''}`);\n      this._outcomes[key] = (this._outcomes[key] || 0) + count;\n    }\n  }\n\n  /* eslint-disable @typescript-eslint/unified-signatures */\n  /**\n   * Register a callback for whenever a span is started.\n   * Receives the span as argument.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'spanStart', callback: (span: Span) => void): () => void;\n\n  /**\n   * Register a callback before span sampling runs. Receives a `samplingDecision` object argument with a `decision`\n   * property that can be used to make a sampling decision that will be enforced, before any span sampling runs.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(\n    hook: 'beforeSampling',\n    callback: (\n      samplingData: {\n        spanAttributes: SpanAttributes;\n        spanName: string;\n        parentSampled?: boolean;\n        parentSampleRate?: number;\n        parentContext?: SpanContextData;\n      },\n      samplingDecision: { decision: boolean },\n    ) => void,\n  ): void;\n\n  /**\n   * Register a callback for after a span is ended.\n   * NOTE: The span cannot be mutated anymore in this callback.\n   * Receives the span as argument.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'spanEnd', callback: (span: Span) => void): () => void;\n\n  /**\n   * Register a callback for when an idle span is allowed to auto-finish.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'idleSpanEnableAutoFinish', callback: (span: Span) => void): () => void;\n\n  /**\n   * Register a callback for transaction start and finish.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'beforeEnvelope', callback: (envelope: Envelope) => void): () => void;\n\n  /**\n   * Register a callback that runs when stack frame metadata should be applied to an event.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'applyFrameMetadata', callback: (event: Event) => void): () => void;\n\n  /**\n   * Register a callback for before sending an event.\n   * This is called right before an event is sent and should not be used to mutate the event.\n   * Receives an Event & EventHint as arguments.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'beforeSendEvent', callback: (event: Event, hint?: EventHint | undefined) => void): () => void;\n\n  /**\n   * Register a callback for before sending a session or session aggregrates..\n   * Receives the session/aggregate as second argument.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'beforeSendSession', callback: (session: Session | SessionAggregates) => void): () => void;\n\n  /**\n   * Register a callback for preprocessing an event,\n   * before it is passed to (global) event processors.\n   * Receives an Event & EventHint as arguments.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'preprocessEvent', callback: (event: Event, hint?: EventHint | undefined) => void): () => void;\n\n  /**\n   * Register a callback for postprocessing an event,\n   * after it was passed to (global) event processors, before it is being sent.\n   * Receives an Event & EventHint as arguments.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'postprocessEvent', callback: (event: Event, hint?: EventHint | undefined) => void): () => void;\n\n  /**\n   * Register a callback for when an event has been sent.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(\n    hook: 'afterSendEvent',\n    callback: (event: Event, sendResponse: TransportMakeRequestResponse) => void,\n  ): () => void;\n\n  /**\n   * Register a callback before a breadcrumb is added.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'beforeAddBreadcrumb', callback: (breadcrumb: Breadcrumb, hint?: BreadcrumbHint) => void): () => void;\n\n  /**\n   * Register a callback when a DSC (Dynamic Sampling Context) is created.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'createDsc', callback: (dsc: DynamicSamplingContext, rootSpan?: Span) => void): () => void;\n\n  /**\n   * Register a callback when a Feedback event has been prepared.\n   * This should be used to mutate the event. The options argument can hint\n   * about what kind of mutation it expects.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(\n    hook: 'beforeSendFeedback',\n    callback: (feedback: FeedbackEvent, options?: { includeReplay?: boolean }) => void,\n  ): () => void;\n\n  /**\n   * Register a callback when the feedback widget is opened in a user's browser\n   */\n  public on(hook: 'openFeedbackWidget', callback: () => void): () => void;\n\n  /**\n   * A hook for the browser tracing integrations to trigger a span start for a page load.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(\n    hook: 'startPageLoadSpan',\n    callback: (\n      options: StartSpanOptions,\n      traceOptions?: { sentryTrace?: string | undefined; baggage?: string | undefined },\n    ) => void,\n  ): () => void;\n\n  /**\n   * A hook for triggering right before a navigation span is started.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(\n    hook: 'beforeStartNavigationSpan',\n    callback: (options: StartSpanOptions, navigationOptions?: { isRedirect?: boolean }) => void,\n  ): () => void;\n\n  /**\n   * A hook for browser tracing integrations to trigger a span for a navigation.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(\n    hook: 'startNavigationSpan',\n    callback: (options: StartSpanOptions, navigationOptions?: { isRedirect?: boolean }) => void,\n  ): () => void;\n\n  /**\n   * A hook for GraphQL client integration to enhance a span with request data.\n   * @returns A function that, when executed, removes the registered callback.\n   */\n  public on(\n    hook: 'beforeOutgoingRequestSpan',\n    callback: (span: Span, hint: XhrBreadcrumbHint | FetchBreadcrumbHint) => void,\n  ): () => void;\n\n  /**\n   * A hook for GraphQL client integration to enhance a breadcrumb with request data.\n   * @returns A function that, when executed, removes the registered callback.\n   */\n  public on(\n    hook: 'beforeOutgoingRequestBreadcrumb',\n    callback: (breadcrumb: Breadcrumb, hint: XhrBreadcrumbHint | FetchBreadcrumbHint) => void,\n  ): () => void;\n\n  /**\n   * A hook that is called when the client is flushing\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'flush', callback: () => void): () => void;\n\n  /**\n   * A hook that is called when the client is closing\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'close', callback: () => void): () => void;\n\n  /**\n   * A hook that is called before a log is captured. This hooks runs before `beforeSendLog` is fired.\n   *\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'beforeCaptureLog', callback: (log: Log) => void): () => void;\n\n  /**\n   * A hook that is called after a log is captured\n   *\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'afterCaptureLog', callback: (log: Log) => void): () => void;\n\n  /**\n   * A hook that is called when the client is flushing logs\n   *\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'flushLogs', callback: () => void): () => void;\n\n  /**\n   * Register a hook on this client.\n   */\n  public on(hook: string, callback: unknown): () => void {\n    const hooks = (this._hooks[hook] = this._hooks[hook] || []);\n\n    // @ts-expect-error We assume the types are correct\n    hooks.push(callback);\n\n    // This function returns a callback execution handler that, when invoked,\n    // deregisters a callback. This is crucial for managing instances where callbacks\n    // need to be unregistered to prevent self-referencing in callback closures,\n    // ensuring proper garbage collection.\n    return () => {\n      // @ts-expect-error We assume the types are correct\n      const cbIndex = hooks.indexOf(callback);\n      if (cbIndex > -1) {\n        hooks.splice(cbIndex, 1);\n      }\n    };\n  }\n\n  /** Fire a hook whenever a span starts. */\n  public emit(hook: 'spanStart', span: Span): void;\n\n  /** A hook that is called every time before a span is sampled. */\n  public emit(\n    hook: 'beforeSampling',\n    samplingData: {\n      spanAttributes: SpanAttributes;\n      spanName: string;\n      parentSampled?: boolean;\n      parentSampleRate?: number;\n      parentContext?: SpanContextData;\n    },\n    samplingDecision: { decision: boolean },\n  ): void;\n\n  /** Fire a hook whenever a span ends. */\n  public emit(hook: 'spanEnd', span: Span): void;\n\n  /**\n   * Fire a hook indicating that an idle span is allowed to auto finish.\n   */\n  public emit(hook: 'idleSpanEnableAutoFinish', span: Span): void;\n\n  /*\n   * Fire a hook event for envelope creation and sending. Expects to be given an envelope as the\n   * second argument.\n   */\n  public emit(hook: 'beforeEnvelope', envelope: Envelope): void;\n\n  /*\n   * Fire a hook indicating that stack frame metadata should be applied to the event passed to the hook.\n   */\n  public emit(hook: 'applyFrameMetadata', event: Event): void;\n\n  /**\n   * Fire a hook event before sending an event.\n   * This is called right before an event is sent and should not be used to mutate the event.\n   * Expects to be given an Event & EventHint as the second/third argument.\n   */\n  public emit(hook: 'beforeSendEvent', event: Event, hint?: EventHint): void;\n\n  /**\n   * Fire a hook event before sending a session/aggregates.\n   * Expects to be given the prepared session/aggregates as second argument.\n   */\n  public emit(hook: 'beforeSendSession', session: Session | SessionAggregates): void;\n\n  /**\n   * Fire a hook event to process events before they are passed to (global) event processors.\n   * Expects to be given an Event & EventHint as the second/third argument.\n   */\n  public emit(hook: 'preprocessEvent', event: Event, hint?: EventHint): void;\n\n  /**\n   * Fire a hook event to process a user on an event before it is sent to Sentry, after all other processors have run.\n   * Expects to be given an Event & EventHint as the second/third argument.\n   */\n  public emit(hook: 'postprocessEvent', event: Event, hint?: EventHint): void;\n\n  /*\n   * Fire a hook event after sending an event. Expects to be given an Event as the\n   * second argument.\n   */\n  public emit(hook: 'afterSendEvent', event: Event, sendResponse: TransportMakeRequestResponse): void;\n\n  /**\n   * Fire a hook for when a breadcrumb is added. Expects the breadcrumb as second argument.\n   */\n  public emit(hook: 'beforeAddBreadcrumb', breadcrumb: Breadcrumb, hint?: BreadcrumbHint): void;\n\n  /**\n   * Fire a hook for when a DSC (Dynamic Sampling Context) is created. Expects the DSC as second argument.\n   */\n  public emit(hook: 'createDsc', dsc: DynamicSamplingContext, rootSpan?: Span): void;\n\n  /**\n   * Fire a hook event for after preparing a feedback event. Events to be given\n   * a feedback event as the second argument, and an optional options object as\n   * third argument.\n   */\n  public emit(hook: 'beforeSendFeedback', feedback: FeedbackEvent, options?: { includeReplay?: boolean }): void;\n\n  /**\n   * Fire a hook event for when the feedback widget is opened in a user's browser\n   */\n  public emit(hook: 'openFeedbackWidget'): void;\n\n  /**\n   * Emit a hook event for browser tracing integrations to trigger a span start for a page load.\n   */\n  public emit(\n    hook: 'startPageLoadSpan',\n    options: StartSpanOptions,\n    traceOptions?: { sentryTrace?: string | undefined; baggage?: string | undefined },\n  ): void;\n\n  /**\n   * Emit a hook event for triggering right before a navigation span is started.\n   */\n  public emit(\n    hook: 'beforeStartNavigationSpan',\n    options: StartSpanOptions,\n    navigationOptions?: { isRedirect?: boolean },\n  ): void;\n\n  /**\n   * Emit a hook event for browser tracing integrations to trigger a span for a navigation.\n   */\n  public emit(\n    hook: 'startNavigationSpan',\n    options: StartSpanOptions,\n    navigationOptions?: { isRedirect?: boolean },\n  ): void;\n\n  /**\n   * Emit a hook event for GraphQL client integration to enhance a span with request data.\n   */\n  public emit(hook: 'beforeOutgoingRequestSpan', span: Span, hint: XhrBreadcrumbHint | FetchBreadcrumbHint): void;\n\n  /**\n   * Emit a hook event for GraphQL client integration to enhance a breadcrumb with request data.\n   */\n  public emit(\n    hook: 'beforeOutgoingRequestBreadcrumb',\n    breadcrumb: Breadcrumb,\n    hint: XhrBreadcrumbHint | FetchBreadcrumbHint,\n  ): void;\n\n  /**\n   * Emit a hook event for client flush\n   */\n  public emit(hook: 'flush'): void;\n\n  /**\n   * Emit a hook event for client close\n   */\n  public emit(hook: 'close'): void;\n\n  /**\n   * Emit a hook event for client before capturing a log. This hooks runs before `beforeSendLog` is fired.\n   */\n  public emit(hook: 'beforeCaptureLog', log: Log): void;\n\n  /**\n   * Emit a hook event for client after capturing a log.\n   */\n  public emit(hook: 'afterCaptureLog', log: Log): void;\n\n  /**\n   * Emit a hook event for client flush logs\n   */\n  public emit(hook: 'flushLogs'): void;\n\n  /**\n   * Emit a hook that was previously registered via `on()`.\n   */\n  public emit(hook: string, ...rest: unknown[]): void {\n    const callbacks = this._hooks[hook];\n    if (callbacks) {\n      callbacks.forEach(callback => callback(...rest));\n    }\n  }\n\n  /**\n   * Send an envelope to Sentry.\n   */\n  public sendEnvelope(envelope: Envelope): PromiseLike<TransportMakeRequestResponse> {\n    this.emit('beforeEnvelope', envelope);\n\n    if (this._isEnabled() && this._transport) {\n      return this._transport.send(envelope).then(null, reason => {\n        DEBUG_BUILD && logger.error('Error while sending envelope:', reason);\n        return reason;\n      });\n    }\n\n    DEBUG_BUILD && logger.error('Transport disabled');\n\n    return resolvedSyncPromise({});\n  }\n\n  /* eslint-enable @typescript-eslint/unified-signatures */\n\n  /** Setup integrations for this client. */\n  protected _setupIntegrations(): void {\n    const { integrations } = this._options;\n    this._integrations = setupIntegrations(this, integrations);\n    afterSetupIntegrations(this, integrations);\n  }\n\n  /** Updates existing session based on the provided event */\n  protected _updateSessionFromEvent(session: Session, event: Event): void {\n    let crashed = event.level === 'fatal';\n    let errored = false;\n    const exceptions = event.exception?.values;\n\n    if (exceptions) {\n      errored = true;\n\n      for (const ex of exceptions) {\n        const mechanism = ex.mechanism;\n        if (mechanism?.handled === false) {\n          crashed = true;\n          break;\n        }\n      }\n    }\n\n    // A session is updated and that session update is sent in only one of the two following scenarios:\n    // 1. Session with non terminal status and 0 errors + an error occurred -> Will set error count to 1 and send update\n    // 2. Session with non terminal status and 1 error + a crash occurred -> Will set status crashed and send update\n    const sessionNonTerminal = session.status === 'ok';\n    const shouldUpdateAndSend = (sessionNonTerminal && session.errors === 0) || (sessionNonTerminal && crashed);\n\n    if (shouldUpdateAndSend) {\n      updateSession(session, {\n        ...(crashed && { status: 'crashed' }),\n        errors: session.errors || Number(errored || crashed),\n      });\n      this.captureSession(session);\n    }\n  }\n\n  /**\n   * Determine if the client is finished processing. Returns a promise because it will wait `timeout` ms before saying\n   * \"no\" (resolving to `false`) in order to give the client a chance to potentially finish first.\n   *\n   * @param timeout The time, in ms, after which to resolve to `false` if the client is still busy. Passing `0` (or not\n   * passing anything) will make the promise wait as long as it takes for processing to finish before resolving to\n   * `true`.\n   * @returns A promise which will resolve to `true` if processing is already done or finishes before the timeout, and\n   * `false` otherwise\n   */\n  protected _isClientDoneProcessing(timeout?: number): PromiseLike<boolean> {\n    return new SyncPromise(resolve => {\n      let ticked: number = 0;\n      const tick: number = 1;\n\n      const interval = setInterval(() => {\n        if (this._numProcessing == 0) {\n          clearInterval(interval);\n          resolve(true);\n        } else {\n          ticked += tick;\n          if (timeout && ticked >= timeout) {\n            clearInterval(interval);\n            resolve(false);\n          }\n        }\n      }, tick);\n    });\n  }\n\n  /** Determines whether this SDK is enabled and a transport is present. */\n  protected _isEnabled(): boolean {\n    return this.getOptions().enabled !== false && this._transport !== undefined;\n  }\n\n  /**\n   * Adds common information to events.\n   *\n   * The information includes release and environment from `options`,\n   * breadcrumbs and context (extra, tags and user) from the scope.\n   *\n   * Information that is already present in the event is never overwritten. For\n   * nested objects, such as the context, keys are merged.\n   *\n   * @param event The original event.\n   * @param hint May contain additional information about the original exception.\n   * @param currentScope A scope containing event metadata.\n   * @returns A new event with more information.\n   */\n  protected _prepareEvent(\n    event: Event,\n    hint: EventHint,\n    currentScope: Scope,\n    isolationScope: Scope,\n  ): PromiseLike<Event | null> {\n    const options = this.getOptions();\n    const integrations = Object.keys(this._integrations);\n    if (!hint.integrations && integrations?.length) {\n      hint.integrations = integrations;\n    }\n\n    this.emit('preprocessEvent', event, hint);\n\n    if (!event.type) {\n      isolationScope.setLastEventId(event.event_id || hint.event_id);\n    }\n\n    return prepareEvent(options, event, hint, currentScope, this, isolationScope).then(evt => {\n      if (evt === null) {\n        return evt;\n      }\n\n      this.emit('postprocessEvent', evt, hint);\n\n      evt.contexts = {\n        trace: getTraceContextFromScope(currentScope),\n        ...evt.contexts,\n      };\n\n      const dynamicSamplingContext = getDynamicSamplingContextFromScope(this, currentScope);\n\n      evt.sdkProcessingMetadata = {\n        dynamicSamplingContext,\n        ...evt.sdkProcessingMetadata,\n      };\n\n      return evt;\n    });\n  }\n\n  /**\n   * Processes the event and logs an error in case of rejection\n   * @param event\n   * @param hint\n   * @param scope\n   */\n  protected _captureEvent(\n    event: Event,\n    hint: EventHint = {},\n    currentScope = getCurrentScope(),\n    isolationScope = getIsolationScope(),\n  ): PromiseLike<string | undefined> {\n    if (DEBUG_BUILD && isErrorEvent(event)) {\n      logger.log(`Captured error event \\`${getPossibleEventMessages(event)[0] || '<unknown>'}\\``);\n    }\n\n    return this._processEvent(event, hint, currentScope, isolationScope).then(\n      finalEvent => {\n        return finalEvent.event_id;\n      },\n      reason => {\n        if (DEBUG_BUILD) {\n          if (_isDoNotSendEventError(reason)) {\n            logger.log(reason.message);\n          } else if (_isInternalError(reason)) {\n            logger.warn(reason.message);\n          } else {\n            logger.warn(reason);\n          }\n        }\n        return undefined;\n      },\n    );\n  }\n\n  /**\n   * Processes an event (either error or message) and sends it to Sentry.\n   *\n   * This also adds breadcrumbs and context information to the event. However,\n   * platform specific meta data (such as the User's IP address) must be added\n   * by the SDK implementor.\n   *\n   *\n   * @param event The event to send to Sentry.\n   * @param hint May contain additional information about the original exception.\n   * @param currentScope A scope containing event metadata.\n   * @returns A SyncPromise that resolves with the event or rejects in case event was/will not be send.\n   */\n  protected _processEvent(\n    event: Event,\n    hint: EventHint,\n    currentScope: Scope,\n    isolationScope: Scope,\n  ): PromiseLike<Event> {\n    const options = this.getOptions();\n    const { sampleRate } = options;\n\n    const isTransaction = isTransactionEvent(event);\n    const isError = isErrorEvent(event);\n    const eventType = event.type || 'error';\n    const beforeSendLabel = `before send for type \\`${eventType}\\``;\n\n    // 1.0 === 100% events are sent\n    // 0.0 === 0% events are sent\n    // Sampling for transaction happens somewhere else\n    const parsedSampleRate = typeof sampleRate === 'undefined' ? undefined : parseSampleRate(sampleRate);\n    if (isError && typeof parsedSampleRate === 'number' && Math.random() > parsedSampleRate) {\n      this.recordDroppedEvent('sample_rate', 'error');\n      return rejectedSyncPromise(\n        _makeDoNotSendEventError(\n          `Discarding event because it's not included in the random sample (sampling rate = ${sampleRate})`,\n        ),\n      );\n    }\n\n    const dataCategory = (eventType === 'replay_event' ? 'replay' : eventType) satisfies DataCategory;\n\n    return this._prepareEvent(event, hint, currentScope, isolationScope)\n      .then(prepared => {\n        if (prepared === null) {\n          this.recordDroppedEvent('event_processor', dataCategory);\n          throw _makeDoNotSendEventError('An event processor returned `null`, will not send event.');\n        }\n\n        const isInternalException = hint.data && (hint.data as { __sentry__: boolean }).__sentry__ === true;\n        if (isInternalException) {\n          return prepared;\n        }\n\n        const result = processBeforeSend(this, options, prepared, hint);\n        return _validateBeforeSendResult(result, beforeSendLabel);\n      })\n      .then(processedEvent => {\n        if (processedEvent === null) {\n          this.recordDroppedEvent('before_send', dataCategory);\n          if (isTransaction) {\n            const spans = event.spans || [];\n            // the transaction itself counts as one span, plus all the child spans that are added\n            const spanCount = 1 + spans.length;\n            this.recordDroppedEvent('before_send', 'span', spanCount);\n          }\n          throw _makeDoNotSendEventError(`${beforeSendLabel} returned \\`null\\`, will not send event.`);\n        }\n\n        const session = currentScope.getSession() || isolationScope.getSession();\n        if (isError && session) {\n          this._updateSessionFromEvent(session, processedEvent);\n        }\n\n        if (isTransaction) {\n          const spanCountBefore = processedEvent.sdkProcessingMetadata?.spanCountBeforeProcessing || 0;\n          const spanCountAfter = processedEvent.spans ? processedEvent.spans.length : 0;\n\n          const droppedSpanCount = spanCountBefore - spanCountAfter;\n          if (droppedSpanCount > 0) {\n            this.recordDroppedEvent('before_send', 'span', droppedSpanCount);\n          }\n        }\n\n        // None of the Sentry built event processor will update transaction name,\n        // so if the transaction name has been changed by an event processor, we know\n        // it has to come from custom event processor added by a user\n        const transactionInfo = processedEvent.transaction_info;\n        if (isTransaction && transactionInfo && processedEvent.transaction !== event.transaction) {\n          const source = 'custom';\n          processedEvent.transaction_info = {\n            ...transactionInfo,\n            source,\n          };\n        }\n\n        this.sendEvent(processedEvent, hint);\n        return processedEvent;\n      })\n      .then(null, reason => {\n        if (_isDoNotSendEventError(reason) || _isInternalError(reason)) {\n          throw reason;\n        }\n\n        this.captureException(reason, {\n          data: {\n            __sentry__: true,\n          },\n          originalException: reason,\n        });\n        throw _makeInternalError(\n          `Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\\nReason: ${reason}`,\n        );\n      });\n  }\n\n  /**\n   * Occupies the client with processing and event\n   */\n  protected _process<T>(promise: PromiseLike<T>): void {\n    this._numProcessing++;\n    void promise.then(\n      value => {\n        this._numProcessing--;\n        return value;\n      },\n      reason => {\n        this._numProcessing--;\n        return reason;\n      },\n    );\n  }\n\n  /**\n   * Clears outcomes on this client and returns them.\n   */\n  protected _clearOutcomes(): Outcome[] {\n    const outcomes = this._outcomes;\n    this._outcomes = {};\n    return Object.entries(outcomes).map(([key, quantity]) => {\n      const [reason, category] = key.split(':') as [EventDropReason, DataCategory];\n      return {\n        reason,\n        category,\n        quantity,\n      };\n    });\n  }\n\n  /**\n   * Sends client reports as an envelope.\n   */\n  protected _flushOutcomes(): void {\n    DEBUG_BUILD && logger.log('Flushing outcomes...');\n\n    const outcomes = this._clearOutcomes();\n\n    if (outcomes.length === 0) {\n      DEBUG_BUILD && logger.log('No outcomes to send');\n      return;\n    }\n\n    // This is really the only place where we want to check for a DSN and only send outcomes then\n    if (!this._dsn) {\n      DEBUG_BUILD && logger.log('No dsn provided, will not send outcomes');\n      return;\n    }\n\n    DEBUG_BUILD && logger.log('Sending outcomes:', outcomes);\n\n    const envelope = createClientReportEnvelope(outcomes, this._options.tunnel && dsnToString(this._dsn));\n\n    // sendEnvelope should not throw\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.sendEnvelope(envelope);\n  }\n\n  /**\n   * Creates an {@link Event} from all inputs to `captureException` and non-primitive inputs to `captureMessage`.\n   */\n  public abstract eventFromException(_exception: unknown, _hint?: EventHint): PromiseLike<Event>;\n\n  /**\n   * Creates an {@link Event} from primitive inputs to `captureMessage`.\n   */\n  public abstract eventFromMessage(\n    _message: ParameterizedString,\n    _level?: SeverityLevel,\n    _hint?: EventHint,\n  ): PromiseLike<Event>;\n}\n\n/**\n * @deprecated Use `Client` instead. This alias may be removed in a future major version.\n */\n// TODO(v10): Remove\nexport type BaseClient = Client;\n\n/**\n * @deprecated Use `Client` instead. This alias may be removed in a future major version.\n */\n// TODO(v10): Remove\nexport const BaseClient = Client;\n\n/**\n * Verifies that return value of configured `beforeSend` or `beforeSendTransaction` is of expected type, and returns the value if so.\n */\nfunction _validateBeforeSendResult(\n  beforeSendResult: PromiseLike<Event | null> | Event | null,\n  beforeSendLabel: string,\n): PromiseLike<Event | null> | Event | null {\n  const invalidValueError = `${beforeSendLabel} must return \\`null\\` or a valid event.`;\n  if (isThenable(beforeSendResult)) {\n    return beforeSendResult.then(\n      event => {\n        if (!isPlainObject(event) && event !== null) {\n          throw _makeInternalError(invalidValueError);\n        }\n        return event;\n      },\n      e => {\n        throw _makeInternalError(`${beforeSendLabel} rejected with ${e}`);\n      },\n    );\n  } else if (!isPlainObject(beforeSendResult) && beforeSendResult !== null) {\n    throw _makeInternalError(invalidValueError);\n  }\n  return beforeSendResult;\n}\n\n/**\n * Process the matching `beforeSendXXX` callback.\n */\nfunction processBeforeSend(\n  client: Client,\n  options: ClientOptions,\n  event: Event,\n  hint: EventHint,\n): PromiseLike<Event | null> | Event | null {\n  const { beforeSend, beforeSendTransaction, beforeSendSpan } = options;\n  let processedEvent = event;\n\n  if (isErrorEvent(processedEvent) && beforeSend) {\n    return beforeSend(processedEvent, hint);\n  }\n\n  if (isTransactionEvent(processedEvent)) {\n    if (beforeSendSpan) {\n      // process root span\n      const processedRootSpanJson = beforeSendSpan(convertTransactionEventToSpanJson(processedEvent));\n      if (!processedRootSpanJson) {\n        showSpanDropWarning();\n      } else {\n        // update event with processed root span values\n        processedEvent = merge(event, convertSpanJsonToTransactionEvent(processedRootSpanJson));\n      }\n\n      // process child spans\n      if (processedEvent.spans) {\n        const processedSpans: SpanJSON[] = [];\n        for (const span of processedEvent.spans) {\n          const processedSpan = beforeSendSpan(span);\n          if (!processedSpan) {\n            showSpanDropWarning();\n            processedSpans.push(span);\n          } else {\n            processedSpans.push(processedSpan);\n          }\n        }\n        processedEvent.spans = processedSpans;\n      }\n    }\n\n    if (beforeSendTransaction) {\n      if (processedEvent.spans) {\n        // We store the # of spans before processing in SDK metadata,\n        // so we can compare it afterwards to determine how many spans were dropped\n        const spanCountBefore = processedEvent.spans.length;\n        processedEvent.sdkProcessingMetadata = {\n          ...event.sdkProcessingMetadata,\n          spanCountBeforeProcessing: spanCountBefore,\n        };\n      }\n      return beforeSendTransaction(processedEvent as TransactionEvent, hint);\n    }\n  }\n\n  return processedEvent;\n}\n\nfunction isErrorEvent(event: Event): event is ErrorEvent {\n  return event.type === undefined;\n}\n\nfunction isTransactionEvent(event: Event): event is TransactionEvent {\n  return event.type === 'transaction';\n}\n\n/** Extract trace information from scope */\nexport function _getTraceInfoFromScope(\n  client: Client,\n  scope: Scope | undefined,\n): [dynamicSamplingContext: Partial<DynamicSamplingContext> | undefined, traceContext: TraceContext | undefined] {\n  if (!scope) {\n    return [undefined, undefined];\n  }\n\n  return withScope(scope, () => {\n    const span = getActiveSpan();\n    const traceContext = span ? spanToTraceContext(span) : getTraceContextFromScope(scope);\n    const dynamicSamplingContext = span\n      ? getDynamicSamplingContextFromSpan(span)\n      : getDynamicSamplingContextFromScope(client, scope);\n    return [dynamicSamplingContext, traceContext];\n  });\n}\n"],"names":["makeDsn","DEBUG_BUILD","logger","getEnvelopeEndpointWithUrlEncodedAuth","uuid4","checkOrSetAlreadyCaught","isParameterizedString","isPrimitive","session","updateSession","resolvedSyncPromise","integration","setupIntegration","afterSetupIntegrations","createEventEnvelope","addItemToEnvelope","createAttachmentEnvelopeItem","DEFAULT_ENVIRONMENT","createSessionEnvelope","setupIntegrations","SyncPromise","prepareEvent","getTraceContextFromScope","dynamicSamplingContext","getDynamicSamplingContextFromScope","getCurrentScope","getIsolationScope","getPossibleEventMessages","parseSampleRate","rejectedSyncPromise","createClientReportEnvelope","dsnToString","isThenable","isPlainObject","convertTransactionEventToSpanJson","showSpanDropWarning","merge","convertSpanJsonToTransactionEvent","withScope","getActiveSpan","spanToTraceContext","getDynamicSamplingContextFromSpan"],"mappings":"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"}},
    {"offset": {"line": 7562, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7566, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/checkin.ts"],"sourcesContent":["import type { SerializedCheckIn } from './types-hoist/checkin';\nimport type { DsnComponents } from './types-hoist/dsn';\nimport type { CheckInEnvelope, CheckInItem, DynamicSamplingContext } from './types-hoist/envelope';\nimport type { SdkMetadata } from './types-hoist/sdkmetadata';\nimport { dsnToString } from './utils/dsn';\nimport { createEnvelope } from './utils/envelope';\n\n/**\n * Create envelope from check in item.\n */\nexport function createCheckInEnvelope(\n  checkIn: SerializedCheckIn,\n  dynamicSamplingContext?: Partial<DynamicSamplingContext>,\n  metadata?: SdkMetadata,\n  tunnel?: string,\n  dsn?: DsnComponents,\n): CheckInEnvelope {\n  const headers: CheckInEnvelope[0] = {\n    sent_at: new Date().toISOString(),\n  };\n\n  if (metadata?.sdk) {\n    headers.sdk = {\n      name: metadata.sdk.name,\n      version: metadata.sdk.version,\n    };\n  }\n\n  if (!!tunnel && !!dsn) {\n    headers.dsn = dsnToString(dsn);\n  }\n\n  if (dynamicSamplingContext) {\n    headers.trace = dynamicSamplingContext as DynamicSamplingContext;\n  }\n\n  const item = createCheckInEnvelopeItem(checkIn);\n  return createEnvelope<CheckInEnvelope>(headers, [item]);\n}\n\nfunction createCheckInEnvelopeItem(checkIn: SerializedCheckIn): CheckInItem {\n  const checkInHeaders: CheckInItem[0] = {\n    type: 'check_in',\n  };\n  return [checkInHeaders, checkIn];\n}\n"],"names":["dsn","dsnToString","createEnvelope"],"mappings":";;;;;AAOA;;CAEA,GACO,SAAS,sBACd,OAAO,EACP,sBAAsB,EACtB,QAAQ,EACR,MAAM,EACNA,KAAG;IAEH,MAAM,UAA8B;QAClC,SAAS,IAAI,OAAO,WAAW;IACnC;IAEE,IAAI,UAAU,KAAK;QACjB,QAAQ,GAAA,GAAM;YACZ,MAAM,SAAS,GAAG,CAAC,IAAI;YACvB,SAAS,SAAS,GAAG,CAAC,OAAO;QACnC;IACA;IAEE,IAAI,CAAC,CAAC,UAAU,CAAC,CAACA,OAAK;QACrB,QAAQ,GAAA,GAAMC,IAAAA,WAAW,CAACD;IAC9B;IAEE,IAAI,wBAAwB;QAC1B,QAAQ,KAAA,GAAQ;IACpB;IAEE,MAAM,OAAO,0BAA0B;IACvC,OAAOE,SAAAA,cAAc,CAAkB,SAAS;QAAC;KAAK;AACxD;AAEA,SAAS,0BAA0B,OAAO;IACxC,MAAM,iBAAiC;QACrC,MAAM;IACV;IACE,OAAO;QAAC;QAAgB;KAAQ;AAClC"}},
    {"offset": {"line": 7604, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7608, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/logs/constants.ts"],"sourcesContent":["import type { LogSeverityLevel } from '../types-hoist/log';\n\n/**\n * Maps a log severity level to a log severity number.\n *\n * @see LogSeverityLevel\n */\nexport const SEVERITY_TEXT_TO_SEVERITY_NUMBER: Partial<Record<LogSeverityLevel, number>> = {\n  trace: 1,\n  debug: 5,\n  info: 9,\n  warn: 13,\n  error: 17,\n  fatal: 21,\n};\n"],"names":[],"mappings":";;;AAEA;;;;CAIA,GACO,MAAM,mCAA8E;IACzF,OAAO;IACP,OAAO;IACP,MAAM;IACN,MAAM;IACN,OAAO;IACP,OAAO;AACT"}},
    {"offset": {"line": 7624, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7628, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/logs/envelope.ts"],"sourcesContent":["import type { DsnComponents } from '../types-hoist/dsn';\nimport type { LogContainerItem, LogEnvelope } from '../types-hoist/envelope';\nimport type { SerializedLog } from '../types-hoist/log';\nimport type { SdkMetadata } from '../types-hoist/sdkmetadata';\nimport { dsnToString } from '../utils/dsn';\nimport { createEnvelope } from '../utils/envelope';\n\n/**\n * Creates a log container envelope item for a list of logs.\n *\n * @param items - The logs to include in the envelope.\n * @returns The created log container envelope item.\n */\nexport function createLogContainerEnvelopeItem(items: Array<SerializedLog>): LogContainerItem {\n  return [\n    {\n      type: 'log',\n      item_count: items.length,\n      content_type: 'application/vnd.sentry.items.log+json',\n    },\n    {\n      items,\n    },\n  ];\n}\n\n/**\n * Creates an envelope for a list of logs.\n *\n * Logs from multiple traces can be included in the same envelope.\n *\n * @param logs - The logs to include in the envelope.\n * @param metadata - The metadata to include in the envelope.\n * @param tunnel - The tunnel to include in the envelope.\n * @param dsn - The DSN to include in the envelope.\n * @returns The created envelope.\n */\nexport function createLogEnvelope(\n  logs: Array<SerializedLog>,\n  metadata?: SdkMetadata,\n  tunnel?: string,\n  dsn?: DsnComponents,\n): LogEnvelope {\n  const headers: LogEnvelope[0] = {};\n\n  if (metadata?.sdk) {\n    headers.sdk = {\n      name: metadata.sdk.name,\n      version: metadata.sdk.version,\n    };\n  }\n\n  if (!!tunnel && !!dsn) {\n    headers.dsn = dsnToString(dsn);\n  }\n\n  return createEnvelope<LogEnvelope>(headers, [createLogContainerEnvelopeItem(logs)]);\n}\n"],"names":["dsn","dsnToString","createEnvelope"],"mappings":";;;;;AAOA;;;;;CAKA,GACO,SAAS,+BAA+B,KAAK;IAClD,OAAO;QACL;YACE,MAAM;YACN,YAAY,MAAM,MAAM;YACxB,cAAc;QACpB;QACI;YACE;QACN;KACG;AACH;AAEA;;;;;;;;;;CAUA,GACO,SAAS,kBACd,IAAI,EACJ,QAAQ,EACR,MAAM,EACNA,KAAG;IAEH,MAAM,UAA0B,CAAA;IAEhC,IAAI,UAAU,KAAK;QACjB,QAAQ,GAAA,GAAM;YACZ,MAAM,SAAS,GAAG,CAAC,IAAI;YACvB,SAAS,SAAS,GAAG,CAAC,OAAO;QACnC;IACA;IAEE,IAAI,CAAC,CAAC,UAAU,CAAC,CAACA,OAAK;QACrB,QAAQ,GAAA,GAAMC,IAAAA,WAAW,CAACD;IAC9B;IAEE,OAAOE,SAAAA,cAAc,CAAc,SAAS;QAAC,+BAA+B;KAAM;AACpF"}},
    {"offset": {"line": 7677, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7681, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/logs/exports.ts"],"sourcesContent":["import type { Client } from '../client';\nimport { _getTraceInfoFromScope } from '../client';\nimport { getClient, getCurrentScope, getGlobalScope, getIsolationScope } from '../currentScopes';\nimport { DEBUG_BUILD } from '../debug-build';\nimport type { Scope, ScopeData } from '../scope';\nimport type { Log, SerializedLog, SerializedLogAttributeValue } from '../types-hoist/log';\nimport { mergeScopeData } from '../utils/applyScopeDataToEvent';\nimport { isParameterizedString } from '../utils/is';\nimport { logger } from '../utils/logger';\nimport { _getSpanForScope } from '../utils/spanOnScope';\nimport { timestampInSeconds } from '../utils/time';\nimport { GLOBAL_OBJ } from '../utils/worldwide';\nimport { SEVERITY_TEXT_TO_SEVERITY_NUMBER } from './constants';\nimport { createLogEnvelope } from './envelope';\n\nconst MAX_LOG_BUFFER_SIZE = 100;\n\n// The reference to the Client <> LogBuffer map is stored to ensure it's always the same\nGLOBAL_OBJ._sentryClientToLogBufferMap = new WeakMap<Client, Array<SerializedLog>>();\n\n/**\n * Converts a log attribute to a serialized log attribute.\n *\n * @param key - The key of the log attribute.\n * @param value - The value of the log attribute.\n * @returns The serialized log attribute.\n */\nexport function logAttributeToSerializedLogAttribute(value: unknown): SerializedLogAttributeValue {\n  switch (typeof value) {\n    case 'number':\n      if (Number.isInteger(value)) {\n        return {\n          value,\n          type: 'integer',\n        };\n      }\n      return {\n        value,\n        type: 'double',\n      };\n    case 'boolean':\n      return {\n        value,\n        type: 'boolean',\n      };\n    case 'string':\n      return {\n        value,\n        type: 'string',\n      };\n    default: {\n      let stringValue = '';\n      try {\n        stringValue = JSON.stringify(value) ?? '';\n      } catch {\n        // Do nothing\n      }\n      return {\n        value: stringValue,\n        type: 'string',\n      };\n    }\n  }\n}\n\n/**\n * Sets a log attribute if the value exists and the attribute key is not already present.\n *\n * @param logAttributes - The log attributes object to modify.\n * @param key - The attribute key to set.\n * @param value - The value to set (only sets if truthy and key not present).\n * @param setEvenIfPresent - Whether to set the attribute if it is present. Defaults to true.\n */\nfunction setLogAttribute(\n  logAttributes: Record<string, unknown>,\n  key: string,\n  value: unknown,\n  setEvenIfPresent = true,\n): void {\n  if (value && (!logAttributes[key] || setEvenIfPresent)) {\n    logAttributes[key] = value;\n  }\n}\n\n/**\n * Captures a serialized log event and adds it to the log buffer for the given client.\n *\n * @param client - A client. Uses the current client if not provided.\n * @param serializedLog - The serialized log event to capture.\n *\n * @experimental This method will experience breaking changes. This is not yet part of\n * the stable Sentry SDK API and can be changed or removed without warning.\n */\nexport function _INTERNAL_captureSerializedLog(client: Client, serializedLog: SerializedLog): void {\n  const logBuffer = _INTERNAL_getLogBuffer(client);\n  if (logBuffer === undefined) {\n    GLOBAL_OBJ._sentryClientToLogBufferMap?.set(client, [serializedLog]);\n  } else {\n    GLOBAL_OBJ._sentryClientToLogBufferMap?.set(client, [...logBuffer, serializedLog]);\n    if (logBuffer.length >= MAX_LOG_BUFFER_SIZE) {\n      _INTERNAL_flushLogsBuffer(client, logBuffer);\n    }\n  }\n}\n\n/**\n * Captures a log event and sends it to Sentry.\n *\n * @param log - The log event to capture.\n * @param scope - A scope. Uses the current scope if not provided.\n * @param client - A client. Uses the current client if not provided.\n * @param captureSerializedLog - A function to capture the serialized log.\n *\n * @experimental This method will experience breaking changes. This is not yet part of\n * the stable Sentry SDK API and can be changed or removed without warning.\n */\nexport function _INTERNAL_captureLog(\n  beforeLog: Log,\n  client: Client | undefined = getClient(),\n  currentScope = getCurrentScope(),\n  captureSerializedLog: (client: Client, log: SerializedLog) => void = _INTERNAL_captureSerializedLog,\n): void {\n  if (!client) {\n    DEBUG_BUILD && logger.warn('No client available to capture log.');\n    return;\n  }\n\n  const { _experiments, release, environment } = client.getOptions();\n  const { enableLogs = false, beforeSendLog } = _experiments ?? {};\n  if (!enableLogs) {\n    DEBUG_BUILD && logger.warn('logging option not enabled, log will not be captured.');\n    return;\n  }\n\n  const [, traceContext] = _getTraceInfoFromScope(client, currentScope);\n\n  const processedLogAttributes = {\n    ...beforeLog.attributes,\n  };\n\n  const {\n    user: { id, email, username },\n  } = getMergedScopeData(currentScope);\n  setLogAttribute(processedLogAttributes, 'user.id', id, false);\n  setLogAttribute(processedLogAttributes, 'user.email', email, false);\n  setLogAttribute(processedLogAttributes, 'user.name', username, false);\n\n  setLogAttribute(processedLogAttributes, 'sentry.release', release);\n  setLogAttribute(processedLogAttributes, 'sentry.environment', environment);\n\n  const { name, version } = client.getSdkMetadata()?.sdk ?? {};\n  setLogAttribute(processedLogAttributes, 'sentry.sdk.name', name);\n  setLogAttribute(processedLogAttributes, 'sentry.sdk.version', version);\n\n  const beforeLogMessage = beforeLog.message;\n  if (isParameterizedString(beforeLogMessage)) {\n    const { __sentry_template_string__, __sentry_template_values__ = [] } = beforeLogMessage;\n    processedLogAttributes['sentry.message.template'] = __sentry_template_string__;\n    __sentry_template_values__.forEach((param, index) => {\n      processedLogAttributes[`sentry.message.parameter.${index}`] = param;\n    });\n  }\n\n  const span = _getSpanForScope(currentScope);\n  // Add the parent span ID to the log attributes for trace context\n  setLogAttribute(processedLogAttributes, 'sentry.trace.parent_span_id', span?.spanContext().spanId);\n\n  const processedLog = { ...beforeLog, attributes: processedLogAttributes };\n\n  client.emit('beforeCaptureLog', processedLog);\n\n  const log = beforeSendLog ? beforeSendLog(processedLog) : processedLog;\n  if (!log) {\n    client.recordDroppedEvent('before_send', 'log_item', 1);\n    DEBUG_BUILD && logger.warn('beforeSendLog returned null, log will not be captured.');\n    return;\n  }\n\n  const { level, message, attributes = {}, severityNumber } = log;\n\n  const serializedLog: SerializedLog = {\n    timestamp: timestampInSeconds(),\n    level,\n    body: message,\n    trace_id: traceContext?.trace_id,\n    severity_number: severityNumber ?? SEVERITY_TEXT_TO_SEVERITY_NUMBER[level],\n    attributes: Object.keys(attributes).reduce(\n      (acc, key) => {\n        acc[key] = logAttributeToSerializedLogAttribute(attributes[key]);\n        return acc;\n      },\n      {} as Record<string, SerializedLogAttributeValue>,\n    ),\n  };\n\n  captureSerializedLog(client, serializedLog);\n\n  client.emit('afterCaptureLog', log);\n}\n\n/**\n * Flushes the logs buffer to Sentry.\n *\n * @param client - A client.\n * @param maybeLogBuffer - A log buffer. Uses the log buffer for the given client if not provided.\n *\n * @experimental This method will experience breaking changes. This is not yet part of\n * the stable Sentry SDK API and can be changed or removed without warning.\n */\nexport function _INTERNAL_flushLogsBuffer(client: Client, maybeLogBuffer?: Array<SerializedLog>): void {\n  const logBuffer = maybeLogBuffer ?? _INTERNAL_getLogBuffer(client) ?? [];\n  if (logBuffer.length === 0) {\n    return;\n  }\n\n  const clientOptions = client.getOptions();\n  const envelope = createLogEnvelope(logBuffer, clientOptions._metadata, clientOptions.tunnel, client.getDsn());\n\n  // Clear the log buffer after envelopes have been constructed.\n  GLOBAL_OBJ._sentryClientToLogBufferMap?.set(client, []);\n\n  client.emit('flushLogs');\n\n  // sendEnvelope should not throw\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  client.sendEnvelope(envelope);\n}\n\n/**\n * Returns the log buffer for a given client.\n *\n * Exported for testing purposes.\n *\n * @param client - The client to get the log buffer for.\n * @returns The log buffer for the given client.\n */\nexport function _INTERNAL_getLogBuffer(client: Client): Array<SerializedLog> | undefined {\n  return GLOBAL_OBJ._sentryClientToLogBufferMap?.get(client);\n}\n\n/**\n * Get the scope data for the current scope after merging with the\n * global scope and isolation scope.\n *\n * @param currentScope - The current scope.\n * @returns The scope data.\n */\nfunction getMergedScopeData(currentScope: Scope): ScopeData {\n  const scopeData = getGlobalScope().getScopeData();\n  mergeScopeData(scopeData, getIsolationScope().getScopeData());\n  mergeScopeData(scopeData, currentScope.getScopeData());\n  return scopeData;\n}\n"],"names":["GLOBAL_OBJ","client","getClient","getCurrentScope","DEBUG_BUILD","logger","_getTraceInfoFromScope","isParameterizedString","_getSpanForScope","timestampInSeconds","SEVERITY_TEXT_TO_SEVERITY_NUMBER","envelope","createLogEnvelope","getGlobalScope","mergeScopeData","getIsolationScope"],"mappings":";;;;;;;;;;;;;;AAeA,MAAM,sBAAsB;AAE5B,wFAAA;AACAA,UAAAA,UAAU,CAAC,2BAAA,GAA8B,IAAI;AAE7C;;;;;;CAMA,GACO,SAAS,qCAAqC,KAAK;IACxD,OAAQ,OAAO;QACb,KAAK;YACH,IAAI,OAAO,SAAS,CAAC,QAAQ;gBAC3B,OAAO;oBACL;oBACA,MAAM;gBAChB;YACA;YACM,OAAO;gBACL;gBACA,MAAM;YACd;QACI,KAAK;YACH,OAAO;gBACL;gBACA,MAAM;YACd;QACI,KAAK;YACH,OAAO;gBACL;gBACA,MAAM;YACd;QACI;YAAS;gBACP,IAAI,cAAc;gBAClB,IAAI;oBACF,cAAc,KAAK,SAAS,CAAC,UAAU;gBAC/C,EAAQ,OAAM;gBACd,aAAA;gBACA;gBACM,OAAO;oBACL,OAAO;oBACP,MAAM;gBACd;YACA;IACA;AACA;AAEA;;;;;;;CAOA,GACA,SAAS,gBACP,aAAa,EACb,GAAG,EACH,KAAK,EACL,mBAAmB,IAAI;IAEvB,IAAI,SAAA,CAAU,CAAC,aAAa,CAAC,IAAG,IAAK,gBAAgB,GAAG;QACtD,aAAa,CAAC,IAAG,GAAI;IACzB;AACA;AAEA;;;;;;;;CAQA,GACO,SAAS,+BAA+B,MAAM,EAAU,aAAa;IAC1E,MAAM,YAAY,uBAAuB;IACzC,IAAI,cAAc,WAAW;QAC3BA,UAAAA,UAAU,CAAC,2BAA2B,EAAE,IAAI,QAAQ;YAAC;SAAc;IACvE,OAAS;QACLA,UAAAA,UAAU,CAAC,2BAA2B,EAAE,IAAI,QAAQ;eAAI;YAAW;SAAc;QACjF,IAAI,UAAU,MAAA,IAAU,qBAAqB;YAC3C,0BAA0B,QAAQ;QACxC;IACA;AACA;AAEA;;;;;;;;;;CAUA,GACO,SAAS,qBACd,SAAS,EACTC,WAA6BC,cAAAA,SAAS,EAAE,EACxC,eAAeC,cAAAA,eAAe,EAAE,EAChC,uBAAqE,8BAA8B;IAEnG,IAAI,CAACF,UAAQ;QACXG,WAAAA,WAAAA,IAAeC,OAAAA,MAAM,CAAC,IAAI,CAAC;QAC3B;IACJ;IAEE,MAAM,EAAE,YAAY,EAAE,OAAO,EAAE,WAAA,EAAY,GAAIJ,SAAO,UAAU;IAChE,MAAM,EAAE,aAAa,KAAK,EAAE,aAAA,EAAc,GAAI,gBAAgB,CAAA;IAC9D,IAAI,CAAC,YAAY;QACfG,WAAAA,WAAAA,IAAeC,OAAAA,MAAM,CAAC,IAAI,CAAC;QAC3B;IACJ;IAEE,MAAM,GAAG,aAAY,GAAIC,OAAAA,sBAAsB,CAACL,UAAQ;IAExD,MAAM,yBAAyB;QAC7B,GAAG,UAAU,UAAU;IAC3B;IAEE,MAAM,EACJ,MAAM,EAAE,EAAE,EAAE,KAAK,EAAE,QAAA,EAAU,EAC/B,GAAI,mBAAmB;IACvB,gBAAgB,wBAAwB,WAAW,IAAI;IACvD,gBAAgB,wBAAwB,cAAc,OAAO;IAC7D,gBAAgB,wBAAwB,aAAa,UAAU;IAE/D,gBAAgB,wBAAwB,kBAAkB;IAC1D,gBAAgB,wBAAwB,sBAAsB;IAE9D,MAAM,EAAE,IAAI,EAAE,OAAA,EAAA,GAAYA,SAAO,cAAc,IAAI,OAAO,CAAA;IAC1D,gBAAgB,wBAAwB,mBAAmB;IAC3D,gBAAgB,wBAAwB,sBAAsB;IAE9D,MAAM,mBAAmB,UAAU,OAAO;IAC1C,IAAIM,GAAAA,qBAAqB,CAAC,mBAAmB;QAC3C,MAAM,EAAE,0BAA0B,EAAE,6BAA6B,EAAC,EAAE,GAAI;QACxE,sBAAsB,CAAC,0BAAyB,GAAI;QACpD,2BAA2B,OAAO,CAAC,CAAC,OAAO;YACzC,sBAAsB,CAAC,CAAC,yBAAyB,EAAE,MAAM,CAAA,CAAA,GAAA;QACA;IACA;IAEA,MAAA,OAAAC,YAAAA,gBAAA,CAAA;IACA,iEAAA;IACA,gBAAA,wBAAA,+BAAA,MAAA,cAAA;IAEA,MAAA,eAAA;QAAA,GAAA,SAAA;QAAA,YAAA;IAAA;IAEAP,SAAA,IAAA,CAAA,oBAAA;IAEA,MAAA,MAAA,gBAAA,cAAA,gBAAA;IACA,IAAA,CAAA,KAAA;QACAA,SAAA,kBAAA,CAAA,eAAA,YAAA;QACAG,WAAAA,WAAA,IAAAC,OAAAA,MAAA,CAAA,IAAA,CAAA;QACA;IACA;IAEA,MAAA,EAAA,KAAA,EAAA,OAAA,EAAA,aAAA,CAAA,CAAA,EAAA,cAAA,EAAA,GAAA;IAEA,MAAA,gBAAA;QACA,WAAAI,KAAAA,kBAAA;QACA;QACA,MAAA;QACA,UAAA,cAAA;QACA,iBAAA,kBAAAC,UAAAA,gCAAA,CAAA,MAAA;QACA,YAAA,OAAA,IAAA,CAAA,YAAA,MAAA,CACA,CAAA,KAAA;YACA,GAAA,CAAA,IAAA,GAAA,qCAAA,UAAA,CAAA,IAAA;YACA,OAAA;QACA,GACA,CAAA;IAEA;IAEA,qBAAAT,UAAA;IAEAA,SAAA,IAAA,CAAA,mBAAA;AACA;AAEA;;;;;;;;CAQA,GACA,SAAA,0BAAA,MAAA,EAAA,cAAA;IACA,MAAA,YAAA,kBAAA,uBAAA,WAAA,EAAA;IACA,IAAA,UAAA,MAAA,KAAA,GAAA;QACA;IACA;IAEA,MAAA,gBAAA,OAAA,UAAA;IACA,MAAAU,aAAAC,SAAAA,iBAAA,CAAA,WAAA,cAAA,SAAA,EAAA,cAAA,MAAA,EAAA,OAAA,MAAA;IAEA,8DAAA;IACAZ,UAAAA,UAAA,CAAA,2BAAA,EAAA,IAAA,QAAA,EAAA;IAEA,OAAA,IAAA,CAAA;IAEA,gCAAA;IACA,mEAAA;IACA,OAAA,YAAA,CAAAW;AACA;AAEA;;;;;;;CAOA,GACA,SAAA,uBAAA,MAAA;IACA,OAAAX,UAAAA,UAAA,CAAA,2BAAA,EAAA,IAAA;AACA;AAEA;;;;;;CAMA,GACA,SAAA,mBAAA,YAAA;IACA,MAAA,YAAAa,cAAAA,cAAA,GAAA,YAAA;IACAC,sBAAAA,cAAA,CAAA,WAAAC,cAAAA,iBAAA,GAAA,YAAA;IACAD,sBAAAA,cAAA,CAAA,WAAA,aAAA,YAAA;IACA,OAAA;AACA"}},
    {"offset": {"line": 7898, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7902, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/utils/eventbuilder.ts"],"sourcesContent":["import type { Client } from '../client';\nimport type { Event, EventHint } from '../types-hoist/event';\nimport type { Exception } from '../types-hoist/exception';\nimport type { Extras } from '../types-hoist/extra';\nimport type { Mechanism } from '../types-hoist/mechanism';\nimport type { ParameterizedString } from '../types-hoist/parameterize';\nimport type { SeverityLevel } from '../types-hoist/severity';\nimport type { StackFrame } from '../types-hoist/stackframe';\nimport type { StackParser } from '../types-hoist/stacktrace';\nimport { isError, isErrorEvent, isParameterizedString, isPlainObject } from './is';\nimport { addExceptionMechanism, addExceptionTypeValue } from './misc';\nimport { normalizeToSize } from './normalize';\nimport { extractExceptionKeysForMessage } from './object';\n\n/**\n * Extracts stack frames from the error.stack string\n */\nexport function parseStackFrames(stackParser: StackParser, error: Error): StackFrame[] {\n  return stackParser(error.stack || '', 1);\n}\n\n/**\n * Extracts stack frames from the error and builds a Sentry Exception\n */\nexport function exceptionFromError(stackParser: StackParser, error: Error): Exception {\n  const exception: Exception = {\n    type: error.name || error.constructor.name,\n    value: error.message,\n  };\n\n  const frames = parseStackFrames(stackParser, error);\n  if (frames.length) {\n    exception.stacktrace = { frames };\n  }\n\n  return exception;\n}\n\n/** If a plain object has a property that is an `Error`, return this error. */\nfunction getErrorPropertyFromObject(obj: Record<string, unknown>): Error | undefined {\n  for (const prop in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n      const value = obj[prop];\n      if (value instanceof Error) {\n        return value;\n      }\n    }\n  }\n\n  return undefined;\n}\n\nfunction getMessageForObject(exception: Record<string, unknown>): string {\n  if ('name' in exception && typeof exception.name === 'string') {\n    let message = `'${exception.name}' captured as exception`;\n\n    if ('message' in exception && typeof exception.message === 'string') {\n      message += ` with message '${exception.message}'`;\n    }\n\n    return message;\n  } else if ('message' in exception && typeof exception.message === 'string') {\n    return exception.message;\n  }\n\n  const keys = extractExceptionKeysForMessage(exception);\n\n  // Some ErrorEvent instances do not have an `error` property, which is why they are not handled before\n  // We still want to try to get a decent message for these cases\n  if (isErrorEvent(exception)) {\n    return `Event \\`ErrorEvent\\` captured as exception with message \\`${exception.message}\\``;\n  }\n\n  const className = getObjectClassName(exception);\n\n  return `${\n    className && className !== 'Object' ? `'${className}'` : 'Object'\n  } captured as exception with keys: ${keys}`;\n}\n\nfunction getObjectClassName(obj: unknown): string | undefined | void {\n  try {\n    const prototype: unknown | null = Object.getPrototypeOf(obj);\n    return prototype ? prototype.constructor.name : undefined;\n  } catch (e) {\n    // ignore errors here\n  }\n}\n\nfunction getException(\n  client: Client,\n  mechanism: Mechanism,\n  exception: unknown,\n  hint?: EventHint,\n): [Error, Extras | undefined] {\n  if (isError(exception)) {\n    return [exception, undefined];\n  }\n\n  // Mutate this!\n  mechanism.synthetic = true;\n\n  if (isPlainObject(exception)) {\n    const normalizeDepth = client?.getOptions().normalizeDepth;\n    const extras = { ['__serialized__']: normalizeToSize(exception as Record<string, unknown>, normalizeDepth) };\n\n    const errorFromProp = getErrorPropertyFromObject(exception);\n    if (errorFromProp) {\n      return [errorFromProp, extras];\n    }\n\n    const message = getMessageForObject(exception);\n    const ex = hint?.syntheticException || new Error(message);\n    ex.message = message;\n\n    return [ex, extras];\n  }\n\n  // This handles when someone does: `throw \"something awesome\";`\n  // We use synthesized Error here so we can extract a (rough) stack trace.\n  const ex = hint?.syntheticException || new Error(exception as string);\n  ex.message = `${exception}`;\n\n  return [ex, undefined];\n}\n\n/**\n * Builds and Event from a Exception\n * @hidden\n */\nexport function eventFromUnknownInput(\n  client: Client,\n  stackParser: StackParser,\n  exception: unknown,\n  hint?: EventHint,\n): Event {\n  const providedMechanism: Mechanism | undefined = hint?.data && (hint.data as { mechanism: Mechanism }).mechanism;\n  const mechanism: Mechanism = providedMechanism || {\n    handled: true,\n    type: 'generic',\n  };\n\n  const [ex, extras] = getException(client, mechanism, exception, hint);\n\n  const event: Event = {\n    exception: {\n      values: [exceptionFromError(stackParser, ex)],\n    },\n  };\n\n  if (extras) {\n    event.extra = extras;\n  }\n\n  addExceptionTypeValue(event, undefined, undefined);\n  addExceptionMechanism(event, mechanism);\n\n  return {\n    ...event,\n    event_id: hint?.event_id,\n  };\n}\n\n/**\n * Builds and Event from a Message\n * @hidden\n */\nexport function eventFromMessage(\n  stackParser: StackParser,\n  message: ParameterizedString,\n  level: SeverityLevel = 'info',\n  hint?: EventHint,\n  attachStacktrace?: boolean,\n): Event {\n  const event: Event = {\n    event_id: hint?.event_id,\n    level,\n  };\n\n  if (attachStacktrace && hint?.syntheticException) {\n    const frames = parseStackFrames(stackParser, hint.syntheticException);\n    if (frames.length) {\n      event.exception = {\n        values: [\n          {\n            value: message,\n            stacktrace: { frames },\n          },\n        ],\n      };\n      addExceptionMechanism(event, { synthetic: true });\n    }\n  }\n\n  if (isParameterizedString(message)) {\n    const { __sentry_template_string__, __sentry_template_values__ } = message;\n\n    event.logentry = {\n      message: __sentry_template_string__,\n      params: __sentry_template_values__,\n    };\n    return event;\n  }\n\n  event.message = message;\n  return event;\n}\n"],"names":["extractExceptionKeysForMessage","isErrorEvent","isError","isPlainObject","normalizeToSize","addExceptionTypeValue","addExceptionMechanism","isParameterizedString"],"mappings":"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"}},
    {"offset": {"line": 8073, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8077, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/server-runtime-client.ts"],"sourcesContent":["import { createCheckInEnvelope } from './checkin';\nimport { _getTraceInfoFromScope, Client } from './client';\nimport { getIsolationScope } from './currentScopes';\nimport { DEBUG_BUILD } from './debug-build';\nimport { _INTERNAL_flushLogsBuffer } from './logs/exports';\nimport type { Scope } from './scope';\nimport { registerSpanErrorInstrumentation } from './tracing';\nimport type { CheckIn, MonitorConfig, SerializedCheckIn } from './types-hoist/checkin';\nimport type { Event, EventHint } from './types-hoist/event';\nimport type { Log } from './types-hoist/log';\nimport type { Primitive } from './types-hoist/misc';\nimport type { ClientOptions } from './types-hoist/options';\nimport type { ParameterizedString } from './types-hoist/parameterize';\nimport type { SeverityLevel } from './types-hoist/severity';\nimport type { BaseTransportOptions } from './types-hoist/transport';\nimport { eventFromMessage, eventFromUnknownInput } from './utils/eventbuilder';\nimport { isPrimitive } from './utils/is';\nimport { logger } from './utils/logger';\nimport { uuid4 } from './utils/misc';\nimport { resolvedSyncPromise } from './utils/syncpromise';\n\n// TODO: Make this configurable\nconst DEFAULT_LOG_FLUSH_INTERVAL = 5000;\n\nexport interface ServerRuntimeClientOptions extends ClientOptions<BaseTransportOptions> {\n  platform?: string;\n  runtime?: { name: string; version?: string };\n  serverName?: string;\n}\n\n/**\n * The Sentry Server Runtime Client SDK.\n */\nexport class ServerRuntimeClient<\n  O extends ClientOptions & ServerRuntimeClientOptions = ServerRuntimeClientOptions,\n> extends Client<O> {\n  private _logFlushIdleTimeout: ReturnType<typeof setTimeout> | undefined;\n  private _logWeight: number;\n\n  /**\n   * Creates a new Edge SDK instance.\n   * @param options Configuration options for this SDK.\n   */\n  public constructor(options: O) {\n    // Server clients always support tracing\n    registerSpanErrorInstrumentation();\n\n    super(options);\n\n    this._logWeight = 0;\n\n    if (this._options._experiments?.enableLogs) {\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      const client = this;\n\n      client.on('flushLogs', () => {\n        client._logWeight = 0;\n        clearTimeout(client._logFlushIdleTimeout);\n      });\n\n      client.on('afterCaptureLog', log => {\n        client._logWeight += estimateLogSizeInBytes(log);\n\n        // We flush the logs buffer if it exceeds 0.8 MB\n        // The log weight is a rough estimate, so we flush way before\n        // the payload gets too big.\n        if (client._logWeight >= 800_000) {\n          _INTERNAL_flushLogsBuffer(client);\n        } else {\n          // start an idle timeout to flush the logs buffer if no logs are captured for a while\n          client._logFlushIdleTimeout = setTimeout(() => {\n            _INTERNAL_flushLogsBuffer(client);\n          }, DEFAULT_LOG_FLUSH_INTERVAL);\n        }\n      });\n\n      client.on('flush', () => {\n        _INTERNAL_flushLogsBuffer(client);\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromException(exception: unknown, hint?: EventHint): PromiseLike<Event> {\n    const event = eventFromUnknownInput(this, this._options.stackParser, exception, hint);\n    event.level = 'error';\n\n    return resolvedSyncPromise(event);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromMessage(\n    message: ParameterizedString,\n    level: SeverityLevel = 'info',\n    hint?: EventHint,\n  ): PromiseLike<Event> {\n    return resolvedSyncPromise(\n      eventFromMessage(this._options.stackParser, message, level, hint, this._options.attachStacktrace),\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureException(exception: unknown, hint?: EventHint, scope?: Scope): string {\n    setCurrentRequestSessionErroredOrCrashed(hint);\n    return super.captureException(exception, hint, scope);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureEvent(event: Event, hint?: EventHint, scope?: Scope): string {\n    // If the event is of type Exception, then a request session should be captured\n    const isException = !event.type && event.exception?.values && event.exception.values.length > 0;\n    if (isException) {\n      setCurrentRequestSessionErroredOrCrashed(hint);\n    }\n\n    return super.captureEvent(event, hint, scope);\n  }\n\n  /**\n   * Create a cron monitor check in and send it to Sentry.\n   *\n   * @param checkIn An object that describes a check in.\n   * @param upsertMonitorConfig An optional object that describes a monitor config. Use this if you want\n   * to create a monitor automatically when sending a check in.\n   */\n  public captureCheckIn(checkIn: CheckIn, monitorConfig?: MonitorConfig, scope?: Scope): string {\n    const id = 'checkInId' in checkIn && checkIn.checkInId ? checkIn.checkInId : uuid4();\n    if (!this._isEnabled()) {\n      DEBUG_BUILD && logger.warn('SDK not enabled, will not capture check-in.');\n      return id;\n    }\n\n    const options = this.getOptions();\n    const { release, environment, tunnel } = options;\n\n    const serializedCheckIn: SerializedCheckIn = {\n      check_in_id: id,\n      monitor_slug: checkIn.monitorSlug,\n      status: checkIn.status,\n      release,\n      environment,\n    };\n\n    if ('duration' in checkIn) {\n      serializedCheckIn.duration = checkIn.duration;\n    }\n\n    if (monitorConfig) {\n      serializedCheckIn.monitor_config = {\n        schedule: monitorConfig.schedule,\n        checkin_margin: monitorConfig.checkinMargin,\n        max_runtime: monitorConfig.maxRuntime,\n        timezone: monitorConfig.timezone,\n        failure_issue_threshold: monitorConfig.failureIssueThreshold,\n        recovery_threshold: monitorConfig.recoveryThreshold,\n      };\n    }\n\n    const [dynamicSamplingContext, traceContext] = _getTraceInfoFromScope(this, scope);\n    if (traceContext) {\n      serializedCheckIn.contexts = {\n        trace: traceContext,\n      };\n    }\n\n    const envelope = createCheckInEnvelope(\n      serializedCheckIn,\n      dynamicSamplingContext,\n      this.getSdkMetadata(),\n      tunnel,\n      this.getDsn(),\n    );\n\n    DEBUG_BUILD && logger.info('Sending checkin:', checkIn.monitorSlug, checkIn.status);\n\n    // sendEnvelope should not throw\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.sendEnvelope(envelope);\n\n    return id;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _prepareEvent(\n    event: Event,\n    hint: EventHint,\n    currentScope: Scope,\n    isolationScope: Scope,\n  ): PromiseLike<Event | null> {\n    if (this._options.platform) {\n      event.platform = event.platform || this._options.platform;\n    }\n\n    if (this._options.runtime) {\n      event.contexts = {\n        ...event.contexts,\n        runtime: event.contexts?.runtime || this._options.runtime,\n      };\n    }\n\n    if (this._options.serverName) {\n      event.server_name = event.server_name || this._options.serverName;\n    }\n\n    return super._prepareEvent(event, hint, currentScope, isolationScope);\n  }\n}\n\nfunction setCurrentRequestSessionErroredOrCrashed(eventHint?: EventHint): void {\n  const requestSession = getIsolationScope().getScopeData().sdkProcessingMetadata.requestSession;\n  if (requestSession) {\n    // We mutate instead of doing `setSdkProcessingMetadata` because the http integration stores away a particular\n    // isolationScope. If that isolation scope is forked, setting the processing metadata here will not mutate the\n    // original isolation scope that the http integration stored away.\n    const isHandledException = eventHint?.mechanism?.handled ?? true;\n    // A request session can go from \"errored\" -> \"crashed\" but not \"crashed\" -> \"errored\".\n    // Crashed (unhandled exception) is worse than errored (handled exception).\n    if (isHandledException && requestSession.status !== 'crashed') {\n      requestSession.status = 'errored';\n    } else if (!isHandledException) {\n      requestSession.status = 'crashed';\n    }\n  }\n}\n\n/**\n * Estimate the size of a log in bytes.\n *\n * @param log - The log to estimate the size of.\n * @returns The estimated size of the log in bytes.\n */\nfunction estimateLogSizeInBytes(log: Log): number {\n  let weight = 0;\n\n  // Estimate byte size of 2 bytes per character. This is a rough estimate JS strings are stored as UTF-16.\n  if (log.message) {\n    weight += log.message.length * 2;\n  }\n\n  if (log.attributes) {\n    Object.values(log.attributes).forEach(value => {\n      if (Array.isArray(value)) {\n        weight += value.length * estimatePrimitiveSizeInBytes(value[0]);\n      } else if (isPrimitive(value)) {\n        weight += estimatePrimitiveSizeInBytes(value);\n      } else {\n        // For objects values, we estimate the size of the object as 100 bytes\n        weight += 100;\n      }\n    });\n  }\n\n  return weight;\n}\n\nfunction estimatePrimitiveSizeInBytes(value: Primitive): number {\n  if (typeof value === 'string') {\n    return value.length * 2;\n  } else if (typeof value === 'number') {\n    return 8;\n  } else if (typeof value === 'boolean') {\n    return 4;\n  }\n\n  return 0;\n}\n"],"names":["Client","registerSpanErrorInstrumentation","_INTERNAL_flushLogsBuffer","eventFromUnknownInput","resolvedSyncPromise","eventFromMessage","uuid4","DEBUG_BUILD","logger","_getTraceInfoFromScope","createCheckInEnvelope","getIsolationScope","isPrimitive"],"mappings":"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"}},
    {"offset": {"line": 8276, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8280, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/sdk.ts"],"sourcesContent":["import type { Client } from './client';\nimport { getCurrentScope } from './currentScopes';\nimport { DEBUG_BUILD } from './debug-build';\nimport type { ClientOptions } from './types-hoist/options';\nimport { consoleSandbox, logger } from './utils/logger';\n\n/** A class object that can instantiate Client objects. */\nexport type ClientClass<F extends Client, O extends ClientOptions> = new (options: O) => F;\n\n/**\n * Internal function to create a new SDK client instance. The client is\n * installed and then bound to the current scope.\n *\n * @param clientClass The client class to instantiate.\n * @param options Options to pass to the client.\n */\nexport function initAndBind<F extends Client, O extends ClientOptions>(\n  clientClass: ClientClass<F, O>,\n  options: O,\n): Client {\n  if (options.debug === true) {\n    if (DEBUG_BUILD) {\n      logger.enable();\n    } else {\n      // use `console.warn` rather than `logger.warn` since by non-debug bundles have all `logger.x` statements stripped\n      consoleSandbox(() => {\n        // eslint-disable-next-line no-console\n        console.warn('[Sentry] Cannot initialize SDK with `debug` option using a non-debug bundle.');\n      });\n    }\n  }\n  const scope = getCurrentScope();\n  scope.update(options.initialScope);\n\n  const client = new clientClass(options);\n  setCurrentClient(client);\n  client.init();\n  return client;\n}\n\n/**\n * Make the given client the current client.\n */\nexport function setCurrentClient(client: Client): void {\n  getCurrentScope().setClient(client);\n}\n"],"names":["DEBUG_BUILD","logger","consoleSandbox","getCurrentScope"],"mappings":";;;;;;AAMA,wDAAA,GAGA;;;;;;CAMA,GACO,SAAS,YACd,WAAW,EACX,OAAO;IAEP,IAAI,QAAQ,KAAA,KAAU,MAAM;QAC1B,IAAIA,WAAAA,WAAW,EAAE;YACfC,OAAAA,MAAM,CAAC,MAAM;QACnB,OAAW;YACX,kHAAA;YACMC,OAAAA,cAAc,CAAC;gBACrB,sCAAA;gBACQ,QAAQ,IAAI,CAAC;YACrB;QACA;IACA;IACE,MAAM,QAAQC,cAAAA,eAAe;IAC7B,MAAM,MAAM,CAAC,QAAQ,YAAY;IAEjC,MAAM,SAAS,IAAI,YAAY;IAC/B,iBAAiB;IACjB,OAAO,IAAI;IACX,OAAO;AACT;AAEA;;CAEA,GACO,SAAS,iBAAiB,MAAM;IACrCA,cAAAA,eAAe,GAAG,SAAS,CAAC;AAC9B"}},
    {"offset": {"line": 8318, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8322, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/utils/promisebuffer.ts"],"sourcesContent":["import { rejectedSyncPromise, resolvedSyncPromise, SyncPromise } from './syncpromise';\n\nexport interface PromiseBuffer<T> {\n  // exposes the internal array so tests can assert on the state of it.\n  // XXX: this really should not be public api.\n  $: Array<PromiseLike<T>>;\n  add(taskProducer: () => PromiseLike<T>): PromiseLike<T>;\n  drain(timeout?: number): PromiseLike<boolean>;\n}\n\nexport const SENTRY_BUFFER_FULL_ERROR = Symbol.for('SentryBufferFullError');\n\n/**\n * Creates an new PromiseBuffer object with the specified limit\n * @param limit max number of promises that can be stored in the buffer\n */\nexport function makePromiseBuffer<T>(limit?: number): PromiseBuffer<T> {\n  const buffer: Array<PromiseLike<T>> = [];\n\n  function isReady(): boolean {\n    return limit === undefined || buffer.length < limit;\n  }\n\n  /**\n   * Remove a promise from the queue.\n   *\n   * @param task Can be any PromiseLike<T>\n   * @returns Removed promise.\n   */\n  function remove(task: PromiseLike<T>): PromiseLike<T | void> {\n    return buffer.splice(buffer.indexOf(task), 1)[0] || Promise.resolve(undefined);\n  }\n\n  /**\n   * Add a promise (representing an in-flight action) to the queue, and set it to remove itself on fulfillment.\n   *\n   * @param taskProducer A function producing any PromiseLike<T>; In previous versions this used to be `task:\n   *        PromiseLike<T>`, but under that model, Promises were instantly created on the call-site and their executor\n   *        functions therefore ran immediately. Thus, even if the buffer was full, the action still happened. By\n   *        requiring the promise to be wrapped in a function, we can defer promise creation until after the buffer\n   *        limit check.\n   * @returns The original promise.\n   */\n  function add(taskProducer: () => PromiseLike<T>): PromiseLike<T> {\n    if (!isReady()) {\n      return rejectedSyncPromise(SENTRY_BUFFER_FULL_ERROR);\n    }\n\n    // start the task and add its promise to the queue\n    const task = taskProducer();\n    if (buffer.indexOf(task) === -1) {\n      buffer.push(task);\n    }\n    void task\n      .then(() => remove(task))\n      // Use `then(null, rejectionHandler)` rather than `catch(rejectionHandler)` so that we can use `PromiseLike`\n      // rather than `Promise`. `PromiseLike` doesn't have a `.catch` method, making its polyfill smaller. (ES5 didn't\n      // have promises, so TS has to polyfill when down-compiling.)\n      .then(null, () =>\n        remove(task).then(null, () => {\n          // We have to add another catch here because `remove()` starts a new promise chain.\n        }),\n      );\n    return task;\n  }\n\n  /**\n   * Wait for all promises in the queue to resolve or for timeout to expire, whichever comes first.\n   *\n   * @param timeout The time, in ms, after which to resolve to `false` if the queue is still non-empty. Passing `0` (or\n   * not passing anything) will make the promise wait as long as it takes for the queue to drain before resolving to\n   * `true`.\n   * @returns A promise which will resolve to `true` if the queue is already empty or drains before the timeout, and\n   * `false` otherwise\n   */\n  function drain(timeout?: number): PromiseLike<boolean> {\n    return new SyncPromise<boolean>((resolve, reject) => {\n      let counter = buffer.length;\n\n      if (!counter) {\n        return resolve(true);\n      }\n\n      // wait for `timeout` ms and then resolve to `false` (if not cancelled first)\n      const capturedSetTimeout = setTimeout(() => {\n        if (timeout && timeout > 0) {\n          resolve(false);\n        }\n      }, timeout);\n\n      // if all promises resolve in time, cancel the timer and resolve to `true`\n      buffer.forEach(item => {\n        void resolvedSyncPromise(item).then(() => {\n          if (!--counter) {\n            clearTimeout(capturedSetTimeout);\n            resolve(true);\n          }\n        }, reject);\n      });\n    });\n  }\n\n  return {\n    $: buffer,\n    add,\n    drain,\n  };\n}\n"],"names":["rejectedSyncPromise","SyncPromise","resolvedSyncPromise"],"mappings":";;;;AAUO,MAAM,2BAA2B,OAAO,GAAG,CAAC;AAEnD;;;CAGA,GACO,SAAS,kBAAqB,KAAK;IACxC,MAAM,SAAgC,EAAE;IAExC,SAAS;QACP,OAAO,UAAU,aAAa,OAAO,MAAA,GAAS;IAClD;IAEA;;;;;GAKA,GACE,SAAS,OAAO,IAAI;QAClB,OAAO,OAAO,MAAM,CAAC,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC,EAAC,IAAK,QAAQ,OAAO,CAAC;IACxE;IAEA;;;;;;;;;GASA,GACE,SAAS,IAAI,YAAY;QACvB,IAAI,CAAC,WAAW;YACd,OAAOA,YAAAA,mBAAmB,CAAC;QACjC;QAEA,kDAAA;QACI,MAAM,OAAO;QACb,IAAI,OAAO,OAAO,CAAC,UAAU,CAAA,GAAI;YAC/B,OAAO,IAAI,CAAC;QAClB;QACI,KAAK,KACF,IAAI,CAAC,IAAM,OAAO,MACzB,4GAAA;QACA,gHAAA;QACA,6DAAA;SACO,IAAI,CAAC,MAAM,IACV,OAAO,MAAM,IAAI,CAAC,MAAM;YAChC,mFAAA;YACA;QAEI,OAAO;IACX;IAEA;;;;;;;;GAQA,GACE,SAAS,MAAM,OAAO;QACpB,OAAO,IAAIC,YAAAA,WAAW,CAAU,CAAC,SAAS;YACxC,IAAI,UAAU,OAAO,MAAM;YAE3B,IAAI,CAAC,SAAS;gBACZ,OAAO,QAAQ;YACvB;YAEA,6EAAA;YACM,MAAM,qBAAqB,WAAW;gBACpC,IAAI,WAAW,UAAU,GAAG;oBAC1B,QAAQ;gBAClB;YACA,GAAS;YAET,0EAAA;YACM,OAAO,OAAO,CAAC,CAAA;gBACb,KAAKC,YAAAA,mBAAmB,CAAC,MAAM,IAAI,CAAC;oBAClC,IAAI,CAAC,EAAE,SAAS;wBACd,aAAa;wBACb,QAAQ;oBACpB;gBACA,GAAW;YACX;QACA;IACA;IAEE,OAAO;QACL,GAAG;QACH;QACA;IACJ;AACA"}},
    {"offset": {"line": 8408, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8412, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/utils/ratelimit.ts"],"sourcesContent":["import type { DataCategory } from '../types-hoist/datacategory';\nimport type { TransportMakeRequestResponse } from '../types-hoist/transport';\n\n// Intentionally keeping the key broad, as we don't know for sure what rate limit headers get returned from backend\nexport type RateLimits = Record<string, number>;\n\nexport const DEFAULT_RETRY_AFTER = 60 * 1000; // 60 seconds\n\n/**\n * Extracts Retry-After value from the request header or returns default value\n * @param header string representation of 'Retry-After' header\n * @param now current unix timestamp\n *\n */\nexport function parseRetryAfterHeader(header: string, now: number = Date.now()): number {\n  const headerDelay = parseInt(`${header}`, 10);\n  if (!isNaN(headerDelay)) {\n    return headerDelay * 1000;\n  }\n\n  const headerDate = Date.parse(`${header}`);\n  if (!isNaN(headerDate)) {\n    return headerDate - now;\n  }\n\n  return DEFAULT_RETRY_AFTER;\n}\n\n/**\n * Gets the time that the given category is disabled until for rate limiting.\n * In case no category-specific limit is set but a general rate limit across all categories is active,\n * that time is returned.\n *\n * @return the time in ms that the category is disabled until or 0 if there's no active rate limit.\n */\nexport function disabledUntil(limits: RateLimits, dataCategory: DataCategory): number {\n  return limits[dataCategory] || limits.all || 0;\n}\n\n/**\n * Checks if a category is rate limited\n */\nexport function isRateLimited(limits: RateLimits, dataCategory: DataCategory, now: number = Date.now()): boolean {\n  return disabledUntil(limits, dataCategory) > now;\n}\n\n/**\n * Update ratelimits from incoming headers.\n *\n * @return the updated RateLimits object.\n */\nexport function updateRateLimits(\n  limits: RateLimits,\n  { statusCode, headers }: TransportMakeRequestResponse,\n  now: number = Date.now(),\n): RateLimits {\n  const updatedRateLimits: RateLimits = {\n    ...limits,\n  };\n\n  // \"The name is case-insensitive.\"\n  // https://developer.mozilla.org/en-US/docs/Web/API/Headers/get\n  const rateLimitHeader = headers?.['x-sentry-rate-limits'];\n  const retryAfterHeader = headers?.['retry-after'];\n\n  if (rateLimitHeader) {\n    /**\n     * rate limit headers are of the form\n     *     <header>,<header>,..\n     * where each <header> is of the form\n     *     <retry_after>: <categories>: <scope>: <reason_code>: <namespaces>\n     * where\n     *     <retry_after> is a delay in seconds\n     *     <categories> is the event type(s) (error, transaction, etc) being rate limited and is of the form\n     *         <category>;<category>;...\n     *     <scope> is what's being limited (org, project, or key) - ignored by SDK\n     *     <reason_code> is an arbitrary string like \"org_quota\" - ignored by SDK\n     *     <namespaces> Semicolon-separated list of metric namespace identifiers. Defines which namespace(s) will be affected.\n     *         Only present if rate limit applies to the metric_bucket data category.\n     */\n    for (const limit of rateLimitHeader.trim().split(',')) {\n      const [retryAfter, categories, , , namespaces] = limit.split(':', 5) as [string, ...string[]];\n      const headerDelay = parseInt(retryAfter, 10);\n      const delay = (!isNaN(headerDelay) ? headerDelay : 60) * 1000; // 60sec default\n      if (!categories) {\n        updatedRateLimits.all = now + delay;\n      } else {\n        for (const category of categories.split(';')) {\n          if (category === 'metric_bucket') {\n            // namespaces will be present when category === 'metric_bucket'\n            if (!namespaces || namespaces.split(';').includes('custom')) {\n              updatedRateLimits[category] = now + delay;\n            }\n          } else {\n            updatedRateLimits[category] = now + delay;\n          }\n        }\n      }\n    }\n  } else if (retryAfterHeader) {\n    updatedRateLimits.all = now + parseRetryAfterHeader(retryAfterHeader, now);\n  } else if (statusCode === 429) {\n    updatedRateLimits.all = now + 60 * 1000;\n  }\n\n  return updatedRateLimits;\n}\n"],"names":[],"mappings":";;;AAGA,mHAAA;AAGO,MAAM,sBAAsB,KAAK,MAAI,aAAA;AAE5C;;;;;CAKA,GACO,SAAS,sBAAsB,MAAM,EAAU,MAAc,KAAK,GAAG,EAAE;IAC5E,MAAM,cAAc,SAAS,CAAC,EAAA,OAAA,CAAA,EAAA;IACA,IAAA,CAAA,MAAA,cAAA;QACA,OAAA,cAAA;IACA;IAEA,MAAA,aAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAAA,CAAA;IACA,IAAA,CAAA,MAAA,aAAA;QACA,OAAA,aAAA;IACA;IAEA,OAAA;AACA;AAEA;;;;;;CAMA,GACA,SAAA,cAAA,MAAA,EAAA,YAAA;IACA,OAAA,MAAA,CAAA,aAAA,IAAA,OAAA,GAAA,IAAA;AACA;AAEA;;CAEA,GACA,SAAA,cAAA,MAAA,EAAA,YAAA,EAAA,MAAA,KAAA,GAAA,EAAA;IACA,OAAA,cAAA,QAAA,gBAAA;AACA;AAEA;;;;CAIA,GACA,SAAA,iBACA,MAAA,EACA,EAAA,UAAA,EAAA,OAAA,EAAA,EACA,MAAA,KAAA,GAAA,EAAA;IAEA,MAAA,oBAAA;QACA,GAAA,MAAA;IACA;IAEA,kCAAA;IACA,+DAAA;IACA,MAAA,kBAAA,SAAA,CAAA,uBAAA;IACA,MAAA,mBAAA,SAAA,CAAA,cAAA;IAEA,IAAA,iBAAA;QACA;;;;;;;;;;;;;KAaA,GACA,KAAA,MAAA,SAAA,gBAAA,IAAA,GAAA,KAAA,CAAA,KAAA;YACA,MAAA,CAAA,YAAA,gBAAA,WAAA,GAAA,MAAA,KAAA,CAAA,KAAA;YACA,MAAA,cAAA,SAAA,YAAA;YACA,MAAA,QAAA,CAAA,CAAA,MAAA,eAAA,cAAA,EAAA,IAAA,MAAA,gBAAA;YACA,IAAA,CAAA,YAAA;gBACA,kBAAA,GAAA,GAAA,MAAA;YACA,OAAA;gBACA,KAAA,MAAA,YAAA,WAAA,KAAA,CAAA,KAAA;oBACA,IAAA,aAAA,iBAAA;wBACA,+DAAA;wBACA,IAAA,CAAA,cAAA,WAAA,KAAA,CAAA,KAAA,QAAA,CAAA,WAAA;4BACA,iBAAA,CAAA,SAAA,GAAA,MAAA;wBACA;oBACA,OAAA;wBACA,iBAAA,CAAA,SAAA,GAAA,MAAA;oBACA;gBACA;YACA;QACA;IACA,OAAA,IAAA,kBAAA;QACA,kBAAA,GAAA,GAAA,MAAA,sBAAA,kBAAA;IACA,OAAA,IAAA,eAAA,KAAA;QACA,kBAAA,GAAA,GAAA,MAAA,KAAA;IACA;IAEA,OAAA;AACA"}},
    {"offset": {"line": 8504, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8508, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/transports/base.ts"],"sourcesContent":["import { DEBUG_BUILD } from '../debug-build';\nimport type { EventDropReason } from '../types-hoist/clientreport';\nimport type { Envelope, EnvelopeItem } from '../types-hoist/envelope';\nimport type {\n  InternalBaseTransportOptions,\n  Transport,\n  TransportMakeRequestResponse,\n  TransportRequestExecutor,\n} from '../types-hoist/transport';\nimport {\n  createEnvelope,\n  envelopeItemTypeToDataCategory,\n  forEachEnvelopeItem,\n  serializeEnvelope,\n} from '../utils/envelope';\nimport { logger } from '../utils/logger';\nimport { type PromiseBuffer, makePromiseBuffer, SENTRY_BUFFER_FULL_ERROR } from '../utils/promisebuffer';\nimport { type RateLimits, isRateLimited, updateRateLimits } from '../utils/ratelimit';\nimport { resolvedSyncPromise } from '../utils/syncpromise';\n\nexport const DEFAULT_TRANSPORT_BUFFER_SIZE = 64;\n\n/**\n * Creates an instance of a Sentry `Transport`\n *\n * @param options\n * @param makeRequest\n */\nexport function createTransport(\n  options: InternalBaseTransportOptions,\n  makeRequest: TransportRequestExecutor,\n  buffer: PromiseBuffer<TransportMakeRequestResponse> = makePromiseBuffer(\n    options.bufferSize || DEFAULT_TRANSPORT_BUFFER_SIZE,\n  ),\n): Transport {\n  let rateLimits: RateLimits = {};\n  const flush = (timeout?: number): PromiseLike<boolean> => buffer.drain(timeout);\n\n  function send(envelope: Envelope): PromiseLike<TransportMakeRequestResponse> {\n    const filteredEnvelopeItems: EnvelopeItem[] = [];\n\n    // Drop rate limited items from envelope\n    forEachEnvelopeItem(envelope, (item, type) => {\n      const dataCategory = envelopeItemTypeToDataCategory(type);\n      if (isRateLimited(rateLimits, dataCategory)) {\n        options.recordDroppedEvent('ratelimit_backoff', dataCategory);\n      } else {\n        filteredEnvelopeItems.push(item);\n      }\n    });\n\n    // Skip sending if envelope is empty after filtering out rate limited events\n    if (filteredEnvelopeItems.length === 0) {\n      return resolvedSyncPromise({});\n    }\n\n    const filteredEnvelope: Envelope = createEnvelope(envelope[0], filteredEnvelopeItems as (typeof envelope)[1]);\n\n    // Creates client report for each item in an envelope\n    const recordEnvelopeLoss = (reason: EventDropReason): void => {\n      forEachEnvelopeItem(filteredEnvelope, (item, type) => {\n        options.recordDroppedEvent(reason, envelopeItemTypeToDataCategory(type));\n      });\n    };\n\n    const requestTask = (): PromiseLike<TransportMakeRequestResponse> =>\n      makeRequest({ body: serializeEnvelope(filteredEnvelope) }).then(\n        response => {\n          // We don't want to throw on NOK responses, but we want to at least log them\n          if (response.statusCode !== undefined && (response.statusCode < 200 || response.statusCode >= 300)) {\n            DEBUG_BUILD && logger.warn(`Sentry responded with status code ${response.statusCode} to sent event.`);\n          }\n\n          rateLimits = updateRateLimits(rateLimits, response);\n          return response;\n        },\n        error => {\n          recordEnvelopeLoss('network_error');\n          DEBUG_BUILD && logger.error('Encountered error running transport request:', error);\n          throw error;\n        },\n      );\n\n    return buffer.add(requestTask).then(\n      result => result,\n      error => {\n        if (error === SENTRY_BUFFER_FULL_ERROR) {\n          DEBUG_BUILD && logger.error('Skipped sending event because buffer is full.');\n          recordEnvelopeLoss('queue_overflow');\n          return resolvedSyncPromise({});\n        } else {\n          throw error;\n        }\n      },\n    );\n  }\n\n  return {\n    send,\n    flush,\n  };\n}\n"],"names":["makePromiseBuffer","envelope","forEachEnvelopeItem","envelopeItemTypeToDataCategory","isRateLimited","resolvedSyncPromise","createEnvelope","serializeEnvelope","DEBUG_BUILD","logger","updateRateLimits","SENTRY_BUFFER_FULL_ERROR"],"mappings":";;;;;;;;;AAoBO,MAAM,gCAAgC;AAE7C;;;;;CAKA,GACO,SAAS,gBACd,OAAO,EACP,WAAW,EACX,SAAsDA,cAAAA,iBAAiB,CACrE,QAAQ,UAAA,IAAc,8BACvB;IAED,IAAI,aAAyB,CAAA;IAC7B,MAAM,QAAQ,CAAC,UAA2C,OAAO,KAAK,CAAC;IAEvE,SAAS,KAAKC,UAAQ;QACpB,MAAM,wBAAwC,EAAE;QAEpD,wCAAA;QACIC,SAAAA,mBAAmB,CAACD,YAAU,CAAC,MAAM;YACnC,MAAM,eAAeE,SAAAA,8BAA8B,CAAC;YACpD,IAAIC,UAAAA,aAAa,CAAC,YAAY,eAAe;gBAC3C,QAAQ,kBAAkB,CAAC,qBAAqB;YACxD,OAAa;gBACL,sBAAsB,IAAI,CAAC;YACnC;QACA;QAEA,4EAAA;QACI,IAAI,sBAAsB,MAAA,KAAW,GAAG;YACtC,OAAOC,YAAAA,mBAAmB,CAAC,CAAA;QACjC;QAEI,MAAM,mBAA6BC,SAAAA,cAAc,CAACL,UAAQ,CAAC,EAAE,EAAE;QAEnE,qDAAA;QACI,MAAM,qBAAqB,CAAC;YAC1BC,SAAAA,mBAAmB,CAAC,kBAAkB,CAAC,MAAM;gBAC3C,QAAQ,kBAAkB,CAAC,QAAQC,SAAAA,8BAA8B,CAAC;YAC1E;QACA;QAEI,MAAM,cAAc,IAClB,YAAY;gBAAE,MAAMI,SAAAA,iBAAiB,CAAC;YAAgB,GAAK,IAAI,CAC7D,CAAA;gBACR,4EAAA;gBACU,IAAI,SAAS,UAAA,KAAe,aAAA,CAAc,SAAS,UAAA,GAAa,OAAO,SAAS,UAAA,IAAc,GAAG,GAAG;oBAClGC,WAAAA,WAAA,IAAeC,OAAAA,MAAM,CAAC,IAAI,CAAC,CAAC,kCAAkC,EAAE,SAAS,UAAU,CAAC,eAAe,CAAC;gBAChH;gBAEU,aAAaC,UAAAA,gBAAgB,CAAC,YAAY;gBAC1C,OAAO;YACjB,GACQ,CAAA;gBACE,mBAAmB;gBACnBF,WAAAA,WAAA,IAAeC,OAAAA,MAAM,CAAC,KAAK,CAAC,gDAAgD;gBAC5E,MAAM;YAChB;QAGI,OAAO,OAAO,GAAG,CAAC,aAAa,IAAI,CACjC,CAAA,SAAU,QACV,CAAA;YACE,IAAI,UAAUE,cAAAA,wBAAwB,EAAE;gBACtCH,WAAAA,WAAAA,IAAeC,OAAAA,MAAM,CAAC,KAAK,CAAC;gBAC5B,mBAAmB;gBACnB,OAAOJ,YAAAA,mBAAmB,CAAC,CAAA;YACrC,OAAe;gBACL,MAAM;YAChB;QACA;IAEA;IAEE,OAAO;QACL;QACA;IACJ;AACA"}},
    {"offset": {"line": 8579, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8583, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/transports/offline.ts"],"sourcesContent":["import { DEBUG_BUILD } from '../debug-build';\nimport type { Envelope } from '../types-hoist/envelope';\nimport type { InternalBaseTransportOptions, Transport, TransportMakeRequestResponse } from '../types-hoist/transport';\nimport { envelopeContainsItemType } from '../utils/envelope';\nimport { logger } from '../utils/logger';\nimport { parseRetryAfterHeader } from '../utils/ratelimit';\n\nexport const MIN_DELAY = 100; // 100 ms\nexport const START_DELAY = 5_000; // 5 seconds\nconst MAX_DELAY = 3.6e6; // 1 hour\n\nexport interface OfflineStore {\n  push(env: Envelope): Promise<void>;\n  unshift(env: Envelope): Promise<void>;\n  shift(): Promise<Envelope | undefined>;\n}\n\nexport type CreateOfflineStore = (options: OfflineTransportOptions) => OfflineStore;\n\nexport interface OfflineTransportOptions extends InternalBaseTransportOptions {\n  /**\n   * A function that creates the offline store instance.\n   */\n  createStore?: CreateOfflineStore;\n\n  /**\n   * Flush the offline store shortly after startup.\n   *\n   * Defaults: false\n   */\n  flushAtStartup?: boolean;\n\n  /**\n   * Called before an event is stored.\n   *\n   * Return false to drop the envelope rather than store it.\n   *\n   * @param envelope The envelope that failed to send.\n   * @param error The error that occurred.\n   * @param retryDelay The current retry delay in milliseconds.\n   * @returns Whether the envelope should be stored.\n   */\n  shouldStore?: (envelope: Envelope, error: Error, retryDelay: number) => boolean | Promise<boolean>;\n\n  /**\n   * Should an attempt be made to send the envelope to Sentry.\n   *\n   * If this function is supplied and returns false, `shouldStore` will be called to determine if the envelope should be stored.\n   *\n   * @param envelope The envelope that will be sent.\n   * @returns Whether we should attempt to send the envelope\n   */\n  shouldSend?: (envelope: Envelope) => boolean | Promise<boolean>;\n}\n\ntype Timer = number | { unref?: () => void };\n\n/**\n * Wraps a transport and stores and retries events when they fail to send.\n *\n * @param createTransport The transport to wrap.\n */\nexport function makeOfflineTransport<TO>(\n  createTransport: (options: TO) => Transport,\n): (options: TO & OfflineTransportOptions) => Transport {\n  function log(...args: unknown[]): void {\n    DEBUG_BUILD && logger.info('[Offline]:', ...args);\n  }\n\n  return options => {\n    const transport = createTransport(options);\n\n    if (!options.createStore) {\n      throw new Error('No `createStore` function was provided');\n    }\n\n    const store = options.createStore(options);\n\n    let retryDelay = START_DELAY;\n    let flushTimer: Timer | undefined;\n\n    function shouldQueue(env: Envelope, error: Error, retryDelay: number): boolean | Promise<boolean> {\n      // We want to drop client reports because they can be generated when we retry sending events while offline.\n      if (envelopeContainsItemType(env, ['client_report'])) {\n        return false;\n      }\n\n      if (options.shouldStore) {\n        return options.shouldStore(env, error, retryDelay);\n      }\n\n      return true;\n    }\n\n    function flushIn(delay: number): void {\n      if (flushTimer) {\n        clearTimeout(flushTimer as ReturnType<typeof setTimeout>);\n      }\n\n      flushTimer = setTimeout(async () => {\n        flushTimer = undefined;\n\n        const found = await store.shift();\n        if (found) {\n          log('Attempting to send previously queued event');\n\n          // We should to update the sent_at timestamp to the current time.\n          found[0].sent_at = new Date().toISOString();\n\n          void send(found, true).catch(e => {\n            log('Failed to retry sending', e);\n          });\n        }\n      }, delay) as Timer;\n\n      // We need to unref the timer in node.js, otherwise the node process never exit.\n      if (typeof flushTimer !== 'number' && flushTimer.unref) {\n        flushTimer.unref();\n      }\n    }\n\n    function flushWithBackOff(): void {\n      if (flushTimer) {\n        return;\n      }\n\n      flushIn(retryDelay);\n\n      retryDelay = Math.min(retryDelay * 2, MAX_DELAY);\n    }\n\n    async function send(envelope: Envelope, isRetry: boolean = false): Promise<TransportMakeRequestResponse> {\n      // We queue all replay envelopes to avoid multiple replay envelopes being sent at the same time. If one fails, we\n      // need to retry them in order.\n      if (!isRetry && envelopeContainsItemType(envelope, ['replay_event', 'replay_recording'])) {\n        await store.push(envelope);\n        flushIn(MIN_DELAY);\n        return {};\n      }\n\n      try {\n        if (options.shouldSend && (await options.shouldSend(envelope)) === false) {\n          throw new Error('Envelope not sent because `shouldSend` callback returned false');\n        }\n\n        const result = await transport.send(envelope);\n\n        let delay = MIN_DELAY;\n\n        if (result) {\n          // If there's a retry-after header, use that as the next delay.\n          if (result.headers?.['retry-after']) {\n            delay = parseRetryAfterHeader(result.headers['retry-after']);\n          } else if (result.headers?.['x-sentry-rate-limits']) {\n            delay = 60_000; // 60 seconds\n          } // If we have a server error, return now so we don't flush the queue.\n          else if ((result.statusCode || 0) >= 400) {\n            return result;\n          }\n        }\n\n        flushIn(delay);\n        retryDelay = START_DELAY;\n        return result;\n      } catch (e) {\n        if (await shouldQueue(envelope, e as Error, retryDelay)) {\n          // If this envelope was a retry, we want to add it to the front of the queue so it's retried again first.\n          if (isRetry) {\n            await store.unshift(envelope);\n          } else {\n            await store.push(envelope);\n          }\n          flushWithBackOff();\n          log('Error sending. Event queued.', e as Error);\n          return {};\n        } else {\n          throw e;\n        }\n      }\n    }\n\n    if (options.flushAtStartup) {\n      flushWithBackOff();\n    }\n\n    return {\n      send,\n      flush: timeout => {\n        // If there's no timeout, we should attempt to flush the offline queue.\n        if (timeout === undefined) {\n          retryDelay = START_DELAY;\n          flushIn(MIN_DELAY);\n        }\n\n        return transport.flush(timeout);\n      },\n    };\n  };\n}\n"],"names":["DEBUG_BUILD","logger","envelopeContainsItemType","envelope","parseRetryAfterHeader"],"mappings":"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"}},
    {"offset": {"line": 8714, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8718, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/transports/multiplexed.ts"],"sourcesContent":["import { getEnvelopeEndpointWithUrlEncodedAuth } from '../api';\nimport type { Envelope, EnvelopeItemType, EventItem } from '../types-hoist/envelope';\nimport type { Event } from '../types-hoist/event';\nimport type { BaseTransportOptions, Transport, TransportMakeRequestResponse } from '../types-hoist/transport';\nimport { dsnFromString } from '../utils/dsn';\nimport { createEnvelope, forEachEnvelopeItem } from '../utils/envelope';\n\ninterface MatchParam {\n  /** The envelope to be sent */\n  envelope: Envelope;\n  /**\n   * A function that returns an event from the envelope if one exists. You can optionally pass an array of envelope item\n   * types to filter by - only envelopes matching the given types will be multiplexed.\n   * Allowed values are: 'event', 'transaction', 'profile', 'replay_event'\n   *\n   * @param types Defaults to ['event']\n   */\n  getEvent(types?: EnvelopeItemType[]): Event | undefined;\n}\n\ntype RouteTo = { dsn: string; release: string };\ntype Matcher = (param: MatchParam) => (string | RouteTo)[];\n\n/**\n * Gets an event from an envelope.\n *\n * This is only exported for use in the tests\n */\nexport function eventFromEnvelope(env: Envelope, types: EnvelopeItemType[]): Event | undefined {\n  let event: Event | undefined;\n\n  forEachEnvelopeItem(env, (item, type) => {\n    if (types.includes(type)) {\n      event = Array.isArray(item) ? (item as EventItem)[1] : undefined;\n    }\n    // bail out if we found an event\n    return !!event;\n  });\n\n  return event;\n}\n\n/**\n * Creates a transport that overrides the release on all events.\n */\nfunction makeOverrideReleaseTransport<TO extends BaseTransportOptions>(\n  createTransport: (options: TO) => Transport,\n  release: string,\n): (options: TO) => Transport {\n  return options => {\n    const transport = createTransport(options);\n\n    return {\n      ...transport,\n      send: async (envelope: Envelope): Promise<TransportMakeRequestResponse> => {\n        const event = eventFromEnvelope(envelope, ['event', 'transaction', 'profile', 'replay_event']);\n\n        if (event) {\n          event.release = release;\n        }\n        return transport.send(envelope);\n      },\n    };\n  };\n}\n\n/** Overrides the DSN in the envelope header  */\nfunction overrideDsn(envelope: Envelope, dsn: string): Envelope {\n  return createEnvelope(\n    dsn\n      ? {\n          ...envelope[0],\n          dsn,\n        }\n      : envelope[0],\n    envelope[1],\n  );\n}\n\n/**\n * Creates a transport that can send events to different DSNs depending on the envelope contents.\n */\nexport function makeMultiplexedTransport<TO extends BaseTransportOptions>(\n  createTransport: (options: TO) => Transport,\n  matcher: Matcher,\n): (options: TO) => Transport {\n  return options => {\n    const fallbackTransport = createTransport(options);\n    const otherTransports: Map<string, Transport> = new Map();\n\n    function getTransport(dsn: string, release: string | undefined): [string, Transport] | undefined {\n      // We create a transport for every unique dsn/release combination as there may be code from multiple releases in\n      // use at the same time\n      const key = release ? `${dsn}:${release}` : dsn;\n\n      let transport = otherTransports.get(key);\n\n      if (!transport) {\n        const validatedDsn = dsnFromString(dsn);\n        if (!validatedDsn) {\n          return undefined;\n        }\n        const url = getEnvelopeEndpointWithUrlEncodedAuth(validatedDsn, options.tunnel);\n\n        transport = release\n          ? makeOverrideReleaseTransport(createTransport, release)({ ...options, url })\n          : createTransport({ ...options, url });\n\n        otherTransports.set(key, transport);\n      }\n\n      return [dsn, transport];\n    }\n\n    async function send(envelope: Envelope): Promise<TransportMakeRequestResponse> {\n      function getEvent(types?: EnvelopeItemType[]): Event | undefined {\n        const eventTypes: EnvelopeItemType[] = types?.length ? types : ['event'];\n        return eventFromEnvelope(envelope, eventTypes);\n      }\n\n      const transports = matcher({ envelope, getEvent })\n        .map(result => {\n          if (typeof result === 'string') {\n            return getTransport(result, undefined);\n          } else {\n            return getTransport(result.dsn, result.release);\n          }\n        })\n        .filter((t): t is [string, Transport] => !!t);\n\n      // If we have no transports to send to, use the fallback transport\n      // Don't override the DSN in the header for the fallback transport. '' is falsy\n      const transportsWithFallback: [string, Transport][] = transports.length ? transports : [['', fallbackTransport]];\n\n      const results = (await Promise.all(\n        transportsWithFallback.map(([dsn, transport]) => transport.send(overrideDsn(envelope, dsn))),\n      )) as [TransportMakeRequestResponse, ...TransportMakeRequestResponse[]];\n\n      return results[0];\n    }\n\n    async function flush(timeout: number | undefined): Promise<boolean> {\n      const allTransports = [...otherTransports.values(), fallbackTransport];\n      const results = await Promise.all(allTransports.map(transport => transport.flush(timeout)));\n      return results.every(r => r);\n    }\n\n    return {\n      send,\n      flush,\n    };\n  };\n}\n"],"names":["forEachEnvelopeItem","envelope","createEnvelope","dsn","dsnFromString","getEnvelopeEndpointWithUrlEncodedAuth"],"mappings":";;;;;;AAuBA;;;;CAIA,GACO,SAAS,kBAAkB,GAAG,EAAY,KAAK;IACpD,IAAI;IAEJA,SAAAA,mBAAmB,CAAC,KAAK,CAAC,MAAM;QAC9B,IAAI,MAAM,QAAQ,CAAC,OAAO;YACxB,QAAQ,MAAM,OAAO,CAAC,QAAQ,AAAC,IAAA,CAAmB,EAAC,GAAI;QAC7D;QACA,gCAAA;QACI,OAAO,CAAC,CAAC;IACb;IAEE,OAAO;AACT;AAEA;;CAEA,GACA,SAAS,6BACP,eAAe,EACf,OAAO;IAEP,OAAO,CAAA;QACL,MAAM,YAAY,gBAAgB;QAElC,OAAO;YACL,GAAG,SAAS;YACZ,MAAM,OAAO;gBACX,MAAM,QAAQ,kBAAkB,UAAU;oBAAC;oBAAS;oBAAe;oBAAW;iBAAe;gBAE7F,IAAI,OAAO;oBACT,MAAM,OAAA,GAAU;gBAC1B;gBACQ,OAAO,UAAU,IAAI,CAAC;YAC9B;QACA;IACA;AACA;AAEA,8CAAA,GACA,SAAS,YAAYC,UAAQ,EAAY,GAAG;IAC1C,OAAOC,SAAAA,cAAc,CACnB,MACI;QACE,GAAGD,UAAQ,CAAC,EAAE;QACd;IACV,IACQA,UAAQ,CAAC,EAAE,EACfA,UAAQ,CAAC,EAAE;AAEf;AAEA;;CAEA,GACO,SAAS,yBACd,eAAe,EACf,OAAO;IAEP,OAAO,CAAA;QACL,MAAM,oBAAoB,gBAAgB;QAC1C,MAAM,kBAA0C,IAAI;QAEpD,SAAS,aAAaE,KAAG,EAAU,OAAO;YAC9C,gHAAA;YACA,uBAAA;YACM,MAAM,MAAM,UAAU,CAAC,EAAAA,MAAA,CAAA,EAAA,QAAA,CAAA,GAAAA;YAEA,IAAA,YAAA,gBAAA,GAAA,CAAA;YAEA,IAAA,CAAA,WAAA;gBACA,MAAA,eAAAC,IAAAA,aAAA,CAAAD;gBACA,IAAA,CAAA,cAAA;oBACA,OAAA;gBACA;gBACA,MAAA,MAAAE,IAAAA,qCAAA,CAAA,cAAA,QAAA,MAAA;gBAEA,YAAA,UACA,6BAAA,iBAAA,SAAA;oBAAA,GAAA,OAAA;oBAAA;gBAAA,KACA,gBAAA;oBAAA,GAAA,OAAA;oBAAA;gBAAA;gBAEA,gBAAA,GAAA,CAAA,KAAA;YACA;YAEA,OAAA;gBAAAF;gBAAA;aAAA;QACA;QAEA,eAAA,KAAA,QAAA;YACA,SAAA,SAAA,KAAA;gBACA,MAAA,aAAA,OAAA,SAAA,QAAA;oBAAA;iBAAA;gBACA,OAAA,kBAAA,UAAA;YACA;YAEA,MAAA,aAAA,QAAA;gBAAA;gBAAA;YAAA,GACA,GAAA,CAAA,CAAA;gBACA,IAAA,OAAA,WAAA,UAAA;oBACA,OAAA,aAAA,QAAA;gBACA,OAAA;oBACA,OAAA,aAAA,OAAA,GAAA,EAAA,OAAA,OAAA;gBACA;YACA,GACA,MAAA,CAAA,CAAA,IAAA,CAAA,CAAA;YAEA,kEAAA;YACA,+EAAA;YACA,MAAA,yBAAA,WAAA,MAAA,GAAA,aAAA;gBAAA;oBAAA;oBAAA;iBAAA;aAAA;YAEA,MAAA,UAAA,MAAA,QAAA,GAAA,CACA,uBAAA,GAAA,CAAA,CAAA,CAAA,KAAA,UAAA,GAAA,UAAA,IAAA,CAAA,YAAA,UAAA;YAGA,OAAA,OAAA,CAAA,EAAA;QACA;QAEA,eAAA,MAAA,OAAA;YACA,MAAA,gBAAA;mBAAA,gBAAA,MAAA;gBAAA;aAAA;YACA,MAAA,UAAA,MAAA,QAAA,GAAA,CAAA,cAAA,GAAA,CAAA,CAAA,YAAA,UAAA,KAAA,CAAA;YACA,OAAA,QAAA,KAAA,CAAA,CAAA,IAAA;QACA;QAEA,OAAA;YACA;YACA;QACA;IACA;AACA"}},
    {"offset": {"line": 8842, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8846, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/utils/isSentryRequestUrl.ts"],"sourcesContent":["import type { Client } from '../client';\nimport type { DsnComponents } from '../types-hoist/dsn';\n\n/**\n * Checks whether given url points to Sentry server\n *\n * @param url url to verify\n */\nexport function isSentryRequestUrl(url: string, client: Client | undefined): boolean {\n  const dsn = client?.getDsn();\n  const tunnel = client?.getOptions().tunnel;\n  return checkDsn(url, dsn) || checkTunnel(url, tunnel);\n}\n\nfunction checkTunnel(url: string, tunnel: string | undefined): boolean {\n  if (!tunnel) {\n    return false;\n  }\n\n  return removeTrailingSlash(url) === removeTrailingSlash(tunnel);\n}\n\nfunction checkDsn(url: string, dsn: DsnComponents | undefined): boolean {\n  return dsn ? url.includes(dsn.host) : false;\n}\n\nfunction removeTrailingSlash(str: string): string {\n  return str[str.length - 1] === '/' ? str.slice(0, -1) : str;\n}\n"],"names":[],"mappings":";;;AAGA;;;;CAIA,GACO,SAAS,mBAAmB,GAAG,EAAU,MAAM;IACpD,MAAM,MAAM,QAAQ;IACpB,MAAM,SAAS,QAAQ,aAAa;IACpC,OAAO,SAAS,KAAK,QAAQ,YAAY,KAAK;AAChD;AAEA,SAAS,YAAY,GAAG,EAAU,MAAM;IACtC,IAAI,CAAC,QAAQ;QACX,OAAO;IACX;IAEE,OAAO,oBAAoB,SAAS,oBAAoB;AAC1D;AAEA,SAAS,SAAS,GAAG,EAAU,GAAG;IAChC,OAAO,MAAM,IAAI,QAAQ,CAAC,IAAI,IAAI,IAAI;AACxC;AAEA,SAAS,oBAAoB,GAAG;IAC9B,OAAO,GAAG,CAAC,IAAI,MAAA,GAAS,EAAC,KAAM,MAAM,IAAI,KAAK,CAAC,GAAG,CAAA,KAAM;AAC1D"}},
    {"offset": {"line": 8871, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8875, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/utils/parameterize.ts"],"sourcesContent":["import type { ParameterizedString } from '../types-hoist/parameterize';\n\n/**\n * Tagged template function which returns parameterized representation of the message\n * For example: parameterize`This is a log statement with ${x} and ${y} params`, would return:\n * \"__sentry_template_string__\": 'This is a log statement with %s and %s params',\n * \"__sentry_template_values__\": ['first', 'second']\n *\n * @param strings An array of string values splitted between expressions\n * @param values Expressions extracted from template string\n *\n * @returns A `ParameterizedString` object that can be passed into `captureMessage` or Sentry.logger.X methods.\n */\nexport function parameterize(strings: TemplateStringsArray, ...values: unknown[]): ParameterizedString {\n  const formatted = new String(String.raw(strings, ...values)) as ParameterizedString;\n  formatted.__sentry_template_string__ = strings.join('\\x00').replace(/%/g, '%%').replace(/\\0/g, '%s');\n  formatted.__sentry_template_values__ = values;\n  return formatted;\n}\n\n/**\n * Tagged template function which returns parameterized representation of the message.\n *\n * @param strings An array of string values splitted between expressions\n * @param values Expressions extracted from template string\n * @returns A `ParameterizedString` object that can be passed into `captureMessage` or Sentry.logger.X methods.\n */\nexport const fmt = parameterize;\n"],"names":[],"mappings":";;;AAEA;;;;;;;;;;CAUA,GACO,SAAS,aAAa,OAAO,EAAwB,GAAG,MAAM;IACnE,MAAM,YAAY,IAAI,OAAO,OAAO,GAAG,CAAC,YAAY;IACpD,UAAU,0BAAA,GAA6B,QAAQ,IAAI,CAAC,QAAQ,OAAO,CAAC,MAAM,MAAM,OAAO,CAAC,OAAO;IAC/F,UAAU,0BAAA,GAA6B;IACvC,OAAO;AACT;AAEA;;;;;;CAMA,GACO,MAAM,MAAM"}},
    {"offset": {"line": 8903, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8907, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/utils/ipAddress.ts"],"sourcesContent":["import type { Session, SessionAggregates } from '../types-hoist/session';\nimport type { User } from '../types-hoist/user';\n\n// By default, we want to infer the IP address, unless this is explicitly set to `null`\n// We do this after all other processing is done\n// If `ip_address` is explicitly set to `null` or a value, we leave it as is\n\n/**\n * @internal\n */\nexport function addAutoIpAddressToUser(objWithMaybeUser: { user?: User | null }): void {\n  if (objWithMaybeUser.user?.ip_address === undefined) {\n    objWithMaybeUser.user = {\n      ...objWithMaybeUser.user,\n      ip_address: '{{auto}}',\n    };\n  }\n}\n\n/**\n * @internal\n */\nexport function addAutoIpAddressToSession(session: Session | SessionAggregates): void {\n  if ('aggregates' in session) {\n    if (session.attrs?.['ip_address'] === undefined) {\n      session.attrs = {\n        ...session.attrs,\n        ip_address: '{{auto}}',\n      };\n    }\n  } else {\n    if (session.ipAddress === undefined) {\n      session.ipAddress = '{{auto}}';\n    }\n  }\n}\n"],"names":[],"mappings":";;;AAGA,uFAAA;AACA,gDAAA;AACA,4EAAA;AAEA;;CAEA,GACO,SAAS,uBAAuB,gBAAgB;IACrD,IAAI,iBAAiB,IAAI,EAAE,eAAe,WAAW;QACnD,iBAAiB,IAAA,GAAO;YACtB,GAAG,iBAAiB,IAAI;YACxB,YAAY;QAClB;IACA;AACA;AAEA;;CAEA,GACO,SAAS,0BAA0B,OAAO;IAC/C,IAAI,gBAAgB,SAAS;QAC3B,IAAI,QAAQ,KAAK,EAAA,CAAG,aAAY,KAAM,WAAW;YAC/C,QAAQ,KAAA,GAAQ;gBACd,GAAG,QAAQ,KAAK;gBAChB,YAAY;YACpB;QACA;IACA,OAAS;QACL,IAAI,QAAQ,SAAA,KAAc,WAAW;YACnC,QAAQ,SAAA,GAAY;QAC1B;IACA;AACA"}},
    {"offset": {"line": 8941, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8945, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/utils/sdkMetadata.ts"],"sourcesContent":["import type { Options } from '../types-hoist/options';\nimport { SDK_VERSION } from '../utils/version';\n\n/**\n * A builder for the SDK metadata in the options for the SDK initialization.\n *\n * Note: This function is identical to `buildMetadata` in Remix and NextJS and SvelteKit.\n * We don't extract it for bundle size reasons.\n * @see https://github.com/getsentry/sentry-javascript/pull/7404\n * @see https://github.com/getsentry/sentry-javascript/pull/4196\n *\n * If you make changes to this function consider updating the others as well.\n *\n * @param options SDK options object that gets mutated\n * @param names list of package names\n */\nexport function applySdkMetadata(options: Options, name: string, names = [name], source = 'npm'): void {\n  const metadata = options._metadata || {};\n\n  if (!metadata.sdk) {\n    metadata.sdk = {\n      name: `sentry.javascript.${name}`,\n      packages: names.map(name => ({\n        name: `${source}:@sentry/${name}`,\n        version: SDK_VERSION,\n      })),\n      version: SDK_VERSION,\n    };\n  }\n\n  options._metadata = metadata;\n}\n"],"names":["SDK_VERSION"],"mappings":";;;;AAGA;;;;;;;;;;;;CAYA,GACO,SAAS,iBAAiB,OAAO,EAAW,IAAI,EAAU,QAAQ;IAAC;CAAK,EAAE,SAAS,KAAK;IAC7F,MAAM,WAAW,QAAQ,SAAA,IAAa,CAAA;IAEtC,IAAI,CAAC,SAAS,GAAG,EAAE;QACjB,SAAS,GAAA,GAAM;YACb,MAAM,CAAC,kBAAkB,EAAE,KAAK,CAAA;YACA,UAAA,MAAA,GAAA,CAAA,CAAA,OAAA,CAAA;oBACA,MAAA,CAAA,EAAA,OAAA,SAAA,EAAA,KAAA,CAAA;oBACA,SAAAA,QAAAA,WAAA;gBACA,CAAA;YACA,SAAAA,QAAAA,WAAA;QACA;IACA;IAEA,QAAA,SAAA,GAAA;AACA"}},
    {"offset": {"line": 8978, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8982, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/utils/traceData.ts"],"sourcesContent":["import { getAsyncContextStrategy } from '../asyncContext';\nimport { getMainCarrier } from '../carrier';\nimport type { Client } from '../client';\nimport { getClient, getCurrentScope } from '../currentScopes';\nimport { isEnabled } from '../exports';\nimport type { Scope } from '../scope';\nimport { getDynamicSamplingContextFromScope, getDynamicSamplingContextFromSpan } from '../tracing';\nimport type { Span } from '../types-hoist/span';\nimport type { SerializedTraceData } from '../types-hoist/tracing';\nimport { dynamicSamplingContextToSentryBaggageHeader } from './baggage';\nimport { logger } from './logger';\nimport { getActiveSpan, spanToTraceHeader } from './spanUtils';\nimport { generateSentryTraceHeader, TRACEPARENT_REGEXP } from './tracing';\n\n/**\n * Extracts trace propagation data from the current span or from the client's scope (via transaction or propagation\n * context) and serializes it to `sentry-trace` and `baggage` values to strings. These values can be used to propagate\n * a trace via our tracing Http headers or Html `<meta>` tags.\n *\n * This function also applies some validation to the generated sentry-trace and baggage values to ensure that\n * only valid strings are returned.\n *\n * @returns an object with the tracing data values. The object keys are the name of the tracing key to be used as header\n * or meta tag name.\n */\nexport function getTraceData(options: { span?: Span; scope?: Scope; client?: Client } = {}): SerializedTraceData {\n  const client = options.client || getClient();\n  if (!isEnabled() || !client) {\n    return {};\n  }\n\n  const carrier = getMainCarrier();\n  const acs = getAsyncContextStrategy(carrier);\n  if (acs.getTraceData) {\n    return acs.getTraceData(options);\n  }\n\n  const scope = options.scope || getCurrentScope();\n  const span = options.span || getActiveSpan();\n  const sentryTrace = span ? spanToTraceHeader(span) : scopeToTraceHeader(scope);\n  const dsc = span ? getDynamicSamplingContextFromSpan(span) : getDynamicSamplingContextFromScope(client, scope);\n  const baggage = dynamicSamplingContextToSentryBaggageHeader(dsc);\n\n  const isValidSentryTraceHeader = TRACEPARENT_REGEXP.test(sentryTrace);\n  if (!isValidSentryTraceHeader) {\n    logger.warn('Invalid sentry-trace data. Cannot generate trace data');\n    return {};\n  }\n\n  return {\n    'sentry-trace': sentryTrace,\n    baggage,\n  };\n}\n\n/**\n * Get a sentry-trace header value for the given scope.\n */\nfunction scopeToTraceHeader(scope: Scope): string {\n  const { traceId, sampled, propagationSpanId } = scope.getPropagationContext();\n  return generateSentryTraceHeader(traceId, propagationSpanId, sampled);\n}\n"],"names":["getClient","isEnabled","carrier","getMainCarrier","getAsyncContextStrategy","getCurrentScope","getActiveSpan","spanToTraceHeader","getDynamicSamplingContextFromSpan","getDynamicSamplingContextFromScope","baggage","dynamicSamplingContextToSentryBaggageHeader","TRACEPARENT_REGEXP","logger","generateSentryTraceHeader"],"mappings":";;;;;;;;;;;;;;;AAcA;;;;;;;;;;CAUA,GACO,SAAS,aAAa,UAA2D,CAAA,CAAE;IACxF,MAAM,SAAS,QAAQ,MAAA,IAAUA,cAAAA,SAAS;IAC1C,IAAI,CAACC,UAAAA,SAAS,MAAM,CAAC,QAAQ;QAC3B,OAAO,CAAA;IACX;IAEE,MAAMC,YAAUC,QAAAA,cAAc;IAC9B,MAAM,MAAMC,MAAAA,uBAAuB,CAACF;IACpC,IAAI,IAAI,YAAY,EAAE;QACpB,OAAO,IAAI,YAAY,CAAC;IAC5B;IAEE,MAAM,QAAQ,QAAQ,KAAA,IAASG,cAAAA,eAAe;IAC9C,MAAM,OAAO,QAAQ,IAAA,IAAQC,UAAAA,aAAa;IAC1C,MAAM,cAAc,OAAOC,UAAAA,iBAAiB,CAAC,QAAQ,mBAAmB;IACxE,MAAM,MAAM,OAAOC,uBAAAA,iCAAiC,CAAC,QAAQC,uBAAAA,kCAAkC,CAAC,QAAQ;IACxG,MAAMC,YAAUC,QAAAA,2CAA2C,CAAC;IAE5D,MAAM,2BAA2BC,QAAAA,kBAAkB,CAAC,IAAI,CAAC;IACzD,IAAI,CAAC,0BAA0B;QAC7BC,OAAAA,MAAM,CAAC,IAAI,CAAC;QACZ,OAAO,CAAA;IACX;IAEE,OAAO;QACL,gBAAgB;QACpB,SAAIH;IACJ;AACA;AAEA;;CAEA,GACA,SAAS,mBAAmB,KAAK;IAC/B,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,iBAAA,EAAkB,GAAI,MAAM,qBAAqB;IAC3E,OAAOI,QAAAA,yBAAyB,CAAC,SAAS,mBAAmB;AAC/D"}},
    {"offset": {"line": 9039, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9043, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/utils/meta.ts"],"sourcesContent":["import type { SerializedTraceData } from '../types-hoist/tracing';\nimport { getTraceData } from './traceData';\n\n/**\n * Returns a string of meta tags that represent the current trace data.\n *\n * You can use this to propagate a trace from your server-side rendered Html to the browser.\n * This function returns up to two meta tags, `sentry-trace` and `baggage`, depending on the\n * current trace data state.\n *\n * @example\n * Usage example:\n *\n * ```js\n * function renderHtml() {\n *   return `\n *     <head>\n *       ${getTraceMetaTags()}\n *     </head>\n *   `;\n * }\n * ```\n *\n */\nexport function getTraceMetaTags(traceData?: SerializedTraceData): string {\n  return Object.entries(traceData || getTraceData())\n    .map(([key, value]) => `<meta name=\"${key}\" content=\"${value}\"/>`)\n    .join('\\n');\n}\n"],"names":["traceData","getTraceData"],"mappings":";;;;AAGA;;;;;;;;;;;;;;;;;;;;CAoBA,GACO,SAAS,iBAAiBA,WAAS;IACxC,OAAO,OAAO,OAAO,CAACA,eAAaC,UAAAA,YAAY,IAC5C,GAAG,CAAC,CAAC,CAAC,KAAK,MAAM,GAAK,CAAC,YAAY,EAAE,IAAI,WAAW,EAAE,MAAM,GAAG,CAAC,EAChE,IAAI,CAAC;AACV"}},
    {"offset": {"line": 9071, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9075, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/utils/debounce.ts"],"sourcesContent":["type DebouncedCallback = {\n  (): void | unknown;\n  flush: () => void | unknown;\n  cancel: () => void;\n};\ntype CallbackFunction = () => unknown;\ntype DebounceOptions = {\n  /** The max. time in ms to wait for the callback to be invoked. */\n  maxWait?: number;\n  /** This can be overwritten to use a different setTimeout implementation, e.g. to avoid triggering change detection in Angular  */\n  setTimeoutImpl?: typeof setTimeout;\n};\n\n/**\n * Heavily simplified debounce function based on lodash.debounce.\n *\n * This function takes a callback function (@param fun) and delays its invocation\n * by @param wait milliseconds. Optionally, a maxWait can be specified in @param options,\n * which ensures that the callback is invoked at least once after the specified max. wait time.\n *\n * @param func the function whose invocation is to be debounced\n * @param wait the minimum time until the function is invoked after it was called once\n * @param options the options object, which can contain the `maxWait` property\n *\n * @returns the debounced version of the function, which needs to be called at least once to start the\n *          debouncing process. Subsequent calls will reset the debouncing timer and, in case @paramfunc\n *          was already invoked in the meantime, return @param func's return value.\n *          The debounced function has two additional properties:\n *          - `flush`: Invokes the debounced function immediately and returns its return value\n *          - `cancel`: Cancels the debouncing process and resets the debouncing timer\n */\nexport function debounce(func: CallbackFunction, wait: number, options?: DebounceOptions): DebouncedCallback {\n  let callbackReturnValue: unknown;\n\n  let timerId: ReturnType<typeof setTimeout> | undefined;\n  let maxTimerId: ReturnType<typeof setTimeout> | undefined;\n\n  const maxWait = options?.maxWait ? Math.max(options.maxWait, wait) : 0;\n  const setTimeoutImpl = options?.setTimeoutImpl || setTimeout;\n\n  function invokeFunc(): unknown {\n    cancelTimers();\n    callbackReturnValue = func();\n    return callbackReturnValue;\n  }\n\n  function cancelTimers(): void {\n    timerId !== undefined && clearTimeout(timerId);\n    maxTimerId !== undefined && clearTimeout(maxTimerId);\n    timerId = maxTimerId = undefined;\n  }\n\n  function flush(): unknown {\n    if (timerId !== undefined || maxTimerId !== undefined) {\n      return invokeFunc();\n    }\n    return callbackReturnValue;\n  }\n\n  function debounced(): unknown {\n    if (timerId) {\n      clearTimeout(timerId);\n    }\n    timerId = setTimeoutImpl(invokeFunc, wait);\n\n    if (maxWait && maxTimerId === undefined) {\n      maxTimerId = setTimeoutImpl(invokeFunc, maxWait);\n    }\n\n    return callbackReturnValue;\n  }\n\n  debounced.cancel = cancelTimers;\n  debounced.flush = flush;\n  return debounced;\n}\n"],"names":[],"mappings":";;;AAaA;;;;;;;;;;;;;;;;;CAiBA,GACO,SAAS,SAAS,IAAI,EAAoB,IAAI,EAAU,OAAO;IACpE,IAAI;IAEJ,IAAI;IACJ,IAAI;IAEJ,MAAM,UAAU,SAAS,UAAU,KAAK,GAAG,CAAC,QAAQ,OAAO,EAAE,QAAQ;IACrE,MAAM,iBAAiB,SAAS,kBAAkB;IAElD,SAAS;QACP;QACA,sBAAsB;QACtB,OAAO;IACX;IAEE,SAAS;QACP,YAAY,aAAa,aAAa;QACtC,eAAe,aAAa,aAAa;QACzC,UAAU,aAAa;IAC3B;IAEE,SAAS;QACP,IAAI,YAAY,aAAa,eAAe,WAAW;YACrD,OAAO;QACb;QACI,OAAO;IACX;IAEE,SAAS;QACP,IAAI,SAAS;YACX,aAAa;QACnB;QACI,UAAU,eAAe,YAAY;QAErC,IAAI,WAAW,eAAe,WAAW;YACvC,aAAa,eAAe,YAAY;QAC9C;QAEI,OAAO;IACX;IAEE,UAAU,MAAA,GAAS;IACnB,UAAU,KAAA,GAAQ;IAClB,OAAO;AACT"}},
    {"offset": {"line": 9132, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9136, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/utils/request.ts"],"sourcesContent":["import type { PolymorphicRequest } from '../types-hoist/polymorphics';\nimport type { RequestEventData } from '../types-hoist/request';\nimport type { WebFetchHeaders, WebFetchRequest } from '../types-hoist/webfetchapi';\n\n/**\n * Transforms a `Headers` object that implements the `Web Fetch API` (https://developer.mozilla.org/en-US/docs/Web/API/Headers) into a simple key-value dict.\n * The header keys will be lower case: e.g. A \"Content-Type\" header will be stored as \"content-type\".\n */\nexport function winterCGHeadersToDict(winterCGHeaders: WebFetchHeaders): Record<string, string> {\n  const headers: Record<string, string> = {};\n  try {\n    winterCGHeaders.forEach((value, key) => {\n      if (typeof value === 'string') {\n        // We check that value is a string even though it might be redundant to make sure prototype pollution is not possible.\n        headers[key] = value;\n      }\n    });\n  } catch {\n    // just return the empty headers\n  }\n\n  return headers;\n}\n\n/**\n * Convert common request headers to a simple dictionary.\n */\nexport function headersToDict(reqHeaders: Record<string, string | string[] | undefined>): Record<string, string> {\n  const headers: Record<string, string> = Object.create(null);\n\n  try {\n    Object.entries(reqHeaders).forEach(([key, value]) => {\n      if (typeof value === 'string') {\n        headers[key] = value;\n      }\n    });\n  } catch {\n    // just return the empty headers\n  }\n\n  return headers;\n}\n\n/**\n * Converts a `Request` object that implements the `Web Fetch API` (https://developer.mozilla.org/en-US/docs/Web/API/Headers) into the format that the `RequestData` integration understands.\n */\nexport function winterCGRequestToRequestData(req: WebFetchRequest): RequestEventData {\n  const headers = winterCGHeadersToDict(req.headers);\n\n  return {\n    method: req.method,\n    url: req.url,\n    query_string: extractQueryParamsFromUrl(req.url),\n    headers,\n    // TODO: Can we extract body data from the request?\n  };\n}\n\n/**\n * Convert a HTTP request object to RequestEventData to be passed as normalizedRequest.\n * Instead of allowing `PolymorphicRequest` to be passed,\n * we want to be more specific and generally require a http.IncomingMessage-like object.\n */\nexport function httpRequestToRequestData(request: {\n  method?: string;\n  url?: string;\n  headers?: {\n    [key: string]: string | string[] | undefined;\n  };\n  protocol?: string;\n  socket?: {\n    encrypted?: boolean;\n    remoteAddress?: string;\n  };\n}): RequestEventData {\n  const headers = request.headers || {};\n\n  // Check for x-forwarded-host first, then fall back to host header\n  const forwardedHost = typeof headers['x-forwarded-host'] === 'string' ? headers['x-forwarded-host'] : undefined;\n  const host = forwardedHost || (typeof headers.host === 'string' ? headers.host : undefined);\n\n  // Check for x-forwarded-proto first, then fall back to existing protocol detection\n  const forwardedProto = typeof headers['x-forwarded-proto'] === 'string' ? headers['x-forwarded-proto'] : undefined;\n  const protocol = forwardedProto || request.protocol || (request.socket?.encrypted ? 'https' : 'http');\n\n  const url = request.url || '';\n\n  const absoluteUrl = getAbsoluteUrl({\n    url,\n    host,\n    protocol,\n  });\n\n  // This is non-standard, but may be sometimes set\n  // It may be overwritten later by our own body handling\n  const data = (request as PolymorphicRequest).body || undefined;\n\n  // This is non-standard, but may be set on e.g. Next.js or Express requests\n  const cookies = (request as PolymorphicRequest).cookies;\n\n  return {\n    url: absoluteUrl,\n    method: request.method,\n    query_string: extractQueryParamsFromUrl(url),\n    headers: headersToDict(headers),\n    cookies,\n    data,\n  };\n}\n\nfunction getAbsoluteUrl({\n  url,\n  protocol,\n  host,\n}: {\n  url?: string;\n  protocol: string;\n  host?: string;\n}): string | undefined {\n  if (url?.startsWith('http')) {\n    return url;\n  }\n\n  if (url && host) {\n    return `${protocol}://${host}${url}`;\n  }\n\n  return undefined;\n}\n\n/** Extract the query params from an URL. */\nexport function extractQueryParamsFromUrl(url: string): string | undefined {\n  // url is path and query string\n  if (!url) {\n    return;\n  }\n\n  try {\n    // The `URL` constructor can't handle internal URLs of the form `/some/path/here`, so stick a dummy protocol and\n    // hostname as the base. Since the point here is just to grab the query string, it doesn't matter what we use.\n    const queryParams = new URL(url, 'http://s.io').search.slice(1);\n    return queryParams.length ? queryParams : undefined;\n  } catch {\n    return undefined;\n  }\n}\n"],"names":[],"mappings":";;;AAIA;;;CAGA,GACO,SAAS,sBAAsB,eAAe;IACnD,MAAM,UAAkC,CAAA;IACxC,IAAI;QACF,gBAAgB,OAAO,CAAC,CAAC,OAAO;YAC9B,IAAI,OAAO,UAAU,UAAU;gBACrC,sHAAA;gBACQ,OAAO,CAAC,IAAG,GAAI;YACvB;QACA;IACA,EAAI,OAAM;IACV,gCAAA;IACA;IAEE,OAAO;AACT;AAEA;;CAEA,GACO,SAAS,cAAc,UAAU;IACtC,MAAM,UAAkC,OAAO,MAAM,CAAC;IAEtD,IAAI;QACF,OAAO,OAAO,CAAC,YAAY,OAAO,CAAC,CAAC,CAAC,KAAK,MAAM;YAC9C,IAAI,OAAO,UAAU,UAAU;gBAC7B,OAAO,CAAC,IAAG,GAAI;YACvB;QACA;IACA,EAAI,OAAM;IACV,gCAAA;IACA;IAEE,OAAO;AACT;AAEA;;CAEA,GACO,SAAS,6BAA6B,GAAG;IAC9C,MAAM,UAAU,sBAAsB,IAAI,OAAO;IAEjD,OAAO;QACL,QAAQ,IAAI,MAAM;QAClB,KAAK,IAAI,GAAG;QACZ,cAAc,0BAA0B,IAAI,GAAG;QAC/C;IAEJ;AACA;AAEA;;;;CAIA,GACO,SAAS,yBAAyB,OAAA;IAYvC,MAAM,UAAU,QAAQ,OAAA,IAAW,CAAA;IAErC,kEAAA;IACE,MAAM,gBAAgB,OAAO,OAAO,CAAC,mBAAkB,KAAM,WAAW,OAAO,CAAC,mBAAkB,GAAI;IACtG,MAAM,OAAO,iBAAA,CAAkB,OAAO,QAAQ,IAAA,KAAS,WAAW,QAAQ,IAAA,GAAO,SAAS;IAE5F,mFAAA;IACE,MAAM,iBAAiB,OAAO,OAAO,CAAC,oBAAmB,KAAM,WAAW,OAAO,CAAC,oBAAmB,GAAI;IACzG,MAAM,WAAW,kBAAkB,QAAQ,QAAA,IAAA,CAAa,QAAQ,MAAM,EAAE,YAAY,UAAU,MAAM;IAEpG,MAAM,MAAM,QAAQ,GAAA,IAAO;IAE3B,MAAM,cAAc,eAAe;QACjC;QACA;QACA;IACJ;IAEA,iDAAA;IACA,uDAAA;IACE,MAAM,OAAO,AAAC,QAA+B,IAAA,IAAQ;IAEvD,2EAAA;IACE,MAAM,UAAU,AAAC,QAA+B,OAAO;IAEvD,OAAO;QACL,KAAK;QACL,QAAQ,QAAQ,MAAM;QACtB,cAAc,0BAA0B;QACxC,SAAS,cAAc;QACvB;QACA;IACJ;AACA;AAEA,SAAS,eAAe,EACtB,GAAG,EACH,QAAQ,EACR,IAAI,EACN;IAKE,IAAI,KAAK,WAAW,SAAS;QAC3B,OAAO;IACX;IAEE,IAAI,OAAO,MAAM;QACf,OAAO,CAAC,EAAA,SAAA,GAAA,EAAA,KAAA,EAAA,IAAA,CAAA;IACA;IAEA,OAAA;AACA;AAEA,0CAAA,GACA,SAAA,0BAAA,GAAA;IACA,+BAAA;IACA,IAAA,CAAA,KAAA;QACA;IACA;IAEA,IAAA;QACA,gHAAA;QACA,8GAAA;QACA,MAAA,cAAA,IAAA,IAAA,KAAA,eAAA,MAAA,CAAA,KAAA,CAAA;QACA,OAAA,YAAA,MAAA,GAAA,cAAA;IACA,EAAA,OAAA;QACA,OAAA;IACA;AACA"}},
    {"offset": {"line": 9242, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9246, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/breadcrumbs.ts"],"sourcesContent":["import { getClient, getIsolationScope } from './currentScopes';\nimport type { Breadcrumb, BreadcrumbHint } from './types-hoist/breadcrumb';\nimport { consoleSandbox } from './utils/logger';\nimport { dateTimestampInSeconds } from './utils/time';\n\n/**\n * Default maximum number of breadcrumbs added to an event. Can be overwritten\n * with {@link Options.maxBreadcrumbs}.\n */\nconst DEFAULT_BREADCRUMBS = 100;\n\n/**\n * Records a new breadcrumb which will be attached to future events.\n *\n * Breadcrumbs will be added to subsequent events to provide more context on\n * user's actions prior to an error or crash.\n */\nexport function addBreadcrumb(breadcrumb: Breadcrumb, hint?: BreadcrumbHint): void {\n  const client = getClient();\n  const isolationScope = getIsolationScope();\n\n  if (!client) return;\n\n  const { beforeBreadcrumb = null, maxBreadcrumbs = DEFAULT_BREADCRUMBS } = client.getOptions();\n\n  if (maxBreadcrumbs <= 0) return;\n\n  const timestamp = dateTimestampInSeconds();\n  const mergedBreadcrumb = { timestamp, ...breadcrumb };\n  const finalBreadcrumb = beforeBreadcrumb\n    ? (consoleSandbox(() => beforeBreadcrumb(mergedBreadcrumb, hint)) as Breadcrumb | null)\n    : mergedBreadcrumb;\n\n  if (finalBreadcrumb === null) return;\n\n  if (client.emit) {\n    client.emit('beforeAddBreadcrumb', finalBreadcrumb, hint);\n  }\n\n  isolationScope.addBreadcrumb(finalBreadcrumb, maxBreadcrumbs);\n}\n"],"names":["getClient","getIsolationScope","dateTimestampInSeconds","consoleSandbox"],"mappings":";;;;;;AAKA;;;CAGA,GACA,MAAM,sBAAsB;AAE5B;;;;;CAKA,GACO,SAAS,cAAc,UAAU,EAAc,IAAI;IACxD,MAAM,SAASA,cAAAA,SAAS;IACxB,MAAM,iBAAiBC,cAAAA,iBAAiB;IAExC,IAAI,CAAC,QAAQ;IAEb,MAAM,EAAE,mBAAmB,IAAI,EAAE,iBAAiB,mBAAA,EAAA,GAAwB,OAAO,UAAU;IAE3F,IAAI,kBAAkB,GAAG;IAEzB,MAAM,YAAYC,KAAAA,sBAAsB;IACxC,MAAM,mBAAmB;QAAE;QAAW,GAAG,UAAA;IAAA;IACzC,MAAM,kBAAkB,mBACnBC,OAAAA,cAAc,CAAC,IAAM,iBAAiB,kBAAkB,SACzD;IAEJ,IAAI,oBAAoB,MAAM;IAE9B,IAAI,OAAO,IAAI,EAAE;QACf,OAAO,IAAI,CAAC,uBAAuB,iBAAiB;IACxD;IAEE,eAAe,aAAa,CAAC,iBAAiB;AAChD"}},
    {"offset": {"line": 9280, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9284, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/integrations/functiontostring.ts"],"sourcesContent":["import type { Client } from '../client';\nimport { getClient } from '../currentScopes';\nimport { defineIntegration } from '../integration';\nimport type { IntegrationFn } from '../types-hoist/integration';\nimport type { WrappedFunction } from '../types-hoist/wrappedfunction';\nimport { getOriginalFunction } from '../utils/object';\n\nlet originalFunctionToString: () => void;\n\nconst INTEGRATION_NAME = 'FunctionToString';\n\nconst SETUP_CLIENTS = new WeakMap<Client, boolean>();\n\nconst _functionToStringIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      originalFunctionToString = Function.prototype.toString;\n\n      // intrinsics (like Function.prototype) might be immutable in some environments\n      // e.g. Node with --frozen-intrinsics, XS (an embedded JavaScript engine) or SES (a JavaScript proposal)\n      try {\n        Function.prototype.toString = function (this: WrappedFunction, ...args: unknown[]): string {\n          const originalFunction = getOriginalFunction(this);\n          const context =\n            SETUP_CLIENTS.has(getClient() as Client) && originalFunction !== undefined ? originalFunction : this;\n          return originalFunctionToString.apply(context, args);\n        };\n      } catch {\n        // ignore errors here, just don't patch this\n      }\n    },\n    setup(client) {\n      SETUP_CLIENTS.set(client, true);\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Patch toString calls to return proper name for wrapped functions.\n *\n * ```js\n * Sentry.init({\n *   integrations: [\n *     functionToStringIntegration(),\n *   ],\n * });\n * ```\n */\nexport const functionToStringIntegration = defineIntegration(_functionToStringIntegration);\n"],"names":["getOriginalFunction","getClient","defineIntegration"],"mappings":";;;;;;AAOA,IAAI;AAEJ,MAAM,mBAAmB;AAEzB,MAAM,gBAAgB,IAAI;AAE1B,MAAM,+BAAgC;IACpC,OAAO;QACL,MAAM;QACN;YACJ,6DAAA;YACM,2BAA2B,SAAS,SAAS,CAAC,QAAQ;YAE5D,+EAAA;YACA,wGAAA;YACM,IAAI;gBACF,SAAS,SAAS,CAAC,QAAA,GAAW,SAAiC,GAAG,IAAI;oBACpE,MAAM,mBAAmBA,OAAAA,mBAAmB,CAAC,IAAI;oBACjD,MAAM,UACJ,cAAc,GAAG,CAACC,cAAAA,SAAS,OAAiB,qBAAqB,YAAY,mBAAmB,IAAI;oBACtG,OAAO,yBAAyB,KAAK,CAAC,SAAS;gBACzD;YACA,EAAQ,OAAM;YACd,4CAAA;YACA;QACA;QACI,OAAM,MAAM;YACV,cAAc,GAAG,CAAC,QAAQ;QAChC;IACA;AACA;AAEA;;;;;;;;;;CAUA,SACa,8BAA8BC,YAAAA,iBAAiB,CAAC"}},
    {"offset": {"line": 9328, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9332, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/integrations/eventFilters.ts"],"sourcesContent":["import { DEBUG_BUILD } from '../debug-build';\nimport { defineIntegration } from '../integration';\nimport type { Event } from '../types-hoist/event';\nimport type { IntegrationFn } from '../types-hoist/integration';\nimport type { StackFrame } from '../types-hoist/stackframe';\nimport { getPossibleEventMessages } from '../utils/eventUtils';\nimport { logger } from '../utils/logger';\nimport { getEventDescription } from '../utils/misc';\nimport { stringMatchesSomePattern } from '../utils/string';\n\n// \"Script error.\" is hard coded into browsers for errors that it can't read.\n// this is the result of a script being pulled in from an external domain and CORS.\nconst DEFAULT_IGNORE_ERRORS = [\n  /^Script error\\.?$/,\n  /^Javascript error: Script error\\.? on line 0$/,\n  /^ResizeObserver loop completed with undelivered notifications.$/, // The browser logs this when a ResizeObserver handler takes a bit longer. Usually this is not an actual issue though. It indicates slowness.\n  /^Cannot redefine property: googletag$/, // This is thrown when google tag manager is used in combination with an ad blocker\n  /^Can't find variable: gmo$/, // Error from Google Search App https://issuetracker.google.com/issues/396043331\n  /^undefined is not an object \\(evaluating 'a\\.[A-Z]'\\)$/, // Random error that happens but not actionable or noticeable to end-users.\n  'can\\'t redefine non-configurable property \"solana\"', // Probably a browser extension or custom browser (Brave) throwing this error\n  \"vv().getRestrictions is not a function. (In 'vv().getRestrictions(1,a)', 'vv().getRestrictions' is undefined)\", // Error thrown by GTM, seemingly not affecting end-users\n  \"Can't find variable: _AutofillCallbackHandler\", // Unactionable error in instagram webview https://developers.facebook.com/community/threads/320013549791141/\n  /^Non-Error promise rejection captured with value: Object Not Found Matching Id:\\d+, MethodName:simulateEvent, ParamCount:\\d+$/, // unactionable error from CEFSharp, a .NET library that embeds chromium in .NET apps\n  /^Java exception was raised during method invocation$/, // error from Facebook Mobile browser (https://github.com/getsentry/sentry-javascript/issues/15065)\n];\n\n/** Options for the EventFilters integration */\nexport interface EventFiltersOptions {\n  allowUrls: Array<string | RegExp>;\n  denyUrls: Array<string | RegExp>;\n  ignoreErrors: Array<string | RegExp>;\n  ignoreTransactions: Array<string | RegExp>;\n  ignoreInternal: boolean;\n  disableErrorDefaults: boolean;\n}\n\nconst INTEGRATION_NAME = 'EventFilters';\n\n/**\n * An integration that filters out events (errors and transactions) based on:\n *\n * - (Errors) A curated list of known low-value or irrelevant errors (see {@link DEFAULT_IGNORE_ERRORS})\n * - (Errors) A list of error messages or urls/filenames passed in via\n *   - Top level Sentry.init options (`ignoreErrors`, `denyUrls`, `allowUrls`)\n *   - The same options passed to the integration directly via @param options\n * - (Transactions/Spans) A list of root span (transaction) names passed in via\n *   - Top level Sentry.init option (`ignoreTransactions`)\n *   - The same option passed to the integration directly via @param options\n *\n * Events filtered by this integration will not be sent to Sentry.\n */\nexport const eventFiltersIntegration = defineIntegration((options: Partial<EventFiltersOptions> = {}) => {\n  let mergedOptions: Partial<EventFiltersOptions> | undefined;\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      const clientOptions = client.getOptions();\n      mergedOptions = _mergeOptions(options, clientOptions);\n    },\n    processEvent(event, _hint, client) {\n      if (!mergedOptions) {\n        const clientOptions = client.getOptions();\n        mergedOptions = _mergeOptions(options, clientOptions);\n      }\n      return _shouldDropEvent(event, mergedOptions) ? null : event;\n    },\n  };\n});\n\n/**\n * An integration that filters out events (errors and transactions) based on:\n *\n * - (Errors) A curated list of known low-value or irrelevant errors (see {@link DEFAULT_IGNORE_ERRORS})\n * - (Errors) A list of error messages or urls/filenames passed in via\n *   - Top level Sentry.init options (`ignoreErrors`, `denyUrls`, `allowUrls`)\n *   - The same options passed to the integration directly via @param options\n * - (Transactions/Spans) A list of root span (transaction) names passed in via\n *   - Top level Sentry.init option (`ignoreTransactions`)\n *   - The same option passed to the integration directly via @param options\n *\n * Events filtered by this integration will not be sent to Sentry.\n *\n * @deprecated this integration was renamed and will be removed in a future major version.\n * Use `eventFiltersIntegration` instead.\n */\nexport const inboundFiltersIntegration = defineIntegration(((options: Partial<EventFiltersOptions> = {}) => {\n  return {\n    ...eventFiltersIntegration(options),\n    name: 'InboundFilters',\n  };\n}) satisfies IntegrationFn);\n\nfunction _mergeOptions(\n  internalOptions: Partial<EventFiltersOptions> = {},\n  clientOptions: Partial<EventFiltersOptions> = {},\n): Partial<EventFiltersOptions> {\n  return {\n    allowUrls: [...(internalOptions.allowUrls || []), ...(clientOptions.allowUrls || [])],\n    denyUrls: [...(internalOptions.denyUrls || []), ...(clientOptions.denyUrls || [])],\n    ignoreErrors: [\n      ...(internalOptions.ignoreErrors || []),\n      ...(clientOptions.ignoreErrors || []),\n      ...(internalOptions.disableErrorDefaults ? [] : DEFAULT_IGNORE_ERRORS),\n    ],\n    ignoreTransactions: [...(internalOptions.ignoreTransactions || []), ...(clientOptions.ignoreTransactions || [])],\n  };\n}\n\nfunction _shouldDropEvent(event: Event, options: Partial<EventFiltersOptions>): boolean {\n  if (!event.type) {\n    // Filter errors\n    if (_isIgnoredError(event, options.ignoreErrors)) {\n      DEBUG_BUILD &&\n        logger.warn(\n          `Event dropped due to being matched by \\`ignoreErrors\\` option.\\nEvent: ${getEventDescription(event)}`,\n        );\n      return true;\n    }\n    if (_isUselessError(event)) {\n      DEBUG_BUILD &&\n        logger.warn(\n          `Event dropped due to not having an error message, error type or stacktrace.\\nEvent: ${getEventDescription(\n            event,\n          )}`,\n        );\n      return true;\n    }\n    if (_isDeniedUrl(event, options.denyUrls)) {\n      DEBUG_BUILD &&\n        logger.warn(\n          `Event dropped due to being matched by \\`denyUrls\\` option.\\nEvent: ${getEventDescription(\n            event,\n          )}.\\nUrl: ${_getEventFilterUrl(event)}`,\n        );\n      return true;\n    }\n    if (!_isAllowedUrl(event, options.allowUrls)) {\n      DEBUG_BUILD &&\n        logger.warn(\n          `Event dropped due to not being matched by \\`allowUrls\\` option.\\nEvent: ${getEventDescription(\n            event,\n          )}.\\nUrl: ${_getEventFilterUrl(event)}`,\n        );\n      return true;\n    }\n  } else if (event.type === 'transaction') {\n    // Filter transactions\n\n    if (_isIgnoredTransaction(event, options.ignoreTransactions)) {\n      DEBUG_BUILD &&\n        logger.warn(\n          `Event dropped due to being matched by \\`ignoreTransactions\\` option.\\nEvent: ${getEventDescription(event)}`,\n        );\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction _isIgnoredError(event: Event, ignoreErrors?: Array<string | RegExp>): boolean {\n  if (!ignoreErrors?.length) {\n    return false;\n  }\n\n  return getPossibleEventMessages(event).some(message => stringMatchesSomePattern(message, ignoreErrors));\n}\n\nfunction _isIgnoredTransaction(event: Event, ignoreTransactions?: Array<string | RegExp>): boolean {\n  if (!ignoreTransactions?.length) {\n    return false;\n  }\n\n  const name = event.transaction;\n  return name ? stringMatchesSomePattern(name, ignoreTransactions) : false;\n}\n\nfunction _isDeniedUrl(event: Event, denyUrls?: Array<string | RegExp>): boolean {\n  if (!denyUrls?.length) {\n    return false;\n  }\n  const url = _getEventFilterUrl(event);\n  return !url ? false : stringMatchesSomePattern(url, denyUrls);\n}\n\nfunction _isAllowedUrl(event: Event, allowUrls?: Array<string | RegExp>): boolean {\n  if (!allowUrls?.length) {\n    return true;\n  }\n  const url = _getEventFilterUrl(event);\n  return !url ? true : stringMatchesSomePattern(url, allowUrls);\n}\n\nfunction _getLastValidUrl(frames: StackFrame[] = []): string | null {\n  for (let i = frames.length - 1; i >= 0; i--) {\n    const frame = frames[i];\n\n    if (frame && frame.filename !== '<anonymous>' && frame.filename !== '[native code]') {\n      return frame.filename || null;\n    }\n  }\n\n  return null;\n}\n\nfunction _getEventFilterUrl(event: Event): string | null {\n  try {\n    // If there are linked exceptions or exception aggregates we only want to match against the top frame of the \"root\" (the main exception)\n    // The root always comes last in linked exceptions\n    const rootException = [...(event.exception?.values ?? [])]\n      .reverse()\n      .find(value => value.mechanism?.parent_id === undefined && value.stacktrace?.frames?.length);\n    const frames = rootException?.stacktrace?.frames;\n    return frames ? _getLastValidUrl(frames) : null;\n  } catch (oO) {\n    DEBUG_BUILD && logger.error(`Cannot extract url for event ${getEventDescription(event)}`);\n    return null;\n  }\n}\n\nfunction _isUselessError(event: Event): boolean {\n  // We only want to consider events for dropping that actually have recorded exception values.\n  if (!event.exception?.values?.length) {\n    return false;\n  }\n\n  return (\n    // No top-level message\n    !event.message &&\n    // There are no exception values that have a stacktrace, a non-generic-Error type or value\n    !event.exception.values.some(value => value.stacktrace || (value.type && value.type !== 'Error') || value.value)\n  );\n}\n"],"names":["defineIntegration","DEBUG_BUILD","logger","getEventDescription","getPossibleEventMessages","stringMatchesSomePattern"],"mappings":"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"}},
    {"offset": {"line": 9517, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9521, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/utils/aggregate-errors.ts"],"sourcesContent":["import type { ExtendedError } from '../types-hoist/error';\nimport type { Event, EventHint } from '../types-hoist/event';\nimport type { Exception } from '../types-hoist/exception';\nimport type { StackParser } from '../types-hoist/stacktrace';\nimport { isInstanceOf } from './is';\n\n/**\n * Creates exceptions inside `event.exception.values` for errors that are nested on properties based on the `key` parameter.\n */\nexport function applyAggregateErrorsToEvent(\n  exceptionFromErrorImplementation: (stackParser: StackParser, ex: Error) => Exception,\n  parser: StackParser,\n  key: string,\n  limit: number,\n  event: Event,\n  hint?: EventHint,\n): void {\n  if (!event.exception?.values || !hint || !isInstanceOf(hint.originalException, Error)) {\n    return;\n  }\n\n  // Generally speaking the last item in `event.exception.values` is the exception originating from the original Error\n  const originalException: Exception | undefined =\n    event.exception.values.length > 0 ? event.exception.values[event.exception.values.length - 1] : undefined;\n\n  // We only create exception grouping if there is an exception in the event.\n  if (originalException) {\n    event.exception.values = aggregateExceptionsFromError(\n      exceptionFromErrorImplementation,\n      parser,\n      limit,\n      hint.originalException as ExtendedError,\n      key,\n      event.exception.values,\n      originalException,\n      0,\n    );\n  }\n}\n\nfunction aggregateExceptionsFromError(\n  exceptionFromErrorImplementation: (stackParser: StackParser, ex: Error) => Exception,\n  parser: StackParser,\n  limit: number,\n  error: ExtendedError,\n  key: string,\n  prevExceptions: Exception[],\n  exception: Exception,\n  exceptionId: number,\n): Exception[] {\n  if (prevExceptions.length >= limit + 1) {\n    return prevExceptions;\n  }\n\n  let newExceptions = [...prevExceptions];\n\n  // Recursively call this function in order to walk down a chain of errors\n  if (isInstanceOf(error[key], Error)) {\n    applyExceptionGroupFieldsForParentException(exception, exceptionId);\n    const newException = exceptionFromErrorImplementation(parser, error[key]);\n    const newExceptionId = newExceptions.length;\n    applyExceptionGroupFieldsForChildException(newException, key, newExceptionId, exceptionId);\n    newExceptions = aggregateExceptionsFromError(\n      exceptionFromErrorImplementation,\n      parser,\n      limit,\n      error[key],\n      key,\n      [newException, ...newExceptions],\n      newException,\n      newExceptionId,\n    );\n  }\n\n  // This will create exception grouping for AggregateErrors\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AggregateError\n  if (Array.isArray(error.errors)) {\n    error.errors.forEach((childError, i) => {\n      if (isInstanceOf(childError, Error)) {\n        applyExceptionGroupFieldsForParentException(exception, exceptionId);\n        const newException = exceptionFromErrorImplementation(parser, childError);\n        const newExceptionId = newExceptions.length;\n        applyExceptionGroupFieldsForChildException(newException, `errors[${i}]`, newExceptionId, exceptionId);\n        newExceptions = aggregateExceptionsFromError(\n          exceptionFromErrorImplementation,\n          parser,\n          limit,\n          childError,\n          key,\n          [newException, ...newExceptions],\n          newException,\n          newExceptionId,\n        );\n      }\n    });\n  }\n\n  return newExceptions;\n}\n\nfunction applyExceptionGroupFieldsForParentException(exception: Exception, exceptionId: number): void {\n  // Don't know if this default makes sense. The protocol requires us to set these values so we pick *some* default.\n  exception.mechanism = exception.mechanism || { type: 'generic', handled: true };\n\n  exception.mechanism = {\n    ...exception.mechanism,\n    ...(exception.type === 'AggregateError' && { is_exception_group: true }),\n    exception_id: exceptionId,\n  };\n}\n\nfunction applyExceptionGroupFieldsForChildException(\n  exception: Exception,\n  source: string,\n  exceptionId: number,\n  parentId: number | undefined,\n): void {\n  // Don't know if this default makes sense. The protocol requires us to set these values so we pick *some* default.\n  exception.mechanism = exception.mechanism || { type: 'generic', handled: true };\n\n  exception.mechanism = {\n    ...exception.mechanism,\n    type: 'chained',\n    source,\n    exception_id: exceptionId,\n    parent_id: parentId,\n  };\n}\n"],"names":["isInstanceOf"],"mappings":";;;;AAMA;;CAEA,GACO,SAAS,4BACd,gCAAgC,EAChC,MAAM,EACN,GAAG,EACH,KAAK,EACL,KAAK,EACL,IAAI;IAEJ,IAAI,CAAC,MAAM,SAAS,EAAE,UAAU,CAAC,QAAQ,CAACA,GAAAA,YAAY,CAAC,KAAK,iBAAiB,EAAE,QAAQ;QACrF;IACJ;IAEA,oHAAA;IACE,MAAM,oBACJ,MAAM,SAAS,CAAC,MAAM,CAAC,MAAA,GAAS,IAAI,MAAM,SAAS,CAAC,MAAM,CAAC,MAAM,SAAS,CAAC,MAAM,CAAC,MAAA,GAAS,EAAC,GAAI;IAEpG,2EAAA;IACE,IAAI,mBAAmB;QACrB,MAAM,SAAS,CAAC,MAAA,GAAS,6BACvB,kCACA,QACA,OACA,KAAK,iBAAA,EACL,KACA,MAAM,SAAS,CAAC,MAAM,EACtB,mBACA;IAEN;AACA;AAEA,SAAS,6BACP,gCAAgC,EAChC,MAAM,EACN,KAAK,EACL,KAAK,EACL,GAAG,EACH,cAAc,EACd,SAAS,EACT,WAAW;IAEX,IAAI,eAAe,MAAA,IAAU,QAAQ,GAAG;QACtC,OAAO;IACX;IAEE,IAAI,gBAAgB;WAAI;KAAe;IAEzC,yEAAA;IACE,IAAIA,GAAAA,YAAY,CAAC,KAAK,CAAC,IAAI,EAAE,QAAQ;QACnC,4CAA4C,WAAW;QACvD,MAAM,eAAe,iCAAiC,QAAQ,KAAK,CAAC,IAAI;QACxE,MAAM,iBAAiB,cAAc,MAAM;QAC3C,2CAA2C,cAAc,KAAK,gBAAgB;QAC9E,gBAAgB,6BACd,kCACA,QACA,OACA,KAAK,CAAC,IAAI,EACV,KACA;YAAC;eAAiB;SAAc,EAChC,cACA;IAEN;IAEA,0DAAA;IACA,kGAAA;IACE,IAAI,MAAM,OAAO,CAAC,MAAM,MAAM,GAAG;QAC/B,MAAM,MAAM,CAAC,OAAO,CAAC,CAAC,YAAY;YAChC,IAAIA,GAAAA,YAAY,CAAC,YAAY,QAAQ;gBACnC,4CAA4C,WAAW;gBACvD,MAAM,eAAe,iCAAiC,QAAQ;gBAC9D,MAAM,iBAAiB,cAAc,MAAM;gBAC3C,2CAA2C,cAAc,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,EAAE,gBAAgB;gBACzF,gBAAgB,6BACd,kCACA,QACA,OACA,YACA,KACA;oBAAC;uBAAiB;iBAAc,EAChC,cACA;YAEV;QACA;IACA;IAEE,OAAO;AACT;AAEA,SAAS,4CAA4C,SAAS,EAAa,WAAW;IACtF,kHAAA;IACE,UAAU,SAAA,GAAY,UAAU,SAAA,IAAa;QAAE,MAAM;QAAW,SAAS;IAAA;IAEzE,UAAU,SAAA,GAAY;QACpB,GAAG,UAAU,SAAS;QACtB,GAAI,UAAU,IAAA,KAAS,oBAAoB;YAAE,oBAAoB;QAAA,CAAM;QACvE,cAAc;IAClB;AACA;AAEA,SAAS,2CACP,SAAS,EACT,MAAM,EACN,WAAW,EACX,QAAQ;IAEV,kHAAA;IACE,UAAU,SAAA,GAAY,UAAU,SAAA,IAAa;QAAE,MAAM;QAAW,SAAS;IAAA;IAEzE,UAAU,SAAA,GAAY;QACpB,GAAG,UAAU,SAAS;QACtB,MAAM;QACN;QACA,cAAc;QACd,WAAW;IACf;AACA"}},
    {"offset": {"line": 9603, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9607, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/integrations/linkederrors.ts"],"sourcesContent":["import { defineIntegration } from '../integration';\nimport type { IntegrationFn } from '../types-hoist/integration';\nimport { applyAggregateErrorsToEvent } from '../utils/aggregate-errors';\nimport { exceptionFromError } from '../utils/eventbuilder';\n\ninterface LinkedErrorsOptions {\n  key?: string;\n  limit?: number;\n}\n\nconst DEFAULT_KEY = 'cause';\nconst DEFAULT_LIMIT = 5;\n\nconst INTEGRATION_NAME = 'LinkedErrors';\n\nconst _linkedErrorsIntegration = ((options: LinkedErrorsOptions = {}) => {\n  const limit = options.limit || DEFAULT_LIMIT;\n  const key = options.key || DEFAULT_KEY;\n\n  return {\n    name: INTEGRATION_NAME,\n    preprocessEvent(event, hint, client) {\n      const options = client.getOptions();\n\n      applyAggregateErrorsToEvent(exceptionFromError, options.stackParser, key, limit, event, hint);\n    },\n  };\n}) satisfies IntegrationFn;\n\nexport const linkedErrorsIntegration = defineIntegration(_linkedErrorsIntegration);\n"],"names":["applyAggregateErrorsToEvent","exceptionFromError","defineIntegration"],"mappings":";;;;;;AAUA,MAAM,cAAc;AACpB,MAAM,gBAAgB;AAEtB,MAAM,mBAAmB;AAEzB,MAAM,2BAA4B,CAAC,UAA+B,CAAA,CAAE;IAClE,MAAM,QAAQ,QAAQ,KAAA,IAAS;IAC/B,MAAM,MAAM,QAAQ,GAAA,IAAO;IAE3B,OAAO;QACL,MAAM;QACN,iBAAgB,KAAK,EAAE,IAAI,EAAE,MAAM;YACjC,MAAM,UAAU,OAAO,UAAU;YAEjCA,gBAAAA,2BAA2B,CAACC,aAAAA,kBAAkB,EAAE,QAAQ,WAAW,EAAE,KAAK,OAAO,OAAO;QAC9F;IACA;AACA;MAEa,0BAA0BC,YAAAA,iBAAiB,CAAC"}},
    {"offset": {"line": 9629, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9633, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/metadata.ts"],"sourcesContent":["import type { Event } from './types-hoist/event';\nimport type { StackParser } from './types-hoist/stacktrace';\nimport { GLOBAL_OBJ } from './utils/worldwide';\n\n/** Keys are source filename/url, values are metadata objects. */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst filenameMetadataMap = new Map<string, any>();\n/** Set of stack strings that have already been parsed. */\nconst parsedStacks = new Set<string>();\n\nfunction ensureMetadataStacksAreParsed(parser: StackParser): void {\n  if (!GLOBAL_OBJ._sentryModuleMetadata) {\n    return;\n  }\n\n  for (const stack of Object.keys(GLOBAL_OBJ._sentryModuleMetadata)) {\n    const metadata = GLOBAL_OBJ._sentryModuleMetadata[stack];\n\n    if (parsedStacks.has(stack)) {\n      continue;\n    }\n\n    // Ensure this stack doesn't get parsed again\n    parsedStacks.add(stack);\n\n    const frames = parser(stack);\n\n    // Go through the frames starting from the top of the stack and find the first one with a filename\n    for (const frame of frames.reverse()) {\n      if (frame.filename) {\n        // Save the metadata for this filename\n        filenameMetadataMap.set(frame.filename, metadata);\n        break;\n      }\n    }\n  }\n}\n\n/**\n * Retrieve metadata for a specific JavaScript file URL.\n *\n * Metadata is injected by the Sentry bundler plugins using the `_experiments.moduleMetadata` config option.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function getMetadataForUrl(parser: StackParser, filename: string): any | undefined {\n  ensureMetadataStacksAreParsed(parser);\n  return filenameMetadataMap.get(filename);\n}\n\n/**\n * Adds metadata to stack frames.\n *\n * Metadata is injected by the Sentry bundler plugins using the `_experiments.moduleMetadata` config option.\n */\nexport function addMetadataToStackFrames(parser: StackParser, event: Event): void {\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    event.exception!.values!.forEach(exception => {\n      if (!exception.stacktrace) {\n        return;\n      }\n\n      for (const frame of exception.stacktrace.frames || []) {\n        if (!frame.filename || frame.module_metadata) {\n          continue;\n        }\n\n        const metadata = getMetadataForUrl(parser, frame.filename);\n\n        if (metadata) {\n          frame.module_metadata = metadata;\n        }\n      }\n    });\n  } catch (_) {\n    // To save bundle size we're just try catching here instead of checking for the existence of all the different objects.\n  }\n}\n\n/**\n * Strips metadata from stack frames.\n */\nexport function stripMetadataFromStackFrames(event: Event): void {\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    event.exception!.values!.forEach(exception => {\n      if (!exception.stacktrace) {\n        return;\n      }\n\n      for (const frame of exception.stacktrace.frames || []) {\n        delete frame.module_metadata;\n      }\n    });\n  } catch (_) {\n    // To save bundle size we're just try catching here instead of checking for the existence of all the different objects.\n  }\n}\n"],"names":["GLOBAL_OBJ"],"mappings":";;;;AAIA,+DAAA,GACA,8DAAA;AACA,MAAM,sBAAsB,IAAI;AAChC,wDAAA,GACA,MAAM,eAAe,IAAI;AAEzB,SAAS,8BAA8B,MAAM;IAC3C,IAAI,CAACA,UAAAA,UAAU,CAAC,qBAAqB,EAAE;QACrC;IACJ;IAEE,KAAK,MAAM,SAAS,OAAO,IAAI,CAACA,UAAAA,UAAU,CAAC,qBAAqB,EAAG;QACjE,MAAM,WAAWA,UAAAA,UAAU,CAAC,qBAAqB,CAAC,MAAM;QAExD,IAAI,aAAa,GAAG,CAAC,QAAQ;YAC3B;QACN;QAEA,6CAAA;QACI,aAAa,GAAG,CAAC;QAEjB,MAAM,SAAS,OAAO;QAE1B,kGAAA;QACI,KAAK,MAAM,SAAS,OAAO,OAAO,GAAI;YACpC,IAAI,MAAM,QAAQ,EAAE;gBAC1B,sCAAA;gBACQ,oBAAoB,GAAG,CAAC,MAAM,QAAQ,EAAE;gBACxC;YACR;QACA;IACA;AACA;AAEA;;;;CAIA,GACA,8DAAA;AACO,SAAS,kBAAkB,MAAM,EAAe,QAAQ;IAC7D,8BAA8B;IAC9B,OAAO,oBAAoB,GAAG,CAAC;AACjC;AAEA;;;;CAIA,GACO,SAAS,yBAAyB,MAAM,EAAe,KAAK;IACjE,IAAI;QACN,oEAAA;QACI,MAAM,SAAS,CAAE,MAAM,CAAE,OAAO,CAAC,CAAA;YAC/B,IAAI,CAAC,UAAU,UAAU,EAAE;gBACzB;YACR;YAEM,KAAK,MAAM,SAAS,UAAU,UAAU,CAAC,MAAA,IAAU,EAAE,CAAE;gBACrD,IAAI,CAAC,MAAM,QAAA,IAAY,MAAM,eAAe,EAAE;oBAC5C;gBACV;gBAEQ,MAAM,WAAW,kBAAkB,QAAQ,MAAM,QAAQ;gBAEzD,IAAI,UAAU;oBACZ,MAAM,eAAA,GAAkB;gBAClC;YACA;QACA;IACA,EAAI,OAAO,GAAG;IACd,uHAAA;IACA;AACA;AAEA;;CAEA,GACO,SAAS,6BAA6B,KAAK;IAChD,IAAI;QACN,oEAAA;QACI,MAAM,SAAS,CAAE,MAAM,CAAE,OAAO,CAAC,CAAA;YAC/B,IAAI,CAAC,UAAU,UAAU,EAAE;gBACzB;YACR;YAEM,KAAK,MAAM,SAAS,UAAU,UAAU,CAAC,MAAA,IAAU,EAAE,CAAE;gBACrD,OAAO,MAAM,eAAe;YACpC;QACA;IACA,EAAI,OAAO,GAAG;IACd,uHAAA;IACA;AACA"}},
    {"offset": {"line": 9716, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9720, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/integrations/metadata.ts"],"sourcesContent":["import { defineIntegration } from '../integration';\nimport { addMetadataToStackFrames, stripMetadataFromStackFrames } from '../metadata';\nimport type { EventItem } from '../types-hoist/envelope';\nimport { forEachEnvelopeItem } from '../utils/envelope';\n\n/**\n * Adds module metadata to stack frames.\n *\n * Metadata can be injected by the Sentry bundler plugins using the `moduleMetadata` config option.\n *\n * When this integration is added, the metadata passed to the bundler plugin is added to the stack frames of all events\n * under the `module_metadata` property. This can be used to help in tagging or routing of events from different teams\n * our sources\n */\nexport const moduleMetadataIntegration = defineIntegration(() => {\n  return {\n    name: 'ModuleMetadata',\n    setup(client) {\n      // We need to strip metadata from stack frames before sending them to Sentry since these are client side only.\n      client.on('beforeEnvelope', envelope => {\n        forEachEnvelopeItem(envelope, (item, type) => {\n          if (type === 'event') {\n            const event = Array.isArray(item) ? (item as EventItem)[1] : undefined;\n\n            if (event) {\n              stripMetadataFromStackFrames(event);\n              item[1] = event;\n            }\n          }\n        });\n      });\n\n      client.on('applyFrameMetadata', event => {\n        // Only apply stack frame metadata to error events\n        if (event.type) {\n          return;\n        }\n\n        const stackParser = client.getOptions().stackParser;\n        addMetadataToStackFrames(stackParser, event);\n      });\n    },\n  };\n});\n"],"names":["defineIntegration","envelope","forEachEnvelopeItem","stripMetadataFromStackFrames","addMetadataToStackFrames"],"mappings":";;;;;;AAKA;;;;;;;;CAQA,SACa,4BAA4BA,YAAAA,iBAAiB,CAAC;IACzD,OAAO;QACL,MAAM;QACN,OAAM,MAAM;YAChB,8GAAA;YACM,OAAO,EAAE,CAAC,kBAAkBC,CAAAA;gBAC1BC,SAAAA,mBAAmB,CAACD,YAAU,CAAC,MAAM;oBACnC,IAAI,SAAS,SAAS;wBACpB,MAAM,QAAQ,MAAM,OAAO,CAAC,QAAQ,AAAC,IAAA,CAAmB,EAAC,GAAI;wBAE7D,IAAI,OAAO;4BACTE,SAAAA,4BAA4B,CAAC;4BAC7B,IAAI,CAAC,EAAC,GAAI;wBACxB;oBACA;gBACA;YACA;YAEM,OAAO,EAAE,CAAC,sBAAsB,CAAA;gBACtC,kDAAA;gBACQ,IAAI,MAAM,IAAI,EAAE;oBACd;gBACV;gBAEQ,MAAM,cAAc,OAAO,UAAU,GAAG,WAAW;gBACnDC,SAAAA,wBAAwB,CAAC,aAAa;YAC9C;QACA;IACA;AACA"}},
    {"offset": {"line": 9762, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9766, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/utils/cookie.ts"],"sourcesContent":["/**\n * This code was originally copied from the 'cookie` module at v0.5.0 and was simplified for our use case.\n * https://github.com/jshttp/cookie/blob/a0c84147aab6266bdb3996cf4062e93907c0b0fc/index.js\n * It had the following license:\n *\n * (The MIT License)\n *\n * Copyright (c) 2012-2014 Roman Shtylman <shtylman@gmail.com>\n * Copyright (c) 2015 Douglas Christopher Wilson <doug@somethingdoug.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * 'Software'), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Parses a cookie string\n */\nexport function parseCookie(str: string): Record<string, string> {\n  const obj: Record<string, string> = {};\n  let index = 0;\n\n  while (index < str.length) {\n    const eqIdx = str.indexOf('=', index);\n\n    // no more cookie pairs\n    if (eqIdx === -1) {\n      break;\n    }\n\n    let endIdx = str.indexOf(';', index);\n\n    if (endIdx === -1) {\n      endIdx = str.length;\n    } else if (endIdx < eqIdx) {\n      // backtrack on prior semicolon\n      index = str.lastIndexOf(';', eqIdx - 1) + 1;\n      continue;\n    }\n\n    const key = str.slice(index, eqIdx).trim();\n\n    // only assign once\n    if (undefined === obj[key]) {\n      let val = str.slice(eqIdx + 1, endIdx).trim();\n\n      // quoted values\n      if (val.charCodeAt(0) === 0x22) {\n        val = val.slice(1, -1);\n      }\n\n      try {\n        obj[key] = val.indexOf('%') !== -1 ? decodeURIComponent(val) : val;\n      } catch (e) {\n        obj[key] = val;\n      }\n    }\n\n    index = endIdx + 1;\n  }\n\n  return obj;\n}\n"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA4BA,GAEA;;CAEA,GACO,SAAS,YAAY,GAAG;IAC7B,MAAM,MAA8B,CAAA;IACpC,IAAI,QAAQ;IAEZ,MAAO,QAAQ,IAAI,MAAM,CAAE;QACzB,MAAM,QAAQ,IAAI,OAAO,CAAC,KAAK;QAEnC,uBAAA;QACI,IAAI,UAAU,CAAA,GAAI;YAChB;QACN;QAEI,IAAI,SAAS,IAAI,OAAO,CAAC,KAAK;QAE9B,IAAI,WAAW,CAAA,GAAI;YACjB,SAAS,IAAI,MAAM;QACzB,OAAW,IAAI,SAAS,OAAO;YAC/B,+BAAA;YACM,QAAQ,IAAI,WAAW,CAAC,KAAK,QAAQ,KAAK;YAC1C;QACN;QAEI,MAAM,MAAM,IAAI,KAAK,CAAC,OAAO,OAAO,IAAI;QAE5C,mBAAA;QACI,IAAI,cAAc,GAAG,CAAC,IAAI,EAAE;YAC1B,IAAI,MAAM,IAAI,KAAK,CAAC,QAAQ,GAAG,QAAQ,IAAI;YAEjD,gBAAA;YACM,IAAI,IAAI,UAAU,CAAC,OAAO,MAAM;gBAC9B,MAAM,IAAI,KAAK,CAAC,GAAG,CAAA;YAC3B;YAEM,IAAI;gBACF,GAAG,CAAC,IAAG,GAAI,IAAI,OAAO,CAAC,SAAS,CAAC,IAAI,mBAAmB,OAAO;YACvE,EAAQ,OAAO,GAAG;gBACV,GAAG,CAAC,IAAG,GAAI;YACnB;QACA;QAEI,QAAQ,SAAS;IACrB;IAEE,OAAO;AACT"}},
    {"offset": {"line": 9835, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9839, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/vendor/getIpAddress.ts"],"sourcesContent":["// Vendored / modified from @sergiodxa/remix-utils\n\n// https://github.com/sergiodxa/remix-utils/blob/02af80e12829a53696bfa8f3c2363975cf59f55e/src/server/get-client-ip-address.ts\n// MIT License\n\n// Copyright (c) 2021 Sergio Xalambrí\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\n// The headers to check, in priority order\nexport const ipHeaderNames = [\n  'X-Client-IP',\n  'X-Forwarded-For',\n  'Fly-Client-IP',\n  'CF-Connecting-IP',\n  'Fastly-Client-Ip',\n  'True-Client-Ip',\n  'X-Real-IP',\n  'X-Cluster-Client-IP',\n  'X-Forwarded',\n  'Forwarded-For',\n  'Forwarded',\n  'X-Vercel-Forwarded-For',\n];\n\n/**\n * Get the IP address of the client sending a request.\n *\n * It receives a Request headers object and use it to get the\n * IP address from one of the following headers in order.\n *\n * If the IP address is valid, it will be returned. Otherwise, null will be\n * returned.\n *\n * If the header values contains more than one IP address, the first valid one\n * will be returned.\n */\nexport function getClientIPAddress(headers: { [key: string]: string | string[] | undefined }): string | null {\n  // This will end up being Array<string | string[] | undefined | null> because of the various possible values a header\n  // can take\n  const headerValues = ipHeaderNames.map((headerName: string) => {\n    const rawValue = headers[headerName];\n    const value = Array.isArray(rawValue) ? rawValue.join(';') : rawValue;\n\n    if (headerName === 'Forwarded') {\n      return parseForwardedHeader(value);\n    }\n\n    return value?.split(',').map((v: string) => v.trim());\n  });\n\n  // Flatten the array and filter out any falsy entries\n  const flattenedHeaderValues = headerValues.reduce((acc: string[], val) => {\n    if (!val) {\n      return acc;\n    }\n\n    return acc.concat(val);\n  }, []);\n\n  // Find the first value which is a valid IP address, if any\n  const ipAddress = flattenedHeaderValues.find(ip => ip !== null && isIP(ip));\n\n  return ipAddress || null;\n}\n\nfunction parseForwardedHeader(value: string | null | undefined): string | null {\n  if (!value) {\n    return null;\n  }\n\n  for (const part of value.split(';')) {\n    if (part.startsWith('for=')) {\n      return part.slice(4);\n    }\n  }\n\n  return null;\n}\n\n//\n/**\n * Custom method instead of importing this from `net` package, as this only exists in node\n * Accepts:\n * 127.0.0.1\n * 192.168.1.1\n * 192.168.1.255\n * 255.255.255.255\n * 10.1.1.1\n * 0.0.0.0\n * 2b01:cb19:8350:ed00:d0dd:fa5b:de31:8be5\n *\n * Rejects:\n * 1.1.1.01\n * 30.168.1.255.1\n * 127.1\n * 192.168.1.256\n * -1.2.3.4\n * 1.1.1.1.\n * 3...3\n * 192.168.1.099\n */\nfunction isIP(str: string): boolean {\n  const regex =\n    /(?:^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}$)|(?:^(?:(?:[a-fA-F\\d]{1,4}:){7}(?:[a-fA-F\\d]{1,4}|:)|(?:[a-fA-F\\d]{1,4}:){6}(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|:[a-fA-F\\d]{1,4}|:)|(?:[a-fA-F\\d]{1,4}:){5}(?::(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,2}|:)|(?:[a-fA-F\\d]{1,4}:){4}(?:(?::[a-fA-F\\d]{1,4}){0,1}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,3}|:)|(?:[a-fA-F\\d]{1,4}:){3}(?:(?::[a-fA-F\\d]{1,4}){0,2}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,4}|:)|(?:[a-fA-F\\d]{1,4}:){2}(?:(?::[a-fA-F\\d]{1,4}){0,3}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,5}|:)|(?:[a-fA-F\\d]{1,4}:){1}(?:(?::[a-fA-F\\d]{1,4}){0,4}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,6}|:)|(?::(?:(?::[a-fA-F\\d]{1,4}){0,5}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,7}|:)))(?:%[0-9a-zA-Z]{1,})?$)/;\n  return regex.test(str);\n}\n"],"names":[],"mappings":";;;AAAA,kDAAA;AAEA,6HAAA;AACA,cAAA;AAEA,qCAAA;AAEA,+EAAA;AACA,gFAAA;AACA,+EAAA;AACA,4EAAA;AACA,wEAAA;AACA,2DAAA;AAEA,iFAAA;AACA,kDAAA;AAEA,6EAAA;AACA,2EAAA;AACA,8EAAA;AACA,yEAAA;AACA,gFAAA;AACA,gFAAA;AACA,YAAA;AAEA,0CAAA;AACO,MAAM,gBAAgB;IAC3B;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACF;AAEA;;;;;;;;;;;CAWA,GACO,SAAS,mBAAmB,OAAO;IAC1C,qHAAA;IACA,WAAA;IACE,MAAM,eAAe,cAAc,GAAG,CAAC,CAAC;QACtC,MAAM,WAAW,OAAO,CAAC,WAAW;QACpC,MAAM,QAAQ,MAAM,OAAO,CAAC,YAAY,SAAS,IAAI,CAAC,OAAO;QAE7D,IAAI,eAAe,aAAa;YAC9B,OAAO,qBAAqB;QAClC;QAEI,OAAO,OAAO,MAAM,KAAK,IAAI,CAAC,IAAc,EAAE,IAAI;IACtD;IAEA,qDAAA;IACE,MAAM,wBAAwB,aAAa,MAAM,CAAC,CAAC,KAAe;QAChE,IAAI,CAAC,KAAK;YACR,OAAO;QACb;QAEI,OAAO,IAAI,MAAM,CAAC;IACtB,GAAK,EAAE;IAEP,2DAAA;IACE,MAAM,YAAY,sBAAsB,IAAI,CAAC,CAAA,KAAM,OAAO,QAAQ,KAAK;IAEvE,OAAO,aAAa;AACtB;AAEA,SAAS,qBAAqB,KAAK;IACjC,IAAI,CAAC,OAAO;QACV,OAAO;IACX;IAEE,KAAK,MAAM,QAAQ,MAAM,KAAK,CAAC,KAAM;QACnC,IAAI,KAAK,UAAU,CAAC,SAAS;YAC3B,OAAO,KAAK,KAAK,CAAC;QACxB;IACA;IAEE,OAAO;AACT;AAEA,EAAA;AACA;;;;;;;;;;;;;;;;;;;;CAoBA,GACA,SAAS,KAAK,GAAG;IACf,MAAM,QACJ;IACF,OAAO,MAAM,IAAI,CAAC;AACpB"}},
    {"offset": {"line": 9947, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9951, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/integrations/requestdata.ts"],"sourcesContent":["import { defineIntegration } from '../integration';\nimport type { Event } from '../types-hoist/event';\nimport type { IntegrationFn } from '../types-hoist/integration';\nimport type { RequestEventData } from '../types-hoist/request';\nimport { parseCookie } from '../utils/cookie';\nimport { getClientIPAddress, ipHeaderNames } from '../vendor/getIpAddress';\n\ninterface RequestDataIncludeOptions {\n  cookies?: boolean;\n  data?: boolean;\n  headers?: boolean;\n  ip?: boolean;\n  query_string?: boolean;\n  url?: boolean;\n}\n\ntype RequestDataIntegrationOptions = {\n  /**\n   * Controls what data is pulled from the request and added to the event.\n   */\n  include?: RequestDataIncludeOptions;\n};\n\n// TODO(v10): Change defaults based on `sendDefaultPii`\nconst DEFAULT_INCLUDE: RequestDataIncludeOptions = {\n  cookies: true,\n  data: true,\n  headers: true,\n  query_string: true,\n  url: true,\n};\n\nconst INTEGRATION_NAME = 'RequestData';\n\nconst _requestDataIntegration = ((options: RequestDataIntegrationOptions = {}) => {\n  const include = {\n    ...DEFAULT_INCLUDE,\n    ...options.include,\n  };\n\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(event, _hint, client) {\n      const { sdkProcessingMetadata = {} } = event;\n      const { normalizedRequest, ipAddress } = sdkProcessingMetadata;\n\n      const includeWithDefaultPiiApplied: RequestDataIncludeOptions = {\n        ...include,\n        ip: include.ip ?? client.getOptions().sendDefaultPii,\n      };\n\n      if (normalizedRequest) {\n        addNormalizedRequestDataToEvent(event, normalizedRequest, { ipAddress }, includeWithDefaultPiiApplied);\n      }\n\n      return event;\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Add data about a request to an event. Primarily for use in Node-based SDKs, but included in `@sentry/core`\n * so it can be used in cross-platform SDKs like `@sentry/nextjs`.\n */\nexport const requestDataIntegration = defineIntegration(_requestDataIntegration);\n\n/**\n * Add already normalized request data to an event.\n * This mutates the passed in event.\n */\nfunction addNormalizedRequestDataToEvent(\n  event: Event,\n  req: RequestEventData,\n  // Data that should not go into `event.request` but is somehow related to requests\n  additionalData: { ipAddress?: string },\n  include: RequestDataIncludeOptions,\n): void {\n  event.request = {\n    ...event.request,\n    ...extractNormalizedRequestData(req, include),\n  };\n\n  if (include.ip) {\n    const ip = (req.headers && getClientIPAddress(req.headers)) || additionalData.ipAddress;\n    if (ip) {\n      event.user = {\n        ...event.user,\n        ip_address: ip,\n      };\n    }\n  }\n}\n\nfunction extractNormalizedRequestData(\n  normalizedRequest: RequestEventData,\n  include: RequestDataIncludeOptions,\n): RequestEventData {\n  const requestData: RequestEventData = {};\n  const headers = { ...normalizedRequest.headers };\n\n  if (include.headers) {\n    requestData.headers = headers;\n\n    // Remove the Cookie header in case cookie data should not be included in the event\n    if (!include.cookies) {\n      delete (headers as { cookie?: string }).cookie;\n    }\n\n    // Remove IP headers in case IP data should not be included in the event\n    if (!include.ip) {\n      ipHeaderNames.forEach(ipHeaderName => {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete (headers as Record<string, unknown>)[ipHeaderName];\n      });\n    }\n  }\n\n  requestData.method = normalizedRequest.method;\n\n  if (include.url) {\n    requestData.url = normalizedRequest.url;\n  }\n\n  if (include.cookies) {\n    const cookies = normalizedRequest.cookies || (headers?.cookie ? parseCookie(headers.cookie) : undefined);\n    requestData.cookies = cookies || {};\n  }\n\n  if (include.query_string) {\n    requestData.query_string = normalizedRequest.query_string;\n  }\n\n  if (include.data) {\n    requestData.data = normalizedRequest.data;\n  }\n\n  return requestData;\n}\n"],"names":["defineIntegration","getClientIPAddress","ipHeaderNames","parseCookie"],"mappings":";;;;;;AAuBA,uDAAA;AACA,MAAM,kBAA6C;IACjD,SAAS;IACT,MAAM;IACN,SAAS;IACT,cAAc;IACd,KAAK;AACP;AAEA,MAAM,mBAAmB;AAEzB,MAAM,0BAA2B,CAAC,UAAyC,CAAA,CAAE;IAC3E,MAAM,UAAU;QACd,GAAG,eAAe;QAClB,GAAG,QAAQ,OAAO;IACtB;IAEE,OAAO;QACL,MAAM;QACN,cAAa,KAAK,EAAE,KAAK,EAAE,MAAM;YAC/B,MAAM,EAAE,wBAAwB,CAAA,CAAC,EAAE,GAAI;YACvC,MAAM,EAAE,iBAAiB,EAAE,SAAA,EAAU,GAAI;YAEzC,MAAM,+BAA0D;gBAC9D,GAAG,OAAO;gBACV,IAAI,QAAQ,EAAA,IAAM,OAAO,UAAU,GAAG,cAAc;YAC5D;YAEM,IAAI,mBAAmB;gBACrB,gCAAgC,OAAO,mBAAmB;oBAAE;gBAAA,GAAa;YACjF;YAEM,OAAO;QACb;IACA;AACA;AAEA;;;CAGA,SACa,yBAAyBA,YAAAA,iBAAiB,CAAC;AAExD;;;CAGA,GACA,SAAS,gCACP,KAAK,EACL,GAAG,EACL,kFAAA;AACE,cAAc,EACd,OAAO;IAEP,MAAM,OAAA,GAAU;QACd,GAAG,MAAM,OAAO;QAChB,GAAG,6BAA6B,KAAK,QAAQ;IACjD;IAEE,IAAI,QAAQ,EAAE,EAAE;QACd,MAAM,KAAK,AAAC,IAAI,OAAA,IAAWC,aAAAA,kBAAkB,CAAC,IAAI,OAAO,KAAM,eAAe,SAAS;QACvF,IAAI,IAAI;YACN,MAAM,IAAA,GAAO;gBACX,GAAG,MAAM,IAAI;gBACb,YAAY;YACpB;QACA;IACA;AACA;AAEA,SAAS,6BACP,iBAAiB,EACjB,OAAO;IAEP,MAAM,cAAgC,CAAA;IACtC,MAAM,UAAU;QAAE,GAAG,kBAAkB,OAAA;IAAA;IAEvC,IAAI,QAAQ,OAAO,EAAE;QACnB,YAAY,OAAA,GAAU;QAE1B,mFAAA;QACI,IAAI,CAAC,QAAQ,OAAO,EAAE;YACpB,OAAO,AAAC,QAAgC,MAAM;QACpD;QAEA,wEAAA;QACI,IAAI,CAAC,QAAQ,EAAE,EAAE;YACfC,aAAAA,aAAa,CAAC,OAAO,CAAC,CAAA;gBAC5B,gEAAA;gBACQ,OAAO,AAAC,OAAA,CAAoC,aAAa;YACjE;QACA;IACA;IAEE,YAAY,MAAA,GAAS,kBAAkB,MAAM;IAE7C,IAAI,QAAQ,GAAG,EAAE;QACf,YAAY,GAAA,GAAM,kBAAkB,GAAG;IAC3C;IAEE,IAAI,QAAQ,OAAO,EAAE;QACnB,MAAM,UAAU,kBAAkB,OAAA,IAAA,CAAY,SAAS,SAASC,OAAAA,WAAW,CAAC,QAAQ,MAAM,IAAI,SAAS;QACvG,YAAY,OAAA,GAAU,WAAW,CAAA;IACrC;IAEE,IAAI,QAAQ,YAAY,EAAE;QACxB,YAAY,YAAA,GAAe,kBAAkB,YAAY;IAC7D;IAEE,IAAI,QAAQ,IAAI,EAAE;QAChB,YAAY,IAAA,GAAO,kBAAkB,IAAI;IAC7C;IAEE,OAAO;AACT"}},
    {"offset": {"line": 10048, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 10052, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/instrument/console.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/ban-types */\nimport type { ConsoleLevel, HandlerDataConsole } from '../types-hoist/instrument';\nimport { CONSOLE_LEVELS, originalConsoleMethods } from '../utils/logger';\nimport { fill } from '../utils/object';\nimport { GLOBAL_OBJ } from '../utils/worldwide';\nimport { addHandler, maybeInstrument, triggerHandlers } from './handlers';\n\n/**\n * Add an instrumentation handler for when a console.xxx method is called.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nexport function addConsoleInstrumentationHandler(handler: (data: HandlerDataConsole) => void): void {\n  const type = 'console';\n  addHandler(type, handler);\n  maybeInstrument(type, instrumentConsole);\n}\n\nfunction instrumentConsole(): void {\n  if (!('console' in GLOBAL_OBJ)) {\n    return;\n  }\n\n  CONSOLE_LEVELS.forEach(function (level: ConsoleLevel): void {\n    if (!(level in GLOBAL_OBJ.console)) {\n      return;\n    }\n\n    fill(GLOBAL_OBJ.console, level, function (originalConsoleMethod: () => any): Function {\n      originalConsoleMethods[level] = originalConsoleMethod;\n\n      return function (...args: any[]): void {\n        const handlerData: HandlerDataConsole = { args, level };\n        triggerHandlers('console', handlerData);\n\n        const log = originalConsoleMethods[level];\n        log?.apply(GLOBAL_OBJ.console, args);\n      };\n    });\n  });\n}\n"],"names":["addHandler","maybeInstrument","GLOBAL_OBJ","CONSOLE_LEVELS","fill","originalConsoleMethods","triggerHandlers"],"mappings":";;;;;;;AAQA;;;;;CAKA,GACO,SAAS,iCAAiC,OAAO;IACtD,MAAM,OAAO;IACbA,SAAAA,UAAU,CAAC,MAAM;IACjBC,SAAAA,eAAe,CAAC,MAAM;AACxB;AAEA,SAAS;IACP,IAAI,CAAA,CAAE,aAAaC,UAAAA,UAAU,GAAG;QAC9B;IACJ;IAEEC,OAAAA,cAAc,CAAC,OAAO,CAAC,SAAU,KAAK;QACpC,IAAI,CAAA,CAAE,SAASD,UAAAA,UAAU,CAAC,OAAO,GAAG;YAClC;QACN;QAEIE,OAAAA,IAAI,CAACF,UAAAA,UAAU,CAAC,OAAO,EAAE,OAAO,SAAU,qBAAqB;YAC7DG,OAAAA,sBAAsB,CAAC,MAAK,GAAI;YAEhC,OAAO,SAAU,GAAG,IAAI;gBACtB,MAAM,cAAkC;oBAAE;oBAAM;gBAAA;gBAChDC,SAAAA,eAAe,CAAC,WAAW;gBAE3B,MAAM,MAAMD,OAAAA,sBAAsB,CAAC,MAAM;gBACzC,KAAK,MAAMH,UAAAA,UAAU,CAAC,OAAO,EAAE;YACvC;QACA;IACA;AACA"}},
    {"offset": {"line": 10092, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 10096, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/utils/severity.ts"],"sourcesContent":["import type { SeverityLevel } from '../types-hoist/severity';\n\n/**\n * Converts a string-based level into a `SeverityLevel`, normalizing it along the way.\n *\n * @param level String representation of desired `SeverityLevel`.\n * @returns The `SeverityLevel` corresponding to the given string, or 'log' if the string isn't a valid level.\n */\nexport function severityLevelFromString(level: SeverityLevel | string): SeverityLevel {\n  return (\n    level === 'warn' ? 'warning' : ['fatal', 'error', 'warning', 'log', 'info', 'debug'].includes(level) ? level : 'log'\n  ) as SeverityLevel;\n}\n"],"names":[],"mappings":";;;AAEA;;;;;CAKA,GACO,SAAS,wBAAwB,KAAK;IAC3C,OACE,UAAU,SAAS,YAAY;QAAC;QAAS;QAAS;QAAW;QAAO;QAAQ;KAAQ,CAAC,QAAQ,CAAC,SAAS,QAAQ;AAEnH"}},
    {"offset": {"line": 10115, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 10119, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/integrations/captureconsole.ts"],"sourcesContent":["import { getClient, withScope } from '../currentScopes';\nimport { captureException, captureMessage } from '../exports';\nimport { addConsoleInstrumentationHandler } from '../instrument/console';\nimport { defineIntegration } from '../integration';\nimport type { CaptureContext } from '../scope';\nimport type { IntegrationFn } from '../types-hoist/integration';\nimport { CONSOLE_LEVELS } from '../utils/logger';\nimport { addExceptionMechanism } from '../utils/misc';\nimport { severityLevelFromString } from '../utils/severity';\nimport { safeJoin } from '../utils/string';\nimport { GLOBAL_OBJ } from '../utils/worldwide';\n\ninterface CaptureConsoleOptions {\n  levels?: string[];\n\n  /**\n   * By default, Sentry will mark captured console messages as handled.\n   * Set this to `false` if you want to mark them as unhandled instead.\n   *\n   * @default true\n   */\n  handled?: boolean;\n}\n\nconst INTEGRATION_NAME = 'CaptureConsole';\n\nconst _captureConsoleIntegration = ((options: CaptureConsoleOptions = {}) => {\n  const levels = options.levels || CONSOLE_LEVELS;\n  const handled = options.handled ?? true;\n\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      if (!('console' in GLOBAL_OBJ)) {\n        return;\n      }\n\n      addConsoleInstrumentationHandler(({ args, level }) => {\n        if (getClient() !== client || !levels.includes(level)) {\n          return;\n        }\n\n        consoleHandler(args, level, handled);\n      });\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Send Console API calls as Sentry Events.\n */\nexport const captureConsoleIntegration = defineIntegration(_captureConsoleIntegration);\n\nfunction consoleHandler(args: unknown[], level: string, handled: boolean): void {\n  const captureContext: CaptureContext = {\n    level: severityLevelFromString(level),\n    extra: {\n      arguments: args,\n    },\n  };\n\n  withScope(scope => {\n    scope.addEventProcessor(event => {\n      event.logger = 'console';\n\n      addExceptionMechanism(event, {\n        handled,\n        type: 'console',\n      });\n\n      return event;\n    });\n\n    if (level === 'assert') {\n      if (!args[0]) {\n        const message = `Assertion failed: ${safeJoin(args.slice(1), ' ') || 'console.assert'}`;\n        scope.setExtra('arguments', args.slice(1));\n        captureMessage(message, captureContext);\n      }\n      return;\n    }\n\n    const error = args.find(arg => arg instanceof Error);\n    if (error) {\n      captureException(error, captureContext);\n      return;\n    }\n\n    const message = safeJoin(args, ' ');\n    captureMessage(message, captureContext);\n  });\n}\n"],"names":["CONSOLE_LEVELS","GLOBAL_OBJ","addConsoleInstrumentationHandler","getClient","defineIntegration","severityLevelFromString","withScope","addExceptionMechanism","safeJoin","captureMessage","captureException"],"mappings":";;;;;;;;;;;;AAwBA,MAAM,mBAAmB;AAEzB,MAAM,6BAA8B,CAAC,UAAiC,CAAA,CAAE;IACtE,MAAM,SAAS,QAAQ,MAAA,IAAUA,OAAAA,cAAc;IAC/C,MAAM,UAAU,QAAQ,OAAA,IAAW;IAEnC,OAAO;QACL,MAAM;QACN,OAAM,MAAM;YACV,IAAI,CAAA,CAAE,aAAaC,UAAAA,UAAU,GAAG;gBAC9B;YACR;YAEMC,QAAAA,gCAAgC,CAAC,CAAC,EAAE,IAAI,EAAE,KAAA,EAAO;gBAC/C,IAAIC,cAAAA,SAAS,OAAO,UAAU,CAAC,OAAO,QAAQ,CAAC,QAAQ;oBACrD;gBACV;gBAEQ,eAAe,MAAM,OAAO;YACpC;QACA;IACA;AACA;AAEA;;CAEA,SACa,4BAA4BC,YAAAA,iBAAiB,CAAC;AAE3D,SAAS,eAAe,IAAI,EAAa,KAAK,EAAU,OAAO;IAC7D,MAAM,iBAAiC;QACrC,OAAOC,SAAAA,uBAAuB,CAAC;QAC/B,OAAO;YACL,WAAW;QACjB;IACA;IAEEC,cAAAA,SAAS,CAAC,CAAA;QACR,MAAM,iBAAiB,CAAC,CAAA;YACtB,MAAM,MAAA,GAAS;YAEfC,KAAAA,qBAAqB,CAAC,OAAO;gBAC3B;gBACA,MAAM;YACd;YAEM,OAAO;QACb;QAEI,IAAI,UAAU,UAAU;YACtB,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE;gBACZ,MAAM,UAAU,CAAC,kBAAkB,EAAEC,OAAAA,QAAQ,CAAC,KAAK,KAAK,CAAC,IAAI,QAAQ,iBAAiB,CAAA;gBACA,MAAA,QAAA,CAAA,aAAA,KAAA,KAAA,CAAA;gBACAC,UAAAA,cAAA,CAAA,SAAA;YACA;YACA;QACA;QAEA,MAAA,QAAA,KAAA,IAAA,CAAA,CAAA,MAAA,eAAA;QACA,IAAA,OAAA;YACAC,UAAAA,gBAAA,CAAA,OAAA;YACA;QACA;QAEA,MAAA,UAAAF,OAAAA,QAAA,CAAA,MAAA;QACAC,UAAAA,cAAA,CAAA,SAAA;IACA;AACA"}},
    {"offset": {"line": 10187, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 10191, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/integrations/dedupe.ts"],"sourcesContent":["import { DEBUG_BUILD } from '../debug-build';\nimport { defineIntegration } from '../integration';\nimport type { Event } from '../types-hoist/event';\nimport type { Exception } from '../types-hoist/exception';\nimport type { IntegrationFn } from '../types-hoist/integration';\nimport type { StackFrame } from '../types-hoist/stackframe';\nimport { logger } from '../utils/logger';\nimport { getFramesFromEvent } from '../utils/stacktrace';\n\nconst INTEGRATION_NAME = 'Dedupe';\n\nconst _dedupeIntegration = (() => {\n  let previousEvent: Event | undefined;\n\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(currentEvent) {\n      // We want to ignore any non-error type events, e.g. transactions or replays\n      // These should never be deduped, and also not be compared against as _previousEvent.\n      if (currentEvent.type) {\n        return currentEvent;\n      }\n\n      // Juuust in case something goes wrong\n      try {\n        if (_shouldDropEvent(currentEvent, previousEvent)) {\n          DEBUG_BUILD && logger.warn('Event dropped due to being a duplicate of previously captured event.');\n          return null;\n        }\n      } catch (_oO) {} // eslint-disable-line no-empty\n\n      return (previousEvent = currentEvent);\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Deduplication filter.\n */\nexport const dedupeIntegration = defineIntegration(_dedupeIntegration);\n\n/** only exported for tests. */\nexport function _shouldDropEvent(currentEvent: Event, previousEvent?: Event): boolean {\n  if (!previousEvent) {\n    return false;\n  }\n\n  if (_isSameMessageEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n\n  if (_isSameExceptionEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction _isSameMessageEvent(currentEvent: Event, previousEvent: Event): boolean {\n  const currentMessage = currentEvent.message;\n  const previousMessage = previousEvent.message;\n\n  // If neither event has a message property, they were both exceptions, so bail out\n  if (!currentMessage && !previousMessage) {\n    return false;\n  }\n\n  // If only one event has a stacktrace, but not the other one, they are not the same\n  if ((currentMessage && !previousMessage) || (!currentMessage && previousMessage)) {\n    return false;\n  }\n\n  if (currentMessage !== previousMessage) {\n    return false;\n  }\n\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction _isSameExceptionEvent(currentEvent: Event, previousEvent: Event): boolean {\n  const previousException = _getExceptionFromEvent(previousEvent);\n  const currentException = _getExceptionFromEvent(currentEvent);\n\n  if (!previousException || !currentException) {\n    return false;\n  }\n\n  if (previousException.type !== currentException.type || previousException.value !== currentException.value) {\n    return false;\n  }\n\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction _isSameStacktrace(currentEvent: Event, previousEvent: Event): boolean {\n  let currentFrames = getFramesFromEvent(currentEvent);\n  let previousFrames = getFramesFromEvent(previousEvent);\n\n  // If neither event has a stacktrace, they are assumed to be the same\n  if (!currentFrames && !previousFrames) {\n    return true;\n  }\n\n  // If only one event has a stacktrace, but not the other one, they are not the same\n  if ((currentFrames && !previousFrames) || (!currentFrames && previousFrames)) {\n    return false;\n  }\n\n  currentFrames = currentFrames as StackFrame[];\n  previousFrames = previousFrames as StackFrame[];\n\n  // If number of frames differ, they are not the same\n  if (previousFrames.length !== currentFrames.length) {\n    return false;\n  }\n\n  // Otherwise, compare the two\n  for (let i = 0; i < previousFrames.length; i++) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const frameA = previousFrames[i]!;\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const frameB = currentFrames[i]!;\n\n    if (\n      frameA.filename !== frameB.filename ||\n      frameA.lineno !== frameB.lineno ||\n      frameA.colno !== frameB.colno ||\n      frameA.function !== frameB.function\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction _isSameFingerprint(currentEvent: Event, previousEvent: Event): boolean {\n  let currentFingerprint = currentEvent.fingerprint;\n  let previousFingerprint = previousEvent.fingerprint;\n\n  // If neither event has a fingerprint, they are assumed to be the same\n  if (!currentFingerprint && !previousFingerprint) {\n    return true;\n  }\n\n  // If only one event has a fingerprint, but not the other one, they are not the same\n  if ((currentFingerprint && !previousFingerprint) || (!currentFingerprint && previousFingerprint)) {\n    return false;\n  }\n\n  currentFingerprint = currentFingerprint as string[];\n  previousFingerprint = previousFingerprint as string[];\n\n  // Otherwise, compare the two\n  try {\n    return !!(currentFingerprint.join('') === previousFingerprint.join(''));\n  } catch (_oO) {\n    return false;\n  }\n}\n\nfunction _getExceptionFromEvent(event: Event): Exception | undefined {\n  return event.exception?.values && event.exception.values[0];\n}\n"],"names":["DEBUG_BUILD","logger","defineIntegration","getFramesFromEvent"],"mappings":"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"}},
    {"offset": {"line": 10328, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 10332, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/integrations/extraerrordata.ts"],"sourcesContent":["import { DEBUG_BUILD } from '../debug-build';\nimport { defineIntegration } from '../integration';\nimport type { Contexts } from '../types-hoist/context';\nimport type { ExtendedError } from '../types-hoist/error';\nimport type { Event, EventHint } from '../types-hoist/event';\nimport type { IntegrationFn } from '../types-hoist/integration';\nimport { isError, isPlainObject } from '../utils/is';\nimport { logger } from '../utils/logger';\nimport { normalize } from '../utils/normalize';\nimport { addNonEnumerableProperty } from '../utils/object';\nimport { truncate } from '../utils/string';\n\nconst INTEGRATION_NAME = 'ExtraErrorData';\n\ninterface ExtraErrorDataOptions {\n  /**\n   * The object depth up to which to capture data on error objects.\n   */\n  depth: number;\n\n  /**\n   * Whether to capture error causes. Defaults to true.\n   *\n   * More information: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/cause\n   */\n  captureErrorCause: boolean;\n}\n\n/**\n * Extract additional data for from original exceptions.\n */\nconst _extraErrorDataIntegration = ((options: Partial<ExtraErrorDataOptions> = {}) => {\n  const { depth = 3, captureErrorCause = true } = options;\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(event, hint, client) {\n      const { maxValueLength = 250 } = client.getOptions();\n      return _enhanceEventWithErrorData(event, hint, depth, captureErrorCause, maxValueLength);\n    },\n  };\n}) satisfies IntegrationFn;\n\nexport const extraErrorDataIntegration = defineIntegration(_extraErrorDataIntegration);\n\nfunction _enhanceEventWithErrorData(\n  event: Event,\n  hint: EventHint = {},\n  depth: number,\n  captureErrorCause: boolean,\n  maxValueLength: number,\n): Event {\n  if (!hint.originalException || !isError(hint.originalException)) {\n    return event;\n  }\n  const exceptionName = (hint.originalException as ExtendedError).name || hint.originalException.constructor.name;\n\n  const errorData = _extractErrorData(hint.originalException as ExtendedError, captureErrorCause, maxValueLength);\n\n  if (errorData) {\n    const contexts: Contexts = {\n      ...event.contexts,\n    };\n\n    const normalizedErrorData = normalize(errorData, depth);\n\n    if (isPlainObject(normalizedErrorData)) {\n      // We mark the error data as \"already normalized\" here, because we don't want other normalization procedures to\n      // potentially truncate the data we just already normalized, with a certain depth setting.\n      addNonEnumerableProperty(normalizedErrorData, '__sentry_skip_normalization__', true);\n      contexts[exceptionName] = normalizedErrorData;\n    }\n\n    return {\n      ...event,\n      contexts,\n    };\n  }\n\n  return event;\n}\n\n/**\n * Extract extra information from the Error object\n */\nfunction _extractErrorData(\n  error: ExtendedError,\n  captureErrorCause: boolean,\n  maxValueLength: number,\n): Record<string, unknown> | null {\n  // We are trying to enhance already existing event, so no harm done if it won't succeed\n  try {\n    const nativeKeys = [\n      'name',\n      'message',\n      'stack',\n      'line',\n      'column',\n      'fileName',\n      'lineNumber',\n      'columnNumber',\n      'toJSON',\n    ];\n\n    const extraErrorInfo: Record<string, unknown> = {};\n\n    // We want only enumerable properties, thus `getOwnPropertyNames` is redundant here, as we filter keys anyway.\n    for (const key of Object.keys(error)) {\n      if (nativeKeys.indexOf(key) !== -1) {\n        continue;\n      }\n      const value = error[key];\n      extraErrorInfo[key] = isError(value) || typeof value === 'string' ? truncate(`${value}`, maxValueLength) : value;\n    }\n\n    // Error.cause is a standard property that is non enumerable, we therefore need to access it separately.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/cause\n    if (captureErrorCause && error.cause !== undefined) {\n      extraErrorInfo.cause = isError(error.cause) ? error.cause.toString() : error.cause;\n    }\n\n    // Check if someone attached `toJSON` method to grab even more properties (eg. axios is doing that)\n    if (typeof error.toJSON === 'function') {\n      const serializedError = error.toJSON() as Record<string, unknown>;\n\n      for (const key of Object.keys(serializedError)) {\n        const value = serializedError[key];\n        extraErrorInfo[key] = isError(value) ? value.toString() : value;\n      }\n    }\n\n    return extraErrorInfo;\n  } catch (oO) {\n    DEBUG_BUILD && logger.error('Unable to extract extra data from the Error object:', oO);\n  }\n\n  return null;\n}\n"],"names":["defineIntegration","isError","normalize","isPlainObject","addNonEnumerableProperty","truncate","DEBUG_BUILD","logger"],"mappings":";;;;;;;;;;AAYA,MAAM,mBAAmB;AAgBzB;;CAEA,GACA,MAAM,6BAA8B,CAAC,UAA0C,CAAA,CAAE;IAC/E,MAAM,EAAE,QAAQ,CAAC,EAAE,oBAAoB,IAAA,EAAK,GAAI;IAChD,OAAO;QACL,MAAM;QACN,cAAa,KAAK,EAAE,IAAI,EAAE,MAAM;YAC9B,MAAM,EAAE,iBAAiB,GAAA,EAAI,GAAI,OAAO,UAAU;YAClD,OAAO,2BAA2B,OAAO,MAAM,OAAO,mBAAmB;QAC/E;IACA;AACA;MAEa,4BAA4BA,YAAAA,iBAAiB,CAAC;AAE3D,SAAS,2BACP,KAAK,EACL,OAAkB,CAAA,CAAE,EACpB,KAAK,EACL,iBAAiB,EACjB,cAAc;IAEd,IAAI,CAAC,KAAK,iBAAA,IAAqB,CAACC,GAAAA,OAAO,CAAC,KAAK,iBAAiB,GAAG;QAC/D,OAAO;IACX;IACE,MAAM,gBAAgB,AAAC,KAAK,iBAAA,CAAoC,IAAA,IAAQ,KAAK,iBAAiB,CAAC,WAAW,CAAC,IAAI;IAE/G,MAAM,YAAY,kBAAkB,KAAK,iBAAA,EAAoC,mBAAmB;IAEhG,IAAI,WAAW;QACb,MAAM,WAAqB;YACzB,GAAG,MAAM,QAAQ;QACvB;QAEI,MAAM,sBAAsBC,UAAAA,SAAS,CAAC,WAAW;QAEjD,IAAIC,GAAAA,aAAa,CAAC,sBAAsB;YAC5C,+GAAA;YACA,0FAAA;YACMC,OAAAA,wBAAwB,CAAC,qBAAqB,iCAAiC;YAC/E,QAAQ,CAAC,cAAa,GAAI;QAChC;QAEI,OAAO;YACL,GAAG,KAAK;YACR;QACN;IACA;IAEE,OAAO;AACT;AAEA;;CAEA,GACA,SAAS,kBACP,KAAK,EACL,iBAAiB,EACjB,cAAc;IAEhB,uFAAA;IACE,IAAI;QACF,MAAM,aAAa;YACjB;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;SACD;QAED,MAAM,iBAA0C,CAAA;QAEpD,8GAAA;QACI,KAAK,MAAM,OAAO,OAAO,IAAI,CAAC,OAAQ;YACpC,IAAI,WAAW,OAAO,CAAC,SAAS,CAAC,GAAG;gBAClC;YACR;YACM,MAAM,QAAQ,KAAK,CAAC,IAAI;YACxB,cAAc,CAAC,IAAG,GAAIH,GAAAA,OAAO,CAAC,UAAU,OAAO,UAAU,WAAWI,OAAAA,QAAQ,CAAC,CAAC,EAAA,MAAA,CAAA,EAAA,kBAAA;QACA;QAEA,wGAAA;QACA,+FAAA;QACA,IAAA,qBAAA,MAAA,KAAA,KAAA,WAAA;YACA,eAAA,KAAA,GAAAJ,GAAAA,OAAA,CAAA,MAAA,KAAA,IAAA,MAAA,KAAA,CAAA,QAAA,KAAA,MAAA,KAAA;QACA;QAEA,mGAAA;QACA,IAAA,OAAA,MAAA,MAAA,KAAA,YAAA;YACA,MAAA,kBAAA,MAAA,MAAA;YAEA,KAAA,MAAA,OAAA,OAAA,IAAA,CAAA,iBAAA;gBACA,MAAA,QAAA,eAAA,CAAA,IAAA;gBACA,cAAA,CAAA,IAAA,GAAAA,GAAAA,OAAA,CAAA,SAAA,MAAA,QAAA,KAAA;YACA;QACA;QAEA,OAAA;IACA,EAAA,OAAA,IAAA;QACAK,WAAAA,WAAA,IAAAC,OAAAA,MAAA,CAAA,KAAA,CAAA,uDAAA;IACA;IAEA,OAAA;AACA"}},
    {"offset": {"line": 10425, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 10429, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/utils/path.ts"],"sourcesContent":["// Slightly modified (no IE8 support, ES6) and transcribed to TypeScript\n// https://github.com/calvinmetcalf/rollup-plugin-node-builtins/blob/63ab8aacd013767445ca299e468d9a60a95328d7/src/es6/path.js\n//\n// Copyright Joyent, Inc.and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n/** JSDoc */\nfunction normalizeArray(parts: string[], allowAboveRoot?: boolean): string[] {\n  // if the path tries to go above the root, `up` ends up > 0\n  let up = 0;\n  for (let i = parts.length - 1; i >= 0; i--) {\n    const last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nconst splitPathRe = /^(\\S+:\\\\|\\/?)([\\s\\S]*?)((?:\\.{1,2}|[^/\\\\]+?|)(\\.[^./\\\\]*|))(?:[/\\\\]*)$/;\n/** JSDoc */\nfunction splitPath(filename: string): string[] {\n  // Truncate files names greater than 1024 characters to avoid regex dos\n  // https://github.com/getsentry/sentry-javascript/pull/8737#discussion_r1285719172\n  const truncated = filename.length > 1024 ? `<truncated>${filename.slice(-1024)}` : filename;\n  const parts = splitPathRe.exec(truncated);\n  return parts ? parts.slice(1) : [];\n}\n\n// path.resolve([from ...], to)\n// posix version\n/** JSDoc */\nexport function resolve(...args: string[]): string {\n  let resolvedPath = '';\n  let resolvedAbsolute = false;\n\n  for (let i = args.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    const path = i >= 0 ? args[i] : '/';\n\n    // Skip empty entries\n    if (!path) {\n      continue;\n    }\n\n    resolvedPath = `${path}/${resolvedPath}`;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(\n    resolvedPath.split('/').filter(p => !!p),\n    !resolvedAbsolute,\n  ).join('/');\n\n  return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';\n}\n\n/** JSDoc */\nfunction trim(arr: string[]): string[] {\n  let start = 0;\n  for (; start < arr.length; start++) {\n    if (arr[start] !== '') {\n      break;\n    }\n  }\n\n  let end = arr.length - 1;\n  for (; end >= 0; end--) {\n    if (arr[end] !== '') {\n      break;\n    }\n  }\n\n  if (start > end) {\n    return [];\n  }\n  return arr.slice(start, end - start + 1);\n}\n\n// path.relative(from, to)\n// posix version\n/** JSDoc */\nexport function relative(from: string, to: string): string {\n  /* eslint-disable no-param-reassign */\n  from = resolve(from).slice(1);\n  to = resolve(to).slice(1);\n  /* eslint-enable no-param-reassign */\n\n  const fromParts = trim(from.split('/'));\n  const toParts = trim(to.split('/'));\n\n  const length = Math.min(fromParts.length, toParts.length);\n  let samePartsLength = length;\n  for (let i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  let outputParts = [];\n  for (let i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n}\n\n// path.normalize(path)\n// posix version\n/** JSDoc */\nexport function normalizePath(path: string): string {\n  const isPathAbsolute = isAbsolute(path);\n  const trailingSlash = path.slice(-1) === '/';\n\n  // Normalize the path\n  let normalizedPath = normalizeArray(\n    path.split('/').filter(p => !!p),\n    !isPathAbsolute,\n  ).join('/');\n\n  if (!normalizedPath && !isPathAbsolute) {\n    normalizedPath = '.';\n  }\n  if (normalizedPath && trailingSlash) {\n    normalizedPath += '/';\n  }\n\n  return (isPathAbsolute ? '/' : '') + normalizedPath;\n}\n\n// posix version\n/** JSDoc */\nexport function isAbsolute(path: string): boolean {\n  return path.charAt(0) === '/';\n}\n\n// posix version\n/** JSDoc */\nexport function join(...args: string[]): string {\n  return normalizePath(args.join('/'));\n}\n\n/** JSDoc */\nexport function dirname(path: string): string {\n  const result = splitPath(path);\n  const root = result[0] || '';\n  let dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.slice(0, dir.length - 1);\n  }\n\n  return root + dir;\n}\n\n/** JSDoc */\nexport function basename(path: string, ext?: string): string {\n  let f = splitPath(path)[2] || '';\n  if (ext && f.slice(ext.length * -1) === ext) {\n    f = f.slice(0, f.length - ext.length);\n  }\n  return f;\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 10599, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 10603, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/integrations/rewriteframes.ts"],"sourcesContent":["import { defineIntegration } from '../integration';\nimport type { Event } from '../types-hoist/event';\nimport type { StackFrame } from '../types-hoist/stackframe';\nimport type { Stacktrace } from '../types-hoist/stacktrace';\nimport { basename, relative } from '../utils/path';\nimport { GLOBAL_OBJ } from '../utils/worldwide';\n\ntype StackFrameIteratee = (frame: StackFrame) => StackFrame;\n\nconst INTEGRATION_NAME = 'RewriteFrames';\n\ninterface RewriteFramesOptions {\n  /**\n   * Root path (the beginning of the path) that will be stripped from the frames' filename.\n   *\n   * This option has slightly different behaviour in the browser and on servers:\n   * - In the browser, the value you provide in `root` will be stripped from the beginning stack frames' paths (if the path started with the value).\n   * - On the server, the root value will only replace the beginning of stack frame filepaths, when the path is absolute. If no `root` value is provided and the path is absolute, the frame will be reduced to only the filename and the provided `prefix` option.\n   *\n   * Browser example:\n   * - Original frame: `'http://example.com/my/path/static/asset.js'`\n   * - `root: 'http://example.com/my/path'`\n   * - `assetPrefix: 'app://'`\n   * - Resulting frame: `'app:///static/asset.js'`\n   *\n   * Server example:\n   * - Original frame: `'/User/local/my/path/static/asset.js'`\n   * - `root: '/User/local/my/path'`\n   * - `assetPrefix: 'app://'`\n   * - Resulting frame: `'app:///static/asset.js'`\n   */\n  root?: string;\n\n  /**\n   * A custom prefix that stack frames will be prepended with.\n   *\n   * Default: `'app://'`\n   *\n   * This option has slightly different behaviour in the browser and on servers:\n   * - In the browser, the value you provide in `prefix` will prefix the resulting filename when the value you provided in `root` was applied. Effectively replacing whatever `root` matched in the beginning of the frame with `prefix`.\n   * - On the server, the prefix is applied to all stackframes with absolute paths. On Windows, the drive identifier (e.g. \"C://\") is replaced with the prefix.\n   */\n  prefix?: string;\n\n  /**\n   * Defines an iterator that is used to iterate through all of the stack frames for modification before being sent to Sentry.\n   * Setting this option will effectively disable both the `root` and the `prefix` options.\n   */\n  iteratee?: StackFrameIteratee;\n}\n\n/**\n * Rewrite event frames paths.\n */\nexport const rewriteFramesIntegration = defineIntegration((options: RewriteFramesOptions = {}) => {\n  const root = options.root;\n  const prefix = options.prefix || 'app:///';\n\n  const isBrowser = 'window' in GLOBAL_OBJ && !!GLOBAL_OBJ.window;\n\n  const iteratee: StackFrameIteratee = options.iteratee || generateIteratee({ isBrowser, root, prefix });\n\n  /** Process an exception event. */\n  function _processExceptionsEvent(event: Event): Event {\n    try {\n      return {\n        ...event,\n        exception: {\n          ...event.exception,\n          // The check for this is performed inside `process` call itself, safe to skip here\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          values: event.exception!.values!.map(value => ({\n            ...value,\n            ...(value.stacktrace && { stacktrace: _processStacktrace(value.stacktrace) }),\n          })),\n        },\n      };\n    } catch (_oO) {\n      return event;\n    }\n  }\n\n  /** Process a stack trace. */\n  function _processStacktrace(stacktrace?: Stacktrace): Stacktrace {\n    return {\n      ...stacktrace,\n      frames: stacktrace?.frames && stacktrace.frames.map(f => iteratee(f)),\n    };\n  }\n\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(originalEvent) {\n      let processedEvent = originalEvent;\n\n      if (originalEvent.exception && Array.isArray(originalEvent.exception.values)) {\n        processedEvent = _processExceptionsEvent(processedEvent);\n      }\n\n      return processedEvent;\n    },\n  };\n});\n\n/**\n * Exported only for tests.\n */\nexport function generateIteratee({\n  isBrowser,\n  root,\n  prefix,\n}: {\n  isBrowser: boolean;\n  root?: string;\n  prefix: string;\n}): StackFrameIteratee {\n  return (frame: StackFrame) => {\n    if (!frame.filename) {\n      return frame;\n    }\n\n    // Determine if this is a Windows frame by checking for a Windows-style prefix such as `C:\\`\n    const isWindowsFrame =\n      /^[a-zA-Z]:\\\\/.test(frame.filename) ||\n      // or the presence of a backslash without a forward slash (which are not allowed on Windows)\n      (frame.filename.includes('\\\\') && !frame.filename.includes('/'));\n\n    // Check if the frame filename begins with `/`\n    const startsWithSlash = /^\\//.test(frame.filename);\n\n    if (isBrowser) {\n      if (root) {\n        const oldFilename = frame.filename;\n        if (oldFilename.indexOf(root) === 0) {\n          frame.filename = oldFilename.replace(root, prefix);\n        }\n      }\n    } else {\n      if (isWindowsFrame || startsWithSlash) {\n        const filename = isWindowsFrame\n          ? frame.filename\n              .replace(/^[a-zA-Z]:/, '') // remove Windows-style prefix\n              .replace(/\\\\/g, '/') // replace all `\\\\` instances with `/`\n          : frame.filename;\n        const base = root ? relative(root, filename) : basename(filename);\n        frame.filename = `${prefix}${base}`;\n      }\n    }\n\n    return frame;\n  };\n}\n"],"names":["defineIntegration","GLOBAL_OBJ","relative","basename"],"mappings":";;;;;;AASA,MAAM,mBAAmB;AA0CzB;;CAEA,GACO,MAAM,2BAA2BA,YAAAA,iBAAiB,CAAC,CAAC,UAAgC,CAAA,CAAE;IAC3F,MAAM,OAAO,QAAQ,IAAI;IACzB,MAAM,SAAS,QAAQ,MAAA,IAAU;IAEjC,MAAM,YAAY,YAAYC,UAAAA,UAAA,IAAc,CAAC,CAACA,UAAAA,UAAU,CAAC,MAAM;IAE/D,MAAM,WAA+B,QAAQ,QAAA,IAAY,iBAAiB;QAAE;QAAW;QAAM;IAAA;IAE/F,gCAAA,GACE,SAAS,wBAAwB,KAAK;QACpC,IAAI;YACF,OAAO;gBACL,GAAG,KAAK;gBACR,WAAW;oBACT,GAAG,MAAM,SAAS;oBAC5B,kFAAA;oBACA,oEAAA;oBACU,QAAQ,MAAM,SAAS,CAAE,MAAM,CAAE,GAAG,CAAC,CAAA,QAAA,CAAU;4BAC7C,GAAG,KAAK;4BACR,GAAI,MAAM,UAAA,IAAc;gCAAE,YAAY,mBAAmB,MAAM,UAAU;4BAAA,CAAG;wBACxF,CAAW;gBACX;YACA;QACA,EAAM,OAAO,KAAK;YACZ,OAAO;QACb;IACA;IAEA,2BAAA,GACE,SAAS,mBAAmB,UAAU;QACpC,OAAO;YACL,GAAG,UAAU;YACb,QAAQ,YAAY,UAAU,WAAW,MAAM,CAAC,GAAG,CAAC,CAAA,IAAK,SAAS;QACxE;IACA;IAEE,OAAO;QACL,MAAM;QACN,cAAa,aAAa;YACxB,IAAI,iBAAiB;YAErB,IAAI,cAAc,SAAA,IAAa,MAAM,OAAO,CAAC,cAAc,SAAS,CAAC,MAAM,GAAG;gBAC5E,iBAAiB,wBAAwB;YACjD;YAEM,OAAO;QACb;IACA;AACA;AAEA;;CAEA,GACO,SAAS,iBAAiB,EAC/B,SAAS,EACT,IAAI,EACJ,MAAM,EACR;IAKE,OAAO,CAAC;QACN,IAAI,CAAC,MAAM,QAAQ,EAAE;YACnB,OAAO;QACb;QAEA,4FAAA;QACI,MAAM,iBACJ,eAAe,IAAI,CAAC,MAAM,QAAQ,KAEjC,MAAM,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,QAAQ,CAAC,QAAQ,CAAC;QAEjE,8CAAA;QACI,MAAM,kBAAkB,MAAM,IAAI,CAAC,MAAM,QAAQ;QAEjD,IAAI,WAAW;YACb,IAAI,MAAM;gBACR,MAAM,cAAc,MAAM,QAAQ;gBAClC,IAAI,YAAY,OAAO,CAAC,UAAU,GAAG;oBACnC,MAAM,QAAA,GAAW,YAAY,OAAO,CAAC,MAAM;gBACrD;YACA;QACA,OAAW;YACL,IAAI,kBAAkB,iBAAiB;gBACrC,MAAM,WAAW,iBACb,MAAM,QAAA,CACH,OAAO,CAAC,cAAc,IAAE,8BAAA;iBACxB,OAAO,CAAC,OAAO,KAAG,sCAAA;mBACrB,MAAM,QAAQ;gBAClB,MAAM,OAAO,OAAOC,KAAAA,QAAQ,CAAC,MAAM,YAAYC,KAAAA,QAAQ,CAAC;gBACxD,MAAM,QAAA,GAAW,CAAC,EAAA,OAAA,EAAA,KAAA,CAAA;YACA;QACA;QAEA,OAAA;IACA;AACA"}},
    {"offset": {"line": 10690, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 10694, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/integrations/supabase.ts"],"sourcesContent":["// Based on Kamil Ogórek's work on:\n// https://github.com/supabase-community/sentry-integration-js\n\n/* eslint-disable max-lines */\nimport { addBreadcrumb } from '../breadcrumbs';\nimport { DEBUG_BUILD } from '../debug-build';\nimport { captureException } from '../exports';\nimport { defineIntegration } from '../integration';\nimport { SEMANTIC_ATTRIBUTE_SENTRY_OP, SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN } from '../semanticAttributes';\nimport { setHttpStatus, SPAN_STATUS_ERROR, SPAN_STATUS_OK, startSpan } from '../tracing';\nimport type { IntegrationFn } from '../types-hoist/integration';\nimport { isPlainObject } from '../utils/is';\nimport { logger } from '../utils/logger';\n\nconst AUTH_OPERATIONS_TO_INSTRUMENT = [\n  'reauthenticate',\n  'signInAnonymously',\n  'signInWithOAuth',\n  'signInWithIdToken',\n  'signInWithOtp',\n  'signInWithPassword',\n  'signInWithSSO',\n  'signOut',\n  'signUp',\n  'verifyOtp',\n];\n\nconst AUTH_ADMIN_OPERATIONS_TO_INSTRUMENT = [\n  'createUser',\n  'deleteUser',\n  'listUsers',\n  'getUserById',\n  'updateUserById',\n  'inviteUserByEmail',\n];\n\nexport const FILTER_MAPPINGS = {\n  eq: 'eq',\n  neq: 'neq',\n  gt: 'gt',\n  gte: 'gte',\n  lt: 'lt',\n  lte: 'lte',\n  like: 'like',\n  'like(all)': 'likeAllOf',\n  'like(any)': 'likeAnyOf',\n  ilike: 'ilike',\n  'ilike(all)': 'ilikeAllOf',\n  'ilike(any)': 'ilikeAnyOf',\n  is: 'is',\n  in: 'in',\n  cs: 'contains',\n  cd: 'containedBy',\n  sr: 'rangeGt',\n  nxl: 'rangeGte',\n  sl: 'rangeLt',\n  nxr: 'rangeLte',\n  adj: 'rangeAdjacent',\n  ov: 'overlaps',\n  fts: '',\n  plfts: 'plain',\n  phfts: 'phrase',\n  wfts: 'websearch',\n  not: 'not',\n};\n\nexport const DB_OPERATIONS_TO_INSTRUMENT = ['select', 'insert', 'upsert', 'update', 'delete'];\n\ntype AuthOperationFn = (...args: unknown[]) => Promise<unknown>;\ntype AuthOperationName = (typeof AUTH_OPERATIONS_TO_INSTRUMENT)[number];\ntype AuthAdminOperationName = (typeof AUTH_ADMIN_OPERATIONS_TO_INSTRUMENT)[number];\ntype PostgRESTQueryOperationFn = (...args: unknown[]) => PostgRESTFilterBuilder;\n\nexport interface SupabaseClientInstance {\n  auth: {\n    admin: Record<AuthAdminOperationName, AuthOperationFn>;\n  } & Record<AuthOperationName, AuthOperationFn>;\n}\n\nexport interface PostgRESTQueryBuilder {\n  [key: string]: PostgRESTQueryOperationFn;\n}\n\nexport interface PostgRESTFilterBuilder {\n  method: string;\n  headers: Record<string, string>;\n  url: URL;\n  schema: string;\n  body: any;\n}\n\nexport interface SupabaseResponse {\n  status?: number;\n  error?: {\n    message: string;\n    code?: string;\n    details?: unknown;\n  };\n}\n\nexport interface SupabaseError extends Error {\n  code?: string;\n  details?: unknown;\n}\n\nexport interface SupabaseBreadcrumb {\n  type: string;\n  category: string;\n  message: string;\n  data?: {\n    query?: string[];\n    body?: Record<string, unknown>;\n  };\n}\n\nexport interface SupabaseClientConstructor {\n  prototype: {\n    from: (table: string) => PostgRESTQueryBuilder;\n  };\n}\n\nexport interface PostgRESTProtoThenable {\n  then: <T>(\n    onfulfilled?: ((value: T) => T | PromiseLike<T>) | null,\n    onrejected?: ((reason: any) => T | PromiseLike<T>) | null,\n  ) => Promise<T>;\n}\n\ntype SentryInstrumented<T> = T & {\n  __SENTRY_INSTRUMENTED__?: boolean;\n};\n\nfunction markAsInstrumented<T>(fn: T): void {\n  try {\n    (fn as SentryInstrumented<T>).__SENTRY_INSTRUMENTED__ = true;\n  } catch {\n    // ignore errors here\n  }\n}\n\nfunction isInstrumented<T>(fn: T): boolean | undefined {\n  try {\n    return (fn as SentryInstrumented<T>).__SENTRY_INSTRUMENTED__;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Extracts the database operation type from the HTTP method and headers\n * @param method - The HTTP method of the request\n * @param headers - The request headers\n * @returns The database operation type ('select', 'insert', 'upsert', 'update', or 'delete')\n */\nexport function extractOperation(method: string, headers: Record<string, string> = {}): string {\n  switch (method) {\n    case 'GET': {\n      return 'select';\n    }\n    case 'POST': {\n      if (headers['Prefer']?.includes('resolution=')) {\n        return 'upsert';\n      } else {\n        return 'insert';\n      }\n    }\n    case 'PATCH': {\n      return 'update';\n    }\n    case 'DELETE': {\n      return 'delete';\n    }\n    default: {\n      return '<unknown-op>';\n    }\n  }\n}\n\n/**\n * Translates Supabase filter parameters into readable method names for tracing\n * @param key - The filter key from the URL search parameters\n * @param query - The filter value from the URL search parameters\n * @returns A string representation of the filter as a method call\n */\nexport function translateFiltersIntoMethods(key: string, query: string): string {\n  if (query === '' || query === '*') {\n    return 'select(*)';\n  }\n\n  if (key === 'select') {\n    return `select(${query})`;\n  }\n\n  if (key === 'or' || key.endsWith('.or')) {\n    return `${key}${query}`;\n  }\n\n  const [filter, ...value] = query.split('.');\n\n  let method;\n  // Handle optional `configPart` of the filter\n  if (filter?.startsWith('fts')) {\n    method = 'textSearch';\n  } else if (filter?.startsWith('plfts')) {\n    method = 'textSearch[plain]';\n  } else if (filter?.startsWith('phfts')) {\n    method = 'textSearch[phrase]';\n  } else if (filter?.startsWith('wfts')) {\n    method = 'textSearch[websearch]';\n  } else {\n    method = (filter && FILTER_MAPPINGS[filter as keyof typeof FILTER_MAPPINGS]) || 'filter';\n  }\n\n  return `${method}(${key}, ${value.join('.')})`;\n}\n\nfunction instrumentAuthOperation(operation: AuthOperationFn, isAdmin = false): AuthOperationFn {\n  return new Proxy(operation, {\n    apply(target, thisArg, argumentsList) {\n      return startSpan(\n        {\n          name: `auth ${isAdmin ? '(admin) ' : ''}${operation.name}`,\n          attributes: {\n            [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.db.supabase',\n            [SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'db',\n            'db.system': 'postgresql',\n            'db.operation': `auth.${isAdmin ? 'admin.' : ''}${operation.name}`,\n          },\n        },\n        span => {\n          return Reflect.apply(target, thisArg, argumentsList)\n            .then((res: unknown) => {\n              if (res && typeof res === 'object' && 'error' in res && res.error) {\n                span.setStatus({ code: SPAN_STATUS_ERROR });\n\n                captureException(res.error, {\n                  mechanism: {\n                    handled: false,\n                  },\n                });\n              } else {\n                span.setStatus({ code: SPAN_STATUS_OK });\n              }\n\n              span.end();\n              return res;\n            })\n            .catch((err: unknown) => {\n              span.setStatus({ code: SPAN_STATUS_ERROR });\n              span.end();\n\n              captureException(err, {\n                mechanism: {\n                  handled: false,\n                },\n              });\n\n              throw err;\n            })\n            .then(...argumentsList);\n        },\n      );\n    },\n  });\n}\n\nfunction instrumentSupabaseAuthClient(supabaseClientInstance: SupabaseClientInstance): void {\n  const auth = supabaseClientInstance.auth;\n\n  if (!auth || isInstrumented(supabaseClientInstance.auth)) {\n    return;\n  }\n\n  for (const operation of AUTH_OPERATIONS_TO_INSTRUMENT) {\n    const authOperation = auth[operation];\n\n    if (!authOperation) {\n      continue;\n    }\n\n    if (typeof supabaseClientInstance.auth[operation] === 'function') {\n      supabaseClientInstance.auth[operation] = instrumentAuthOperation(authOperation);\n    }\n  }\n\n  for (const operation of AUTH_ADMIN_OPERATIONS_TO_INSTRUMENT) {\n    const authOperation = auth.admin[operation];\n\n    if (!authOperation) {\n      continue;\n    }\n\n    if (typeof supabaseClientInstance.auth.admin[operation] === 'function') {\n      supabaseClientInstance.auth.admin[operation] = instrumentAuthOperation(authOperation, true);\n    }\n  }\n\n  markAsInstrumented(supabaseClientInstance.auth);\n}\n\nfunction instrumentSupabaseClientConstructor(SupabaseClient: unknown): void {\n  if (isInstrumented((SupabaseClient as unknown as SupabaseClientConstructor).prototype.from)) {\n    return;\n  }\n\n  (SupabaseClient as unknown as SupabaseClientConstructor).prototype.from = new Proxy(\n    (SupabaseClient as unknown as SupabaseClientConstructor).prototype.from,\n    {\n      apply(target, thisArg, argumentsList) {\n        const rv = Reflect.apply(target, thisArg, argumentsList);\n        const PostgRESTQueryBuilder = (rv as PostgRESTQueryBuilder).constructor;\n\n        instrumentPostgRESTQueryBuilder(PostgRESTQueryBuilder as unknown as new () => PostgRESTQueryBuilder);\n\n        return rv;\n      },\n    },\n  );\n\n  markAsInstrumented((SupabaseClient as unknown as SupabaseClientConstructor).prototype.from);\n}\n\nfunction instrumentPostgRESTFilterBuilder(PostgRESTFilterBuilder: PostgRESTFilterBuilder['constructor']): void {\n  if (isInstrumented((PostgRESTFilterBuilder.prototype as unknown as PostgRESTProtoThenable).then)) {\n    return;\n  }\n\n  (PostgRESTFilterBuilder.prototype as unknown as PostgRESTProtoThenable).then = new Proxy(\n    (PostgRESTFilterBuilder.prototype as unknown as PostgRESTProtoThenable).then,\n    {\n      apply(target, thisArg, argumentsList) {\n        const operations = DB_OPERATIONS_TO_INSTRUMENT;\n        const typedThis = thisArg as PostgRESTFilterBuilder;\n        const operation = extractOperation(typedThis.method, typedThis.headers);\n\n        if (!operations.includes(operation)) {\n          return Reflect.apply(target, thisArg, argumentsList);\n        }\n\n        if (!typedThis?.url?.pathname || typeof typedThis.url.pathname !== 'string') {\n          return Reflect.apply(target, thisArg, argumentsList);\n        }\n\n        const pathParts = typedThis.url.pathname.split('/');\n        const table = pathParts.length > 0 ? pathParts[pathParts.length - 1] : '';\n\n        const queryItems: string[] = [];\n        for (const [key, value] of typedThis.url.searchParams.entries()) {\n          // It's possible to have multiple entries for the same key, eg. `id=eq.7&id=eq.3`,\n          // so we need to use array instead of object to collect them.\n          queryItems.push(translateFiltersIntoMethods(key, value));\n        }\n        const body: Record<string, unknown> = Object.create(null);\n        if (isPlainObject(typedThis.body)) {\n          for (const [key, value] of Object.entries(typedThis.body)) {\n            body[key] = value;\n          }\n        }\n\n        // Adding operation to the beginning of the description if it's not a `select` operation\n        // For example, it can be an `insert` or `update` operation but the query can be `select(...)`\n        // For `select` operations, we don't need repeat it in the description\n        const description = `${operation === 'select' ? '' : `${operation}${body ? '(...) ' : ''}`}${queryItems.join(\n          ' ',\n        )} from(${table})`;\n\n        const attributes: Record<string, any> = {\n          'db.table': table,\n          'db.schema': typedThis.schema,\n          'db.url': typedThis.url.origin,\n          'db.sdk': typedThis.headers['X-Client-Info'],\n          'db.system': 'postgresql',\n          'db.operation': operation,\n          [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.db.supabase',\n          [SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'db',\n        };\n\n        if (queryItems.length) {\n          attributes['db.query'] = queryItems;\n        }\n\n        if (Object.keys(body).length) {\n          attributes['db.body'] = body;\n        }\n\n        return startSpan(\n          {\n            name: description,\n            attributes,\n          },\n          span => {\n            return (Reflect.apply(target, thisArg, []) as Promise<SupabaseResponse>)\n              .then(\n                (res: SupabaseResponse) => {\n                  if (span) {\n                    if (res && typeof res === 'object' && 'status' in res) {\n                      setHttpStatus(span, res.status || 500);\n                    }\n                    span.end();\n                  }\n\n                  if (res.error) {\n                    const err = new Error(res.error.message) as SupabaseError;\n                    if (res.error.code) {\n                      err.code = res.error.code;\n                    }\n                    if (res.error.details) {\n                      err.details = res.error.details;\n                    }\n\n                    const supabaseContext: Record<string, unknown> = {};\n                    if (queryItems.length) {\n                      supabaseContext.query = queryItems;\n                    }\n                    if (Object.keys(body).length) {\n                      supabaseContext.body = body;\n                    }\n\n                    captureException(err, {\n                      contexts: {\n                        supabase: supabaseContext,\n                      },\n                    });\n                  }\n\n                  const breadcrumb: SupabaseBreadcrumb = {\n                    type: 'supabase',\n                    category: `db.${operation}`,\n                    message: description,\n                  };\n\n                  const data: Record<string, unknown> = {};\n\n                  if (queryItems.length) {\n                    data.query = queryItems;\n                  }\n\n                  if (Object.keys(body).length) {\n                    data.body = body;\n                  }\n\n                  if (Object.keys(data).length) {\n                    breadcrumb.data = data;\n                  }\n\n                  addBreadcrumb(breadcrumb);\n\n                  return res;\n                },\n                (err: Error) => {\n                  if (span) {\n                    setHttpStatus(span, 500);\n                    span.end();\n                  }\n                  throw err;\n                },\n              )\n              .then(...argumentsList);\n          },\n        );\n      },\n    },\n  );\n\n  markAsInstrumented((PostgRESTFilterBuilder.prototype as unknown as PostgRESTProtoThenable).then);\n}\n\nfunction instrumentPostgRESTQueryBuilder(PostgRESTQueryBuilder: new () => PostgRESTQueryBuilder): void {\n  // We need to wrap _all_ operations despite them sharing the same `PostgRESTFilterBuilder`\n  // constructor, as we don't know which method will be called first, and we don't want to miss any calls.\n  for (const operation of DB_OPERATIONS_TO_INSTRUMENT) {\n    if (isInstrumented((PostgRESTQueryBuilder.prototype as Record<string, any>)[operation])) {\n      continue;\n    }\n\n    type PostgRESTOperation = keyof Pick<PostgRESTQueryBuilder, 'select' | 'insert' | 'upsert' | 'update' | 'delete'>;\n    (PostgRESTQueryBuilder.prototype as Record<string, any>)[operation as PostgRESTOperation] = new Proxy(\n      (PostgRESTQueryBuilder.prototype as Record<string, any>)[operation as PostgRESTOperation],\n      {\n        apply(target, thisArg, argumentsList) {\n          const rv = Reflect.apply(target, thisArg, argumentsList);\n          const PostgRESTFilterBuilder = (rv as PostgRESTFilterBuilder).constructor;\n\n          DEBUG_BUILD && logger.log(`Instrumenting ${operation} operation's PostgRESTFilterBuilder`);\n\n          instrumentPostgRESTFilterBuilder(PostgRESTFilterBuilder);\n\n          return rv;\n        },\n      },\n    );\n\n    markAsInstrumented((PostgRESTQueryBuilder.prototype as Record<string, any>)[operation]);\n  }\n}\n\nexport const instrumentSupabaseClient = (supabaseClient: unknown): void => {\n  if (!supabaseClient) {\n    DEBUG_BUILD && logger.warn('Supabase integration was not installed because no Supabase client was provided.');\n    return;\n  }\n  const SupabaseClientConstructor =\n    supabaseClient.constructor === Function ? supabaseClient : supabaseClient.constructor;\n\n  instrumentSupabaseClientConstructor(SupabaseClientConstructor);\n  instrumentSupabaseAuthClient(supabaseClient as SupabaseClientInstance);\n};\n\nconst INTEGRATION_NAME = 'Supabase';\n\nconst _supabaseIntegration = ((supabaseClient: unknown) => {\n  return {\n    setupOnce() {\n      instrumentSupabaseClient(supabaseClient);\n    },\n    name: INTEGRATION_NAME,\n  };\n}) satisfies IntegrationFn;\n\nexport const supabaseIntegration = defineIntegration((options: { supabaseClient: any }) => {\n  return _supabaseIntegration(options.supabaseClient);\n}) satisfies IntegrationFn;\n"],"names":["startSpan","SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN","SEMANTIC_ATTRIBUTE_SENTRY_OP","SPAN_STATUS_ERROR","captureException","SPAN_STATUS_OK","isPlainObject","setHttpStatus","addBreadcrumb","DEBUG_BUILD","logger","defineIntegration"],"mappings":"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"}},
    {"offset": {"line": 11084, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 11088, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/integrations/zoderrors.ts"],"sourcesContent":["import { defineIntegration } from '../integration';\nimport type { Event, EventHint } from '../types-hoist/event';\nimport type { IntegrationFn } from '../types-hoist/integration';\nimport { isError } from '../utils/is';\nimport { truncate } from '../utils/string';\n\ninterface ZodErrorsOptions {\n  key?: string;\n  /**\n   * Limits the number of Zod errors inlined in each Sentry event.\n   *\n   * @default 10\n   */\n  limit?: number;\n  /**\n   * Save full list of Zod issues as an attachment in Sentry\n   *\n   * @default false\n   */\n  saveZodIssuesAsAttachment?: boolean;\n}\n\nconst DEFAULT_LIMIT = 10;\nconst INTEGRATION_NAME = 'ZodErrors';\n\n/**\n * Simplified ZodIssue type definition\n */\ninterface ZodIssue {\n  path: (string | number)[];\n  message?: string;\n  expected?: unknown;\n  received?: unknown;\n  unionErrors?: unknown[];\n  keys?: unknown[];\n  invalid_literal?: unknown;\n}\n\ninterface ZodError extends Error {\n  issues: ZodIssue[];\n}\n\nfunction originalExceptionIsZodError(originalException: unknown): originalException is ZodError {\n  return (\n    isError(originalException) &&\n    originalException.name === 'ZodError' &&\n    Array.isArray((originalException as ZodError).issues)\n  );\n}\n\ntype SingleLevelZodIssue<T extends ZodIssue> = {\n  [P in keyof T]: T[P] extends string | number | undefined\n    ? T[P]\n    : T[P] extends unknown[]\n      ? string | undefined\n      : unknown;\n};\n\n/**\n * Formats child objects or arrays to a string\n * that is preserved when sent to Sentry.\n *\n * Without this, we end up with something like this in Sentry:\n *\n * [\n *  [Object],\n *  [Object],\n *  [Object],\n *  [Object]\n * ]\n */\nexport function flattenIssue(issue: ZodIssue): SingleLevelZodIssue<ZodIssue> {\n  return {\n    ...issue,\n    path: 'path' in issue && Array.isArray(issue.path) ? issue.path.join('.') : undefined,\n    keys: 'keys' in issue ? JSON.stringify(issue.keys) : undefined,\n    unionErrors: 'unionErrors' in issue ? JSON.stringify(issue.unionErrors) : undefined,\n  };\n}\n\n/**\n * Takes ZodError issue path array and returns a flattened version as a string.\n * This makes it easier to display paths within a Sentry error message.\n *\n * Array indexes are normalized to reduce duplicate entries\n *\n * @param path ZodError issue path\n * @returns flattened path\n *\n * @example\n * flattenIssuePath([0, 'foo', 1, 'bar']) // -> '<array>.foo.<array>.bar'\n */\nexport function flattenIssuePath(path: Array<string | number>): string {\n  return path\n    .map(p => {\n      if (typeof p === 'number') {\n        return '<array>';\n      } else {\n        return p;\n      }\n    })\n    .join('.');\n}\n\n/**\n * Zod error message is a stringified version of ZodError.issues\n * This doesn't display well in the Sentry UI. Replace it with something shorter.\n */\nexport function formatIssueMessage(zodError: ZodError): string {\n  const errorKeyMap = new Set<string | number | symbol>();\n  for (const iss of zodError.issues) {\n    const issuePath = flattenIssuePath(iss.path);\n    if (issuePath.length > 0) {\n      errorKeyMap.add(issuePath);\n    }\n  }\n\n  const errorKeys = Array.from(errorKeyMap);\n  if (errorKeys.length === 0) {\n    // If there are no keys, then we're likely validating the root\n    // variable rather than a key within an object. This attempts\n    // to extract what type it was that failed to validate.\n    // For example, z.string().parse(123) would return \"string\" here.\n    let rootExpectedType = 'variable';\n    if (zodError.issues.length > 0) {\n      const iss = zodError.issues[0];\n      if (iss !== undefined && 'expected' in iss && typeof iss.expected === 'string') {\n        rootExpectedType = iss.expected;\n      }\n    }\n    return `Failed to validate ${rootExpectedType}`;\n  }\n  return `Failed to validate keys: ${truncate(errorKeys.join(', '), 100)}`;\n}\n\n/**\n * Applies ZodError issues to an event extra and replaces the error message\n */\nexport function applyZodErrorsToEvent(\n  limit: number,\n  saveZodIssuesAsAttachment: boolean = false,\n  event: Event,\n  hint: EventHint,\n): Event {\n  if (\n    !event.exception?.values ||\n    !hint.originalException ||\n    !originalExceptionIsZodError(hint.originalException) ||\n    hint.originalException.issues.length === 0\n  ) {\n    return event;\n  }\n\n  try {\n    const issuesToFlatten = saveZodIssuesAsAttachment\n      ? hint.originalException.issues\n      : hint.originalException.issues.slice(0, limit);\n    const flattenedIssues = issuesToFlatten.map(flattenIssue);\n\n    if (saveZodIssuesAsAttachment) {\n      // Sometimes having the full error details can be helpful.\n      // Attachments have much higher limits, so we can include the full list of issues.\n      if (!Array.isArray(hint.attachments)) {\n        hint.attachments = [];\n      }\n      hint.attachments.push({\n        filename: 'zod_issues.json',\n        data: JSON.stringify({\n          issues: flattenedIssues,\n        }),\n      });\n    }\n\n    return {\n      ...event,\n      exception: {\n        ...event.exception,\n        values: [\n          {\n            ...event.exception.values[0],\n            value: formatIssueMessage(hint.originalException),\n          },\n          ...event.exception.values.slice(1),\n        ],\n      },\n      extra: {\n        ...event.extra,\n        'zoderror.issues': flattenedIssues.slice(0, limit),\n      },\n    };\n  } catch (e) {\n    // Hopefully we never throw errors here, but record it\n    // with the event just in case.\n    return {\n      ...event,\n      extra: {\n        ...event.extra,\n        'zoderrors sentry integration parse error': {\n          message: 'an exception was thrown while processing ZodError within applyZodErrorsToEvent()',\n          error: e instanceof Error ? `${e.name}: ${e.message}\\n${e.stack}` : 'unknown',\n        },\n      },\n    };\n  }\n}\n\nconst _zodErrorsIntegration = ((options: ZodErrorsOptions = {}) => {\n  const limit = options.limit ?? DEFAULT_LIMIT;\n\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(originalEvent, hint): Event {\n      const processedEvent = applyZodErrorsToEvent(limit, options.saveZodIssuesAsAttachment, originalEvent, hint);\n      return processedEvent;\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Sentry integration to process Zod errors, making them easier to work with in Sentry.\n */\nexport const zodErrorsIntegration = defineIntegration(_zodErrorsIntegration);\n"],"names":["isError","truncate","defineIntegration"],"mappings":"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"}},
    {"offset": {"line": 11241, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 11245, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/integrations/third-party-errors-filter.ts"],"sourcesContent":["import { defineIntegration } from '../integration';\nimport { addMetadataToStackFrames, stripMetadataFromStackFrames } from '../metadata';\nimport type { EventItem } from '../types-hoist/envelope';\nimport type { Event } from '../types-hoist/event';\nimport { forEachEnvelopeItem } from '../utils/envelope';\nimport { getFramesFromEvent } from '../utils/stacktrace';\n\ninterface Options {\n  /**\n   * Keys that have been provided in the Sentry bundler plugin via the the `applicationKey` option, identifying your bundles.\n   *\n   * - Webpack plugin: https://www.npmjs.com/package/@sentry/webpack-plugin#applicationkey\n   * - Vite plugin: https://www.npmjs.com/package/@sentry/vite-plugin#applicationkey\n   * - Esbuild plugin: https://www.npmjs.com/package/@sentry/esbuild-plugin#applicationkey\n   * - Rollup plugin: https://www.npmjs.com/package/@sentry/rollup-plugin#applicationkey\n   */\n  filterKeys: string[];\n\n  /**\n   * Defines how the integration should behave. \"Third-Party Stack Frames\" are stack frames that did not come from files marked with a matching bundle key.\n   *\n   * You can define the behaviour with one of 4 modes:\n   * - `drop-error-if-contains-third-party-frames`: Drop error events that contain at least one third-party stack frame.\n   * - `drop-error-if-exclusively-contains-third-party-frames`: Drop error events that exclusively contain third-party stack frames.\n   * - `apply-tag-if-contains-third-party-frames`: Keep all error events, but apply a `third_party_code: true` tag in case the error contains at least one third-party stack frame.\n   * - `apply-tag-if-exclusively-contains-third-party-frames`: Keep all error events, but apply a `third_party_code: true` tag in case the error contains exclusively third-party stack frames.\n   *\n   * If you chose the mode to only apply tags, the tags can then be used in Sentry to filter your issue stream by entering `!third_party_code:True` in the search bar.\n   */\n  behaviour:\n    | 'drop-error-if-contains-third-party-frames'\n    | 'drop-error-if-exclusively-contains-third-party-frames'\n    | 'apply-tag-if-contains-third-party-frames'\n    | 'apply-tag-if-exclusively-contains-third-party-frames';\n}\n\n/**\n * This integration allows you to filter out, or tag error events that do not come from user code marked with a bundle key via the Sentry bundler plugins.\n */\nexport const thirdPartyErrorFilterIntegration = defineIntegration((options: Options) => {\n  return {\n    name: 'ThirdPartyErrorsFilter',\n    setup(client) {\n      // We need to strip metadata from stack frames before sending them to Sentry since these are client side only.\n      // TODO(lforst): Move this cleanup logic into a more central place in the SDK.\n      client.on('beforeEnvelope', envelope => {\n        forEachEnvelopeItem(envelope, (item, type) => {\n          if (type === 'event') {\n            const event = Array.isArray(item) ? (item as EventItem)[1] : undefined;\n\n            if (event) {\n              stripMetadataFromStackFrames(event);\n              item[1] = event;\n            }\n          }\n        });\n      });\n\n      client.on('applyFrameMetadata', event => {\n        // Only apply stack frame metadata to error events\n        if (event.type) {\n          return;\n        }\n\n        const stackParser = client.getOptions().stackParser;\n        addMetadataToStackFrames(stackParser, event);\n      });\n    },\n\n    processEvent(event) {\n      const frameKeys = getBundleKeysForAllFramesWithFilenames(event);\n\n      if (frameKeys) {\n        const arrayMethod =\n          options.behaviour === 'drop-error-if-contains-third-party-frames' ||\n          options.behaviour === 'apply-tag-if-contains-third-party-frames'\n            ? 'some'\n            : 'every';\n\n        const behaviourApplies = frameKeys[arrayMethod](keys => !keys.some(key => options.filterKeys.includes(key)));\n\n        if (behaviourApplies) {\n          const shouldDrop =\n            options.behaviour === 'drop-error-if-contains-third-party-frames' ||\n            options.behaviour === 'drop-error-if-exclusively-contains-third-party-frames';\n          if (shouldDrop) {\n            return null;\n          } else {\n            event.tags = {\n              ...event.tags,\n              third_party_code: true,\n            };\n          }\n        }\n      }\n\n      return event;\n    },\n  };\n});\n\nfunction getBundleKeysForAllFramesWithFilenames(event: Event): string[][] | undefined {\n  const frames = getFramesFromEvent(event);\n\n  if (!frames) {\n    return undefined;\n  }\n\n  return (\n    frames\n      // Exclude frames without a filename since these are likely native code or built-ins\n      .filter(frame => !!frame.filename)\n      .map(frame => {\n        if (frame.module_metadata) {\n          return Object.keys(frame.module_metadata)\n            .filter(key => key.startsWith(BUNDLER_PLUGIN_APP_KEY_PREFIX))\n            .map(key => key.slice(BUNDLER_PLUGIN_APP_KEY_PREFIX.length));\n        }\n        return [];\n      })\n  );\n}\n\nconst BUNDLER_PLUGIN_APP_KEY_PREFIX = '_sentryBundlerPluginAppKey:';\n"],"names":["defineIntegration","envelope","forEachEnvelopeItem","stripMetadataFromStackFrames","addMetadataToStackFrames","getFramesFromEvent"],"mappings":";;;;;;;AAoCA;;CAEA,GACO,MAAM,mCAAmCA,YAAAA,iBAAiB,CAAC,CAAC;IACjE,OAAO;QACL,MAAM;QACN,OAAM,MAAM;YAChB,8GAAA;YACA,8EAAA;YACM,OAAO,EAAE,CAAC,kBAAkBC,CAAAA;gBAC1BC,SAAAA,mBAAmB,CAACD,YAAU,CAAC,MAAM;oBACnC,IAAI,SAAS,SAAS;wBACpB,MAAM,QAAQ,MAAM,OAAO,CAAC,QAAQ,AAAC,IAAA,CAAmB,EAAC,GAAI;wBAE7D,IAAI,OAAO;4BACTE,SAAAA,4BAA4B,CAAC;4BAC7B,IAAI,CAAC,EAAC,GAAI;wBACxB;oBACA;gBACA;YACA;YAEM,OAAO,EAAE,CAAC,sBAAsB,CAAA;gBACtC,kDAAA;gBACQ,IAAI,MAAM,IAAI,EAAE;oBACd;gBACV;gBAEQ,MAAM,cAAc,OAAO,UAAU,GAAG,WAAW;gBACnDC,SAAAA,wBAAwB,CAAC,aAAa;YAC9C;QACA;QAEI,cAAa,KAAK;YAChB,MAAM,YAAY,uCAAuC;YAEzD,IAAI,WAAW;gBACb,MAAM,cACJ,QAAQ,SAAA,KAAc,+CACtB,QAAQ,SAAA,KAAc,6CAClB,SACA;gBAEN,MAAM,mBAAmB,SAAS,CAAC,YAAY,CAAC,CAAA,OAAQ,CAAC,KAAK,IAAI,CAAC,CAAA,MAAO,QAAQ,UAAU,CAAC,QAAQ,CAAC;gBAEtG,IAAI,kBAAkB;oBACpB,MAAM,aACJ,QAAQ,SAAA,KAAc,+CACtB,QAAQ,SAAA,KAAc;oBACxB,IAAI,YAAY;wBACd,OAAO;oBACnB,OAAiB;wBACL,MAAM,IAAA,GAAO;4BACX,GAAG,MAAM,IAAI;4BACb,kBAAkB;wBAChC;oBACA;gBACA;YACA;YAEM,OAAO;QACb;IACA;AACA;AAEA,SAAS,uCAAuC,KAAK;IACnD,MAAM,SAASC,WAAAA,kBAAkB,CAAC;IAElC,IAAI,CAAC,QAAQ;QACX,OAAO;IACX;IAEE,OACE,MACJ,oFAAA;KACO,MAAM,CAAC,CAAA,QAAS,CAAC,CAAC,MAAM,QAAQ,EAChC,GAAG,CAAC,CAAA;QACH,IAAI,MAAM,eAAe,EAAE;YACzB,OAAO,OAAO,IAAI,CAAC,MAAM,eAAe,EACrC,MAAM,CAAC,CAAA,MAAO,IAAI,UAAU,CAAC,gCAC7B,GAAG,CAAC,CAAA,MAAO,IAAI,KAAK,CAAC,8BAA8B,MAAM;QACtE;QACQ,OAAO,EAAE;IACjB;AAEA;AAEA,MAAM,gCAAgC"}},
    {"offset": {"line": 11316, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 11320, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/integrations/console.ts"],"sourcesContent":["import { addBreadcrumb } from '../breadcrumbs';\nimport { getClient } from '../currentScopes';\nimport { addConsoleInstrumentationHandler } from '../instrument/console';\nimport { defineIntegration } from '../integration';\nimport type { ConsoleLevel } from '../types-hoist/instrument';\nimport { CONSOLE_LEVELS } from '../utils/logger';\nimport { severityLevelFromString } from '../utils/severity';\nimport { safeJoin } from '../utils/string';\nimport { GLOBAL_OBJ } from '../utils/worldwide';\n\ninterface ConsoleIntegrationOptions {\n  levels: ConsoleLevel[];\n}\n\ntype GlobalObjectWithUtil = typeof GLOBAL_OBJ & {\n  util: {\n    format: (...args: unknown[]) => string;\n  };\n};\n\nconst INTEGRATION_NAME = 'Console';\n\n/**\n * Captures calls to the `console` API as breadcrumbs in Sentry.\n *\n * By default the integration instruments `console.debug`, `console.info`, `console.warn`, `console.error`,\n * `console.log`, `console.trace`, and `console.assert`. You can use the `levels` option to customize which\n * levels are captured.\n *\n * @example\n *\n * ```js\n * Sentry.init({\n *   integrations: [Sentry.consoleIntegration({ levels: ['error', 'warn'] })],\n * });\n * ```\n */\nexport const consoleIntegration = defineIntegration((options: Partial<ConsoleIntegrationOptions> = {}) => {\n  const levels = new Set(options.levels || CONSOLE_LEVELS);\n\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      addConsoleInstrumentationHandler(({ args, level }) => {\n        if (getClient() !== client || !levels.has(level)) {\n          return;\n        }\n\n        addConsoleBreadcrumb(level, args);\n      });\n    },\n  };\n});\n\n/**\n * Capture a console breadcrumb.\n *\n * Exported just for tests.\n */\nexport function addConsoleBreadcrumb(level: ConsoleLevel, args: unknown[]): void {\n  const breadcrumb = {\n    category: 'console',\n    data: {\n      arguments: args,\n      logger: 'console',\n    },\n    level: severityLevelFromString(level),\n    message: formatConsoleArgs(args),\n  };\n\n  if (level === 'assert') {\n    if (args[0] === false) {\n      const assertionArgs = args.slice(1);\n      breadcrumb.message =\n        assertionArgs.length > 0 ? `Assertion failed: ${formatConsoleArgs(assertionArgs)}` : 'Assertion failed';\n      breadcrumb.data.arguments = assertionArgs;\n    } else {\n      // Don't capture a breadcrumb for passed assertions\n      return;\n    }\n  }\n\n  addBreadcrumb(breadcrumb, {\n    input: args,\n    level,\n  });\n}\n\nfunction formatConsoleArgs(values: unknown[]): string {\n  return 'util' in GLOBAL_OBJ && typeof (GLOBAL_OBJ as GlobalObjectWithUtil).util.format === 'function'\n    ? (GLOBAL_OBJ as GlobalObjectWithUtil).util.format(...values)\n    : safeJoin(values, ' ');\n}\n"],"names":["defineIntegration","CONSOLE_LEVELS","addConsoleInstrumentationHandler","getClient","severityLevelFromString","addBreadcrumb","GLOBAL_OBJ","safeJoin"],"mappings":";;;;;;;;;;;AAoBA,MAAM,mBAAmB;AAEzB;;;;;;;;;;;;;;CAcA,GACO,MAAM,qBAAqBA,YAAAA,iBAAiB,CAAC,CAAC,UAA8C,CAAA,CAAE;IACnG,MAAM,SAAS,IAAI,IAAI,QAAQ,MAAA,IAAUC,OAAAA,cAAc;IAEvD,OAAO;QACL,MAAM;QACN,OAAM,MAAM;YACVC,QAAAA,gCAAgC,CAAC,CAAC,EAAE,IAAI,EAAE,KAAA,EAAO;gBAC/C,IAAIC,cAAAA,SAAS,OAAO,UAAU,CAAC,OAAO,GAAG,CAAC,QAAQ;oBAChD;gBACV;gBAEQ,qBAAqB,OAAO;YACpC;QACA;IACA;AACA;AAEA;;;;CAIA,GACO,SAAS,qBAAqB,KAAK,EAAgB,IAAI;IAC5D,MAAM,aAAa;QACjB,UAAU;QACV,MAAM;YACJ,WAAW;YACX,QAAQ;QACd;QACI,OAAOC,SAAAA,uBAAuB,CAAC;QAC/B,SAAS,kBAAkB;IAC/B;IAEE,IAAI,UAAU,UAAU;QACtB,IAAI,IAAI,CAAC,EAAC,KAAM,OAAO;YACrB,MAAM,gBAAgB,KAAK,KAAK,CAAC;YACjC,WAAW,OAAA,GACT,cAAc,MAAA,GAAS,IAAI,CAAC,kBAAkB,EAAE,kBAAkB,eAAe,CAAA,GAAA;YACA,WAAA,IAAA,CAAA,SAAA,GAAA;QACA,OAAA;YACA,mDAAA;YACA;QACA;IACA;IAEAC,YAAAA,aAAA,CAAA,YAAA;QACA,OAAA;QACA;IACA;AACA;AAEA,SAAA,kBAAA,MAAA;IACA,OAAA,UAAAC,UAAAA,UAAA,IAAA,OAAA,AAAAA,UAAAA,UAAA,CAAA,IAAA,CAAA,MAAA,KAAA,aACA,AAAAA,UAAAA,UAAA,CAAA,IAAA,CAAA,MAAA,IAAA,UACAC,OAAAA,QAAA,CAAA,QAAA;AACA"}},
    {"offset": {"line": 11394, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 11398, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/utils/featureFlags.ts"],"sourcesContent":["import { getCurrentScope } from '../currentScopes';\nimport { DEBUG_BUILD } from '../debug-build';\nimport { type Event } from '../types-hoist/event';\nimport { type Span } from '../types-hoist/span';\nimport { logger } from '../utils/logger';\nimport { GLOBAL_OBJ } from '../utils/worldwide';\nimport { getActiveSpan } from './spanUtils';\n\n/**\n * Ordered LRU cache for storing feature flags in the scope context. The name\n * of each flag in the buffer is unique, and the output of getAll() is ordered\n * from oldest to newest.\n */\n\nexport type FeatureFlag = { readonly flag: string; readonly result: boolean };\n\n/**\n * Max size of the LRU flag buffer stored in Sentry scope and event contexts.\n */\nexport const _INTERNAL_FLAG_BUFFER_SIZE = 100;\n\n/**\n * Max number of flag evaluations to record per span.\n */\nexport const _INTERNAL_MAX_FLAGS_PER_SPAN = 10;\n\n// Global map of spans to feature flag buffers. Populated by feature flag integrations.\nGLOBAL_OBJ._spanToFlagBufferMap = new WeakMap<Span, Set<string>>();\n\nconst SPAN_FLAG_ATTRIBUTE_PREFIX = 'flag.evaluation.';\n\n/**\n * Copies feature flags that are in current scope context to the event context\n */\nexport function _INTERNAL_copyFlagsFromScopeToEvent(event: Event): Event {\n  const scope = getCurrentScope();\n  const flagContext = scope.getScopeData().contexts.flags;\n  const flagBuffer = flagContext ? flagContext.values : [];\n\n  if (!flagBuffer.length) {\n    return event;\n  }\n\n  if (event.contexts === undefined) {\n    event.contexts = {};\n  }\n  event.contexts.flags = { values: [...flagBuffer] };\n  return event;\n}\n\n/**\n * Inserts a flag into the current scope's context while maintaining ordered LRU properties.\n * Not thread-safe. After inserting:\n * - The flag buffer is sorted in order of recency, with the newest evaluation at the end.\n * - The names in the buffer are always unique.\n * - The length of the buffer never exceeds `maxSize`.\n *\n * @param name     Name of the feature flag to insert.\n * @param value    Value of the feature flag.\n * @param maxSize  Max number of flags the buffer should store. Default value should always be used in production.\n */\nexport function _INTERNAL_insertFlagToScope(\n  name: string,\n  value: unknown,\n  maxSize: number = _INTERNAL_FLAG_BUFFER_SIZE,\n): void {\n  const scopeContexts = getCurrentScope().getScopeData().contexts;\n  if (!scopeContexts.flags) {\n    scopeContexts.flags = { values: [] };\n  }\n  const flags = scopeContexts.flags.values as FeatureFlag[];\n  _INTERNAL_insertToFlagBuffer(flags, name, value, maxSize);\n}\n\n/**\n * Exported for tests only. Currently only accepts boolean values (otherwise no-op).\n * Inserts a flag into a FeatureFlag array while maintaining the following properties:\n * - Flags are sorted in order of recency, with the newest evaluation at the end.\n * - The flag names are always unique.\n * - The length of the array never exceeds `maxSize`.\n *\n * @param flags      The buffer to insert the flag into.\n * @param name       Name of the feature flag to insert.\n * @param value      Value of the feature flag.\n * @param maxSize    Max number of flags the buffer should store. Default value should always be used in production.\n */\nexport function _INTERNAL_insertToFlagBuffer(\n  flags: FeatureFlag[],\n  name: string,\n  value: unknown,\n  maxSize: number,\n): void {\n  if (typeof value !== 'boolean') {\n    return;\n  }\n\n  if (flags.length > maxSize) {\n    DEBUG_BUILD && logger.error(`[Feature Flags] insertToFlagBuffer called on a buffer larger than maxSize=${maxSize}`);\n    return;\n  }\n\n  // Check if the flag is already in the buffer - O(n)\n  const index = flags.findIndex(f => f.flag === name);\n\n  if (index !== -1) {\n    // The flag was found, remove it from its current position - O(n)\n    flags.splice(index, 1);\n  }\n\n  if (flags.length === maxSize) {\n    // If at capacity, pop the earliest flag - O(n)\n    flags.shift();\n  }\n\n  // Push the flag to the end - O(1)\n  flags.push({\n    flag: name,\n    result: value,\n  });\n}\n\n/**\n * Records a feature flag evaluation for the active span. This is a no-op for non-boolean values.\n * The flag and its value is stored in span attributes with the `flag.evaluation` prefix. Once the\n * unique flags for a span reaches maxFlagsPerSpan, subsequent flags are dropped.\n *\n * @param name             Name of the feature flag.\n * @param value            Value of the feature flag. Non-boolean values are ignored.\n * @param maxFlagsPerSpan  Max number of flags a buffer should store. Default value should always be used in production.\n */\nexport function _INTERNAL_addFeatureFlagToActiveSpan(\n  name: string,\n  value: unknown,\n  maxFlagsPerSpan: number = _INTERNAL_MAX_FLAGS_PER_SPAN,\n): void {\n  const spanFlagMap = GLOBAL_OBJ._spanToFlagBufferMap;\n  if (!spanFlagMap || typeof value !== 'boolean') {\n    return;\n  }\n\n  const span = getActiveSpan();\n  if (span) {\n    const flags = spanFlagMap.get(span) || new Set<string>();\n    if (flags.has(name)) {\n      span.setAttribute(`${SPAN_FLAG_ATTRIBUTE_PREFIX}${name}`, value);\n    } else if (flags.size < maxFlagsPerSpan) {\n      flags.add(name);\n      span.setAttribute(`${SPAN_FLAG_ATTRIBUTE_PREFIX}${name}`, value);\n    }\n    spanFlagMap.set(span, flags);\n  }\n}\n"],"names":["GLOBAL_OBJ","getCurrentScope","DEBUG_BUILD","logger","getActiveSpan"],"mappings":";;;;;;;;AAQA;;;;CAIA,GAIA;;CAEA,GACO,MAAM,6BAA6B;AAE1C;;CAEA,GACO,MAAM,+BAA+B;AAE5C,uFAAA;AACAA,UAAAA,UAAU,CAAC,oBAAA,GAAuB,IAAI;AAEtC,MAAM,6BAA6B;AAEnC;;CAEA,GACO,SAAS,oCAAoC,KAAK;IACvD,MAAM,QAAQC,cAAAA,eAAe;IAC7B,MAAM,cAAc,MAAM,YAAY,GAAG,QAAQ,CAAC,KAAK;IACvD,MAAM,aAAa,cAAc,YAAY,MAAA,GAAS,EAAE;IAExD,IAAI,CAAC,WAAW,MAAM,EAAE;QACtB,OAAO;IACX;IAEE,IAAI,MAAM,QAAA,KAAa,WAAW;QAChC,MAAM,QAAA,GAAW,CAAA;IACrB;IACE,MAAM,QAAQ,CAAC,KAAA,GAAQ;QAAE,QAAQ;eAAI;SAAU;IAAA;IAC/C,OAAO;AACT;AAEA;;;;;;;;;;CAUA,GACO,SAAS,4BACd,IAAI,EACJ,KAAK,EACL,UAAkB,0BAA0B;IAE5C,MAAM,gBAAgBA,cAAAA,eAAe,GAAG,YAAY,GAAG,QAAQ;IAC/D,IAAI,CAAC,cAAc,KAAK,EAAE;QACxB,cAAc,KAAA,GAAQ;YAAE,QAAQ,EAAC;QAAA;IACrC;IACE,MAAM,QAAQ,cAAc,KAAK,CAAC,MAAA;IAClC,6BAA6B,OAAO,MAAM,OAAO;AACnD;AAEA;;;;;;;;;;;CAWA,GACO,SAAS,6BACd,KAAK,EACL,IAAI,EACJ,KAAK,EACL,OAAO;IAEP,IAAI,OAAO,UAAU,WAAW;QAC9B;IACJ;IAEE,IAAI,MAAM,MAAA,GAAS,SAAS;QAC1BC,WAAAA,WAAA,IAAeC,OAAAA,MAAM,CAAC,KAAK,CAAC,CAAC,0EAA0E,EAAE,QAAQ,CAAA;QACA;IACA;IAEA,oDAAA;IACA,MAAA,QAAA,MAAA,SAAA,CAAA,CAAA,IAAA,EAAA,IAAA,KAAA;IAEA,IAAA,UAAA,CAAA,GAAA;QACA,iEAAA;QACA,MAAA,MAAA,CAAA,OAAA;IACA;IAEA,IAAA,MAAA,MAAA,KAAA,SAAA;QACA,+CAAA;QACA,MAAA,KAAA;IACA;IAEA,kCAAA;IACA,MAAA,IAAA,CAAA;QACA,MAAA;QACA,QAAA;IACA;AACA;AAEA;;;;;;;;CAQA,GACA,SAAA,qCACA,IAAA,EACA,KAAA,EACA,kBAAA,4BAAA;IAEA,MAAA,cAAAH,UAAAA,UAAA,CAAA,oBAAA;IACA,IAAA,CAAA,eAAA,OAAA,UAAA,WAAA;QACA;IACA;IAEA,MAAA,OAAAI,UAAAA,aAAA;IACA,IAAA,MAAA;QACA,MAAA,QAAA,YAAA,GAAA,CAAA,SAAA,IAAA;QACA,IAAA,MAAA,GAAA,CAAA,OAAA;YACA,KAAA,YAAA,CAAA,CAAA,EAAA,2BAAA,EAAA,KAAA,CAAA,EAAA;QACA,OAAA,IAAA,MAAA,IAAA,GAAA,iBAAA;YACA,MAAA,GAAA,CAAA;YACA,KAAA,YAAA,CAAA,CAAA,EAAA,2BAAA,EAAA,KAAA,CAAA,EAAA;QACA;QACA,YAAA,GAAA,CAAA,MAAA;IACA;AACA"}},
    {"offset": {"line": 11524, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 11528, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/integrations/featureFlags/featureFlagsIntegration.ts"],"sourcesContent":["import { type Client } from '../../client';\nimport { defineIntegration } from '../../integration';\nimport { type Event, type EventHint } from '../../types-hoist/event';\nimport { type Integration, type IntegrationFn } from '../../types-hoist/integration';\nimport {\n  _INTERNAL_addFeatureFlagToActiveSpan,\n  _INTERNAL_copyFlagsFromScopeToEvent,\n  _INTERNAL_insertFlagToScope,\n} from '../../utils/featureFlags';\n\nexport interface FeatureFlagsIntegration extends Integration {\n  addFeatureFlag: (name: string, value: unknown) => void;\n}\n\n/**\n * Sentry integration for buffering feature flag evaluations manually with an API, and\n * capturing them on error events and spans.\n *\n * See the [feature flag documentation](https://develop.sentry.dev/sdk/expected-features/#feature-flags) for more information.\n *\n * @example\n * ```\n * import * as Sentry from '@sentry/browser';\n * import { type FeatureFlagsIntegration } from '@sentry/browser';\n *\n * // Setup\n * Sentry.init(..., integrations: [Sentry.featureFlagsIntegration()])\n *\n * // Verify\n * const flagsIntegration = Sentry.getClient()?.getIntegrationByName<FeatureFlagsIntegration>('FeatureFlags');\n * if (flagsIntegration) {\n *   flagsIntegration.addFeatureFlag('my-flag', true);\n * } else {\n *   // check your setup\n * }\n * Sentry.captureException(Exception('broke')); // 'my-flag' should be captured to this Sentry event.\n * ```\n */\nexport const featureFlagsIntegration = defineIntegration(() => {\n  return {\n    name: 'FeatureFlags',\n\n    processEvent(event: Event, _hint: EventHint, _client: Client): Event {\n      return _INTERNAL_copyFlagsFromScopeToEvent(event);\n    },\n\n    addFeatureFlag(name: string, value: unknown): void {\n      _INTERNAL_insertFlagToScope(name, value);\n      _INTERNAL_addFeatureFlagToActiveSpan(name, value);\n    },\n  };\n}) as IntegrationFn<FeatureFlagsIntegration>;\n"],"names":["defineIntegration","_INTERNAL_copyFlagsFromScopeToEvent","_INTERNAL_insertFlagToScope","_INTERNAL_addFeatureFlagToActiveSpan"],"mappings":";;;;;AAcA;;;;;;;;;;;;;;;;;;;;;;;CAuBA,SACa,0BAA0BA,YAAAA,iBAAiB,CAAC;IACvD,OAAO;QACL,MAAM;QAEN,cAAa,KAAK,EAAS,KAAK,EAAa,OAAO;YAClD,OAAOC,aAAAA,mCAAmC,CAAC;QACjD;QAEI,gBAAe,IAAI,EAAU,KAAK;YAChCC,aAAAA,2BAA2B,CAAC,MAAM;YAClCC,aAAAA,oCAAoC,CAAC,MAAM;QACjD;IACA;AACA"}},
    {"offset": {"line": 11569, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 11573, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/profiling.ts"],"sourcesContent":["import { getClient } from './currentScopes';\nimport { DEBUG_BUILD } from './debug-build';\nimport type { Profiler, ProfilingIntegration } from './types-hoist/profiling';\nimport { logger } from './utils/logger';\n\nfunction isProfilingIntegrationWithProfiler(\n  integration: ProfilingIntegration<any> | undefined,\n): integration is ProfilingIntegration<any> {\n  return (\n    !!integration &&\n    typeof integration['_profiler'] !== 'undefined' &&\n    typeof integration['_profiler']['start'] === 'function' &&\n    typeof integration['_profiler']['stop'] === 'function'\n  );\n}\n/**\n * Starts the Sentry continuous profiler.\n * This mode is exclusive with the transaction profiler and will only work if the profilesSampleRate is set to a falsy value.\n * In continuous profiling mode, the profiler will keep reporting profile chunks to Sentry until it is stopped, which allows for continuous profiling of the application.\n */\nfunction startProfiler(): void {\n  const client = getClient();\n  if (!client) {\n    DEBUG_BUILD && logger.warn('No Sentry client available, profiling is not started');\n    return;\n  }\n\n  const integration = client.getIntegrationByName<ProfilingIntegration<any>>('ProfilingIntegration');\n\n  if (!integration) {\n    DEBUG_BUILD && logger.warn('ProfilingIntegration is not available');\n    return;\n  }\n\n  if (!isProfilingIntegrationWithProfiler(integration)) {\n    DEBUG_BUILD && logger.warn('Profiler is not available on profiling integration.');\n    return;\n  }\n\n  integration._profiler.start();\n}\n\n/**\n * Stops the Sentry continuous profiler.\n * Calls to stop will stop the profiler and flush the currently collected profile data to Sentry.\n */\nfunction stopProfiler(): void {\n  const client = getClient();\n  if (!client) {\n    DEBUG_BUILD && logger.warn('No Sentry client available, profiling is not started');\n    return;\n  }\n\n  const integration = client.getIntegrationByName<ProfilingIntegration<any>>('ProfilingIntegration');\n  if (!integration) {\n    DEBUG_BUILD && logger.warn('ProfilingIntegration is not available');\n    return;\n  }\n\n  if (!isProfilingIntegrationWithProfiler(integration)) {\n    DEBUG_BUILD && logger.warn('Profiler is not available on profiling integration.');\n    return;\n  }\n\n  integration._profiler.stop();\n}\n\nexport const profiler: Profiler = {\n  startProfiler,\n  stopProfiler,\n};\n"],"names":["getClient","DEBUG_BUILD","logger"],"mappings":";;;;;;AAKA,SAAS,mCACP,WAAW;IAEX,OACE,CAAC,CAAC,eACF,OAAO,WAAW,CAAC,YAAW,KAAM,eACpC,OAAO,WAAW,CAAC,YAAY,CAAC,QAAO,KAAM,cAC7C,OAAO,WAAW,CAAC,YAAY,CAAC,OAAM,KAAM;AAEhD;AACA;;;;CAIA,GACA,SAAS;IACP,MAAM,SAASA,cAAAA,SAAS;IACxB,IAAI,CAAC,QAAQ;QACXC,WAAAA,WAAAA,IAAeC,OAAAA,MAAM,CAAC,IAAI,CAAC;QAC3B;IACJ;IAEE,MAAM,cAAc,OAAO,oBAAoB,CAA4B;IAE3E,IAAI,CAAC,aAAa;QAChBD,WAAAA,WAAAA,IAAeC,OAAAA,MAAM,CAAC,IAAI,CAAC;QAC3B;IACJ;IAEE,IAAI,CAAC,mCAAmC,cAAc;QACpDD,WAAAA,WAAAA,IAAeC,OAAAA,MAAM,CAAC,IAAI,CAAC;QAC3B;IACJ;IAEE,YAAY,SAAS,CAAC,KAAK;AAC7B;AAEA;;;CAGA,GACA,SAAS;IACP,MAAM,SAASF,cAAAA,SAAS;IACxB,IAAI,CAAC,QAAQ;QACXC,WAAAA,WAAAA,IAAeC,OAAAA,MAAM,CAAC,IAAI,CAAC;QAC3B;IACJ;IAEE,MAAM,cAAc,OAAO,oBAAoB,CAA4B;IAC3E,IAAI,CAAC,aAAa;QAChBD,WAAAA,WAAAA,IAAeC,OAAAA,MAAM,CAAC,IAAI,CAAC;QAC3B;IACJ;IAEE,IAAI,CAAC,mCAAmC,cAAc;QACpDD,WAAAA,WAAAA,IAAeC,OAAAA,MAAM,CAAC,IAAI,CAAC;QAC3B;IACJ;IAEE,YAAY,SAAS,CAAC,IAAI;AAC5B;AAEO,MAAM,WAAqB;IAChC;IACA;AACF"}},
    {"offset": {"line": 11628, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 11632, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/utils/url.ts"],"sourcesContent":["import {\n  SEMANTIC_ATTRIBUTE_HTTP_REQUEST_METHOD,\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n  SEMANTIC_ATTRIBUTE_SENTRY_SOURCE,\n  SEMANTIC_ATTRIBUTE_URL_FULL,\n} from '../semanticAttributes';\nimport type { SpanAttributes } from '../types-hoist/span';\n\ntype PartialURL = {\n  host?: string;\n  path?: string;\n  protocol?: string;\n  relative?: string;\n  search?: string;\n  hash?: string;\n};\n\ninterface URLwithCanParse extends URL {\n  canParse: (url: string, base?: string | URL | undefined) => boolean;\n}\n\n// A subset of the URL object that is valid for relative URLs\n// The URL object cannot handle relative URLs, so we need to handle them separately\ntype RelativeURL = {\n  isRelative: true;\n  pathname: URL['pathname'];\n  search: URL['search'];\n  hash: URL['hash'];\n};\n\ntype URLObject = RelativeURL | URL;\n\n// Curious about `thismessage:/`? See: https://www.rfc-editor.org/rfc/rfc2557.html\n//  > When the methods above do not yield an absolute URI, a base URL\n//  > of \"thismessage:/\" MUST be employed. This base URL has been\n//  > defined for the sole purpose of resolving relative references\n//  > within a multipart/related structure when no other base URI is\n//  > specified.\n//\n// We need to provide a base URL to `parseStringToURLObject` because the fetch API gives us a\n// relative URL sometimes.\n//\n// This is the only case where we need to provide a base URL to `parseStringToURLObject`\n// because the relative URL is not valid on its own.\nconst DEFAULT_BASE_URL = 'thismessage:/';\n\n/**\n * Checks if the URL object is relative\n *\n * @param url - The URL object to check\n * @returns True if the URL object is relative, false otherwise\n */\nexport function isURLObjectRelative(url: URLObject): url is RelativeURL {\n  return 'isRelative' in url;\n}\n\n/**\n * Parses string to a URL object\n *\n * @param url - The URL to parse\n * @returns The parsed URL object or undefined if the URL is invalid\n */\nexport function parseStringToURLObject(url: string, urlBase?: string | URL | undefined): URLObject | undefined {\n  const isRelative = url.indexOf('://') <= 0 && url.indexOf('//') !== 0;\n  const base = urlBase ?? (isRelative ? DEFAULT_BASE_URL : undefined);\n  try {\n    // Use `canParse` to short-circuit the URL constructor if it's not a valid URL\n    // This is faster than trying to construct the URL and catching the error\n    // Node 20+, Chrome 120+, Firefox 115+, Safari 17+\n    if ('canParse' in URL && !(URL as unknown as URLwithCanParse).canParse(url, base)) {\n      return undefined;\n    }\n\n    const fullUrlObject = new URL(url, base);\n    if (isRelative) {\n      // Because we used a fake base URL, we need to return a relative URL object.\n      // We cannot return anything about the origin, host, etc. because it will refer to the fake base URL.\n      return {\n        isRelative,\n        pathname: fullUrlObject.pathname,\n        search: fullUrlObject.search,\n        hash: fullUrlObject.hash,\n      };\n    }\n    return fullUrlObject;\n  } catch {\n    // empty body\n  }\n\n  return undefined;\n}\n\n/**\n * Takes a URL object and returns a sanitized string which is safe to use as span name\n * see: https://develop.sentry.dev/sdk/data-handling/#structuring-data\n */\nexport function getSanitizedUrlStringFromUrlObject(url: URLObject): string {\n  if (isURLObjectRelative(url)) {\n    return url.pathname;\n  }\n\n  const newUrl = new URL(url);\n  newUrl.search = '';\n  newUrl.hash = '';\n  if (['80', '443'].includes(newUrl.port)) {\n    newUrl.port = '';\n  }\n  if (newUrl.password) {\n    newUrl.password = '%filtered%';\n  }\n  if (newUrl.username) {\n    newUrl.username = '%filtered%';\n  }\n\n  return newUrl.toString();\n}\n\ntype PartialRequest = {\n  method?: string;\n};\n\nfunction getHttpSpanNameFromUrlObject(\n  urlObject: URLObject | undefined,\n  kind: 'server' | 'client',\n  request?: PartialRequest,\n  routeName?: string,\n): string {\n  const method = request?.method?.toUpperCase() ?? 'GET';\n  const route = routeName\n    ? routeName\n    : urlObject\n      ? kind === 'client'\n        ? getSanitizedUrlStringFromUrlObject(urlObject)\n        : urlObject.pathname\n      : '/';\n\n  return `${method} ${route}`;\n}\n\n/**\n * Takes a parsed URL object and returns a set of attributes for the span\n * that represents the HTTP request for that url. This is used for both server\n * and client http spans.\n *\n * Follows https://opentelemetry.io/docs/specs/semconv/http/.\n *\n * @param urlObject - see {@link parseStringToURLObject}\n * @param kind - The type of HTTP operation (server or client)\n * @param spanOrigin - The origin of the span\n * @param request - The request object, see {@link PartialRequest}\n * @param routeName - The name of the route, must be low cardinality\n * @returns The span name and attributes for the HTTP operation\n */\nexport function getHttpSpanDetailsFromUrlObject(\n  urlObject: URLObject | undefined,\n  kind: 'server' | 'client',\n  spanOrigin: string,\n  request?: PartialRequest,\n  routeName?: string,\n): [name: string, attributes: SpanAttributes] {\n  const attributes: SpanAttributes = {\n    [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: spanOrigin,\n    [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'url',\n  };\n\n  if (routeName) {\n    // This is based on https://opentelemetry.io/docs/specs/semconv/http/http-spans/#name\n    attributes[kind === 'server' ? 'http.route' : 'url.template'] = routeName;\n    attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] = 'route';\n  }\n\n  if (request?.method) {\n    attributes[SEMANTIC_ATTRIBUTE_HTTP_REQUEST_METHOD] = request.method.toUpperCase();\n  }\n\n  if (urlObject) {\n    if (urlObject.search) {\n      attributes['url.query'] = urlObject.search;\n    }\n    if (urlObject.hash) {\n      attributes['url.fragment'] = urlObject.hash;\n    }\n    if (urlObject.pathname) {\n      attributes['url.path'] = urlObject.pathname;\n      if (urlObject.pathname === '/') {\n        attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] = 'route';\n      }\n    }\n\n    if (!isURLObjectRelative(urlObject)) {\n      attributes[SEMANTIC_ATTRIBUTE_URL_FULL] = urlObject.href;\n      if (urlObject.port) {\n        attributes['url.port'] = urlObject.port;\n      }\n      if (urlObject.protocol) {\n        attributes['url.scheme'] = urlObject.protocol;\n      }\n      if (urlObject.hostname) {\n        attributes[kind === 'server' ? 'server.address' : 'url.domain'] = urlObject.hostname;\n      }\n    }\n  }\n\n  return [getHttpSpanNameFromUrlObject(urlObject, kind, request, routeName), attributes];\n}\n\n/**\n * Parses string form of URL into an object\n * // borrowed from https://tools.ietf.org/html/rfc3986#appendix-B\n * // intentionally using regex and not <a/> href parsing trick because React Native and other\n * // environments where DOM might not be available\n * @returns parsed URL object\n */\nexport function parseUrl(url: string): PartialURL {\n  if (!url) {\n    return {};\n  }\n\n  const match = url.match(/^(([^:/?#]+):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$/);\n\n  if (!match) {\n    return {};\n  }\n\n  // coerce to undefined values to empty string so we don't get 'undefined'\n  const query = match[6] || '';\n  const fragment = match[8] || '';\n  return {\n    host: match[4],\n    path: match[5],\n    protocol: match[2],\n    search: query,\n    hash: fragment,\n    relative: match[5] + query + fragment, // everything minus origin\n  };\n}\n\n/**\n * Strip the query string and fragment off of a given URL or path (if present)\n *\n * @param urlPath Full URL or path, including possible query string and/or fragment\n * @returns URL or path without query string or fragment\n */\nexport function stripUrlQueryAndFragment(urlPath: string): string {\n  return (urlPath.split(/[?#]/, 1) as [string, ...string[]])[0];\n}\n\n/**\n * Takes a URL object and returns a sanitized string which is safe to use as span name\n * see: https://develop.sentry.dev/sdk/data-handling/#structuring-data\n */\nexport function getSanitizedUrlString(url: PartialURL): string {\n  const { protocol, host, path } = url;\n\n  const filteredHost =\n    host\n      // Always filter out authority\n      ?.replace(/^.*@/, '[filtered]:[filtered]@')\n      // Don't show standard :80 (http) and :443 (https) ports to reduce the noise\n      // TODO: Use new URL global if it exists\n      .replace(/(:80)$/, '')\n      .replace(/(:443)$/, '') || '';\n\n  return `${protocol ? `${protocol}://` : ''}${filteredHost}${path}`;\n}\n"],"names":["SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN","SEMANTIC_ATTRIBUTE_SENTRY_SOURCE","SEMANTIC_ATTRIBUTE_HTTP_REQUEST_METHOD","SEMANTIC_ATTRIBUTE_URL_FULL"],"mappings":"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"}},
    {"offset": {"line": 11824, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 11828, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/fetch.ts"],"sourcesContent":["import { getClient } from './currentScopes';\nimport { SEMANTIC_ATTRIBUTE_SENTRY_OP, SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN } from './semanticAttributes';\nimport { setHttpStatus, SPAN_STATUS_ERROR, startInactiveSpan } from './tracing';\nimport { SentryNonRecordingSpan } from './tracing/sentryNonRecordingSpan';\nimport type { FetchBreadcrumbHint } from './types-hoist/breadcrumb';\nimport type { HandlerDataFetch } from './types-hoist/instrument';\nimport type { Span, SpanAttributes, SpanOrigin } from './types-hoist/span';\nimport { SENTRY_BAGGAGE_KEY_PREFIX } from './utils/baggage';\nimport { hasSpansEnabled } from './utils/hasSpansEnabled';\nimport { isInstanceOf, isRequest } from './utils/is';\nimport { getActiveSpan } from './utils/spanUtils';\nimport { getTraceData } from './utils/traceData';\nimport { getSanitizedUrlStringFromUrlObject, isURLObjectRelative, parseStringToURLObject } from './utils/url';\n\ntype PolymorphicRequestHeaders =\n  | Record<string, string | undefined>\n  | Array<[string, string]>\n  // the below is not precisely the Header type used in Request, but it'll pass duck-typing\n  | {\n      append: (key: string, value: string) => void;\n      get: (key: string) => string | null | undefined;\n    };\n\n/**\n * Create and track fetch request spans for usage in combination with `addFetchInstrumentationHandler`.\n *\n * @returns Span if a span was created, otherwise void.\n */\nexport function instrumentFetchRequest(\n  handlerData: HandlerDataFetch,\n  shouldCreateSpan: (url: string) => boolean,\n  shouldAttachHeaders: (url: string) => boolean,\n  spans: Record<string, Span>,\n  spanOrigin: SpanOrigin = 'auto.http.browser',\n): Span | undefined {\n  if (!handlerData.fetchData) {\n    return undefined;\n  }\n\n  const { method, url } = handlerData.fetchData;\n\n  const shouldCreateSpanResult = hasSpansEnabled() && shouldCreateSpan(url);\n\n  if (handlerData.endTimestamp && shouldCreateSpanResult) {\n    const spanId = handlerData.fetchData.__span;\n    if (!spanId) return;\n\n    const span = spans[spanId];\n    if (span) {\n      endSpan(span, handlerData);\n\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete spans[spanId];\n    }\n    return undefined;\n  }\n\n  const hasParent = !!getActiveSpan();\n\n  const span =\n    shouldCreateSpanResult && hasParent\n      ? startInactiveSpan(getSpanStartOptions(url, method, spanOrigin))\n      : new SentryNonRecordingSpan();\n\n  handlerData.fetchData.__span = span.spanContext().spanId;\n  spans[span.spanContext().spanId] = span;\n\n  if (shouldAttachHeaders(handlerData.fetchData.url)) {\n    const request: string | Request = handlerData.args[0];\n\n    const options: { [key: string]: unknown } = handlerData.args[1] || {};\n\n    const headers = _addTracingHeadersToFetchRequest(\n      request,\n      options,\n      // If performance is disabled (TWP) or there's no active root span (pageload/navigation/interaction),\n      // we do not want to use the span as base for the trace headers,\n      // which means that the headers will be generated from the scope and the sampling decision is deferred\n      hasSpansEnabled() && hasParent ? span : undefined,\n    );\n    if (headers) {\n      // Ensure this is actually set, if no options have been passed previously\n      handlerData.args[1] = options;\n      options.headers = headers;\n    }\n  }\n\n  const client = getClient();\n\n  if (client) {\n    const fetchHint = {\n      input: handlerData.args,\n      response: handlerData.response,\n      startTimestamp: handlerData.startTimestamp,\n      endTimestamp: handlerData.endTimestamp,\n    } satisfies FetchBreadcrumbHint;\n\n    client.emit('beforeOutgoingRequestSpan', span, fetchHint);\n  }\n\n  return span;\n}\n\n/**\n * Adds sentry-trace and baggage headers to the various forms of fetch headers.\n * exported only for testing purposes\n *\n * When we determine if we should add a baggage header, there are 3 cases:\n * 1. No previous baggage header -> add baggage\n * 2. Previous baggage header has no sentry baggage values -> add our baggage\n * 3. Previous baggage header has sentry baggage values -> do nothing (might have been added manually by users)\n */\n// eslint-disable-next-line complexity -- yup it's this complicated :(\nexport function _addTracingHeadersToFetchRequest(\n  request: string | Request,\n  fetchOptionsObj: {\n    headers?:\n      | {\n          [key: string]: string[] | string | undefined;\n        }\n      | PolymorphicRequestHeaders;\n  },\n  span?: Span,\n): PolymorphicRequestHeaders | undefined {\n  const traceHeaders = getTraceData({ span });\n  const sentryTrace = traceHeaders['sentry-trace'];\n  const baggage = traceHeaders.baggage;\n\n  // Nothing to do, when we return undefined here, the original headers will be used\n  if (!sentryTrace) {\n    return undefined;\n  }\n\n  const originalHeaders = fetchOptionsObj.headers || (isRequest(request) ? request.headers : undefined);\n\n  if (!originalHeaders) {\n    return { ...traceHeaders };\n  } else if (isHeaders(originalHeaders)) {\n    const newHeaders = new Headers(originalHeaders);\n\n    // We don't want to override manually added sentry headers\n    if (!newHeaders.get('sentry-trace')) {\n      newHeaders.set('sentry-trace', sentryTrace);\n    }\n\n    if (baggage) {\n      const prevBaggageHeader = newHeaders.get('baggage');\n\n      if (!prevBaggageHeader) {\n        newHeaders.set('baggage', baggage);\n      } else if (!baggageHeaderHasSentryBaggageValues(prevBaggageHeader)) {\n        newHeaders.set('baggage', `${prevBaggageHeader},${baggage}`);\n      }\n    }\n\n    return newHeaders;\n  } else if (Array.isArray(originalHeaders)) {\n    const newHeaders = [...originalHeaders];\n\n    if (!originalHeaders.find(header => header[0] === 'sentry-trace')) {\n      newHeaders.push(['sentry-trace', sentryTrace]);\n    }\n\n    const prevBaggageHeaderWithSentryValues = originalHeaders.find(\n      header => header[0] === 'baggage' && baggageHeaderHasSentryBaggageValues(header[1]),\n    );\n\n    if (baggage && !prevBaggageHeaderWithSentryValues) {\n      // If there are multiple entries with the same key, the browser will merge the values into a single request header.\n      // Its therefore safe to simply push a \"baggage\" entry, even though there might already be another baggage header.\n      newHeaders.push(['baggage', baggage]);\n    }\n\n    return newHeaders as PolymorphicRequestHeaders;\n  } else {\n    const existingSentryTraceHeader = 'sentry-trace' in originalHeaders ? originalHeaders['sentry-trace'] : undefined;\n\n    const existingBaggageHeader = 'baggage' in originalHeaders ? originalHeaders.baggage : undefined;\n    const newBaggageHeaders: string[] = existingBaggageHeader\n      ? Array.isArray(existingBaggageHeader)\n        ? [...existingBaggageHeader]\n        : [existingBaggageHeader]\n      : [];\n\n    const prevBaggageHeaderWithSentryValues =\n      existingBaggageHeader &&\n      (Array.isArray(existingBaggageHeader)\n        ? existingBaggageHeader.find(headerItem => baggageHeaderHasSentryBaggageValues(headerItem))\n        : baggageHeaderHasSentryBaggageValues(existingBaggageHeader));\n\n    if (baggage && !prevBaggageHeaderWithSentryValues) {\n      newBaggageHeaders.push(baggage);\n    }\n\n    return {\n      ...(originalHeaders as Exclude<typeof originalHeaders, Headers>),\n      'sentry-trace': (existingSentryTraceHeader as string | undefined) ?? sentryTrace,\n      baggage: newBaggageHeaders.length > 0 ? newBaggageHeaders.join(',') : undefined,\n    };\n  }\n}\n\nfunction endSpan(span: Span, handlerData: HandlerDataFetch): void {\n  if (handlerData.response) {\n    setHttpStatus(span, handlerData.response.status);\n\n    const contentLength = handlerData.response?.headers && handlerData.response.headers.get('content-length');\n\n    if (contentLength) {\n      const contentLengthNum = parseInt(contentLength);\n      if (contentLengthNum > 0) {\n        span.setAttribute('http.response_content_length', contentLengthNum);\n      }\n    }\n  } else if (handlerData.error) {\n    span.setStatus({ code: SPAN_STATUS_ERROR, message: 'internal_error' });\n  }\n  span.end();\n}\n\nfunction baggageHeaderHasSentryBaggageValues(baggageHeader: string): boolean {\n  return baggageHeader.split(',').some(baggageEntry => baggageEntry.trim().startsWith(SENTRY_BAGGAGE_KEY_PREFIX));\n}\n\nfunction isHeaders(headers: unknown): headers is Headers {\n  return typeof Headers !== 'undefined' && isInstanceOf(headers, Headers);\n}\n\nfunction getSpanStartOptions(\n  url: string,\n  method: string,\n  spanOrigin: SpanOrigin,\n): Parameters<typeof startInactiveSpan>[0] {\n  const parsedUrl = parseStringToURLObject(url);\n  return {\n    name: parsedUrl ? `${method} ${getSanitizedUrlStringFromUrlObject(parsedUrl)}` : method,\n    attributes: getFetchSpanAttributes(url, parsedUrl, method, spanOrigin),\n  };\n}\n\nfunction getFetchSpanAttributes(\n  url: string,\n  parsedUrl: ReturnType<typeof parseStringToURLObject>,\n  method: string,\n  spanOrigin: SpanOrigin,\n): SpanAttributes {\n  const attributes: SpanAttributes = {\n    url,\n    type: 'fetch',\n    'http.method': method,\n    [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: spanOrigin,\n    [SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'http.client',\n  };\n  if (parsedUrl) {\n    if (!isURLObjectRelative(parsedUrl)) {\n      attributes['http.url'] = parsedUrl.href;\n      attributes['server.address'] = parsedUrl.host;\n    }\n    if (parsedUrl.search) {\n      attributes['http.query'] = parsedUrl.search;\n    }\n    if (parsedUrl.hash) {\n      attributes['http.fragment'] = parsedUrl.hash;\n    }\n  }\n  return attributes;\n}\n"],"names":["hasSpansEnabled","getActiveSpan","startInactiveSpan","SentryNonRecordingSpan","getClient","getTraceData","isRequest","setHttpStatus","SPAN_STATUS_ERROR","SENTRY_BAGGAGE_KEY_PREFIX","isInstanceOf","url","parseStringToURLObject","getSanitizedUrlStringFromUrlObject","SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN","SEMANTIC_ATTRIBUTE_SENTRY_OP","isURLObjectRelative"],"mappings":"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"}},
    {"offset": {"line": 12029, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 12033, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/trpc.ts"],"sourcesContent":["import { getClient, withIsolationScope } from './currentScopes';\nimport { captureException } from './exports';\nimport { SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, SEMANTIC_ATTRIBUTE_SENTRY_SOURCE } from './semanticAttributes';\nimport { startSpanManual } from './tracing';\nimport { normalize } from './utils/normalize';\nimport { addNonEnumerableProperty } from './utils/object';\n\ninterface SentryTrpcMiddlewareOptions {\n  /** Whether to include procedure inputs in reported events. Defaults to `false`. */\n  attachRpcInput?: boolean;\n  forceTransaction?: boolean;\n}\n\nexport interface SentryTrpcMiddlewareArguments<T> {\n  path?: unknown;\n  type?: unknown;\n  next: () => T;\n  rawInput?: unknown;\n  getRawInput?: () => Promise<unknown>;\n}\n\nconst trpcCaptureContext = { mechanism: { handled: false, data: { function: 'trpcMiddleware' } } };\n\nfunction captureIfError(nextResult: unknown): void {\n  // TODO: Set span status based on what TRPCError was encountered\n  if (\n    typeof nextResult === 'object' &&\n    nextResult !== null &&\n    'ok' in nextResult &&\n    !nextResult.ok &&\n    'error' in nextResult\n  ) {\n    captureException(nextResult.error, trpcCaptureContext);\n  }\n}\n\ntype SentryTrpcMiddleware<T> = T extends Promise<unknown> ? T : Promise<T>;\n\n/**\n * Sentry tRPC middleware that captures errors and creates spans for tRPC procedures.\n */\nexport function trpcMiddleware(options: SentryTrpcMiddlewareOptions = {}) {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  return async function <T>(opts: SentryTrpcMiddlewareArguments<T>): SentryTrpcMiddleware<T> {\n    const { path, type, next, rawInput, getRawInput } = opts;\n\n    const client = getClient();\n    const clientOptions = client?.getOptions();\n\n    const trpcContext: Record<string, unknown> = {\n      procedure_path: path,\n      procedure_type: type,\n    };\n\n    addNonEnumerableProperty(\n      trpcContext,\n      '__sentry_override_normalization_depth__',\n      1 + // 1 for context.input + the normal normalization depth\n        (clientOptions?.normalizeDepth ?? 5), // 5 is a sane depth\n    );\n\n    if (options.attachRpcInput !== undefined ? options.attachRpcInput : clientOptions?.sendDefaultPii) {\n      if (rawInput !== undefined) {\n        trpcContext.input = normalize(rawInput);\n      }\n\n      if (getRawInput !== undefined && typeof getRawInput === 'function') {\n        try {\n          const rawRes = await getRawInput();\n\n          trpcContext.input = normalize(rawRes);\n        } catch (err) {\n          // noop\n        }\n      }\n    }\n\n    return withIsolationScope(scope => {\n      scope.setContext('trpc', trpcContext);\n      return startSpanManual(\n        {\n          name: `trpc/${path}`,\n          op: 'rpc.server',\n          attributes: {\n            [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'route',\n            [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.rpc.trpc',\n          },\n          forceTransaction: !!options.forceTransaction,\n        },\n        async span => {\n          try {\n            const nextResult = await next();\n            captureIfError(nextResult);\n            span.end();\n            return nextResult;\n          } catch (e) {\n            captureException(e, trpcCaptureContext);\n            span.end();\n            throw e;\n          }\n        },\n      ) as SentryTrpcMiddleware<T>;\n    });\n  };\n}\n"],"names":["captureException","getClient","addNonEnumerableProperty","normalize","withIsolationScope","startSpanManual","SEMANTIC_ATTRIBUTE_SENTRY_SOURCE","SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN"],"mappings":";;;;;;;;;;;;;AAqBA,MAAM,qBAAqB;IAAE,WAAW;QAAE,SAAS;QAAO,MAAM;YAAE,UAAU;QAAA;IAAiB;AAAA;AAE7F,SAAS,eAAe,UAAU;IAClC,gEAAA;IACE,IACE,OAAO,eAAe,YACtB,eAAe,QACf,QAAQ,cACR,CAAC,WAAW,EAAA,IACZ,WAAW,YACX;QACAA,UAAAA,gBAAgB,CAAC,WAAW,KAAK,EAAE;IACvC;AACA;AAIA;;CAEA,GACO,SAAS,eAAe,UAAuC,CAAA,CAAE;IACxE,6DAAA;IACA,aAAA;IACE,OAAO,eAAmB,IAAI;QAC5B,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,WAAA,EAAY,GAAI;QAEpD,MAAM,SAASC,cAAAA,SAAS;QACxB,MAAM,gBAAgB,QAAQ;QAE9B,MAAM,cAAuC;YAC3C,gBAAgB;YAChB,gBAAgB;QACtB;QAEIC,OAAAA,wBAAwB,CACtB,aACA,2CACA,IAAA,uDAAA;QACN,CAAS,eAAe,kBAAkB,CAAC;QAGvC,IAAI,QAAQ,cAAA,KAAmB,YAAY,QAAQ,cAAA,GAAiB,eAAe,gBAAgB;YACjG,IAAI,aAAa,WAAW;gBAC1B,YAAY,KAAA,GAAQC,UAAAA,SAAS,CAAC;YACtC;YAEM,IAAI,gBAAgB,aAAa,OAAO,gBAAgB,YAAY;gBAClE,IAAI;oBACF,MAAM,SAAS,MAAM;oBAErB,YAAY,KAAA,GAAQA,UAAAA,SAAS,CAAC;gBACxC,EAAU,OAAO,KAAK;gBACtB,OAAA;gBACA;YACA;QACA;QAEI,OAAOC,cAAAA,kBAAkB,CAAC,CAAA;YACxB,MAAM,UAAU,CAAC,QAAQ;YACzB,OAAOC,MAAAA,eAAe,CACpB;gBACE,MAAM,CAAC,KAAK,EAAE,KAAK,CAAA;gBACA,IAAA;gBACA,YAAA;oBACA,CAAAC,mBAAAA,gCAAA,CAAA,EAAA;oBACA,CAAAC,mBAAAA,gCAAA,CAAA,EAAA;gBACA;gBACA,kBAAA,CAAA,CAAA,QAAA,gBAAA;YACA,GACA,OAAA;gBACA,IAAA;oBACA,MAAA,aAAA,MAAA;oBACA,eAAA;oBACA,KAAA,GAAA;oBACA,OAAA;gBACA,EAAA,OAAA,GAAA;oBACAP,UAAAA,gBAAA,CAAA,GAAA;oBACA,KAAA,GAAA;oBACA,MAAA;gBACA;YACA;QAEA;IACA;AACA"}},
    {"offset": {"line": 12114, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 12118, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/mcp-server.ts"],"sourcesContent":["import { DEBUG_BUILD } from './debug-build';\nimport {\n  SEMANTIC_ATTRIBUTE_SENTRY_OP,\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n  SEMANTIC_ATTRIBUTE_SENTRY_SOURCE,\n} from './semanticAttributes';\nimport { startSpan, withActiveSpan } from './tracing';\nimport type { Span } from './types-hoist/span';\nimport { logger } from './utils/logger';\nimport { getActiveSpan } from './utils/spanUtils';\n\ninterface MCPTransport {\n  // The first argument is a JSON RPC message\n  onmessage?: (...args: unknown[]) => void;\n  onclose?: (...args: unknown[]) => void;\n  sessionId?: string;\n}\n\ninterface MCPServerInstance {\n  // The first arg is always a name, the last arg should always be a callback function (ie a handler).\n  // TODO: We could also make use of the resource uri argument somehow.\n  resource: (name: string, ...args: unknown[]) => void;\n  // The first arg is always a name, the last arg should always be a callback function (ie a handler).\n  tool: (name: string, ...args: unknown[]) => void;\n  // The first arg is always a name, the last arg should always be a callback function (ie a handler).\n  prompt: (name: string, ...args: unknown[]) => void;\n  connect(transport: MCPTransport): Promise<void>;\n}\n\nconst wrappedMcpServerInstances = new WeakSet();\n\n/**\n * Wraps a MCP Server instance from the `@modelcontextprotocol/sdk` package with Sentry instrumentation.\n *\n * Compatible with versions `^1.9.0` of the `@modelcontextprotocol/sdk` package.\n */\n// We are exposing this API for non-node runtimes that cannot rely on auto-instrumentation.\nexport function wrapMcpServerWithSentry<S extends object>(mcpServerInstance: S): S {\n  if (wrappedMcpServerInstances.has(mcpServerInstance)) {\n    return mcpServerInstance;\n  }\n\n  if (!isMcpServerInstance(mcpServerInstance)) {\n    DEBUG_BUILD && logger.warn('Did not patch MCP server. Interface is incompatible.');\n    return mcpServerInstance;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  mcpServerInstance.connect = new Proxy(mcpServerInstance.connect, {\n    apply(target, thisArg, argArray) {\n      const [transport, ...restArgs] = argArray as [MCPTransport, ...unknown[]];\n\n      if (!transport.onclose) {\n        transport.onclose = () => {\n          if (transport.sessionId) {\n            handleTransportOnClose(transport.sessionId);\n          }\n        };\n      }\n\n      if (!transport.onmessage) {\n        transport.onmessage = jsonRpcMessage => {\n          if (transport.sessionId && isJsonRPCMessageWithRequestId(jsonRpcMessage)) {\n            handleTransportOnMessage(transport.sessionId, jsonRpcMessage.id);\n          }\n        };\n      }\n\n      const patchedTransport = new Proxy(transport, {\n        set(target, key, value) {\n          if (key === 'onmessage') {\n            target[key] = new Proxy(value, {\n              apply(onMessageTarget, onMessageThisArg, onMessageArgArray) {\n                const [jsonRpcMessage] = onMessageArgArray;\n                if (transport.sessionId && isJsonRPCMessageWithRequestId(jsonRpcMessage)) {\n                  handleTransportOnMessage(transport.sessionId, jsonRpcMessage.id);\n                }\n                return Reflect.apply(onMessageTarget, onMessageThisArg, onMessageArgArray);\n              },\n            });\n          } else if (key === 'onclose') {\n            target[key] = new Proxy(value, {\n              apply(onCloseTarget, onCloseThisArg, onCloseArgArray) {\n                if (transport.sessionId) {\n                  handleTransportOnClose(transport.sessionId);\n                }\n                return Reflect.apply(onCloseTarget, onCloseThisArg, onCloseArgArray);\n              },\n            });\n          } else {\n            target[key as keyof MCPTransport] = value;\n          }\n          return true;\n        },\n      });\n\n      return Reflect.apply(target, thisArg, [patchedTransport, ...restArgs]);\n    },\n  });\n\n  mcpServerInstance.resource = new Proxy(mcpServerInstance.resource, {\n    apply(target, thisArg, argArray) {\n      const resourceName: unknown = argArray[0];\n      const resourceHandler: unknown = argArray[argArray.length - 1];\n\n      if (typeof resourceName !== 'string' || typeof resourceHandler !== 'function') {\n        return target.apply(thisArg, argArray);\n      }\n\n      const wrappedResourceHandler = new Proxy(resourceHandler, {\n        apply(resourceHandlerTarget, resourceHandlerThisArg, resourceHandlerArgArray) {\n          const extraHandlerDataWithRequestId = resourceHandlerArgArray.find(isExtraHandlerDataWithRequestId);\n          return associateContextWithRequestSpan(extraHandlerDataWithRequestId, () => {\n            return startSpan(\n              {\n                name: `mcp-server/resource:${resourceName}`,\n                forceTransaction: true,\n                attributes: {\n                  [SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'auto.function.mcp-server',\n                  [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.function.mcp-server',\n                  [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'route',\n                  'mcp_server.resource': resourceName,\n                },\n              },\n              () => resourceHandlerTarget.apply(resourceHandlerThisArg, resourceHandlerArgArray),\n            );\n          });\n        },\n      });\n\n      return Reflect.apply(target, thisArg, [...argArray.slice(0, -1), wrappedResourceHandler]);\n    },\n  });\n\n  mcpServerInstance.tool = new Proxy(mcpServerInstance.tool, {\n    apply(target, thisArg, argArray) {\n      const toolName: unknown = argArray[0];\n      const toolHandler: unknown = argArray[argArray.length - 1];\n\n      if (typeof toolName !== 'string' || typeof toolHandler !== 'function') {\n        return target.apply(thisArg, argArray);\n      }\n\n      const wrappedToolHandler = new Proxy(toolHandler, {\n        apply(toolHandlerTarget, toolHandlerThisArg, toolHandlerArgArray) {\n          const extraHandlerDataWithRequestId = toolHandlerArgArray.find(isExtraHandlerDataWithRequestId);\n          return associateContextWithRequestSpan(extraHandlerDataWithRequestId, () => {\n            return startSpan(\n              {\n                name: `mcp-server/tool:${toolName}`,\n                forceTransaction: true,\n                attributes: {\n                  [SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'auto.function.mcp-server',\n                  [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.function.mcp-server',\n                  [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'route',\n                  'mcp_server.tool': toolName,\n                },\n              },\n              () => toolHandlerTarget.apply(toolHandlerThisArg, toolHandlerArgArray),\n            );\n          });\n        },\n      });\n\n      return Reflect.apply(target, thisArg, [...argArray.slice(0, -1), wrappedToolHandler]);\n    },\n  });\n\n  mcpServerInstance.prompt = new Proxy(mcpServerInstance.prompt, {\n    apply(target, thisArg, argArray) {\n      const promptName: unknown = argArray[0];\n      const promptHandler: unknown = argArray[argArray.length - 1];\n\n      if (typeof promptName !== 'string' || typeof promptHandler !== 'function') {\n        return target.apply(thisArg, argArray);\n      }\n\n      const wrappedPromptHandler = new Proxy(promptHandler, {\n        apply(promptHandlerTarget, promptHandlerThisArg, promptHandlerArgArray) {\n          const extraHandlerDataWithRequestId = promptHandlerArgArray.find(isExtraHandlerDataWithRequestId);\n          return associateContextWithRequestSpan(extraHandlerDataWithRequestId, () => {\n            return startSpan(\n              {\n                name: `mcp-server/prompt:${promptName}`,\n                forceTransaction: true,\n                attributes: {\n                  [SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'auto.function.mcp-server',\n                  [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.function.mcp-server',\n                  [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'route',\n                  'mcp_server.prompt': promptName,\n                },\n              },\n              () => promptHandlerTarget.apply(promptHandlerThisArg, promptHandlerArgArray),\n            );\n          });\n        },\n      });\n\n      return Reflect.apply(target, thisArg, [...argArray.slice(0, -1), wrappedPromptHandler]);\n    },\n  });\n\n  wrappedMcpServerInstances.add(mcpServerInstance);\n\n  return mcpServerInstance as S;\n}\n\nfunction isMcpServerInstance(mcpServerInstance: unknown): mcpServerInstance is MCPServerInstance {\n  return (\n    typeof mcpServerInstance === 'object' &&\n    mcpServerInstance !== null &&\n    'resource' in mcpServerInstance &&\n    typeof mcpServerInstance.resource === 'function' &&\n    'tool' in mcpServerInstance &&\n    typeof mcpServerInstance.tool === 'function' &&\n    'prompt' in mcpServerInstance &&\n    typeof mcpServerInstance.prompt === 'function' &&\n    'connect' in mcpServerInstance &&\n    typeof mcpServerInstance.connect === 'function'\n  );\n}\n\nfunction isJsonRPCMessageWithRequestId(target: unknown): target is { id: RequestId } {\n  return (\n    typeof target === 'object' &&\n    target !== null &&\n    'id' in target &&\n    (typeof target.id === 'number' || typeof target.id === 'string')\n  );\n}\n\ninterface ExtraHandlerDataWithRequestId {\n  sessionId: SessionId;\n  requestId: RequestId;\n}\n\n// Note that not all versions of the MCP library have `requestId` as a field on the extra data.\nfunction isExtraHandlerDataWithRequestId(target: unknown): target is ExtraHandlerDataWithRequestId {\n  return (\n    typeof target === 'object' &&\n    target !== null &&\n    'sessionId' in target &&\n    typeof target.sessionId === 'string' &&\n    'requestId' in target &&\n    (typeof target.requestId === 'number' || typeof target.requestId === 'string')\n  );\n}\n\ntype SessionId = string;\ntype RequestId = string | number;\n\nconst sessionAndRequestToRequestParentSpanMap = new Map<SessionId, Map<RequestId, Span>>();\n\nfunction handleTransportOnClose(sessionId: SessionId): void {\n  sessionAndRequestToRequestParentSpanMap.delete(sessionId);\n}\n\nfunction handleTransportOnMessage(sessionId: SessionId, requestId: RequestId): void {\n  const activeSpan = getActiveSpan();\n  if (activeSpan) {\n    const requestIdToSpanMap = sessionAndRequestToRequestParentSpanMap.get(sessionId) ?? new Map();\n    requestIdToSpanMap.set(requestId, activeSpan);\n    sessionAndRequestToRequestParentSpanMap.set(sessionId, requestIdToSpanMap);\n  }\n}\n\nfunction associateContextWithRequestSpan<T>(\n  extraHandlerData: ExtraHandlerDataWithRequestId | undefined,\n  cb: () => T,\n): T {\n  if (extraHandlerData) {\n    const { sessionId, requestId } = extraHandlerData;\n    const requestIdSpanMap = sessionAndRequestToRequestParentSpanMap.get(sessionId);\n\n    if (!requestIdSpanMap) {\n      return cb();\n    }\n\n    const span = requestIdSpanMap.get(requestId);\n    if (!span) {\n      return cb();\n    }\n\n    // remove the span from the map so it can be garbage collected\n    requestIdSpanMap.delete(requestId);\n    return withActiveSpan(span, () => {\n      return cb();\n    });\n  }\n\n  return cb();\n}\n"],"names":["DEBUG_BUILD","logger","startSpan","SEMANTIC_ATTRIBUTE_SENTRY_OP","SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN","SEMANTIC_ATTRIBUTE_SENTRY_SOURCE","getActiveSpan","withActiveSpan"],"mappings":";;;;;;;;;;AA6BA,MAAM,4BAA4B,IAAI;AAEtC;;;;CAIA,GACA,2FAAA;AACO,SAAS,wBAA0C,iBAAiB;IACzE,IAAI,0BAA0B,GAAG,CAAC,oBAAoB;QACpD,OAAO;IACX;IAEE,IAAI,CAAC,oBAAoB,oBAAoB;QAC3CA,WAAAA,WAAAA,IAAeC,OAAAA,MAAM,CAAC,IAAI,CAAC;QAC3B,OAAO;IACX;IAEA,6DAAA;IACE,kBAAkB,OAAA,GAAU,IAAI,MAAM,kBAAkB,OAAO,EAAE;QAC/D,OAAM,MAAM,EAAE,OAAO,EAAE,QAAQ;YAC7B,MAAM,CAAC,WAAW,GAAG,SAAQ,GAAI;YAEjC,IAAI,CAAC,UAAU,OAAO,EAAE;gBACtB,UAAU,OAAA,GAAU;oBAClB,IAAI,UAAU,SAAS,EAAE;wBACvB,uBAAuB,UAAU,SAAS;oBACtD;gBACA;YACA;YAEM,IAAI,CAAC,UAAU,SAAS,EAAE;gBACxB,UAAU,SAAA,GAAY,CAAA;oBACpB,IAAI,UAAU,SAAA,IAAa,8BAA8B,iBAAiB;wBACxE,yBAAyB,UAAU,SAAS,EAAE,eAAe,EAAE;oBAC3E;gBACA;YACA;YAEM,MAAM,mBAAmB,IAAI,MAAM,WAAW;gBAC5C,KAAI,MAAM,EAAE,GAAG,EAAE,KAAK;oBACpB,IAAI,QAAQ,aAAa;wBACvB,MAAM,CAAC,IAAG,GAAI,IAAI,MAAM,OAAO;4BAC7B,OAAM,eAAe,EAAE,gBAAgB,EAAE,iBAAiB;gCACxD,MAAM,CAAC,eAAc,GAAI;gCACzB,IAAI,UAAU,SAAA,IAAa,8BAA8B,iBAAiB;oCACxE,yBAAyB,UAAU,SAAS,EAAE,eAAe,EAAE;gCACjF;gCACgB,OAAO,QAAQ,KAAK,CAAC,iBAAiB,kBAAkB;4BACxE;wBACA;oBACA,OAAiB,IAAI,QAAQ,WAAW;wBAC5B,MAAM,CAAC,IAAG,GAAI,IAAI,MAAM,OAAO;4BAC7B,OAAM,aAAa,EAAE,cAAc,EAAE,eAAe;gCAClD,IAAI,UAAU,SAAS,EAAE;oCACvB,uBAAuB,UAAU,SAAS;gCAC5D;gCACgB,OAAO,QAAQ,KAAK,CAAC,eAAe,gBAAgB;4BACpE;wBACA;oBACA,OAAiB;wBACL,MAAM,CAAC,IAAI,GAAyB;oBAChD;oBACU,OAAO;gBACjB;YACA;YAEM,OAAO,QAAQ,KAAK,CAAC,QAAQ,SAAS;gBAAC;mBAAqB;aAAS;QAC3E;IACA;IAEE,kBAAkB,QAAA,GAAW,IAAI,MAAM,kBAAkB,QAAQ,EAAE;QACjE,OAAM,MAAM,EAAE,OAAO,EAAE,QAAQ;YAC7B,MAAM,eAAwB,QAAQ,CAAC,EAAE;YACzC,MAAM,kBAA2B,QAAQ,CAAC,SAAS,MAAA,GAAS,EAAE;YAE9D,IAAI,OAAO,iBAAiB,YAAY,OAAO,oBAAoB,YAAY;gBAC7E,OAAO,OAAO,KAAK,CAAC,SAAS;YACrC;YAEM,MAAM,yBAAyB,IAAI,MAAM,iBAAiB;gBACxD,OAAM,qBAAqB,EAAE,sBAAsB,EAAE,uBAAuB;oBAC1E,MAAM,gCAAgC,wBAAwB,IAAI,CAAC;oBACnE,OAAO,gCAAgC,+BAA+B;wBACpE,OAAOC,MAAAA,SAAS,CACd;4BACE,MAAM,CAAC,oBAAoB,EAAE,aAAa,CAAA;4BACA,kBAAA;4BACA,YAAA;gCACA,CAAAC,mBAAAA,4BAAA,CAAA,EAAA;gCACA,CAAAC,mBAAAA,gCAAA,CAAA,EAAA;gCACA,CAAAC,mBAAAA,gCAAA,CAAA,EAAA;gCACA,uBAAA;4BACA;wBACA,GACA,IAAA,sBAAA,KAAA,CAAA,wBAAA;oBAEA;gBACA;YACA;YAEA,OAAA,QAAA,KAAA,CAAA,QAAA,SAAA;mBAAA,SAAA,KAAA,CAAA,GAAA,CAAA;gBAAA;aAAA;QACA;IACA;IAEA,kBAAA,IAAA,GAAA,IAAA,MAAA,kBAAA,IAAA,EAAA;QACA,OAAA,MAAA,EAAA,OAAA,EAAA,QAAA;YACA,MAAA,WAAA,QAAA,CAAA,EAAA;YACA,MAAA,cAAA,QAAA,CAAA,SAAA,MAAA,GAAA,EAAA;YAEA,IAAA,OAAA,aAAA,YAAA,OAAA,gBAAA,YAAA;gBACA,OAAA,OAAA,KAAA,CAAA,SAAA;YACA;YAEA,MAAA,qBAAA,IAAA,MAAA,aAAA;gBACA,OAAA,iBAAA,EAAA,kBAAA,EAAA,mBAAA;oBACA,MAAA,gCAAA,oBAAA,IAAA,CAAA;oBACA,OAAA,gCAAA,+BAAA;wBACA,OAAAH,MAAAA,SAAA,CACA;4BACA,MAAA,CAAA,gBAAA,EAAA,SAAA,CAAA;4BACA,kBAAA;4BACA,YAAA;gCACA,CAAAC,mBAAAA,4BAAA,CAAA,EAAA;gCACA,CAAAC,mBAAAA,gCAAA,CAAA,EAAA;gCACA,CAAAC,mBAAAA,gCAAA,CAAA,EAAA;gCACA,mBAAA;4BACA;wBACA,GACA,IAAA,kBAAA,KAAA,CAAA,oBAAA;oBAEA;gBACA;YACA;YAEA,OAAA,QAAA,KAAA,CAAA,QAAA,SAAA;mBAAA,SAAA,KAAA,CAAA,GAAA,CAAA;gBAAA;aAAA;QACA;IACA;IAEA,kBAAA,MAAA,GAAA,IAAA,MAAA,kBAAA,MAAA,EAAA;QACA,OAAA,MAAA,EAAA,OAAA,EAAA,QAAA;YACA,MAAA,aAAA,QAAA,CAAA,EAAA;YACA,MAAA,gBAAA,QAAA,CAAA,SAAA,MAAA,GAAA,EAAA;YAEA,IAAA,OAAA,eAAA,YAAA,OAAA,kBAAA,YAAA;gBACA,OAAA,OAAA,KAAA,CAAA,SAAA;YACA;YAEA,MAAA,uBAAA,IAAA,MAAA,eAAA;gBACA,OAAA,mBAAA,EAAA,oBAAA,EAAA,qBAAA;oBACA,MAAA,gCAAA,sBAAA,IAAA,CAAA;oBACA,OAAA,gCAAA,+BAAA;wBACA,OAAAH,MAAAA,SAAA,CACA;4BACA,MAAA,CAAA,kBAAA,EAAA,WAAA,CAAA;4BACA,kBAAA;4BACA,YAAA;gCACA,CAAAC,mBAAAA,4BAAA,CAAA,EAAA;gCACA,CAAAC,mBAAAA,gCAAA,CAAA,EAAA;gCACA,CAAAC,mBAAAA,gCAAA,CAAA,EAAA;gCACA,qBAAA;4BACA;wBACA,GACA,IAAA,oBAAA,KAAA,CAAA,sBAAA;oBAEA;gBACA;YACA;YAEA,OAAA,QAAA,KAAA,CAAA,QAAA,SAAA;mBAAA,SAAA,KAAA,CAAA,GAAA,CAAA;gBAAA;aAAA;QACA;IACA;IAEA,0BAAA,GAAA,CAAA;IAEA,OAAA;AACA;AAEA,SAAA,oBAAA,iBAAA;IACA,OACA,OAAA,sBAAA,YACA,sBAAA,QACA,cAAA,qBACA,OAAA,kBAAA,QAAA,KAAA,cACA,UAAA,qBACA,OAAA,kBAAA,IAAA,KAAA,cACA,YAAA,qBACA,OAAA,kBAAA,MAAA,KAAA,cACA,aAAA,qBACA,OAAA,kBAAA,OAAA,KAAA;AAEA;AAEA,SAAA,8BAAA,MAAA;IACA,OACA,OAAA,WAAA,YACA,WAAA,QACA,QAAA,UACA,CAAA,OAAA,OAAA,EAAA,KAAA,YAAA,OAAA,OAAA,EAAA,KAAA,QAAA;AAEA;AAOA,+FAAA;AACA,SAAA,gCAAA,MAAA;IACA,OACA,OAAA,WAAA,YACA,WAAA,QACA,eAAA,UACA,OAAA,OAAA,SAAA,KAAA,YACA,eAAA,UACA,CAAA,OAAA,OAAA,SAAA,KAAA,YAAA,OAAA,OAAA,SAAA,KAAA,QAAA;AAEA;AAKA,MAAA,0CAAA,IAAA;AAEA,SAAA,uBAAA,SAAA;IACA,wCAAA,MAAA,CAAA;AACA;AAEA,SAAA,yBAAA,SAAA,EAAA,SAAA;IACA,MAAA,aAAAC,UAAAA,aAAA;IACA,IAAA,YAAA;QACA,MAAA,qBAAA,wCAAA,GAAA,CAAA,cAAA,IAAA;QACA,mBAAA,GAAA,CAAA,WAAA;QACA,wCAAA,GAAA,CAAA,WAAA;IACA;AACA;AAEA,SAAA,gCACA,gBAAA,EACA,EAAA;IAEA,IAAA,kBAAA;QACA,MAAA,EAAA,SAAA,EAAA,SAAA,EAAA,GAAA;QACA,MAAA,mBAAA,wCAAA,GAAA,CAAA;QAEA,IAAA,CAAA,kBAAA;YACA,OAAA;QACA;QAEA,MAAA,OAAA,iBAAA,GAAA,CAAA;QACA,IAAA,CAAA,MAAA;YACA,OAAA;QACA;QAEA,8DAAA;QACA,iBAAA,MAAA,CAAA;QACA,OAAAC,MAAAA,cAAA,CAAA,MAAA;YACA,OAAA;QACA;IACA;IAEA,OAAA;AACA"}},
    {"offset": {"line": 12328, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 12332, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/feedback.ts"],"sourcesContent":["import { getClient, getCurrentScope } from './currentScopes';\nimport type { EventHint } from './types-hoist/event';\nimport type { FeedbackEvent, SendFeedbackParams } from './types-hoist/feedback';\n\n/**\n * Send user feedback to Sentry.\n */\nexport function captureFeedback(\n  params: SendFeedbackParams,\n  hint: EventHint & { includeReplay?: boolean } = {},\n  scope = getCurrentScope(),\n): string {\n  const { message, name, email, url, source, associatedEventId, tags } = params;\n\n  const feedbackEvent: FeedbackEvent = {\n    contexts: {\n      feedback: {\n        contact_email: email,\n        name,\n        message,\n        url,\n        source,\n        associated_event_id: associatedEventId,\n      },\n    },\n    type: 'feedback',\n    level: 'info',\n    tags,\n  };\n\n  const client = scope?.getClient() || getClient();\n\n  if (client) {\n    client.emit('beforeSendFeedback', feedbackEvent, hint);\n  }\n\n  const eventId = scope.captureEvent(feedbackEvent, hint);\n\n  return eventId;\n}\n"],"names":["getCurrentScope","getClient"],"mappings":";;;;AAIA;;CAEA,GACO,SAAS,gBACd,MAAM,EACN,OAAgD,CAAA,CAAE,EAClD,QAAQA,cAAAA,eAAe,EAAE;IAEzB,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,MAAM,EAAE,iBAAiB,EAAE,IAAA,EAAK,GAAI;IAEvE,MAAM,gBAA+B;QACnC,UAAU;YACR,UAAU;gBACR,eAAe;gBACf;gBACA;gBACA;gBACA;gBACA,qBAAqB;YAC7B;QACA;QACI,MAAM;QACN,OAAO;QACP;IACJ;IAEE,MAAM,SAAS,OAAO,eAAeC,cAAAA,SAAS;IAE9C,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,sBAAsB,eAAe;IACrD;IAEE,MAAM,UAAU,MAAM,YAAY,CAAC,eAAe;IAElD,OAAO;AACT"}},
    {"offset": {"line": 12363, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 12367, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/logs/console-integration.ts"],"sourcesContent":["import { getClient } from '../currentScopes';\nimport { DEBUG_BUILD } from '../debug-build';\nimport { addConsoleInstrumentationHandler } from '../instrument/console';\nimport { defineIntegration } from '../integration';\nimport { SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN } from '../semanticAttributes';\nimport type { ConsoleLevel } from '../types-hoist/instrument';\nimport type { IntegrationFn } from '../types-hoist/integration';\nimport { isPrimitive } from '../utils/is';\nimport { CONSOLE_LEVELS, logger } from '../utils/logger';\nimport { normalize } from '../utils/normalize';\nimport { GLOBAL_OBJ } from '../utils/worldwide';\nimport { _INTERNAL_captureLog } from './exports';\n\ninterface CaptureConsoleOptions {\n  levels: ConsoleLevel[];\n}\n\ntype GlobalObjectWithUtil = typeof GLOBAL_OBJ & {\n  util: {\n    format: (...args: unknown[]) => string;\n  };\n};\n\nconst INTEGRATION_NAME = 'ConsoleLogs';\n\nconst DEFAULT_ATTRIBUTES = {\n  [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.console.logging',\n};\n\nconst _consoleLoggingIntegration = ((options: Partial<CaptureConsoleOptions> = {}) => {\n  const levels = options.levels || CONSOLE_LEVELS;\n\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      const { _experiments, normalizeDepth = 3, normalizeMaxBreadth = 1_000 } = client.getOptions();\n      if (!_experiments?.enableLogs) {\n        DEBUG_BUILD && logger.warn('`_experiments.enableLogs` is not enabled, ConsoleLogs integration disabled');\n        return;\n      }\n\n      addConsoleInstrumentationHandler(({ args, level }) => {\n        if (getClient() !== client || !levels.includes(level)) {\n          return;\n        }\n\n        if (level === 'assert') {\n          if (!args[0]) {\n            const followingArgs = args.slice(1);\n            const assertionMessage =\n              followingArgs.length > 0\n                ? `Assertion failed: ${formatConsoleArgs(followingArgs, normalizeDepth, normalizeMaxBreadth)}`\n                : 'Assertion failed';\n            _INTERNAL_captureLog({ level: 'error', message: assertionMessage, attributes: DEFAULT_ATTRIBUTES });\n          }\n          return;\n        }\n\n        const isLevelLog = level === 'log';\n        _INTERNAL_captureLog({\n          level: isLevelLog ? 'info' : level,\n          message: formatConsoleArgs(args, normalizeDepth, normalizeMaxBreadth),\n          severityNumber: isLevelLog ? 10 : undefined,\n          attributes: DEFAULT_ATTRIBUTES,\n        });\n      });\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Captures calls to the `console` API as logs in Sentry. Requires `_experiments.enableLogs` to be enabled.\n *\n * @experimental This feature is experimental and may be changed or removed in future versions.\n *\n * By default the integration instruments `console.debug`, `console.info`, `console.warn`, `console.error`,\n * `console.log`, `console.trace`, and `console.assert`. You can use the `levels` option to customize which\n * levels are captured.\n *\n * @example\n *\n * ```ts\n * import * as Sentry from '@sentry/browser';\n *\n * Sentry.init({\n *   integrations: [Sentry.consoleLoggingIntegration({ levels: ['error', 'warn'] })],\n * });\n * ```\n */\nexport const consoleLoggingIntegration = defineIntegration(_consoleLoggingIntegration);\n\nfunction formatConsoleArgs(values: unknown[], normalizeDepth: number, normalizeMaxBreadth: number): string {\n  return 'util' in GLOBAL_OBJ && typeof (GLOBAL_OBJ as GlobalObjectWithUtil).util.format === 'function'\n    ? (GLOBAL_OBJ as GlobalObjectWithUtil).util.format(...values)\n    : safeJoinConsoleArgs(values, normalizeDepth, normalizeMaxBreadth);\n}\n\nfunction safeJoinConsoleArgs(values: unknown[], normalizeDepth: number, normalizeMaxBreadth: number): string {\n  return values\n    .map(value =>\n      isPrimitive(value) ? String(value) : JSON.stringify(normalize(value, normalizeDepth, normalizeMaxBreadth)),\n    )\n    .join(' ');\n}\n"],"names":["SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN","CONSOLE_LEVELS","DEBUG_BUILD","logger","addConsoleInstrumentationHandler","getClient","_INTERNAL_captureLog","defineIntegration","GLOBAL_OBJ","isPrimitive","normalize"],"mappings":";;;;;;;;;;;;;AAuBA,MAAM,mBAAmB;AAEzB,MAAM,qBAAqB;IACzB,CAACA,mBAAAA,gCAAgC,CAAA,EAAG;AACtC;AAEA,MAAM,6BAA8B,CAAC,UAA0C,CAAA,CAAE;IAC/E,MAAM,SAAS,QAAQ,MAAA,IAAUC,OAAAA,cAAc;IAE/C,OAAO;QACL,MAAM;QACN,OAAM,MAAM;YACV,MAAM,EAAE,YAAY,EAAE,iBAAiB,CAAC,EAAE,sBAAsB,IAAA,EAAM,GAAI,OAAO,UAAU;YAC3F,IAAI,CAAC,cAAc,YAAY;gBAC7BC,WAAAA,WAAAA,IAAeC,OAAAA,MAAM,CAAC,IAAI,CAAC;gBAC3B;YACR;YAEMC,QAAAA,gCAAgC,CAAC,CAAC,EAAE,IAAI,EAAE,KAAA,EAAO;gBAC/C,IAAIC,cAAAA,SAAS,OAAO,UAAU,CAAC,OAAO,QAAQ,CAAC,QAAQ;oBACrD;gBACV;gBAEQ,IAAI,UAAU,UAAU;oBACtB,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE;wBACZ,MAAM,gBAAgB,KAAK,KAAK,CAAC;wBACjC,MAAM,mBACJ,cAAc,MAAA,GAAS,IACnB,CAAC,kBAAkB,EAAE,kBAAkB,eAAe,gBAAgB,qBAAqB,CAAA,GAC7G;wBACAC,UAAAA,oBAAA,CAAA;4BAAA,OAAA;4BAAA,SAAA;4BAAA,YAAA;wBAAA;oBACA;oBACA;gBACA;gBAEA,MAAA,aAAA,UAAA;gBACAA,UAAAA,oBAAA,CAAA;oBACA,OAAA,aAAA,SAAA;oBACA,SAAA,kBAAA,MAAA,gBAAA;oBACA,gBAAA,aAAA,KAAA;oBACA,YAAA;gBACA;YACA;QACA;IACA;AACA;AAEA;;;;;;;;;;;;;;;;;;CAkBA,GACA,MAAA,4BAAAC,YAAAA,iBAAA,CAAA;AAEA,SAAA,kBAAA,MAAA,EAAA,cAAA,EAAA,mBAAA;IACA,OAAA,UAAAC,UAAAA,UAAA,IAAA,OAAA,AAAAA,UAAAA,UAAA,CAAA,IAAA,CAAA,MAAA,KAAA,aACA,AAAAA,UAAAA,UAAA,CAAA,IAAA,CAAA,MAAA,IAAA,UACA,oBAAA,QAAA,gBAAA;AACA;AAEA,SAAA,oBAAA,MAAA,EAAA,cAAA,EAAA,mBAAA;IACA,OAAA,OACA,GAAA,CAAA,CAAA,QACAC,GAAAA,WAAA,CAAA,SAAA,OAAA,SAAA,KAAA,SAAA,CAAAC,UAAAA,SAAA,CAAA,OAAA,gBAAA,uBAEA,IAAA,CAAA;AACA"}},
    {"offset": {"line": 12447, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 12451, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/utils/vercel-ai-attributes.ts"],"sourcesContent":["/**\n * AI SDK Telemetry Attributes\n * Based on https://ai-sdk.dev/docs/ai-sdk-core/telemetry#collected-data\n */\n\n// =============================================================================\n// COMMON ATTRIBUTES\n// =============================================================================\n\n/**\n * Common attribute for operation name across all functions and spans\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#collected-data\n */\nexport const OPERATION_NAME_ATTRIBUTE = 'operation.name';\n\n/**\n * Common attribute for AI operation ID across all functions and spans\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#collected-data\n */\nexport const AI_OPERATION_ID_ATTRIBUTE = 'ai.operationId';\n\n// =============================================================================\n// SHARED ATTRIBUTES\n// =============================================================================\n\n/**\n * `generateText` function - `ai.generateText` span\n * `streamText` function - `ai.streamText` span\n *\n * The prompt that was used when calling the function\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#generatetext-function\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#streamtext-function\n */\nexport const AI_PROMPT_ATTRIBUTE = 'ai.prompt';\n\n/**\n * `generateObject` function - `ai.generateObject` span\n * `streamObject` function - `ai.streamObject` span\n *\n * The JSON schema version of the schema that was passed into the function\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#generateobject-function\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#streamobject-function\n */\nexport const AI_SCHEMA_ATTRIBUTE = 'ai.schema';\n\n/**\n * `generateObject` function - `ai.generateObject` span\n * `streamObject` function - `ai.streamObject` span\n *\n * The name of the schema that was passed into the function\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#generateobject-function\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#streamobject-function\n */\nexport const AI_SCHEMA_NAME_ATTRIBUTE = 'ai.schema.name';\n\n/**\n * `generateObject` function - `ai.generateObject` span\n * `streamObject` function - `ai.streamObject` span\n *\n * The description of the schema that was passed into the function\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#generateobject-function\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#streamobject-function\n */\nexport const AI_SCHEMA_DESCRIPTION_ATTRIBUTE = 'ai.schema.description';\n\n/**\n * `generateObject` function - `ai.generateObject` span\n * `streamObject` function - `ai.streamObject` span\n *\n * The object that was generated (stringified JSON)\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#generateobject-function\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#streamobject-function\n */\nexport const AI_RESPONSE_OBJECT_ATTRIBUTE = 'ai.response.object';\n\n/**\n * `generateObject` function - `ai.generateObject` span\n * `streamObject` function - `ai.streamObject` span\n *\n * The object generation mode, e.g. `json`\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#generateobject-function\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#streamobject-function\n */\nexport const AI_SETTINGS_MODE_ATTRIBUTE = 'ai.settings.mode';\n\n/**\n * `generateObject` function - `ai.generateObject` span\n * `streamObject` function - `ai.streamObject` span\n *\n * The output type that was used, e.g. `object` or `no-schema`\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#generateobject-function\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#streamobject-function\n */\nexport const AI_SETTINGS_OUTPUT_ATTRIBUTE = 'ai.settings.output';\n\n/**\n * `embed` function - `ai.embed.doEmbed` span\n * `embedMany` function - `ai.embedMany` span\n *\n * The values that were passed into the function (array)\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#embed-function\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#embedmany-function\n */\nexport const AI_VALUES_ATTRIBUTE = 'ai.values';\n\n/**\n * `embed` function - `ai.embed.doEmbed` span\n * `embedMany` function - `ai.embedMany` span\n *\n * An array of JSON-stringified embeddings\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#embed-function\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#embedmany-function\n */\nexport const AI_EMBEDDINGS_ATTRIBUTE = 'ai.embeddings';\n\n// =============================================================================\n// GENERATETEXT FUNCTION - UNIQUE ATTRIBUTES\n// =============================================================================\n\n/**\n * `generateText` function - `ai.generateText` span\n *\n * The text that was generated\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#generatetext-function\n */\nexport const AI_RESPONSE_TEXT_ATTRIBUTE = 'ai.response.text';\n\n/**\n * `generateText` function - `ai.generateText` span\n *\n * The tool calls that were made as part of the generation (stringified JSON)\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#generatetext-function\n */\nexport const AI_RESPONSE_TOOL_CALLS_ATTRIBUTE = 'ai.response.toolCalls';\n\n/**\n * `generateText` function - `ai.generateText` span\n *\n * The reason why the generation finished\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#generatetext-function\n */\nexport const AI_RESPONSE_FINISH_REASON_ATTRIBUTE = 'ai.response.finishReason';\n\n/**\n * `generateText` function - `ai.generateText` span\n *\n * The maximum number of steps that were set\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#generatetext-function\n */\nexport const AI_SETTINGS_MAX_STEPS_ATTRIBUTE = 'ai.settings.maxSteps';\n\n/**\n * `generateText` function - `ai.generateText.doGenerate` span\n *\n * The format of the prompt\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#generatetext-function\n */\nexport const AI_PROMPT_FORMAT_ATTRIBUTE = 'ai.prompt.format';\n\n/**\n * `generateText` function - `ai.generateText.doGenerate` span\n *\n * The messages that were passed into the provider\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#generatetext-function\n */\nexport const AI_PROMPT_MESSAGES_ATTRIBUTE = 'ai.prompt.messages';\n\n/**\n * `generateText` function - `ai.generateText.doGenerate` span\n *\n * Array of stringified tool definitions\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#generatetext-function\n */\nexport const AI_PROMPT_TOOLS_ATTRIBUTE = 'ai.prompt.tools';\n\n/**\n * `generateText` function - `ai.generateText.doGenerate` span\n *\n * The stringified tool choice setting (JSON)\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#generatetext-function\n */\nexport const AI_PROMPT_TOOL_CHOICE_ATTRIBUTE = 'ai.prompt.toolChoice';\n\n// =============================================================================\n// STREAMTEXT FUNCTION - UNIQUE ATTRIBUTES\n// =============================================================================\n\n/**\n * `streamText` function - `ai.streamText.doStream` span\n *\n * The time it took to receive the first chunk in milliseconds\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#streamtext-function\n */\nexport const AI_RESPONSE_MS_TO_FIRST_CHUNK_ATTRIBUTE = 'ai.response.msToFirstChunk';\n\n/**\n * `streamText` function - `ai.streamText.doStream` span\n *\n * The time it took to receive the finish part of the LLM stream in milliseconds\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#streamtext-function\n */\nexport const AI_RESPONSE_MS_TO_FINISH_ATTRIBUTE = 'ai.response.msToFinish';\n\n/**\n * `streamText` function - `ai.streamText.doStream` span\n *\n * The average completion tokens per second\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#streamtext-function\n */\nexport const AI_RESPONSE_AVG_COMPLETION_TOKENS_PER_SECOND_ATTRIBUTE = 'ai.response.avgCompletionTokensPerSecond';\n\n// =============================================================================\n// EMBED FUNCTION - UNIQUE ATTRIBUTES\n// =============================================================================\n\n/**\n * `embed` function - `ai.embed` span\n *\n * The value that was passed into the `embed` function\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#embed-function\n */\nexport const AI_VALUE_ATTRIBUTE = 'ai.value';\n\n/**\n * `embed` function - `ai.embed` span\n *\n * A JSON-stringified embedding\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#embed-function\n */\nexport const AI_EMBEDDING_ATTRIBUTE = 'ai.embedding';\n\n// =============================================================================\n// BASIC LLM SPAN INFORMATION\n// =============================================================================\n\n/**\n * Basic LLM span information\n * Multiple spans\n *\n * The functionId that was set through `telemetry.functionId`\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#basic-llm-span-information\n */\nexport const RESOURCE_NAME_ATTRIBUTE = 'resource.name';\n\n/**\n * Basic LLM span information\n * Multiple spans\n *\n * The id of the model\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#basic-llm-span-information\n */\nexport const AI_MODEL_ID_ATTRIBUTE = 'ai.model.id';\n\n/**\n * Basic LLM span information\n * Multiple spans\n *\n * The provider of the model\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#basic-llm-span-information\n */\nexport const AI_MODEL_PROVIDER_ATTRIBUTE = 'ai.model.provider';\n\n/**\n * Basic LLM span information\n * Multiple spans\n *\n * The request headers that were passed in through `headers`\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#basic-llm-span-information\n */\nexport const AI_REQUEST_HEADERS_ATTRIBUTE = 'ai.request.headers';\n\n/**\n * Basic LLM span information\n * Multiple spans\n *\n * The maximum number of retries that were set\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#basic-llm-span-information\n */\nexport const AI_SETTINGS_MAX_RETRIES_ATTRIBUTE = 'ai.settings.maxRetries';\n\n/**\n * Basic LLM span information\n * Multiple spans\n *\n * The functionId that was set through `telemetry.functionId`\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#basic-llm-span-information\n */\nexport const AI_TELEMETRY_FUNCTION_ID_ATTRIBUTE = 'ai.telemetry.functionId';\n\n/**\n * Basic LLM span information\n * Multiple spans\n *\n * The metadata that was passed in through `telemetry.metadata`\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#basic-llm-span-information\n */\nexport const AI_TELEMETRY_METADATA_ATTRIBUTE = 'ai.telemetry.metadata';\n\n/**\n * Basic LLM span information\n * Multiple spans\n *\n * The number of completion tokens that were used\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#basic-llm-span-information\n */\nexport const AI_USAGE_COMPLETION_TOKENS_ATTRIBUTE = 'ai.usage.completionTokens';\n\n/**\n * Basic LLM span information\n * Multiple spans\n *\n * The number of prompt tokens that were used\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#basic-llm-span-information\n */\nexport const AI_USAGE_PROMPT_TOKENS_ATTRIBUTE = 'ai.usage.promptTokens';\n\n// =============================================================================\n// CALL LLM SPAN INFORMATION\n// =============================================================================\n\n/**\n * Call LLM span information\n * Individual LLM call spans\n *\n * The model that was used to generate the response\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#call-llm-span-information\n */\nexport const AI_RESPONSE_MODEL_ATTRIBUTE = 'ai.response.model';\n\n/**\n * Call LLM span information\n * Individual LLM call spans\n *\n * The id of the response\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#call-llm-span-information\n */\nexport const AI_RESPONSE_ID_ATTRIBUTE = 'ai.response.id';\n\n/**\n * Call LLM span information\n * Individual LLM call spans\n *\n * The timestamp of the response\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#call-llm-span-information\n */\nexport const AI_RESPONSE_TIMESTAMP_ATTRIBUTE = 'ai.response.timestamp';\n\n// =============================================================================\n// SEMANTIC CONVENTIONS FOR GENAI OPERATIONS\n// =============================================================================\n\n/**\n * Semantic Conventions for GenAI operations\n * Individual LLM call spans\n *\n * The provider that was used\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#call-llm-span-information\n */\nexport const GEN_AI_SYSTEM_ATTRIBUTE = 'gen_ai.system';\n\n/**\n * Semantic Conventions for GenAI operations\n * Individual LLM call spans\n *\n * The model that was requested\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#call-llm-span-information\n */\nexport const GEN_AI_REQUEST_MODEL_ATTRIBUTE = 'gen_ai.request.model';\n\n/**\n * Semantic Conventions for GenAI operations\n * Individual LLM call spans\n *\n * The temperature that was set\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#call-llm-span-information\n */\nexport const GEN_AI_REQUEST_TEMPERATURE_ATTRIBUTE = 'gen_ai.request.temperature';\n\n/**\n * Semantic Conventions for GenAI operations\n * Individual LLM call spans\n *\n * The maximum number of tokens that were set\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#call-llm-span-information\n */\nexport const GEN_AI_REQUEST_MAX_TOKENS_ATTRIBUTE = 'gen_ai.request.max_tokens';\n\n/**\n * Semantic Conventions for GenAI operations\n * Individual LLM call spans\n *\n * The frequency penalty that was set\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#call-llm-span-information\n */\nexport const GEN_AI_REQUEST_FREQUENCY_PENALTY_ATTRIBUTE = 'gen_ai.request.frequency_penalty';\n\n/**\n * Semantic Conventions for GenAI operations\n * Individual LLM call spans\n *\n * The presence penalty that was set\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#call-llm-span-information\n */\nexport const GEN_AI_REQUEST_PRESENCE_PENALTY_ATTRIBUTE = 'gen_ai.request.presence_penalty';\n\n/**\n * Semantic Conventions for GenAI operations\n * Individual LLM call spans\n *\n * The topK parameter value that was set\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#call-llm-span-information\n */\nexport const GEN_AI_REQUEST_TOP_K_ATTRIBUTE = 'gen_ai.request.top_k';\n\n/**\n * Semantic Conventions for GenAI operations\n * Individual LLM call spans\n *\n * The topP parameter value that was set\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#call-llm-span-information\n */\nexport const GEN_AI_REQUEST_TOP_P_ATTRIBUTE = 'gen_ai.request.top_p';\n\n/**\n * Semantic Conventions for GenAI operations\n * Individual LLM call spans\n *\n * The stop sequences\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#call-llm-span-information\n */\nexport const GEN_AI_REQUEST_STOP_SEQUENCES_ATTRIBUTE = 'gen_ai.request.stop_sequences';\n\n/**\n * Semantic Conventions for GenAI operations\n * Individual LLM call spans\n *\n * The finish reasons that were returned by the provider\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#call-llm-span-information\n */\nexport const GEN_AI_RESPONSE_FINISH_REASONS_ATTRIBUTE = 'gen_ai.response.finish_reasons';\n\n/**\n * Semantic Conventions for GenAI operations\n * Individual LLM call spans\n *\n * The model that was used to generate the response\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#call-llm-span-information\n */\nexport const GEN_AI_RESPONSE_MODEL_ATTRIBUTE = 'gen_ai.response.model';\n\n/**\n * Semantic Conventions for GenAI operations\n * Individual LLM call spans\n *\n * The id of the response\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#call-llm-span-information\n */\nexport const GEN_AI_RESPONSE_ID_ATTRIBUTE = 'gen_ai.response.id';\n\n/**\n * Semantic Conventions for GenAI operations\n * Individual LLM call spans\n *\n * The number of prompt tokens that were used\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#call-llm-span-information\n */\nexport const GEN_AI_USAGE_INPUT_TOKENS_ATTRIBUTE = 'gen_ai.usage.input_tokens';\n\n/**\n * Semantic Conventions for GenAI operations\n * Individual LLM call spans\n *\n * The number of completion tokens that were used\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#call-llm-span-information\n */\nexport const GEN_AI_USAGE_OUTPUT_TOKENS_ATTRIBUTE = 'gen_ai.usage.output_tokens';\n\n// =============================================================================\n// BASIC EMBEDDING SPAN INFORMATION\n// =============================================================================\n\n/**\n * Basic embedding span information\n * Embedding spans\n *\n * The number of tokens that were used\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#basic-embedding-span-information\n */\nexport const AI_USAGE_TOKENS_ATTRIBUTE = 'ai.usage.tokens';\n\n// =============================================================================\n// TOOL CALL SPANS\n// =============================================================================\n\n/**\n * Tool call spans\n * `ai.toolCall` span\n *\n * The name of the tool\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#tool-call-spans\n */\nexport const AI_TOOL_CALL_NAME_ATTRIBUTE = 'ai.toolCall.name';\n\n/**\n * Tool call spans\n * `ai.toolCall` span\n *\n * The id of the tool call\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#tool-call-spans\n */\nexport const AI_TOOL_CALL_ID_ATTRIBUTE = 'ai.toolCall.id';\n\n/**\n * Tool call spans\n * `ai.toolCall` span\n *\n * The parameters of the tool call\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#tool-call-spans\n */\nexport const AI_TOOL_CALL_ARGS_ATTRIBUTE = 'ai.toolCall.args';\n\n/**\n * Tool call spans\n * `ai.toolCall` span\n *\n * The result of the tool call\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#tool-call-spans\n */\nexport const AI_TOOL_CALL_RESULT_ATTRIBUTE = 'ai.toolCall.result';\n\n// =============================================================================\n// SPAN ATTRIBUTE OBJECTS\n// =============================================================================\n\n/**\n * Attributes collected for `ai.generateText` span\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#generatetext-function\n */\nexport const AI_GENERATE_TEXT_SPAN_ATTRIBUTES = {\n  OPERATION_NAME: OPERATION_NAME_ATTRIBUTE,\n  AI_OPERATION_ID: AI_OPERATION_ID_ATTRIBUTE,\n  AI_PROMPT: AI_PROMPT_ATTRIBUTE,\n  AI_RESPONSE_TEXT: AI_RESPONSE_TEXT_ATTRIBUTE,\n  AI_RESPONSE_TOOL_CALLS: AI_RESPONSE_TOOL_CALLS_ATTRIBUTE,\n  AI_RESPONSE_FINISH_REASON: AI_RESPONSE_FINISH_REASON_ATTRIBUTE,\n  AI_SETTINGS_MAX_STEPS: AI_SETTINGS_MAX_STEPS_ATTRIBUTE,\n  // Basic LLM span information\n  RESOURCE_NAME: RESOURCE_NAME_ATTRIBUTE,\n  AI_MODEL_ID: AI_MODEL_ID_ATTRIBUTE,\n  AI_MODEL_PROVIDER: AI_MODEL_PROVIDER_ATTRIBUTE,\n  AI_REQUEST_HEADERS: AI_REQUEST_HEADERS_ATTRIBUTE,\n  AI_SETTINGS_MAX_RETRIES: AI_SETTINGS_MAX_RETRIES_ATTRIBUTE,\n  AI_TELEMETRY_FUNCTION_ID: AI_TELEMETRY_FUNCTION_ID_ATTRIBUTE,\n  AI_TELEMETRY_METADATA: AI_TELEMETRY_METADATA_ATTRIBUTE,\n  AI_USAGE_COMPLETION_TOKENS: AI_USAGE_COMPLETION_TOKENS_ATTRIBUTE,\n  AI_USAGE_PROMPT_TOKENS: AI_USAGE_PROMPT_TOKENS_ATTRIBUTE,\n} as const;\n\n/**\n * Attributes collected for `ai.generateText.doGenerate` span\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#generatetext-function\n */\nexport const AI_GENERATE_TEXT_DO_GENERATE_SPAN_ATTRIBUTES = {\n  OPERATION_NAME: OPERATION_NAME_ATTRIBUTE,\n  AI_OPERATION_ID: AI_OPERATION_ID_ATTRIBUTE,\n  AI_PROMPT_FORMAT: AI_PROMPT_FORMAT_ATTRIBUTE,\n  AI_PROMPT_MESSAGES: AI_PROMPT_MESSAGES_ATTRIBUTE,\n  AI_PROMPT_TOOLS: AI_PROMPT_TOOLS_ATTRIBUTE,\n  AI_PROMPT_TOOL_CHOICE: AI_PROMPT_TOOL_CHOICE_ATTRIBUTE,\n  // Basic LLM span information\n  RESOURCE_NAME: RESOURCE_NAME_ATTRIBUTE,\n  AI_MODEL_ID: AI_MODEL_ID_ATTRIBUTE,\n  AI_MODEL_PROVIDER: AI_MODEL_PROVIDER_ATTRIBUTE,\n  AI_REQUEST_HEADERS: AI_REQUEST_HEADERS_ATTRIBUTE,\n  AI_SETTINGS_MAX_RETRIES: AI_SETTINGS_MAX_RETRIES_ATTRIBUTE,\n  AI_TELEMETRY_FUNCTION_ID: AI_TELEMETRY_FUNCTION_ID_ATTRIBUTE,\n  AI_TELEMETRY_METADATA: AI_TELEMETRY_METADATA_ATTRIBUTE,\n  AI_USAGE_COMPLETION_TOKENS: AI_USAGE_COMPLETION_TOKENS_ATTRIBUTE,\n  AI_USAGE_PROMPT_TOKENS: AI_USAGE_PROMPT_TOKENS_ATTRIBUTE,\n  // Call LLM span information\n  AI_RESPONSE_MODEL: AI_RESPONSE_MODEL_ATTRIBUTE,\n  AI_RESPONSE_ID: AI_RESPONSE_ID_ATTRIBUTE,\n  AI_RESPONSE_TIMESTAMP: AI_RESPONSE_TIMESTAMP_ATTRIBUTE,\n  // Semantic Conventions for GenAI operations\n  GEN_AI_SYSTEM: GEN_AI_SYSTEM_ATTRIBUTE,\n  GEN_AI_REQUEST_MODEL: GEN_AI_REQUEST_MODEL_ATTRIBUTE,\n  GEN_AI_REQUEST_TEMPERATURE: GEN_AI_REQUEST_TEMPERATURE_ATTRIBUTE,\n  GEN_AI_REQUEST_MAX_TOKENS: GEN_AI_REQUEST_MAX_TOKENS_ATTRIBUTE,\n  GEN_AI_REQUEST_FREQUENCY_PENALTY: GEN_AI_REQUEST_FREQUENCY_PENALTY_ATTRIBUTE,\n  GEN_AI_REQUEST_PRESENCE_PENALTY: GEN_AI_REQUEST_PRESENCE_PENALTY_ATTRIBUTE,\n  GEN_AI_REQUEST_TOP_K: GEN_AI_REQUEST_TOP_K_ATTRIBUTE,\n  GEN_AI_REQUEST_TOP_P: GEN_AI_REQUEST_TOP_P_ATTRIBUTE,\n  GEN_AI_REQUEST_STOP_SEQUENCES: GEN_AI_REQUEST_STOP_SEQUENCES_ATTRIBUTE,\n  GEN_AI_RESPONSE_FINISH_REASONS: GEN_AI_RESPONSE_FINISH_REASONS_ATTRIBUTE,\n  GEN_AI_RESPONSE_MODEL: GEN_AI_RESPONSE_MODEL_ATTRIBUTE,\n  GEN_AI_RESPONSE_ID: GEN_AI_RESPONSE_ID_ATTRIBUTE,\n  GEN_AI_USAGE_INPUT_TOKENS: GEN_AI_USAGE_INPUT_TOKENS_ATTRIBUTE,\n  GEN_AI_USAGE_OUTPUT_TOKENS: GEN_AI_USAGE_OUTPUT_TOKENS_ATTRIBUTE,\n} as const;\n\n/**\n * Attributes collected for `ai.streamText` span\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#streamtext-function\n */\nexport const AI_STREAM_TEXT_SPAN_ATTRIBUTES = {\n  OPERATION_NAME: OPERATION_NAME_ATTRIBUTE,\n  AI_OPERATION_ID: AI_OPERATION_ID_ATTRIBUTE,\n  AI_PROMPT: AI_PROMPT_ATTRIBUTE,\n  // Basic LLM span information\n  RESOURCE_NAME: RESOURCE_NAME_ATTRIBUTE,\n  AI_MODEL_ID: AI_MODEL_ID_ATTRIBUTE,\n  AI_MODEL_PROVIDER: AI_MODEL_PROVIDER_ATTRIBUTE,\n  AI_REQUEST_HEADERS: AI_REQUEST_HEADERS_ATTRIBUTE,\n  AI_SETTINGS_MAX_RETRIES: AI_SETTINGS_MAX_RETRIES_ATTRIBUTE,\n  AI_TELEMETRY_FUNCTION_ID: AI_TELEMETRY_FUNCTION_ID_ATTRIBUTE,\n  AI_TELEMETRY_METADATA: AI_TELEMETRY_METADATA_ATTRIBUTE,\n  AI_USAGE_COMPLETION_TOKENS: AI_USAGE_COMPLETION_TOKENS_ATTRIBUTE,\n  AI_USAGE_PROMPT_TOKENS: AI_USAGE_PROMPT_TOKENS_ATTRIBUTE,\n} as const;\n\n/**\n * Attributes collected for `ai.streamText.doStream` span\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#streamtext-function\n */\nexport const AI_STREAM_TEXT_DO_STREAM_SPAN_ATTRIBUTES = {\n  OPERATION_NAME: OPERATION_NAME_ATTRIBUTE,\n  AI_OPERATION_ID: AI_OPERATION_ID_ATTRIBUTE,\n  AI_RESPONSE_MS_TO_FIRST_CHUNK: AI_RESPONSE_MS_TO_FIRST_CHUNK_ATTRIBUTE,\n  AI_RESPONSE_MS_TO_FINISH: AI_RESPONSE_MS_TO_FINISH_ATTRIBUTE,\n  AI_RESPONSE_AVG_COMPLETION_TOKENS_PER_SECOND: AI_RESPONSE_AVG_COMPLETION_TOKENS_PER_SECOND_ATTRIBUTE,\n  // Basic LLM span information\n  RESOURCE_NAME: RESOURCE_NAME_ATTRIBUTE,\n  AI_MODEL_ID: AI_MODEL_ID_ATTRIBUTE,\n  AI_MODEL_PROVIDER: AI_MODEL_PROVIDER_ATTRIBUTE,\n  AI_REQUEST_HEADERS: AI_REQUEST_HEADERS_ATTRIBUTE,\n  AI_SETTINGS_MAX_RETRIES: AI_SETTINGS_MAX_RETRIES_ATTRIBUTE,\n  AI_TELEMETRY_FUNCTION_ID: AI_TELEMETRY_FUNCTION_ID_ATTRIBUTE,\n  AI_TELEMETRY_METADATA: AI_TELEMETRY_METADATA_ATTRIBUTE,\n  AI_USAGE_COMPLETION_TOKENS: AI_USAGE_COMPLETION_TOKENS_ATTRIBUTE,\n  AI_USAGE_PROMPT_TOKENS: AI_USAGE_PROMPT_TOKENS_ATTRIBUTE,\n  // Call LLM span information\n  AI_RESPONSE_MODEL: AI_RESPONSE_MODEL_ATTRIBUTE,\n  AI_RESPONSE_ID: AI_RESPONSE_ID_ATTRIBUTE,\n  AI_RESPONSE_TIMESTAMP: AI_RESPONSE_TIMESTAMP_ATTRIBUTE,\n  // Semantic Conventions for GenAI operations\n  GEN_AI_SYSTEM: GEN_AI_SYSTEM_ATTRIBUTE,\n  GEN_AI_REQUEST_MODEL: GEN_AI_REQUEST_MODEL_ATTRIBUTE,\n  GEN_AI_REQUEST_TEMPERATURE: GEN_AI_REQUEST_TEMPERATURE_ATTRIBUTE,\n  GEN_AI_REQUEST_MAX_TOKENS: GEN_AI_REQUEST_MAX_TOKENS_ATTRIBUTE,\n  GEN_AI_REQUEST_FREQUENCY_PENALTY: GEN_AI_REQUEST_FREQUENCY_PENALTY_ATTRIBUTE,\n  GEN_AI_REQUEST_PRESENCE_PENALTY: GEN_AI_REQUEST_PRESENCE_PENALTY_ATTRIBUTE,\n  GEN_AI_REQUEST_TOP_K: GEN_AI_REQUEST_TOP_K_ATTRIBUTE,\n  GEN_AI_REQUEST_TOP_P: GEN_AI_REQUEST_TOP_P_ATTRIBUTE,\n  GEN_AI_REQUEST_STOP_SEQUENCES: GEN_AI_REQUEST_STOP_SEQUENCES_ATTRIBUTE,\n  GEN_AI_RESPONSE_FINISH_REASONS: GEN_AI_RESPONSE_FINISH_REASONS_ATTRIBUTE,\n  GEN_AI_RESPONSE_MODEL: GEN_AI_RESPONSE_MODEL_ATTRIBUTE,\n  GEN_AI_RESPONSE_ID: GEN_AI_RESPONSE_ID_ATTRIBUTE,\n  GEN_AI_USAGE_INPUT_TOKENS: GEN_AI_USAGE_INPUT_TOKENS_ATTRIBUTE,\n  GEN_AI_USAGE_OUTPUT_TOKENS: GEN_AI_USAGE_OUTPUT_TOKENS_ATTRIBUTE,\n} as const;\n\n/**\n * Attributes collected for `ai.generateObject` span\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#generateobject-function\n */\nexport const AI_GENERATE_OBJECT_SPAN_ATTRIBUTES = {\n  OPERATION_NAME: OPERATION_NAME_ATTRIBUTE,\n  AI_OPERATION_ID: AI_OPERATION_ID_ATTRIBUTE,\n  AI_SCHEMA: AI_SCHEMA_ATTRIBUTE,\n  AI_SCHEMA_NAME: AI_SCHEMA_NAME_ATTRIBUTE,\n  AI_SCHEMA_DESCRIPTION: AI_SCHEMA_DESCRIPTION_ATTRIBUTE,\n  AI_RESPONSE_OBJECT: AI_RESPONSE_OBJECT_ATTRIBUTE,\n  AI_SETTINGS_MODE: AI_SETTINGS_MODE_ATTRIBUTE,\n  AI_SETTINGS_OUTPUT: AI_SETTINGS_OUTPUT_ATTRIBUTE,\n  // Basic LLM span information\n  RESOURCE_NAME: RESOURCE_NAME_ATTRIBUTE,\n  AI_MODEL_ID: AI_MODEL_ID_ATTRIBUTE,\n  AI_MODEL_PROVIDER: AI_MODEL_PROVIDER_ATTRIBUTE,\n  AI_REQUEST_HEADERS: AI_REQUEST_HEADERS_ATTRIBUTE,\n  AI_SETTINGS_MAX_RETRIES: AI_SETTINGS_MAX_RETRIES_ATTRIBUTE,\n  AI_TELEMETRY_FUNCTION_ID: AI_TELEMETRY_FUNCTION_ID_ATTRIBUTE,\n  AI_TELEMETRY_METADATA: AI_TELEMETRY_METADATA_ATTRIBUTE,\n  AI_USAGE_COMPLETION_TOKENS: AI_USAGE_COMPLETION_TOKENS_ATTRIBUTE,\n  AI_USAGE_PROMPT_TOKENS: AI_USAGE_PROMPT_TOKENS_ATTRIBUTE,\n} as const;\n\n/**\n * Attributes collected for `ai.streamObject` span\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#streamobject-function\n */\nexport const AI_STREAM_OBJECT_SPAN_ATTRIBUTES = {\n  OPERATION_NAME: OPERATION_NAME_ATTRIBUTE,\n  AI_OPERATION_ID: AI_OPERATION_ID_ATTRIBUTE,\n  AI_SCHEMA: AI_SCHEMA_ATTRIBUTE,\n  AI_SCHEMA_NAME: AI_SCHEMA_NAME_ATTRIBUTE,\n  AI_SCHEMA_DESCRIPTION: AI_SCHEMA_DESCRIPTION_ATTRIBUTE,\n  AI_RESPONSE_OBJECT: AI_RESPONSE_OBJECT_ATTRIBUTE,\n  AI_SETTINGS_MODE: AI_SETTINGS_MODE_ATTRIBUTE,\n  AI_SETTINGS_OUTPUT: AI_SETTINGS_OUTPUT_ATTRIBUTE,\n  // Basic LLM span information\n  RESOURCE_NAME: RESOURCE_NAME_ATTRIBUTE,\n  AI_MODEL_ID: AI_MODEL_ID_ATTRIBUTE,\n  AI_MODEL_PROVIDER: AI_MODEL_PROVIDER_ATTRIBUTE,\n  AI_REQUEST_HEADERS: AI_REQUEST_HEADERS_ATTRIBUTE,\n  AI_SETTINGS_MAX_RETRIES: AI_SETTINGS_MAX_RETRIES_ATTRIBUTE,\n  AI_TELEMETRY_FUNCTION_ID: AI_TELEMETRY_FUNCTION_ID_ATTRIBUTE,\n  AI_TELEMETRY_METADATA: AI_TELEMETRY_METADATA_ATTRIBUTE,\n  AI_USAGE_COMPLETION_TOKENS: AI_USAGE_COMPLETION_TOKENS_ATTRIBUTE,\n  AI_USAGE_PROMPT_TOKENS: AI_USAGE_PROMPT_TOKENS_ATTRIBUTE,\n} as const;\n\n/**\n * Attributes collected for `ai.embed` span\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#embed-function\n */\nexport const AI_EMBED_SPAN_ATTRIBUTES = {\n  OPERATION_NAME: OPERATION_NAME_ATTRIBUTE,\n  AI_OPERATION_ID: AI_OPERATION_ID_ATTRIBUTE,\n  AI_VALUE: AI_VALUE_ATTRIBUTE,\n  AI_EMBEDDING: AI_EMBEDDING_ATTRIBUTE,\n  // Basic LLM span information\n  RESOURCE_NAME: RESOURCE_NAME_ATTRIBUTE,\n  AI_MODEL_ID: AI_MODEL_ID_ATTRIBUTE,\n  AI_MODEL_PROVIDER: AI_MODEL_PROVIDER_ATTRIBUTE,\n  AI_REQUEST_HEADERS: AI_REQUEST_HEADERS_ATTRIBUTE,\n  AI_SETTINGS_MAX_RETRIES: AI_SETTINGS_MAX_RETRIES_ATTRIBUTE,\n  AI_TELEMETRY_FUNCTION_ID: AI_TELEMETRY_FUNCTION_ID_ATTRIBUTE,\n  AI_TELEMETRY_METADATA: AI_TELEMETRY_METADATA_ATTRIBUTE,\n  // Basic embedding span information\n  AI_USAGE_TOKENS: AI_USAGE_TOKENS_ATTRIBUTE,\n} as const;\n\n/**\n * Attributes collected for `ai.embed.doEmbed` span\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#embed-function\n */\nexport const AI_EMBED_DO_EMBED_SPAN_ATTRIBUTES = {\n  OPERATION_NAME: OPERATION_NAME_ATTRIBUTE,\n  AI_OPERATION_ID: AI_OPERATION_ID_ATTRIBUTE,\n  AI_VALUES: AI_VALUES_ATTRIBUTE,\n  AI_EMBEDDINGS: AI_EMBEDDINGS_ATTRIBUTE,\n  // Basic LLM span information\n  RESOURCE_NAME: RESOURCE_NAME_ATTRIBUTE,\n  AI_MODEL_ID: AI_MODEL_ID_ATTRIBUTE,\n  AI_MODEL_PROVIDER: AI_MODEL_PROVIDER_ATTRIBUTE,\n  AI_REQUEST_HEADERS: AI_REQUEST_HEADERS_ATTRIBUTE,\n  AI_SETTINGS_MAX_RETRIES: AI_SETTINGS_MAX_RETRIES_ATTRIBUTE,\n  AI_TELEMETRY_FUNCTION_ID: AI_TELEMETRY_FUNCTION_ID_ATTRIBUTE,\n  AI_TELEMETRY_METADATA: AI_TELEMETRY_METADATA_ATTRIBUTE,\n  // Basic embedding span information\n  AI_USAGE_TOKENS: AI_USAGE_TOKENS_ATTRIBUTE,\n} as const;\n\n/**\n * Attributes collected for `ai.embedMany` span\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#embedmany-function\n */\nexport const AI_EMBED_MANY_SPAN_ATTRIBUTES = {\n  OPERATION_NAME: OPERATION_NAME_ATTRIBUTE,\n  AI_OPERATION_ID: AI_OPERATION_ID_ATTRIBUTE,\n  AI_VALUES: AI_VALUES_ATTRIBUTE,\n  AI_EMBEDDINGS: AI_EMBEDDINGS_ATTRIBUTE,\n  // Basic LLM span information\n  RESOURCE_NAME: RESOURCE_NAME_ATTRIBUTE,\n  AI_MODEL_ID: AI_MODEL_ID_ATTRIBUTE,\n  AI_MODEL_PROVIDER: AI_MODEL_PROVIDER_ATTRIBUTE,\n  AI_REQUEST_HEADERS: AI_REQUEST_HEADERS_ATTRIBUTE,\n  AI_SETTINGS_MAX_RETRIES: AI_SETTINGS_MAX_RETRIES_ATTRIBUTE,\n  AI_TELEMETRY_FUNCTION_ID: AI_TELEMETRY_FUNCTION_ID_ATTRIBUTE,\n  AI_TELEMETRY_METADATA: AI_TELEMETRY_METADATA_ATTRIBUTE,\n  // Basic embedding span information\n  AI_USAGE_TOKENS: AI_USAGE_TOKENS_ATTRIBUTE,\n} as const;\n\n/**\n * Attributes collected for `ai.toolCall` span\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#tool-call-spans\n */\nexport const AI_TOOL_CALL_SPAN_ATTRIBUTES = {\n  OPERATION_NAME: OPERATION_NAME_ATTRIBUTE,\n  AI_OPERATION_ID: AI_OPERATION_ID_ATTRIBUTE,\n  AI_TOOL_CALL_NAME: AI_TOOL_CALL_NAME_ATTRIBUTE,\n  AI_TOOL_CALL_ID: AI_TOOL_CALL_ID_ATTRIBUTE,\n  AI_TOOL_CALL_ARGS: AI_TOOL_CALL_ARGS_ATTRIBUTE,\n  AI_TOOL_CALL_RESULT: AI_TOOL_CALL_RESULT_ATTRIBUTE,\n  // Basic LLM span information\n  RESOURCE_NAME: RESOURCE_NAME_ATTRIBUTE,\n  AI_MODEL_ID: AI_MODEL_ID_ATTRIBUTE,\n  AI_MODEL_PROVIDER: AI_MODEL_PROVIDER_ATTRIBUTE,\n  AI_REQUEST_HEADERS: AI_REQUEST_HEADERS_ATTRIBUTE,\n  AI_SETTINGS_MAX_RETRIES: AI_SETTINGS_MAX_RETRIES_ATTRIBUTE,\n  AI_TELEMETRY_FUNCTION_ID: AI_TELEMETRY_FUNCTION_ID_ATTRIBUTE,\n  AI_TELEMETRY_METADATA: AI_TELEMETRY_METADATA_ATTRIBUTE,\n} as const;\n"],"names":[],"mappings":";;;AAAA;;;CAGA,GAkBA,gFAAA;AACA,oBAAA;AACA,gFAAA;AAEA;;;;;;;CAOA,GACO,MAAM,sBAAsB;AAkFnC,gFAAA;AACA,4CAAA;AACA,gFAAA;AAEA;;;;;CAKA,GACO,MAAM,6BAA6B;AAE1C;;;;;CAKA,GACO,MAAM,mCAAmC;AA0BhD;;;;;CAKA,GACO,MAAM,+BAA+B;AAE5C;;;;;CAKA,GACO,MAAM,4BAA4B;AAuEzC;;;;;;CAMA,GACO,MAAM,wBAAwB;AAErC;;;;;;CAMA,GACO,MAAM,8BAA8B;AAoB3C;;;;;;CAMA,GACO,MAAM,qCAAqC;AAWlD;;;;;;CAMA,GACO,MAAM,uCAAuC;AAEpD;;;;;;CAMA,GACO,MAAM,mCAAmC;AA+HhD;;;;;;CAMA,GACO,MAAM,kCAAkC;AAW/C;;;;;;CAMA,GACO,MAAM,sCAAsC;AAEnD;;;;;;CAMA,GACO,MAAM,uCAAuC;AAepD,gFAAA;AACA,kBAAA;AACA,gFAAA;AAEA;;;;;;CAMA,GACO,MAAM,8BAA8B;AAE3C;;;;;;CAMA,GACO,MAAM,4BAA4B;AAEzC;;;;;;CAMA,GACO,MAAM,8BAA8B;AAE3C;;;;;;CAMA,GACO,MAAM,gCAAgC"}},
    {"offset": {"line": 12599, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 12603, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/utils/vercel-ai.ts"],"sourcesContent":["import type { Client } from '../client';\nimport { SEMANTIC_ATTRIBUTE_SENTRY_OP, SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN } from '../semanticAttributes';\nimport type { Event } from '../types-hoist/event';\nimport type { Span, SpanAttributes, SpanJSON, SpanOrigin } from '../types-hoist/span';\nimport { spanToJSON } from './spanUtils';\nimport {\n  AI_MODEL_ID_ATTRIBUTE,\n  AI_MODEL_PROVIDER_ATTRIBUTE,\n  AI_PROMPT_ATTRIBUTE,\n  AI_PROMPT_MESSAGES_ATTRIBUTE,\n  AI_PROMPT_TOOLS_ATTRIBUTE,\n  AI_RESPONSE_TEXT_ATTRIBUTE,\n  AI_RESPONSE_TOOL_CALLS_ATTRIBUTE,\n  AI_TELEMETRY_FUNCTION_ID_ATTRIBUTE,\n  AI_TOOL_CALL_ARGS_ATTRIBUTE,\n  AI_TOOL_CALL_ID_ATTRIBUTE,\n  AI_TOOL_CALL_NAME_ATTRIBUTE,\n  AI_TOOL_CALL_RESULT_ATTRIBUTE,\n  AI_USAGE_COMPLETION_TOKENS_ATTRIBUTE,\n  AI_USAGE_PROMPT_TOKENS_ATTRIBUTE,\n  GEN_AI_RESPONSE_MODEL_ATTRIBUTE,\n  GEN_AI_USAGE_INPUT_TOKENS_ATTRIBUTE,\n  GEN_AI_USAGE_OUTPUT_TOKENS_ATTRIBUTE,\n} from './vercel-ai-attributes';\n\nfunction addOriginToSpan(span: Span, origin: SpanOrigin): void {\n  span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, origin);\n}\n\n/**\n * Post-process spans emitted by the Vercel AI SDK.\n * This is supposed to be used in `client.on('spanStart', ...)\n */\nfunction onVercelAiSpanStart(span: Span): void {\n  const { data: attributes, description: name } = spanToJSON(span);\n\n  if (!name) {\n    return;\n  }\n\n  // Tool call spans\n  // https://ai-sdk.dev/docs/ai-sdk-core/telemetry#tool-call-spans\n  if (attributes[AI_TOOL_CALL_NAME_ATTRIBUTE] && attributes[AI_TOOL_CALL_ID_ATTRIBUTE] && name === 'ai.toolCall') {\n    processToolCallSpan(span, attributes);\n    return;\n  }\n\n  // The AI and Provider must be defined for generate, stream, and embed spans.\n  // The id of the model\n  const aiModelId = attributes[AI_MODEL_ID_ATTRIBUTE];\n  // the provider of the model\n  const aiModelProvider = attributes[AI_MODEL_PROVIDER_ATTRIBUTE];\n  if (typeof aiModelId !== 'string' || typeof aiModelProvider !== 'string' || !aiModelId || !aiModelProvider) {\n    return;\n  }\n\n  processGenerateSpan(span, name, attributes);\n}\n\nconst vercelAiEventProcessor = Object.assign(\n  (event: Event): Event => {\n    if (event.type === 'transaction' && event.spans) {\n      for (const span of event.spans) {\n        // this mutates spans in-place\n        processEndedVercelAiSpan(span);\n      }\n    }\n    return event;\n  },\n  { id: 'VercelAiEventProcessor' },\n);\n\n/**\n * Post-process spans emitted by the Vercel AI SDK.\n */\nfunction processEndedVercelAiSpan(span: SpanJSON): void {\n  const { data: attributes, origin } = span;\n\n  if (origin !== 'auto.vercelai.otel') {\n    return;\n  }\n\n  renameAttributeKey(attributes, AI_USAGE_COMPLETION_TOKENS_ATTRIBUTE, GEN_AI_USAGE_OUTPUT_TOKENS_ATTRIBUTE);\n  renameAttributeKey(attributes, AI_USAGE_PROMPT_TOKENS_ATTRIBUTE, GEN_AI_USAGE_INPUT_TOKENS_ATTRIBUTE);\n\n  if (\n    typeof attributes[GEN_AI_USAGE_OUTPUT_TOKENS_ATTRIBUTE] === 'number' &&\n    typeof attributes[GEN_AI_USAGE_INPUT_TOKENS_ATTRIBUTE] === 'number'\n  ) {\n    attributes['gen_ai.usage.total_tokens'] =\n      attributes[GEN_AI_USAGE_OUTPUT_TOKENS_ATTRIBUTE] + attributes[GEN_AI_USAGE_INPUT_TOKENS_ATTRIBUTE];\n  }\n\n  // Rename AI SDK attributes to standardized gen_ai attributes\n  renameAttributeKey(attributes, AI_PROMPT_MESSAGES_ATTRIBUTE, 'gen_ai.request.messages');\n  renameAttributeKey(attributes, AI_RESPONSE_TEXT_ATTRIBUTE, 'gen_ai.response.text');\n  renameAttributeKey(attributes, AI_RESPONSE_TOOL_CALLS_ATTRIBUTE, 'gen_ai.response.tool_calls');\n  renameAttributeKey(attributes, AI_PROMPT_TOOLS_ATTRIBUTE, 'gen_ai.request.available_tools');\n\n  renameAttributeKey(attributes, AI_TOOL_CALL_ARGS_ATTRIBUTE, 'gen_ai.tool.input');\n  renameAttributeKey(attributes, AI_TOOL_CALL_RESULT_ATTRIBUTE, 'gen_ai.tool.output');\n}\n\n/**\n * Renames an attribute key in the provided attributes object if the old key exists.\n * This function safely handles null and undefined values.\n */\nfunction renameAttributeKey(attributes: Record<string, unknown>, oldKey: string, newKey: string): void {\n  if (attributes[oldKey] != null) {\n    attributes[newKey] = attributes[oldKey];\n    // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n    delete attributes[oldKey];\n  }\n}\n\nfunction processToolCallSpan(span: Span, attributes: SpanAttributes): void {\n  addOriginToSpan(span, 'auto.vercelai.otel');\n  span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'gen_ai.execute_tool');\n  renameAttributeKey(attributes, AI_TOOL_CALL_NAME_ATTRIBUTE, 'gen_ai.tool.name');\n  renameAttributeKey(attributes, AI_TOOL_CALL_ID_ATTRIBUTE, 'gen_ai.tool.call.id');\n  // https://opentelemetry.io/docs/specs/semconv/registry/attributes/gen-ai/#gen-ai-tool-type\n  if (!attributes['gen_ai.tool.type']) {\n    span.setAttribute('gen_ai.tool.type', 'function');\n  }\n  const toolName = attributes['gen_ai.tool.name'];\n  if (toolName) {\n    span.updateName(`execute_tool ${toolName}`);\n  }\n}\n\nfunction processGenerateSpan(span: Span, name: string, attributes: SpanAttributes): void {\n  addOriginToSpan(span, 'auto.vercelai.otel');\n\n  const nameWthoutAi = name.replace('ai.', '');\n  span.setAttribute('ai.pipeline.name', nameWthoutAi);\n  span.updateName(nameWthoutAi);\n\n  // If a Telemetry name is set and it is a pipeline span, use that as the operation name\n  const functionId = attributes[AI_TELEMETRY_FUNCTION_ID_ATTRIBUTE];\n  if (functionId && typeof functionId === 'string' && name.split('.').length - 1 === 1) {\n    span.updateName(`${nameWthoutAi} ${functionId}`);\n    span.setAttribute('gen_ai.function_id', functionId);\n  }\n\n  if (attributes[AI_PROMPT_ATTRIBUTE]) {\n    span.setAttribute('gen_ai.prompt', attributes[AI_PROMPT_ATTRIBUTE]);\n  }\n  if (attributes[AI_MODEL_ID_ATTRIBUTE] && !attributes[GEN_AI_RESPONSE_MODEL_ATTRIBUTE]) {\n    span.setAttribute(GEN_AI_RESPONSE_MODEL_ATTRIBUTE, attributes[AI_MODEL_ID_ATTRIBUTE]);\n  }\n  span.setAttribute('ai.streaming', name.includes('stream'));\n\n  // Generate Spans\n  if (name === 'ai.generateText') {\n    span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'gen_ai.invoke_agent');\n    return;\n  }\n\n  if (name === 'ai.generateText.doGenerate') {\n    span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'gen_ai.generate_text');\n    span.updateName(`generate_text ${attributes[AI_MODEL_ID_ATTRIBUTE]}`);\n    return;\n  }\n\n  if (name === 'ai.streamText') {\n    span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'gen_ai.invoke_agent');\n    return;\n  }\n\n  if (name === 'ai.streamText.doStream') {\n    span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'gen_ai.stream_text');\n    span.updateName(`stream_text ${attributes[AI_MODEL_ID_ATTRIBUTE]}`);\n    return;\n  }\n\n  if (name === 'ai.generateObject') {\n    span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'gen_ai.invoke_agent');\n    return;\n  }\n\n  if (name === 'ai.generateObject.doGenerate') {\n    span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'gen_ai.generate_object');\n    span.updateName(`generate_object ${attributes[AI_MODEL_ID_ATTRIBUTE]}`);\n    return;\n  }\n\n  if (name === 'ai.streamObject') {\n    span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'gen_ai.invoke_agent');\n    return;\n  }\n\n  if (name === 'ai.streamObject.doStream') {\n    span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'gen_ai.stream_object');\n    span.updateName(`stream_object ${attributes[AI_MODEL_ID_ATTRIBUTE]}`);\n    return;\n  }\n\n  if (name === 'ai.embed') {\n    span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'gen_ai.invoke_agent');\n    return;\n  }\n\n  if (name === 'ai.embed.doEmbed') {\n    span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'gen_ai.embed');\n    span.updateName(`embed ${attributes[AI_MODEL_ID_ATTRIBUTE]}`);\n    return;\n  }\n\n  if (name === 'ai.embedMany') {\n    span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'gen_ai.invoke_agent');\n    return;\n  }\n\n  if (name === 'ai.embedMany.doEmbed') {\n    span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'gen_ai.embed_many');\n    span.updateName(`embed_many ${attributes[AI_MODEL_ID_ATTRIBUTE]}`);\n    return;\n  }\n\n  if (name.startsWith('ai.stream')) {\n    span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.run');\n    return;\n  }\n}\n\n/**\n * Add event processors to the given client to process Vercel AI spans.\n */\nexport function addVercelAiProcessors(client: Client): void {\n  client.on('spanStart', onVercelAiSpanStart);\n  // Note: We cannot do this on `spanEnd`, because the span cannot be mutated anymore at this point\n  client.addEventProcessor(vercelAiEventProcessor);\n}\n"],"names":["SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN","spanToJSON","AI_TOOL_CALL_NAME_ATTRIBUTE","AI_TOOL_CALL_ID_ATTRIBUTE","AI_MODEL_ID_ATTRIBUTE","AI_MODEL_PROVIDER_ATTRIBUTE","AI_USAGE_COMPLETION_TOKENS_ATTRIBUTE","GEN_AI_USAGE_OUTPUT_TOKENS_ATTRIBUTE","AI_USAGE_PROMPT_TOKENS_ATTRIBUTE","GEN_AI_USAGE_INPUT_TOKENS_ATTRIBUTE","AI_PROMPT_MESSAGES_ATTRIBUTE","AI_RESPONSE_TEXT_ATTRIBUTE","AI_RESPONSE_TOOL_CALLS_ATTRIBUTE","AI_PROMPT_TOOLS_ATTRIBUTE","AI_TOOL_CALL_ARGS_ATTRIBUTE","AI_TOOL_CALL_RESULT_ATTRIBUTE","SEMANTIC_ATTRIBUTE_SENTRY_OP","AI_TELEMETRY_FUNCTION_ID_ATTRIBUTE","AI_PROMPT_ATTRIBUTE","GEN_AI_RESPONSE_MODEL_ATTRIBUTE"],"mappings":"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"}},
    {"offset": {"line": 12777, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 12781, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/utils/breadcrumb-log-level.ts"],"sourcesContent":["import type { SeverityLevel } from '../types-hoist/severity';\n\n/**\n * Determine a breadcrumb's log level (only `warning` or `error`) based on an HTTP status code.\n */\nexport function getBreadcrumbLogLevelFromHttpStatusCode(statusCode: number | undefined): SeverityLevel | undefined {\n  // NOTE: undefined defaults to 'info' in Sentry\n  if (statusCode === undefined) {\n    return undefined;\n  } else if (statusCode >= 400 && statusCode < 500) {\n    return 'warning';\n  } else if (statusCode >= 500) {\n    return 'error';\n  } else {\n    return undefined;\n  }\n}\n"],"names":[],"mappings":";;;AAEA;;CAEA,GACO,SAAS,wCAAwC,UAAU;IAClE,+CAAA;IACE,IAAI,eAAe,WAAW;QAC5B,OAAO;IACX,OAAS,IAAI,cAAc,OAAO,aAAa,KAAK;QAChD,OAAO;IACX,OAAS,IAAI,cAAc,KAAK;QAC5B,OAAO;IACX,OAAS;QACL,OAAO;IACX;AACA"}},
    {"offset": {"line": 12799, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 12803, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/utils/error.ts"],"sourcesContent":["import type { ConsoleLevel } from '../types-hoist/instrument';\n\n/**\n * An error emitted by Sentry SDKs and related utilities.\n * @deprecated This class is no longer used and will be removed in a future version. Use `Error` instead.\n */\nexport class SentryError extends Error {\n  public logLevel: ConsoleLevel;\n\n  public constructor(\n    public message: string,\n    logLevel: ConsoleLevel = 'warn',\n  ) {\n    super(message);\n\n    this.logLevel = logLevel;\n  }\n}\n"],"names":[],"mappings":";;;AAEA;;;CAGA,GACO,MAAM,oBAAoB;IAGxB,YACE,OAAO,EACd,WAAyB,MAAM,CAC/B;QACA,KAAK,CAAC;QAAO,IAAA,CAAA,OAAA,GAAA;QAEb,IAAI,CAAC,QAAA,GAAW;IACpB;AACA"}},
    {"offset": {"line": 12817, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 12821, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/utils/supports.ts"],"sourcesContent":["import { DEBUG_BUILD } from '../debug-build';\nimport { logger } from './logger';\nimport { GLOBAL_OBJ } from './worldwide';\n\nconst WINDOW = GLOBAL_OBJ as unknown as Window;\n\ndeclare const EdgeRuntime: string | undefined;\n\n/**\n * Tells whether current environment supports ErrorEvent objects\n * {@link supportsErrorEvent}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsErrorEvent(): boolean {\n  try {\n    new ErrorEvent('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMError objects\n * {@link supportsDOMError}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsDOMError(): boolean {\n  try {\n    // Chrome: VM89:1 Uncaught TypeError: Failed to construct 'DOMError':\n    // 1 argument required, but only 0 present.\n    // @ts-expect-error It really needs 1 argument, not 0.\n    new DOMError('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMException objects\n * {@link supportsDOMException}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsDOMException(): boolean {\n  try {\n    new DOMException('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports History API\n * {@link supportsHistory}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsHistory(): boolean {\n  return 'history' in WINDOW && !!WINDOW.history;\n}\n\n/**\n * Tells whether current environment supports Fetch API\n * {@link supportsFetch}.\n *\n * @returns Answer to the given question.\n * @deprecated This is no longer used and will be removed in a future major version.\n */\nexport const supportsFetch = _isFetchSupported;\n\nfunction _isFetchSupported(): boolean {\n  if (!('fetch' in WINDOW)) {\n    return false;\n  }\n\n  try {\n    new Headers();\n    new Request('http://www.example.com');\n    new Response();\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * isNative checks if the given function is a native implementation\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isNativeFunction(func: Function): boolean {\n  return func && /^function\\s+\\w+\\(\\)\\s+\\{\\s+\\[native code\\]\\s+\\}$/.test(func.toString());\n}\n\n/**\n * Tells whether current environment supports Fetch API natively\n * {@link supportsNativeFetch}.\n *\n * @returns true if `window.fetch` is natively implemented, false otherwise\n */\nexport function supportsNativeFetch(): boolean {\n  if (typeof EdgeRuntime === 'string') {\n    return true;\n  }\n\n  if (!_isFetchSupported()) {\n    return false;\n  }\n\n  // Fast path to avoid DOM I/O\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  if (isNativeFunction(WINDOW.fetch)) {\n    return true;\n  }\n\n  // window.fetch is implemented, but is polyfilled or already wrapped (e.g: by a chrome extension)\n  // so create a \"pure\" iframe to see if that has native fetch\n  let result = false;\n  const doc = WINDOW.document;\n  // eslint-disable-next-line deprecation/deprecation\n  if (doc && typeof (doc.createElement as unknown) === 'function') {\n    try {\n      const sandbox = doc.createElement('iframe');\n      sandbox.hidden = true;\n      doc.head.appendChild(sandbox);\n      if (sandbox.contentWindow?.fetch) {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        result = isNativeFunction(sandbox.contentWindow.fetch);\n      }\n      doc.head.removeChild(sandbox);\n    } catch (err) {\n      DEBUG_BUILD &&\n        logger.warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', err);\n    }\n  }\n\n  return result;\n}\n\n/**\n * Tells whether current environment supports ReportingObserver API\n * {@link supportsReportingObserver}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsReportingObserver(): boolean {\n  return 'ReportingObserver' in WINDOW;\n}\n\n/**\n * Tells whether current environment supports Referrer Policy API\n * {@link supportsReferrerPolicy}.\n *\n * @returns Answer to the given question.\n * @deprecated This is no longer used and will be removed in a future major version.\n */\nexport function supportsReferrerPolicy(): boolean {\n  // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default'\n  // (see https://caniuse.com/#feat=referrer-policy),\n  // it doesn't. And it throws an exception instead of ignoring this parameter...\n  // REF: https://github.com/getsentry/raven-js/issues/1233\n\n  if (!_isFetchSupported()) {\n    return false;\n  }\n\n  try {\n    new Request('_', {\n      referrerPolicy: 'origin' as ReferrerPolicy,\n    });\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n"],"names":["GLOBAL_OBJ","DEBUG_BUILD","logger"],"mappings":";;;;;;AAIA,MAAM,SAASA,UAAAA,UAAA;AAIf;;;;;CAKA,GACO,SAAS;IACd,IAAI;QACF,IAAI,WAAW;QACf,OAAO;IACX,EAAI,OAAO,GAAG;QACV,OAAO;IACX;AACA;AAEA;;;;;CAKA,GACO,SAAS;IACd,IAAI;QACN,qEAAA;QACA,2CAAA;QACA,sDAAA;QACI,IAAI,SAAS;QACb,OAAO;IACX,EAAI,OAAO,GAAG;QACV,OAAO;IACX;AACA;AAEA;;;;;CAKA,GACO,SAAS;IACd,IAAI;QACF,IAAI,aAAa;QACjB,OAAO;IACX,EAAI,OAAO,GAAG;QACV,OAAO;IACX;AACA;AAEA;;;;;CAKA,GACO,SAAS;IACd,OAAO,aAAa,UAAU,CAAC,CAAC,OAAO,OAAO;AAChD;AAEA;;;;;;CAMA,GACO,MAAM,gBAAgB;AAE7B,SAAS;IACP,IAAI,CAAA,CAAE,WAAW,MAAM,GAAG;QACxB,OAAO;IACX;IAEE,IAAI;QACF,IAAI;QACJ,IAAI,QAAQ;QACZ,IAAI;QACJ,OAAO;IACX,EAAI,OAAO,GAAG;QACV,OAAO;IACX;AACA;AAEA;;CAEA,GACA,wDAAA;AACO,SAAS,iBAAiB,IAAI;IACnC,OAAO,QAAQ,mDAAmD,IAAI,CAAC,KAAK,QAAQ;AACtF;AAEA;;;;;CAKA,GACO,SAAS;IACd,IAAI,OAAO,gBAAgB,UAAU;QACnC,OAAO;IACX;IAEE,IAAI,CAAC,qBAAqB;QACxB,OAAO;IACX;IAEA,6BAAA;IACA,6DAAA;IACE,IAAI,iBAAiB,OAAO,KAAK,GAAG;QAClC,OAAO;IACX;IAEA,iGAAA;IACA,4DAAA;IACE,IAAI,SAAS;IACb,MAAM,MAAM,OAAO,QAAQ;IAC7B,mDAAA;IACE,IAAI,OAAO,OAAQ,IAAI,aAAA,KAA8B,YAAY;QAC/D,IAAI;YACF,MAAM,UAAU,IAAI,aAAa,CAAC;YAClC,QAAQ,MAAA,GAAS;YACjB,IAAI,IAAI,CAAC,WAAW,CAAC;YACrB,IAAI,QAAQ,aAAa,EAAE,OAAO;gBACxC,6DAAA;gBACQ,SAAS,iBAAiB,QAAQ,aAAa,CAAC,KAAK;YAC7D;YACM,IAAI,IAAI,CAAC,WAAW,CAAC;QAC3B,EAAM,OAAO,KAAK;YACZC,WAAAA,WAAA,IACEC,OAAAA,MAAM,CAAC,IAAI,CAAC,mFAAmF;QACvG;IACA;IAEE,OAAO;AACT;AAEA;;;;;CAKA,GACO,SAAS;IACd,OAAO,uBAAuB;AAChC;AAEA;;;;;;CAMA,GACO,SAAS;IAChB,yHAAA;IACA,mDAAA;IACA,+EAAA;IACA,yDAAA;IAEE,IAAI,CAAC,qBAAqB;QACxB,OAAO;IACX;IAEE,IAAI;QACF,IAAI,QAAQ,KAAK;YACf,gBAAgB;QACtB;QACI,OAAO;IACX,EAAI,OAAO,GAAG;QACV,OAAO;IACX;AACA"}},
    {"offset": {"line": 12982, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 12986, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/instrument/fetch.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type { HandlerDataFetch } from '../types-hoist/instrument';\nimport type { WebFetchHeaders } from '../types-hoist/webfetchapi';\nimport { isError, isRequest } from '../utils/is';\nimport { addNonEnumerableProperty, fill } from '../utils/object';\nimport { supportsNativeFetch } from '../utils/supports';\nimport { timestampInSeconds } from '../utils/time';\nimport { GLOBAL_OBJ } from '../utils/worldwide';\nimport { addHandler, maybeInstrument, triggerHandlers } from './handlers';\n\ntype FetchResource = string | { toString(): string } | { url: string };\n\n/**\n * Add an instrumentation handler for when a fetch request happens.\n * The handler function is called once when the request starts and once when it ends,\n * which can be identified by checking if it has an `endTimestamp`.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nexport function addFetchInstrumentationHandler(\n  handler: (data: HandlerDataFetch) => void,\n  skipNativeFetchCheck?: boolean,\n): void {\n  const type = 'fetch';\n  addHandler(type, handler);\n  maybeInstrument(type, () => instrumentFetch(undefined, skipNativeFetchCheck));\n}\n\n/**\n * Add an instrumentation handler for long-lived fetch requests, like consuming server-sent events (SSE) via fetch.\n * The handler will resolve the request body and emit the actual `endTimestamp`, so that the\n * span can be updated accordingly.\n *\n * Only used internally\n * @hidden\n */\nexport function addFetchEndInstrumentationHandler(handler: (data: HandlerDataFetch) => void): void {\n  const type = 'fetch-body-resolved';\n  addHandler(type, handler);\n  maybeInstrument(type, () => instrumentFetch(streamHandler));\n}\n\nfunction instrumentFetch(onFetchResolved?: (response: Response) => void, skipNativeFetchCheck: boolean = false): void {\n  if (skipNativeFetchCheck && !supportsNativeFetch()) {\n    return;\n  }\n\n  fill(GLOBAL_OBJ, 'fetch', function (originalFetch: () => void): () => void {\n    return function (...args: any[]): void {\n      // We capture the error right here and not in the Promise error callback because Safari (and probably other\n      // browsers too) will wipe the stack trace up to this point, only leaving us with this file which is useless.\n\n      // NOTE: If you are a Sentry user, and you are seeing this stack frame,\n      //       it means the error, that was caused by your fetch call did not\n      //       have a stack trace, so the SDK backfilled the stack trace so\n      //       you can see which fetch call failed.\n      const virtualError = new Error();\n\n      const { method, url } = parseFetchArgs(args);\n      const handlerData: HandlerDataFetch = {\n        args,\n        fetchData: {\n          method,\n          url,\n        },\n        startTimestamp: timestampInSeconds() * 1000,\n        // // Adding the error to be able to fingerprint the failed fetch event in HttpClient instrumentation\n        virtualError,\n        headers: getHeadersFromFetchArgs(args),\n      };\n\n      // if there is no callback, fetch is instrumented directly\n      if (!onFetchResolved) {\n        triggerHandlers('fetch', {\n          ...handlerData,\n        });\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      return originalFetch.apply(GLOBAL_OBJ, args).then(\n        async (response: Response) => {\n          if (onFetchResolved) {\n            onFetchResolved(response);\n          } else {\n            triggerHandlers('fetch', {\n              ...handlerData,\n              endTimestamp: timestampInSeconds() * 1000,\n              response,\n            });\n          }\n\n          return response;\n        },\n        (error: Error) => {\n          triggerHandlers('fetch', {\n            ...handlerData,\n            endTimestamp: timestampInSeconds() * 1000,\n            error,\n          });\n\n          if (isError(error) && error.stack === undefined) {\n            // NOTE: If you are a Sentry user, and you are seeing this stack frame,\n            //       it means the error, that was caused by your fetch call did not\n            //       have a stack trace, so the SDK backfilled the stack trace so\n            //       you can see which fetch call failed.\n            error.stack = virtualError.stack;\n            addNonEnumerableProperty(error, 'framesToPop', 1);\n          }\n\n          // We enhance the not-so-helpful \"Failed to fetch\" error messages with the host\n          // Possible messages we handle here:\n          // * \"Failed to fetch\" (chromium)\n          // * \"Load failed\" (webkit)\n          // * \"NetworkError when attempting to fetch resource.\" (firefox)\n          if (\n            error instanceof TypeError &&\n            (error.message === 'Failed to fetch' ||\n              error.message === 'Load failed' ||\n              error.message === 'NetworkError when attempting to fetch resource.')\n          ) {\n            try {\n              const url = new URL(handlerData.fetchData.url);\n              error.message = `${error.message} (${url.host})`;\n            } catch {\n              // ignore it if errors happen here\n            }\n          }\n\n          // NOTE: If you are a Sentry user, and you are seeing this stack frame,\n          //       it means the sentry.javascript SDK caught an error invoking your application code.\n          //       This is expected behavior and NOT indicative of a bug with sentry.javascript.\n          throw error;\n        },\n      );\n    };\n  });\n}\n\nasync function resolveResponse(res: Response | undefined, onFinishedResolving: () => void): Promise<void> {\n  if (res?.body) {\n    const body = res.body;\n    const responseReader = body.getReader();\n\n    // Define a maximum duration after which we just cancel\n    const maxFetchDurationTimeout = setTimeout(\n      () => {\n        body.cancel().then(null, () => {\n          // noop\n        });\n      },\n      90 * 1000, // 90s\n    );\n\n    let readingActive = true;\n    while (readingActive) {\n      let chunkTimeout;\n      try {\n        // abort reading if read op takes more than 5s\n        chunkTimeout = setTimeout(() => {\n          body.cancel().then(null, () => {\n            // noop on error\n          });\n        }, 5000);\n\n        // This .read() call will reject/throw when we abort due to timeouts through `body.cancel()`\n        const { done } = await responseReader.read();\n\n        clearTimeout(chunkTimeout);\n\n        if (done) {\n          onFinishedResolving();\n          readingActive = false;\n        }\n      } catch (error) {\n        readingActive = false;\n      } finally {\n        clearTimeout(chunkTimeout);\n      }\n    }\n\n    clearTimeout(maxFetchDurationTimeout);\n\n    responseReader.releaseLock();\n    body.cancel().then(null, () => {\n      // noop on error\n    });\n  }\n}\n\nfunction streamHandler(response: Response): void {\n  // clone response for awaiting stream\n  let clonedResponseForResolving: Response;\n  try {\n    clonedResponseForResolving = response.clone();\n  } catch {\n    return;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  resolveResponse(clonedResponseForResolving, () => {\n    triggerHandlers('fetch-body-resolved', {\n      endTimestamp: timestampInSeconds() * 1000,\n      response,\n    });\n  });\n}\n\nfunction hasProp<T extends string>(obj: unknown, prop: T): obj is Record<string, string> {\n  return !!obj && typeof obj === 'object' && !!(obj as Record<string, string>)[prop];\n}\n\nfunction getUrlFromResource(resource: FetchResource): string {\n  if (typeof resource === 'string') {\n    return resource;\n  }\n\n  if (!resource) {\n    return '';\n  }\n\n  if (hasProp(resource, 'url')) {\n    return resource.url;\n  }\n\n  if (resource.toString) {\n    return resource.toString();\n  }\n\n  return '';\n}\n\n/**\n * Parses the fetch arguments to find the used Http method and the url of the request.\n * Exported for tests only.\n */\nexport function parseFetchArgs(fetchArgs: unknown[]): { method: string; url: string } {\n  if (fetchArgs.length === 0) {\n    return { method: 'GET', url: '' };\n  }\n\n  if (fetchArgs.length === 2) {\n    const [url, options] = fetchArgs as [FetchResource, object];\n\n    return {\n      url: getUrlFromResource(url),\n      method: hasProp(options, 'method') ? String(options.method).toUpperCase() : 'GET',\n    };\n  }\n\n  const arg = fetchArgs[0];\n  return {\n    url: getUrlFromResource(arg as FetchResource),\n    method: hasProp(arg, 'method') ? String(arg.method).toUpperCase() : 'GET',\n  };\n}\n\nfunction getHeadersFromFetchArgs(fetchArgs: unknown[]): WebFetchHeaders | undefined {\n  const [requestArgument, optionsArgument] = fetchArgs;\n\n  try {\n    if (\n      typeof optionsArgument === 'object' &&\n      optionsArgument !== null &&\n      'headers' in optionsArgument &&\n      optionsArgument.headers\n    ) {\n      return new Headers(optionsArgument.headers as any);\n    }\n\n    if (isRequest(requestArgument)) {\n      return new Headers(requestArgument.headers);\n    }\n  } catch {\n    // noop\n  }\n\n  return;\n}\n"],"names":["addHandler","maybeInstrument","supportsNativeFetch","fill","GLOBAL_OBJ","timestampInSeconds","triggerHandlers","isError","addNonEnumerableProperty","isRequest"],"mappings":"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"}},
    {"offset": {"line": 13211, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 13215, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/utils/env.ts"],"sourcesContent":["/*\n * This module exists for optimizations in the build process through rollup and terser.  We define some global\n * constants, which can be overridden during build. By guarding certain pieces of code with functions that return these\n * constants, we can control whether or not they appear in the final bundle. (Any code guarded by a false condition will\n * never run, and will hence be dropped during treeshaking.) The two primary uses for this are stripping out calls to\n * `logger` and preventing node-related code from appearing in browser bundles.\n *\n * Attention:\n * This file should not be used to define constants/flags that are intended to be used for tree-shaking conducted by\n * users. These flags should live in their respective packages, as we identified user tooling (specifically webpack)\n * having issues tree-shaking these constants across package boundaries.\n * An example for this is the __SENTRY_DEBUG__ constant. It is declared in each package individually because we want\n * users to be able to shake away expressions that it guards.\n */\n\ndeclare const __SENTRY_BROWSER_BUNDLE__: boolean | undefined;\n\nexport type SdkSource = 'npm' | 'cdn' | 'loader';\n\n/**\n * Figures out if we're building a browser bundle.\n *\n * @returns true if this is a browser bundle build.\n */\nexport function isBrowserBundle(): boolean {\n  return typeof __SENTRY_BROWSER_BUNDLE__ !== 'undefined' && !!__SENTRY_BROWSER_BUNDLE__;\n}\n\n/**\n * Get source of SDK.\n */\nexport function getSDKSource(): SdkSource {\n  // This comment is used to identify this line in the CDN bundle build step and replace this with \"return 'cdn';\"\n  /* __SENTRY_SDK_SOURCE__ */ return 'npm';\n}\n"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;;;CAaA,GAMA;;;;CAIA,GACO,SAAS;IACd,OAAO,OAAO,8BAA8B,eAAe,CAAC,CAAC;AAC/D;AAEA;;CAEA,GACO,SAAS;IAChB,gHAAA;IACA,yBAAA,GAA8B,OAAO;AACrC"}},
    {"offset": {"line": 13246, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 13250, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/utils/node.ts"],"sourcesContent":["/**\n * NOTE: In order to avoid circular dependencies, if you add a function to this module and it needs to print something,\n * you must either a) use `console.log` rather than the logger, or b) put your function elsewhere.\n */\n\nimport { isBrowserBundle } from './env';\n\n/**\n * Checks whether we're in the Node.js or Browser environment\n *\n * @returns Answer to given question\n */\nexport function isNodeEnv(): boolean {\n  // explicitly check for browser bundles as those can be optimized statically\n  // by terser/rollup.\n  return (\n    !isBrowserBundle() &&\n    Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]'\n  );\n}\n\n/**\n * Requires a module which is protected against bundler minification.\n *\n * @param request The module path to resolve\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction dynamicRequire(mod: any, request: string): any {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return mod.require(request);\n}\n\n/**\n * Helper for dynamically loading module that should work with linked dependencies.\n * The problem is that we _should_ be using `require(require.resolve(moduleName, { paths: [cwd()] }))`\n * However it's _not possible_ to do that with Webpack, as it has to know all the dependencies during\n * build time. `require.resolve` is also not available in any other way, so we cannot create,\n * a fake helper like we do with `dynamicRequire`.\n *\n * We always prefer to use local package, thus the value is not returned early from each `try/catch` block.\n * That is to mimic the behavior of `require.resolve` exactly.\n *\n * @param moduleName module name to require\n * @param existingModule module to use for requiring\n * @returns possibly required module\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function loadModule<T>(moduleName: string, existingModule: any = module): T | undefined {\n  let mod: T | undefined;\n\n  try {\n    mod = dynamicRequire(existingModule, moduleName);\n  } catch (e) {\n    // no-empty\n  }\n\n  if (!mod) {\n    try {\n      const { cwd } = dynamicRequire(existingModule, 'process');\n      mod = dynamicRequire(existingModule, `${cwd()}/node_modules/${moduleName}`) as T;\n    } catch (e) {\n      // no-empty\n    }\n  }\n\n  return mod;\n}\n"],"names":["isBrowserBundle"],"mappings":";;;;AAAA;;;CAGA,GAIA;;;;CAIA,GACO,SAAS;IAChB,4EAAA;IACA,oBAAA;IACE,OACE,CAACA,IAAAA,eAAe,MAChB,OAAO,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,YAAY,cAAc,UAAU,OAAO;AAErF;AAEA;;;;CAIA,GACA,8DAAA;AACA,SAAS,eAAe,GAAG,EAAO,OAAO;IACzC,sEAAA;IACE,OAAO,IAAI,OAAO,CAAC;AACrB;AAEA;;;;;;;;;;;;;CAaA,GACA,8DAAA;AACO,SAAS,WAAc,UAAU,EAAU,iBAAsB,MAAM;IAC5E,IAAI;IAEJ,IAAI;QACF,MAAM,eAAe,gBAAgB;IACzC,EAAI,OAAO,GAAG;IACd,WAAA;IACA;IAEE,IAAI,CAAC,KAAK;QACR,IAAI;YACF,MAAM,EAAE,GAAA,EAAI,GAAI,eAAe,gBAAgB;YAC/C,MAAM,eAAe,gBAAgB,CAAC,EAAA,MAAA,cAAA,EAAA,WAAA,CAAA;QACA,EAAA,OAAA,GAAA;QACA,WAAA;QACA;IACA;IAEA,OAAA;AACA"}},
    {"offset": {"line": 13308, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 13312, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/utils/isBrowser.ts"],"sourcesContent":["import { isNodeEnv } from './node';\nimport { GLOBAL_OBJ } from './worldwide';\n\n/**\n * Returns true if we are in the browser.\n */\nexport function isBrowser(): boolean {\n  // eslint-disable-next-line no-restricted-globals\n  return typeof window !== 'undefined' && (!isNodeEnv() || isElectronNodeRenderer());\n}\n\ntype ElectronProcess = { type?: string };\n\n// Electron renderers with nodeIntegration enabled are detected as Node.js so we specifically test for them\nfunction isElectronNodeRenderer(): boolean {\n  const process = (GLOBAL_OBJ as typeof GLOBAL_OBJ & { process?: ElectronProcess }).process;\n  return process?.type === 'renderer';\n}\n"],"names":["isNodeEnv","GLOBAL_OBJ"],"mappings":";;;;;AAGA;;CAEA,GACO,SAAS;IAChB,iDAAA;IACE,OAAO,OAAO,WAAW,eAAA,CAAgB,CAACA,KAAAA,SAAS,MAAM,wBAAwB;AACnF;AAIA,2GAAA;AACA,SAAS;IACP,MAAM,UAAU,AAACC,UAAAA,UAAA,CAAiE,OAAO;IACzF,OAAO,SAAS,SAAS;AAC3B"}},
    {"offset": {"line": 13329, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 13333, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/utils/node-stack-trace.ts"],"sourcesContent":["// This code was originally forked from https://github.com/felixge/node-stack-trace\n// Since then it has been highly modified to fit our needs.\n\n// Copyright (c) 2011 Felix Geisendörfer (felix@debuggable.com)//\n//\n//  Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the \"Software\"), to deal\n//  in the Software without restriction, including without limitation the rights\n//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n//  copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions://\n//\n//  The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.//\n//\n//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport type { StackLineParser, StackLineParserFn } from '../types-hoist/stacktrace';\nimport { UNKNOWN_FUNCTION } from './stacktrace';\n\nexport type GetModuleFn = (filename: string | undefined) => string | undefined;\n\n/**\n * Does this filename look like it's part of the app code?\n */\nexport function filenameIsInApp(filename: string, isNative: boolean = false): boolean {\n  const isInternal =\n    isNative ||\n    (filename &&\n      // It's not internal if it's an absolute linux path\n      !filename.startsWith('/') &&\n      // It's not internal if it's an absolute windows path\n      !filename.match(/^[A-Z]:/) &&\n      // It's not internal if the path is starting with a dot\n      !filename.startsWith('.') &&\n      // It's not internal if the frame has a protocol. In node, this is usually the case if the file got pre-processed with a bundler like webpack\n      !filename.match(/^[a-zA-Z]([a-zA-Z0-9.\\-+])*:\\/\\//)); // Schema from: https://stackoverflow.com/a/3641782\n\n  // in_app is all that's not an internal Node function or a module within node_modules\n  // note that isNative appears to return true even for node core libraries\n  // see https://github.com/getsentry/raven-node/issues/176\n\n  return !isInternal && filename !== undefined && !filename.includes('node_modules/');\n}\n\n/** Node Stack line parser */\nexport function node(getModule?: GetModuleFn): StackLineParserFn {\n  const FILENAME_MATCH = /^\\s*[-]{4,}$/;\n  const FULL_MATCH = /at (?:async )?(?:(.+?)\\s+\\()?(?:(.+):(\\d+):(\\d+)?|([^)]+))\\)?/;\n\n  // eslint-disable-next-line complexity\n  return (line: string) => {\n    const lineMatch = line.match(FULL_MATCH);\n\n    if (lineMatch) {\n      let object: string | undefined;\n      let method: string | undefined;\n      let functionName: string | undefined;\n      let typeName: string | undefined;\n      let methodName: string | undefined;\n\n      if (lineMatch[1]) {\n        functionName = lineMatch[1];\n\n        let methodStart = functionName.lastIndexOf('.');\n        if (functionName[methodStart - 1] === '.') {\n          methodStart--;\n        }\n\n        if (methodStart > 0) {\n          object = functionName.slice(0, methodStart);\n          method = functionName.slice(methodStart + 1);\n          const objectEnd = object.indexOf('.Module');\n          if (objectEnd > 0) {\n            functionName = functionName.slice(objectEnd + 1);\n            object = object.slice(0, objectEnd);\n          }\n        }\n        typeName = undefined;\n      }\n\n      if (method) {\n        typeName = object;\n        methodName = method;\n      }\n\n      if (method === '<anonymous>') {\n        methodName = undefined;\n        functionName = undefined;\n      }\n\n      if (functionName === undefined) {\n        methodName = methodName || UNKNOWN_FUNCTION;\n        functionName = typeName ? `${typeName}.${methodName}` : methodName;\n      }\n\n      let filename = lineMatch[2]?.startsWith('file://') ? lineMatch[2].slice(7) : lineMatch[2];\n      const isNative = lineMatch[5] === 'native';\n\n      // If it's a Windows path, trim the leading slash so that `/C:/foo` becomes `C:/foo`\n      if (filename?.match(/\\/[A-Z]:/)) {\n        filename = filename.slice(1);\n      }\n\n      if (!filename && lineMatch[5] && !isNative) {\n        filename = lineMatch[5];\n      }\n\n      return {\n        filename: filename ? decodeURI(filename) : undefined,\n        module: getModule ? getModule(filename) : undefined,\n        function: functionName,\n        lineno: _parseIntOrUndefined(lineMatch[3]),\n        colno: _parseIntOrUndefined(lineMatch[4]),\n        in_app: filenameIsInApp(filename || '', isNative),\n      };\n    }\n\n    if (line.match(FILENAME_MATCH)) {\n      return {\n        filename: line,\n      };\n    }\n\n    return undefined;\n  };\n}\n\n/**\n * Node.js stack line parser\n *\n * This is in @sentry/core so it can be used from the Electron SDK in the browser for when `nodeIntegration == true`.\n * This allows it to be used without referencing or importing any node specific code which causes bundlers to complain\n */\nexport function nodeStackLineParser(getModule?: GetModuleFn): StackLineParser {\n  return [90, node(getModule)];\n}\n\nfunction _parseIntOrUndefined(input: string | undefined): number | undefined {\n  return parseInt(input || '', 10) || undefined;\n}\n"],"names":["UNKNOWN_FUNCTION"],"mappings":";;;;AA4BA;;CAEA,GACO,SAAS,gBAAgB,QAAQ,EAAU,WAAoB,KAAK;IACzE,MAAM,aACJ,YACC,YACL,mDAAA;IACM,CAAC,SAAS,UAAU,CAAC,QAC3B,qDAAA;IACM,CAAC,SAAS,KAAK,CAAC,cACtB,uDAAA;IACM,CAAC,SAAS,UAAU,CAAC,QAC3B,6IAAA;IACM,CAAC,SAAS,KAAK,CAAC,qCAAoC,mDAAA;IAE1D,qFAAA;IACA,yEAAA;IACA,yDAAA;IAEE,OAAO,CAAC,cAAc,aAAa,aAAa,CAAC,SAAS,QAAQ,CAAC;AACrE;AAEA,2BAAA,GACO,SAAS,KAAK,SAAS;IAC5B,MAAM,iBAAiB;IACvB,MAAM,aAAa;IAErB,sCAAA;IACE,OAAO,CAAC;QACN,MAAM,YAAY,KAAK,KAAK,CAAC;QAE7B,IAAI,WAAW;YACb,IAAI;YACJ,IAAI;YACJ,IAAI;YACJ,IAAI;YACJ,IAAI;YAEJ,IAAI,SAAS,CAAC,EAAE,EAAE;gBAChB,eAAe,SAAS,CAAC,EAAE;gBAE3B,IAAI,cAAc,aAAa,WAAW,CAAC;gBAC3C,IAAI,YAAY,CAAC,cAAc,EAAC,KAAM,KAAK;oBACzC;gBACV;gBAEQ,IAAI,cAAc,GAAG;oBACnB,SAAS,aAAa,KAAK,CAAC,GAAG;oBAC/B,SAAS,aAAa,KAAK,CAAC,cAAc;oBAC1C,MAAM,YAAY,OAAO,OAAO,CAAC;oBACjC,IAAI,YAAY,GAAG;wBACjB,eAAe,aAAa,KAAK,CAAC,YAAY;wBAC9C,SAAS,OAAO,KAAK,CAAC,GAAG;oBACrC;gBACA;gBACQ,WAAW;YACnB;YAEM,IAAI,QAAQ;gBACV,WAAW;gBACX,aAAa;YACrB;YAEM,IAAI,WAAW,eAAe;gBAC5B,aAAa;gBACb,eAAe;YACvB;YAEM,IAAI,iBAAiB,WAAW;gBAC9B,aAAa,cAAcA,WAAAA,gBAAgB;gBAC3C,eAAe,WAAW,CAAC,EAAA,SAAA,CAAA,EAAA,WAAA,CAAA,GAAA;YACA;YAEA,IAAA,WAAA,SAAA,CAAA,EAAA,EAAA,WAAA,aAAA,SAAA,CAAA,EAAA,CAAA,KAAA,CAAA,KAAA,SAAA,CAAA,EAAA;YACA,MAAA,WAAA,SAAA,CAAA,EAAA,KAAA;YAEA,oFAAA;YACA,IAAA,UAAA,MAAA,aAAA;gBACA,WAAA,SAAA,KAAA,CAAA;YACA;YAEA,IAAA,CAAA,YAAA,SAAA,CAAA,EAAA,IAAA,CAAA,UAAA;gBACA,WAAA,SAAA,CAAA,EAAA;YACA;YAEA,OAAA;gBACA,UAAA,WAAA,UAAA,YAAA;gBACA,QAAA,YAAA,UAAA,YAAA;gBACA,UAAA;gBACA,QAAA,qBAAA,SAAA,CAAA,EAAA;gBACA,OAAA,qBAAA,SAAA,CAAA,EAAA;gBACA,QAAA,gBAAA,YAAA,IAAA;YACA;QACA;QAEA,IAAA,KAAA,KAAA,CAAA,iBAAA;YACA,OAAA;gBACA,UAAA;YACA;QACA;QAEA,OAAA;IACA;AACA;AAEA;;;;;CAKA,GACA,SAAA,oBAAA,SAAA;IACA,OAAA;QAAA;QAAA,KAAA;KAAA;AACA;AAEA,SAAA,qBAAA,KAAA;IACA,OAAA,SAAA,SAAA,IAAA,OAAA;AACA"}},
    {"offset": {"line": 13434, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 13438, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/utils/anr.ts"],"sourcesContent":["import type { StackFrame } from '../types-hoist/stackframe';\nimport { filenameIsInApp } from './node-stack-trace';\nimport { UNKNOWN_FUNCTION } from './stacktrace';\n\ntype WatchdogReturn = {\n  /** Resets the watchdog timer */\n  poll: () => void;\n  /** Enables or disables the watchdog timer */\n  enabled: (state: boolean) => void;\n};\n\ntype CreateTimerImpl = () => { getTimeMs: () => number; reset: () => void };\n\n/**\n * A node.js watchdog timer\n * @param pollInterval The interval that we expect to get polled at\n * @param anrThreshold The threshold for when we consider ANR\n * @param callback The callback to call for ANR\n * @returns An object with `poll` and `enabled` functions {@link WatchdogReturn}\n */\nexport function watchdogTimer(\n  createTimer: CreateTimerImpl,\n  pollInterval: number,\n  anrThreshold: number,\n  callback: () => void,\n): WatchdogReturn {\n  const timer = createTimer();\n  let triggered = false;\n  let enabled = true;\n\n  setInterval(() => {\n    const diffMs = timer.getTimeMs();\n\n    if (triggered === false && diffMs > pollInterval + anrThreshold) {\n      triggered = true;\n      if (enabled) {\n        callback();\n      }\n    }\n\n    if (diffMs < pollInterval + anrThreshold) {\n      triggered = false;\n    }\n  }, 20);\n\n  return {\n    poll: () => {\n      timer.reset();\n    },\n    enabled: (state: boolean) => {\n      enabled = state;\n    },\n  };\n}\n\n// types copied from inspector.d.ts\ninterface Location {\n  scriptId: string;\n  lineNumber: number;\n  columnNumber?: number;\n}\n\ninterface CallFrame {\n  functionName: string;\n  location: Location;\n  url: string;\n}\n\n/**\n * Converts Debugger.CallFrame to Sentry StackFrame\n */\nexport function callFrameToStackFrame(\n  frame: CallFrame,\n  url: string | undefined,\n  getModuleFromFilename: (filename: string | undefined) => string | undefined,\n): StackFrame {\n  const filename = url ? url.replace(/^file:\\/\\//, '') : undefined;\n\n  // CallFrame row/col are 0 based, whereas StackFrame are 1 based\n  const colno = frame.location.columnNumber ? frame.location.columnNumber + 1 : undefined;\n  const lineno = frame.location.lineNumber ? frame.location.lineNumber + 1 : undefined;\n\n  return {\n    filename,\n    module: getModuleFromFilename(filename),\n    function: frame.functionName || UNKNOWN_FUNCTION,\n    colno,\n    lineno,\n    in_app: filename ? filenameIsInApp(filename) : undefined,\n  };\n}\n"],"names":["UNKNOWN_FUNCTION","filenameIsInApp"],"mappings":";;;;;AAaA;;;;;;CAMA,GACO,SAAS,cACd,WAAW,EACX,YAAY,EACZ,YAAY,EACZ,QAAQ;IAER,MAAM,QAAQ;IACd,IAAI,YAAY;IAChB,IAAI,UAAU;IAEd,YAAY;QACV,MAAM,SAAS,MAAM,SAAS;QAE9B,IAAI,cAAc,SAAS,SAAS,eAAe,cAAc;YAC/D,YAAY;YACZ,IAAI,SAAS;gBACX;YACR;QACA;QAEI,IAAI,SAAS,eAAe,cAAc;YACxC,YAAY;QAClB;IACA,GAAK;IAEH,OAAO;QACL,MAAM;YACJ,MAAM,KAAK;QACjB;QACI,SAAS,CAAC;YACR,UAAU;QAChB;IACA;AACA;AAEA,mCAAA;AAaA;;CAEA,GACO,SAAS,sBACd,KAAK,EACL,GAAG,EACH,qBAAqB;IAErB,MAAM,WAAW,MAAM,IAAI,OAAO,CAAC,cAAc,MAAM;IAEzD,gEAAA;IACE,MAAM,QAAQ,MAAM,QAAQ,CAAC,YAAA,GAAe,MAAM,QAAQ,CAAC,YAAA,GAAe,IAAI;IAC9E,MAAM,SAAS,MAAM,QAAQ,CAAC,UAAA,GAAa,MAAM,QAAQ,CAAC,UAAA,GAAa,IAAI;IAE3E,OAAO;QACL;QACA,QAAQ,sBAAsB;QAC9B,UAAU,MAAM,YAAA,IAAgBA,WAAAA,gBAAgB;QAChD;QACA;QACA,QAAQ,WAAWC,eAAAA,eAAe,CAAC,YAAY;IACnD;AACA"}},
    {"offset": {"line": 13493, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 13497, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/utils/lru.ts"],"sourcesContent":["/** A simple Least Recently Used map */\nexport class LRUMap<K, V> {\n  private readonly _cache: Map<K, V>;\n\n  public constructor(private readonly _maxSize: number) {\n    this._cache = new Map<K, V>();\n  }\n\n  /** Get the current size of the cache */\n  public get size(): number {\n    return this._cache.size;\n  }\n\n  /** Get an entry or undefined if it was not in the cache. Re-inserts to update the recently used order */\n  public get(key: K): V | undefined {\n    const value = this._cache.get(key);\n    if (value === undefined) {\n      return undefined;\n    }\n    // Remove and re-insert to update the order\n    this._cache.delete(key);\n    this._cache.set(key, value);\n    return value;\n  }\n\n  /** Insert an entry and evict an older entry if we've reached maxSize */\n  public set(key: K, value: V): void {\n    if (this._cache.size >= this._maxSize) {\n      // keys() returns an iterator in insertion order so keys().next() gives us the oldest key\n      this._cache.delete(this._cache.keys().next().value);\n    }\n    this._cache.set(key, value);\n  }\n\n  /** Remove an entry and return the entry if it was in the cache */\n  public remove(key: K): V | undefined {\n    const value = this._cache.get(key);\n    if (value) {\n      this._cache.delete(key);\n    }\n    return value;\n  }\n\n  /** Clear all entries */\n  public clear(): void {\n    this._cache.clear();\n  }\n\n  /** Get all the keys */\n  public keys(): Array<K> {\n    return Array.from(this._cache.keys());\n  }\n\n  /** Get all the values */\n  public values(): Array<V> {\n    const values: V[] = [];\n    this._cache.forEach(value => values.push(value));\n    return values;\n  }\n}\n"],"names":[],"mappings":";;;AAAA,qCAAA,GACO,MAAM;IAGJ,YAA6B,QAAQ,CAAU;QAAA,IAAA,CAAA,QAAA,GAAA;QACpD,IAAI,CAAC,MAAA,GAAS,IAAI;IACtB;IAEA,sCAAA,GACS,IAAI,OAAe;QACxB,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI;IAC3B;IAEA,uGAAA,GACS,IAAI,GAAG,EAAoB;QAChC,MAAM,QAAQ,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;QAC9B,IAAI,UAAU,WAAW;YACvB,OAAO;QACb;QACA,2CAAA;QACI,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;QACnB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK;QACrB,OAAO;IACX;IAEA,sEAAA,GACS,IAAI,GAAG,EAAK,KAAK,EAAW;QACjC,IAAI,IAAI,CAAC,MAAM,CAAC,IAAA,IAAQ,IAAI,CAAC,QAAQ,EAAE;YAC3C,yFAAA;YACM,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,GAAG,IAAI,GAAG,KAAK;QACxD;QACI,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK;IACzB;IAEA,gEAAA,GACS,OAAO,GAAG,EAAoB;QACnC,MAAM,QAAQ,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;QAC9B,IAAI,OAAO;YACT,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;QACzB;QACI,OAAO;IACX;IAEA,sBAAA,GACS,QAAc;QACnB,IAAI,CAAC,MAAM,CAAC,KAAK;IACrB;IAEA,qBAAA,GACS,OAAiB;QACtB,OAAO,MAAM,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI;IACtC;IAEA,uBAAA,GACS,SAAmB;QACxB,MAAM,SAAc,EAAE;QACtB,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAA,QAAS,OAAO,IAAI,CAAC;QACzC,OAAO;IACX;AACA"}},
    {"offset": {"line": 13545, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 13549, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/utils/vercelWaitUntil.ts"],"sourcesContent":["import { GLOBAL_OBJ } from './worldwide';\n\ninterface VercelRequestContextGlobal {\n  get?():\n    | {\n        waitUntil?: (task: Promise<unknown>) => void;\n      }\n    | undefined;\n}\n\n/**\n * Function that delays closing of a Vercel lambda until the provided promise is resolved.\n *\n * Vendored from https://www.npmjs.com/package/@vercel/functions\n */\nexport function vercelWaitUntil(task: Promise<unknown>): void {\n  const vercelRequestContextGlobal: VercelRequestContextGlobal | undefined =\n    // @ts-expect-error This is not typed\n    GLOBAL_OBJ[Symbol.for('@vercel/request-context')];\n\n  const ctx =\n    vercelRequestContextGlobal?.get && vercelRequestContextGlobal.get() ? vercelRequestContextGlobal.get() : {};\n\n  if (ctx?.waitUntil) {\n    ctx.waitUntil(task);\n  }\n}\n"],"names":["GLOBAL_OBJ"],"mappings":";;;;AAUA;;;;CAIA,GACO,SAAS,gBAAgB,IAAI;IAClC,MAAM,6BACR,qCAAA;IACIA,UAAAA,UAAU,CAAC,OAAO,GAAG,CAAC,2BAA2B;IAEnD,MAAM,MACJ,4BAA4B,OAAO,2BAA2B,GAAG,KAAK,2BAA2B,GAAG,KAAK,CAAA;IAE3G,IAAI,KAAK,WAAW;QAClB,IAAI,SAAS,CAAC;IAClB;AACA"}},
    {"offset": {"line": 13566, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 13570, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+core@9.37.0/node_modules/@sentry/core/src/vendor/escapeStringForRegex.ts"],"sourcesContent":["// Based on https://github.com/sindresorhus/escape-string-regexp but with modifications to:\n//   a) reduce the size by skipping the runtime type - checking\n//   b) ensure it gets down - compiled for old versions of Node(the published package only supports Node 14+).\n//\n// MIT License\n//\n// Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (https://sindresorhus.com)\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n// documentation files(the \"Software\"), to deal in the Software without restriction, including without limitation\n// the rights to use, copy, modify, merge, publish, distribute, sublicense, and / or sell copies of the Software, and\n// to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of\n// the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO\n// THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n// IN THE SOFTWARE.\n\n/**\n * Given a string, escape characters which have meaning in the regex grammar, such that the result is safe to feed to\n * `new RegExp()`.\n *\n * @param regexString The string to escape\n * @returns An version of the string with all special regex characters escaped\n */\nexport function escapeStringForRegex(regexString: string): string {\n  // escape the hyphen separately so we can also replace it with a unicode literal hyphen, to avoid the problems\n  // discussed in https://github.com/sindresorhus/escape-string-regexp/issues/20.\n  return regexString.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&').replace(/-/g, '\\\\x2d');\n}\n"],"names":[],"mappings":";;;AAAA,2FAAA;AACA,+DAAA;AACA,8GAAA;AACA,EAAA;AACA,cAAA;AACA,EAAA;AACA,kFAAA;AACA,EAAA;AACA,+GAAA;AACA,iHAAA;AACA,qHAAA;AACA,qGAAA;AACA,EAAA;AACA,mHAAA;AACA,gBAAA;AACA,EAAA;AACA,mHAAA;AACA,gHAAA;AACA,sHAAA;AACA,0GAAA;AACA,mBAAA;AAEA;;;;;;CAMA,GACO,SAAS,qBAAqB,WAAW;IAChD,8GAAA;IACA,+EAAA;IACE,OAAO,YAAY,OAAO,CAAC,uBAAuB,QAAQ,OAAO,CAAC,MAAM;AAC1E"}},
    {"offset": {"line": 13606, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 13610, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 14038, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}