{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/config/util.ts"],"sourcesContent":["import * as fs from 'fs';\nimport { sync as resolveSync } from 'resolve';\n\n/**\n * Returns the version of Next.js installed in the project, or undefined if it cannot be determined.\n */\nexport function getNextjsVersion(): string | undefined {\n  const nextjsPackageJsonPath = resolveNextjsPackageJson();\n  if (nextjsPackageJsonPath) {\n    try {\n      const nextjsPackageJson: { version: string } = JSON.parse(\n        fs.readFileSync(nextjsPackageJsonPath, { encoding: 'utf-8' }),\n      );\n      return nextjsPackageJson.version;\n    } catch {\n      // noop\n    }\n  }\n\n  return undefined;\n}\n\nfunction resolveNextjsPackageJson(): string | undefined {\n  try {\n    return resolveSync('next/package.json', { basedir: process.cwd() });\n  } catch {\n    return undefined;\n  }\n}\n"],"names":["resolveSync"],"mappings":";;;;;AAGA;;CAEA,GACO,SAAS;IACd,MAAM,wBAAwB;IAC9B,IAAI,uBAAuB;QACzB,IAAI;YACF,MAAM,oBAAyC,KAAK,KAAK,CACvD,GAAG,YAAY,CAAC,uBAAuB;gBAAE,UAAU;YAAA;YAErD,OAAO,kBAAkB,OAAO;QACtC,EAAM,OAAM;QACZ,OAAA;QACA;IACA;IAEE,OAAO;AACT;AAEA,SAAS;IACP,IAAI;QACF,OAAOA,QAAAA,IAAW,CAAC,qBAAqB;YAAE,SAAS,QAAQ,GAAG;QAAC;IACnE,EAAI,OAAM;QACN,OAAO;IACX;AACA"}},
    {"offset": {"line": 35, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/config/webpackPluginOptions.ts"],"sourcesContent":["import type { SentryWebpackPluginOptions } from '@sentry/webpack-plugin';\nimport * as path from 'path';\nimport type { BuildContext, NextConfigObject, SentryBuildOptions } from './types';\n\n/**\n * Combine default and user-provided SentryWebpackPlugin options, accounting for whether we're building server files or\n * client files.\n */\nexport function getWebpackPluginOptions(\n  buildContext: BuildContext,\n  sentryBuildOptions: SentryBuildOptions,\n  releaseName: string | undefined,\n): SentryWebpackPluginOptions {\n  const { isServer, config: userNextConfig, dir, nextRuntime } = buildContext;\n\n  const prefixInsert = !isServer ? 'Client' : nextRuntime === 'edge' ? 'Edge' : 'Node.js';\n\n  // We need to convert paths to posix because Glob patterns use `\\` to escape\n  // glob characters. This clashes with Windows path separators.\n  // See: https://www.npmjs.com/package/glob\n  const projectDir = dir.replace(/\\\\/g, '/');\n  // `.next` is the default directory\n  const distDir = (userNextConfig as NextConfigObject).distDir?.replace(/\\\\/g, '/') ?? '.next';\n  const distDirAbsPath = path.posix.join(projectDir, distDir);\n\n  const sourcemapUploadAssets: string[] = [];\n  const sourcemapUploadIgnore: string[] = [];\n\n  if (isServer) {\n    sourcemapUploadAssets.push(\n      path.posix.join(distDirAbsPath, 'server', '**'), // This is normally where Next.js outputs things\n      path.posix.join(distDirAbsPath, 'serverless', '**'), // This was the output location for serverless Next.js\n    );\n  } else {\n    if (sentryBuildOptions.widenClientFileUpload) {\n      sourcemapUploadAssets.push(path.posix.join(distDirAbsPath, 'static', 'chunks', '**'));\n    } else {\n      sourcemapUploadAssets.push(\n        path.posix.join(distDirAbsPath, 'static', 'chunks', 'pages', '**'),\n        path.posix.join(distDirAbsPath, 'static', 'chunks', 'app', '**'),\n      );\n    }\n\n    // We want to include main-* files if widenClientFileUpload is true as they have proven to be useful\n    if (!sentryBuildOptions.widenClientFileUpload) {\n      sourcemapUploadIgnore.push(path.posix.join(distDirAbsPath, 'static', 'chunks', 'main-*'));\n    }\n\n    // Always ignore framework, polyfills, and webpack files\n    sourcemapUploadIgnore.push(\n      path.posix.join(distDirAbsPath, 'static', 'chunks', 'framework-*'),\n      path.posix.join(distDirAbsPath, 'static', 'chunks', 'framework.*'),\n      path.posix.join(distDirAbsPath, 'static', 'chunks', 'polyfills-*'),\n      path.posix.join(distDirAbsPath, 'static', 'chunks', 'webpack-*'),\n    );\n  }\n\n  return {\n    authToken: sentryBuildOptions.authToken,\n    headers: sentryBuildOptions.headers,\n    org: sentryBuildOptions.org,\n    project: sentryBuildOptions.project,\n    telemetry: sentryBuildOptions.telemetry,\n    debug: sentryBuildOptions.debug,\n    errorHandler: sentryBuildOptions.errorHandler,\n    reactComponentAnnotation: {\n      ...sentryBuildOptions.reactComponentAnnotation,\n      ...sentryBuildOptions.unstable_sentryWebpackPluginOptions?.reactComponentAnnotation,\n    },\n    silent: sentryBuildOptions.silent,\n    url: sentryBuildOptions.sentryUrl,\n    sourcemaps: {\n      disable: sentryBuildOptions.sourcemaps?.disable,\n      rewriteSources(source) {\n        if (source.startsWith('webpack://_N_E/')) {\n          return source.replace('webpack://_N_E/', '');\n        } else if (source.startsWith('webpack://')) {\n          return source.replace('webpack://', '');\n        } else {\n          return source;\n        }\n      },\n      assets: sentryBuildOptions.sourcemaps?.assets ?? sourcemapUploadAssets,\n      ignore: sentryBuildOptions.sourcemaps?.ignore ?? sourcemapUploadIgnore,\n      filesToDeleteAfterUpload: sentryBuildOptions.sourcemaps?.deleteSourcemapsAfterUpload\n        ? [\n            // We only care to delete client bundle source maps because they would be the ones being served.\n            // Removing the server source maps crashes Vercel builds for (thus far) unknown reasons:\n            // https://github.com/getsentry/sentry-javascript/issues/13099\n            path.posix.join(distDirAbsPath, 'static', '**', '*.js.map'),\n            path.posix.join(distDirAbsPath, 'static', '**', '*.mjs.map'),\n            path.posix.join(distDirAbsPath, 'static', '**', '*.cjs.map'),\n          ]\n        : undefined,\n      ...sentryBuildOptions.unstable_sentryWebpackPluginOptions?.sourcemaps,\n    },\n    release:\n      releaseName !== undefined\n        ? {\n            inject: false, // The webpack plugin's release injection breaks the `app` directory - we inject the release manually with the value injection loader instead.\n            name: releaseName,\n            create: sentryBuildOptions.release?.create,\n            finalize: sentryBuildOptions.release?.finalize,\n            dist: sentryBuildOptions.release?.dist,\n            vcsRemote: sentryBuildOptions.release?.vcsRemote,\n            setCommits: sentryBuildOptions.release?.setCommits,\n            deploy: sentryBuildOptions.release?.deploy,\n            ...sentryBuildOptions.unstable_sentryWebpackPluginOptions?.release,\n          }\n        : {\n            inject: false,\n            create: false,\n            finalize: false,\n          },\n    bundleSizeOptimizations: {\n      ...sentryBuildOptions.bundleSizeOptimizations,\n    },\n    _metaOptions: {\n      loggerPrefixOverride: `[@sentry/nextjs - ${prefixInsert}]`,\n      telemetry: {\n        metaFramework: 'nextjs',\n      },\n    },\n    ...sentryBuildOptions.unstable_sentryWebpackPluginOptions,\n  };\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 138, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 142, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/config/webpack.ts"],"sourcesContent":["/* eslint-disable complexity */\n/* eslint-disable max-lines */\n\nimport { escapeStringForRegex, loadModule, logger, parseSemver } from '@sentry/core';\nimport * as chalk from 'chalk';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { sync as resolveSync } from 'resolve';\nimport type { VercelCronsConfig } from '../common/types';\n// Note: If you need to import a type from Webpack, do it in `types.ts` and export it from there. Otherwise, our\n// circular dependency check thinks this file is importing from itself. See https://github.com/pahen/madge/issues/306.\nimport type {\n  BuildContext,\n  EntryPropertyObject,\n  IgnoreWarningsOption,\n  NextConfigObject,\n  SentryBuildOptions,\n  WebpackConfigFunction,\n  WebpackConfigObject,\n  WebpackConfigObjectWithModuleRules,\n  WebpackEntryProperty,\n} from './types';\nimport { getNextjsVersion } from './util';\nimport { getWebpackPluginOptions } from './webpackPluginOptions';\n\n// Next.js runs webpack 3 times, once for the client, the server, and for edge. Because we don't want to print certain\n// warnings 3 times, we keep track of them here.\nlet showedMissingGlobalErrorWarningMsg = false;\n\n/**\n * Construct the function which will be used as the nextjs config's `webpack` value.\n *\n * Sets:\n *   - `devtool`, to ensure high-quality sourcemaps are generated\n *   - `entry`, to include user's sentry config files (where `Sentry.init` is called) in the build\n *   - `plugins`, to add SentryWebpackPlugin\n *\n * @param userNextConfig The user's existing nextjs config, as passed to `withSentryConfig`\n * @param userSentryOptions The user's SentryWebpackPlugin config, as passed to `withSentryConfig`\n * @returns The function to set as the nextjs config's `webpack` value\n */\nexport function constructWebpackConfigFunction(\n  userNextConfig: NextConfigObject = {},\n  userSentryOptions: SentryBuildOptions = {},\n  releaseName: string | undefined,\n): WebpackConfigFunction {\n  // Will be called by nextjs and passed its default webpack configuration and context data about the build (whether\n  // we're building server or client, whether we're in dev, what version of webpack we're using, etc). Note that\n  // `incomingConfig` and `buildContext` are referred to as `config` and `options` in the nextjs docs.\n  return function newWebpackFunction(\n    incomingConfig: WebpackConfigObject,\n    buildContext: BuildContext,\n  ): WebpackConfigObject {\n    const { isServer, dev: isDev, dir: projectDir } = buildContext;\n    const runtime = isServer ? (buildContext.nextRuntime === 'edge' ? 'edge' : 'server') : 'client';\n    // Default page extensions per https://github.com/vercel/next.js/blob/f1dbc9260d48c7995f6c52f8fbcc65f08e627992/packages/next/server/config-shared.ts#L161\n    const pageExtensions = userNextConfig.pageExtensions || ['tsx', 'ts', 'jsx', 'js'];\n    const dotPrefixedPageExtensions = pageExtensions.map(ext => `.${ext}`);\n    const pageExtensionRegex = pageExtensions.map(escapeStringForRegex).join('|');\n\n    // We add `.ts` and `.js` back in because `pageExtensions` might not be relevant to the instrumentation file\n    // e.g. user's setting `.mdx`. In that case we still want to default look up\n    // `instrumentation.ts` and `instrumentation.js`\n    const instrumentationFile = getInstrumentationFile(projectDir, dotPrefixedPageExtensions.concat(['.ts', '.js']));\n\n    if (runtime !== 'client') {\n      warnAboutDeprecatedConfigFiles(projectDir, instrumentationFile, runtime);\n    }\n    if (runtime === 'server') {\n      const nextJsVersion = getNextjsVersion();\n      const { major } = parseSemver(nextJsVersion || '');\n      // was added in v15 (https://github.com/vercel/next.js/pull/67539)\n      if (major && major >= 15) {\n        warnAboutMissingOnRequestErrorHandler(instrumentationFile);\n      }\n    }\n\n    let rawNewConfig = { ...incomingConfig };\n\n    // if user has custom webpack config (which always takes the form of a function), run it so we have actual values to\n    // work with\n    if ('webpack' in userNextConfig && typeof userNextConfig.webpack === 'function') {\n      rawNewConfig = userNextConfig.webpack(rawNewConfig, buildContext);\n    }\n\n    // This mutates `rawNewConfig` in place, but also returns it in order to switch its type to one in which\n    // `newConfig.module.rules` is required, so we don't have to keep asserting its existence\n    const newConfig = setUpModuleRules(rawNewConfig);\n\n    // Add a loader which will inject code that sets global values\n    addValueInjectionLoader(newConfig, userNextConfig, userSentryOptions, buildContext, releaseName);\n\n    addOtelWarningIgnoreRule(newConfig);\n\n    let pagesDirPath: string | undefined;\n    const maybePagesDirPath = path.join(projectDir, 'pages');\n    const maybeSrcPagesDirPath = path.join(projectDir, 'src', 'pages');\n    if (fs.existsSync(maybePagesDirPath) && fs.lstatSync(maybePagesDirPath).isDirectory()) {\n      pagesDirPath = maybePagesDirPath;\n    } else if (fs.existsSync(maybeSrcPagesDirPath) && fs.lstatSync(maybeSrcPagesDirPath).isDirectory()) {\n      pagesDirPath = maybeSrcPagesDirPath;\n    }\n\n    let appDirPath: string | undefined;\n    const maybeAppDirPath = path.join(projectDir, 'app');\n    const maybeSrcAppDirPath = path.join(projectDir, 'src', 'app');\n    if (fs.existsSync(maybeAppDirPath) && fs.lstatSync(maybeAppDirPath).isDirectory()) {\n      appDirPath = maybeAppDirPath;\n    } else if (fs.existsSync(maybeSrcAppDirPath) && fs.lstatSync(maybeSrcAppDirPath).isDirectory()) {\n      appDirPath = maybeSrcAppDirPath;\n    }\n\n    const apiRoutesPath = pagesDirPath ? path.join(pagesDirPath, 'api') : undefined;\n\n    const middlewareLocationFolder = pagesDirPath\n      ? path.join(pagesDirPath, '..')\n      : appDirPath\n        ? path.join(appDirPath, '..')\n        : projectDir;\n\n    const staticWrappingLoaderOptions = {\n      appDir: appDirPath,\n      pagesDir: pagesDirPath,\n      pageExtensionRegex,\n      excludeServerRoutes: userSentryOptions.excludeServerRoutes,\n      nextjsRequestAsyncStorageModulePath: getRequestAsyncStorageModuleLocation(\n        projectDir,\n        rawNewConfig.resolve?.modules,\n      ),\n    };\n\n    const normalizeLoaderResourcePath = (resourcePath: string): string => {\n      // `resourcePath` may be an absolute path or a path relative to the context of the webpack config\n      let absoluteResourcePath: string;\n      if (path.isAbsolute(resourcePath)) {\n        absoluteResourcePath = resourcePath;\n      } else {\n        absoluteResourcePath = path.join(projectDir, resourcePath);\n      }\n\n      return path.normalize(absoluteResourcePath);\n    };\n\n    const isPageResource = (resourcePath: string): boolean => {\n      const normalizedAbsoluteResourcePath = normalizeLoaderResourcePath(resourcePath);\n      return (\n        pagesDirPath !== undefined &&\n        normalizedAbsoluteResourcePath.startsWith(pagesDirPath + path.sep) &&\n        !normalizedAbsoluteResourcePath.startsWith(apiRoutesPath + path.sep) &&\n        dotPrefixedPageExtensions.some(ext => normalizedAbsoluteResourcePath.endsWith(ext))\n      );\n    };\n\n    const isApiRouteResource = (resourcePath: string): boolean => {\n      const normalizedAbsoluteResourcePath = normalizeLoaderResourcePath(resourcePath);\n      return (\n        normalizedAbsoluteResourcePath.startsWith(apiRoutesPath + path.sep) &&\n        dotPrefixedPageExtensions.some(ext => normalizedAbsoluteResourcePath.endsWith(ext))\n      );\n    };\n\n    const possibleMiddlewareLocations = pageExtensions.map(middlewareFileEnding => {\n      return path.join(middlewareLocationFolder, `middleware.${middlewareFileEnding}`);\n    });\n    const isMiddlewareResource = (resourcePath: string): boolean => {\n      const normalizedAbsoluteResourcePath = normalizeLoaderResourcePath(resourcePath);\n      return possibleMiddlewareLocations.includes(normalizedAbsoluteResourcePath);\n    };\n\n    const isServerComponentResource = (resourcePath: string): boolean => {\n      const normalizedAbsoluteResourcePath = normalizeLoaderResourcePath(resourcePath);\n\n      // \".js, .jsx, or .tsx file extensions can be used for Pages\"\n      // https://beta.nextjs.org/docs/routing/pages-and-layouts#pages:~:text=.js%2C%20.jsx%2C%20or%20.tsx%20file%20extensions%20can%20be%20used%20for%20Pages.\n      return (\n        appDirPath !== undefined &&\n        normalizedAbsoluteResourcePath.startsWith(appDirPath + path.sep) &&\n        !!normalizedAbsoluteResourcePath.match(\n          // eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor\n          new RegExp(`[\\\\\\\\/](page|layout|loading|head|not-found)\\\\.(${pageExtensionRegex})$`),\n        )\n      );\n    };\n\n    const isRouteHandlerResource = (resourcePath: string): boolean => {\n      const normalizedAbsoluteResourcePath = normalizeLoaderResourcePath(resourcePath);\n      return (\n        appDirPath !== undefined &&\n        normalizedAbsoluteResourcePath.startsWith(appDirPath + path.sep) &&\n        !!normalizedAbsoluteResourcePath.match(\n          // eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor\n          new RegExp(`[\\\\\\\\/]route\\\\.(${pageExtensionRegex})$`),\n        )\n      );\n    };\n\n    if (isServer && userSentryOptions.autoInstrumentServerFunctions !== false) {\n      // It is very important that we insert our loaders at the beginning of the array because we expect any sort of transformations/transpilations (e.g. TS -> JS) to already have happened.\n\n      // Wrap pages\n      newConfig.module.rules.unshift({\n        test: isPageResource,\n        use: [\n          {\n            loader: path.resolve(__dirname, 'loaders', 'wrappingLoader.js'),\n            options: {\n              ...staticWrappingLoaderOptions,\n              wrappingTargetKind: 'page',\n            },\n          },\n        ],\n      });\n\n      let vercelCronsConfig: VercelCronsConfig = undefined;\n      try {\n        if (process.env.VERCEL && userSentryOptions.automaticVercelMonitors) {\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n          vercelCronsConfig = JSON.parse(fs.readFileSync(path.join(process.cwd(), 'vercel.json'), 'utf8')).crons;\n          if (vercelCronsConfig) {\n            logger.info(\n              `${chalk.cyan(\n                'info',\n              )} - Creating Sentry cron monitors for your Vercel Cron Jobs. You can disable this feature by setting the ${chalk.bold.cyan(\n                'automaticVercelMonitors',\n              )} option to false in you Next.js config.`,\n            );\n          }\n        }\n      } catch (e) {\n        if ((e as { code: string }).code === 'ENOENT') {\n          // noop if file does not exist\n        } else {\n          // log but noop\n          logger.error(\n            `${chalk.red(\n              'error',\n            )} - Sentry failed to read vercel.json for automatic cron job monitoring instrumentation`,\n            e,\n          );\n        }\n      }\n\n      // Wrap api routes\n      newConfig.module.rules.unshift({\n        test: isApiRouteResource,\n        use: [\n          {\n            loader: path.resolve(__dirname, 'loaders', 'wrappingLoader.js'),\n            options: {\n              ...staticWrappingLoaderOptions,\n              vercelCronsConfig,\n              wrappingTargetKind: 'api-route',\n            },\n          },\n        ],\n      });\n\n      // Wrap middleware\n      if (userSentryOptions.autoInstrumentMiddleware ?? true) {\n        newConfig.module.rules.unshift({\n          test: isMiddlewareResource,\n          use: [\n            {\n              loader: path.resolve(__dirname, 'loaders', 'wrappingLoader.js'),\n              options: {\n                ...staticWrappingLoaderOptions,\n                wrappingTargetKind: 'middleware',\n              },\n            },\n          ],\n        });\n      }\n    }\n\n    if (isServer && userSentryOptions.autoInstrumentAppDirectory !== false) {\n      // Wrap server components\n      newConfig.module.rules.unshift({\n        test: isServerComponentResource,\n        use: [\n          {\n            loader: path.resolve(__dirname, 'loaders', 'wrappingLoader.js'),\n            options: {\n              ...staticWrappingLoaderOptions,\n              wrappingTargetKind: 'server-component',\n            },\n          },\n        ],\n      });\n\n      // Wrap route handlers\n      newConfig.module.rules.unshift({\n        test: isRouteHandlerResource,\n        use: [\n          {\n            loader: path.resolve(__dirname, 'loaders', 'wrappingLoader.js'),\n            options: {\n              ...staticWrappingLoaderOptions,\n              wrappingTargetKind: 'route-handler',\n            },\n          },\n        ],\n      });\n    }\n\n    if (appDirPath) {\n      const hasGlobalErrorFile = pageExtensions\n        .map(extension => `global-error.${extension}`)\n        .some(\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          globalErrorFile => fs.existsSync(path.join(appDirPath!, globalErrorFile)),\n        );\n\n      if (\n        !hasGlobalErrorFile &&\n        !showedMissingGlobalErrorWarningMsg &&\n        !process.env.SENTRY_SUPPRESS_GLOBAL_ERROR_HANDLER_FILE_WARNING\n      ) {\n        // eslint-disable-next-line no-console\n        console.log(\n          `${chalk.yellow(\n            'warn',\n          )}  - It seems like you don't have a global error handler set up. It is recommended that you add a ${chalk.cyan(\n            'global-error.js',\n          )} file with Sentry instrumentation so that React rendering errors are reported to Sentry. Read more: https://docs.sentry.io/platforms/javascript/guides/nextjs/manual-setup/#react-render-errors-in-app-router (you can suppress this warning by setting SENTRY_SUPPRESS_GLOBAL_ERROR_HANDLER_FILE_WARNING=1 as environment variable)`,\n        );\n        showedMissingGlobalErrorWarningMsg = true;\n      }\n    }\n\n    if (!isServer) {\n      // Tell webpack to inject the client config files (containing the client-side `Sentry.init()` call) into the appropriate output\n      // bundles. Store a separate reference to the original `entry` value to avoid an infinite loop. (If we don't do\n      // this, we'll have a statement of the form `x.y = () => f(x.y)`, where one of the things `f` does is call `x.y`.\n      // Since we're setting `x.y` to be a callback (which, by definition, won't run until some time later), by the time\n      // the function runs (causing `f` to run, causing `x.y` to run), `x.y` will point to the callback itself, rather\n      // than its original value. So calling it will call the callback which will call `f` which will call `x.y` which\n      // will call the callback which will call `f` which will call `x.y`... and on and on. Theoretically this could also\n      // be fixed by using `bind`, but this is way simpler.)\n      const origEntryProperty = newConfig.entry;\n      newConfig.entry = async () => addSentryToClientEntryProperty(origEntryProperty, buildContext);\n\n      const clientSentryConfigFileName = getClientSentryConfigFile(projectDir);\n      if (clientSentryConfigFileName) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `[@sentry/nextjs] DEPRECATION WARNING: It is recommended renaming your \\`${clientSentryConfigFileName}\\` file, or moving its content to \\`instrumentation-client.ts\\`. When using Turbopack \\`${clientSentryConfigFileName}\\` will no longer work. Read more about the \\`instrumentation-client.ts\\` file: https://nextjs.org/docs/app/api-reference/file-conventions/instrumentation-client`,\n        );\n      }\n    }\n\n    const isStaticExport = userNextConfig?.output === 'export';\n\n    // We don't want to do any webpack plugin stuff OR any source maps stuff in dev mode or for the server on static-only builds.\n    // Symbolication for dev-mode errors is done elsewhere.\n    if (!(isDev || (isStaticExport && isServer))) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const { sentryWebpackPlugin } = loadModule<{ sentryWebpackPlugin: any }>('@sentry/webpack-plugin', module) ?? {};\n\n      if (sentryWebpackPlugin) {\n        if (!userSentryOptions.sourcemaps?.disable) {\n          // Source maps can be configured in 3 ways:\n          // 1. (next config): productionBrowserSourceMaps\n          // 2. (next config): experimental.serverSourceMaps\n          // 3. custom webpack configuration\n          //\n          // We only update this if no explicit value is set\n          // (Next.js defaults to `false`: https://github.com/vercel/next.js/blob/5f4f96c133bd6b10954812cc2fef6af085b82aa5/packages/next/src/build/webpack/config/blocks/base.ts#L61)\n          if (!newConfig.devtool) {\n            logger.info(`[@sentry/nextjs] Automatically enabling source map generation for ${runtime} build.`);\n            // `hidden-source-map` produces the same sourcemaps as `source-map`, but doesn't include the `sourceMappingURL`\n            // comment at the bottom. For folks who aren't publicly hosting their sourcemaps, this is helpful because then\n            // the browser won't look for them and throw errors into the console when it can't find them. Because this is a\n            // front-end-only problem, and because `sentry-cli` handles sourcemaps more reliably with the comment than\n            // without, the option to use `hidden-source-map` only applies to the client-side build.\n            if (isServer) {\n              newConfig.devtool = 'source-map';\n            } else {\n              newConfig.devtool = 'hidden-source-map';\n            }\n          }\n\n          // enable source map deletion if not explicitly disabled\n          if (!isServer && userSentryOptions.sourcemaps?.deleteSourcemapsAfterUpload === undefined) {\n            logger.warn(\n              '[@sentry/nextjs] Source maps will be automatically deleted after being uploaded to Sentry. If you want to keep the source maps, set the `sourcemaps.deleteSourcemapsAfterUpload` option to false in `withSentryConfig()`. If you do not want to generate and upload sourcemaps at all, set the `sourcemaps.disable` option to true.',\n            );\n            userSentryOptions.sourcemaps = {\n              ...userSentryOptions.sourcemaps,\n              deleteSourcemapsAfterUpload: true,\n            };\n          }\n        }\n\n        newConfig.plugins = newConfig.plugins || [];\n        const sentryWebpackPluginInstance = sentryWebpackPlugin(\n          getWebpackPluginOptions(buildContext, userSentryOptions, releaseName),\n        );\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        sentryWebpackPluginInstance._name = 'sentry-webpack-plugin'; // For tests and debugging. Serves no other purpose.\n        newConfig.plugins.push(sentryWebpackPluginInstance);\n      }\n    }\n\n    if (userSentryOptions.disableLogger) {\n      newConfig.plugins = newConfig.plugins || [];\n      newConfig.plugins.push(\n        new buildContext.webpack.DefinePlugin({\n          __SENTRY_DEBUG__: false,\n        }),\n      );\n    }\n\n    // We inject a map of dependencies that the nextjs app has, as we cannot reliably extract them at runtime, sadly\n    newConfig.plugins = newConfig.plugins || [];\n    newConfig.plugins.push(\n      new buildContext.webpack.DefinePlugin({\n        __SENTRY_SERVER_MODULES__: JSON.stringify(_getModules(projectDir)),\n      }),\n    );\n\n    return newConfig;\n  };\n}\n\n/**\n * Modify the webpack `entry` property so that the code in `sentry.client.config.js` is\n * included in the the necessary bundles.\n *\n * @param currentEntryProperty The value of the property before Sentry code has been injected\n * @param buildContext Object passed by nextjs containing metadata about the build\n * @returns The value which the new `entry` property (which will be a function) will return (TODO: this should return\n * the function, rather than the function's return value)\n */\nasync function addSentryToClientEntryProperty(\n  currentEntryProperty: WebpackEntryProperty,\n  buildContext: BuildContext,\n): Promise<EntryPropertyObject> {\n  // The `entry` entry in a webpack config can be a string, array of strings, object, or function. By default, nextjs\n  // sets it to an async function which returns the promise of an object of string arrays. Because we don't know whether\n  // someone else has come along before us and changed that, we need to check a few things along the way. The one thing\n  // we know is that it won't have gotten *simpler* in form, so we only need to worry about the object and function\n  // options. See https://webpack.js.org/configuration/entry-context/#entry.\n\n  const { dir: projectDir, dev: isDevMode } = buildContext;\n\n  const newEntryProperty =\n    typeof currentEntryProperty === 'function' ? await currentEntryProperty() : { ...currentEntryProperty };\n\n  const clientSentryConfigFileName = getClientSentryConfigFile(projectDir);\n  const instrumentationClientFileName = getInstrumentationClientFile(projectDir);\n\n  const filesToInject = [];\n  if (clientSentryConfigFileName) {\n    // we need to turn the filename into a path so webpack can find it\n    filesToInject.push(`./${clientSentryConfigFileName}`);\n  }\n  if (instrumentationClientFileName) {\n    // we need to turn the filename into a path so webpack can find it\n    filesToInject.push(`./${instrumentationClientFileName}`);\n  }\n\n  // inject into all entry points which might contain user's code\n  for (const entryPointName in newEntryProperty) {\n    if (\n      entryPointName === 'pages/_app' ||\n      // entrypoint for `/app` pages\n      entryPointName === 'main-app'\n    ) {\n      addFilesToWebpackEntryPoint(newEntryProperty, entryPointName, filesToInject, isDevMode);\n    }\n  }\n\n  return newEntryProperty;\n}\n\n/**\n * Gets the content of the user's instrumentation file\n */\nfunction getInstrumentationFile(projectDir: string, dotPrefixedExtensions: string[]): string | null {\n  const paths = dotPrefixedExtensions.flatMap(extension => [\n    ['src', `instrumentation${extension}`],\n    [`instrumentation${extension}`],\n  ]);\n\n  for (const pathSegments of paths) {\n    try {\n      return fs.readFileSync(path.resolve(projectDir, ...pathSegments), { encoding: 'utf-8' });\n    } catch (e) {\n      // no-op\n    }\n  }\n\n  return null;\n}\n\n/**\n * Make sure the instrumentation file has a `onRequestError` Handler\n */\nfunction warnAboutMissingOnRequestErrorHandler(instrumentationFile: string | null): void {\n  if (!instrumentationFile) {\n    if (!process.env.SENTRY_SUPPRESS_INSTRUMENTATION_FILE_WARNING) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        chalk.yellow(\n          '[@sentry/nextjs] Could not find a Next.js instrumentation file. This indicates an incomplete configuration of the Sentry SDK. An instrumentation file is required for the Sentry SDK to be initialized on the server: https://docs.sentry.io/platforms/javascript/guides/nextjs/manual-setup/#create-initialization-config-files (you can suppress this warning by setting SENTRY_SUPPRESS_INSTRUMENTATION_FILE_WARNING=1 as environment variable)',\n        ),\n      );\n    }\n    return;\n  }\n\n  if (!instrumentationFile.includes('onRequestError')) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      chalk.yellow(\n        '[@sentry/nextjs] Could not find `onRequestError` hook in instrumentation file. This indicates outdated configuration of the Sentry SDK. Use `Sentry.captureRequestError` to instrument the `onRequestError` hook: https://docs.sentry.io/platforms/javascript/guides/nextjs/manual-setup/#errors-from-nested-react-server-components',\n      ),\n    );\n  }\n}\n\n/**\n * Searches for old `sentry.(server|edge).config.ts` files and Next.js instrumentation hooks and warns if there are \"old\"\n * config files and no signs of them inside the instrumentation hook.\n *\n * @param projectDir The root directory of the project, where config files would be located\n * @param platform Either \"server\" or \"edge\", so that we know which file to look for\n */\nfunction warnAboutDeprecatedConfigFiles(\n  projectDir: string,\n  instrumentationFile: string | null,\n  platform: 'server' | 'edge',\n): void {\n  const hasInstrumentationHookWithIndicationsOfSentry =\n    instrumentationFile &&\n    (instrumentationFile.includes('@sentry/') ||\n      instrumentationFile.match(/sentry\\.(server|edge)\\.config(\\.(ts|js))?/));\n\n  if (hasInstrumentationHookWithIndicationsOfSentry) {\n    return;\n  }\n\n  for (const filename of [`sentry.${platform}.config.ts`, `sentry.${platform}.config.js`]) {\n    if (fs.existsSync(path.resolve(projectDir, filename))) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `[@sentry/nextjs] It appears you've configured a \\`${filename}\\` file. Please ensure to put this file's content into the \\`register()\\` function of a Next.js instrumentation file instead. To ensure correct functionality of the SDK, \\`Sentry.init\\` must be called inside of an instrumentation file. Learn more about setting up an instrumentation file in Next.js: https://nextjs.org/docs/app/building-your-application/optimizing/instrumentation. You can safely delete the \\`${filename}\\` file afterward.`,\n      );\n    }\n  }\n}\n\n/**\n * Searches for a `sentry.client.config.ts|js` file and returns its file name if it finds one. (ts being prioritized)\n *\n * @param projectDir The root directory of the project, where config files would be located\n */\nfunction getClientSentryConfigFile(projectDir: string): string | void {\n  const possibilities = ['sentry.client.config.ts', 'sentry.client.config.js'];\n\n  for (const filename of possibilities) {\n    if (fs.existsSync(path.resolve(projectDir, filename))) {\n      return filename;\n    }\n  }\n}\n\n/**\n * Searches for a `instrumentation-client.ts|js` file and returns its file name if it finds one. (ts being prioritized)\n *\n * @param projectDir The root directory of the project, where config files would be located\n */\nfunction getInstrumentationClientFile(projectDir: string): string | void {\n  const possibilities = [\n    ['src', 'instrumentation-client.js'],\n    ['src', 'instrumentation-client.ts'],\n    ['instrumentation-client.js'],\n    ['instrumentation-client.ts'],\n  ];\n\n  for (const pathParts of possibilities) {\n    if (fs.existsSync(path.resolve(projectDir, ...pathParts))) {\n      return path.join(...pathParts);\n    }\n  }\n}\n\n/**\n * Add files to a specific element of the given `entry` webpack config property.\n *\n * @param entryProperty The existing `entry` config object\n * @param entryPointName The key where the file should be injected\n * @param filesToInsert An array of paths to the injected files\n */\nfunction addFilesToWebpackEntryPoint(\n  entryProperty: EntryPropertyObject,\n  entryPointName: string,\n  filesToInsert: string[],\n  isDevMode: boolean,\n): void {\n  // BIG FAT NOTE: Order of insertion seems to matter here. If we insert the new files before the `currentEntrypoint`s,\n  // the Next.js dev server breaks. Because we generally still want the SDK to be initialized as early as possible we\n  // still keep it at the start of the entrypoints if we are not in dev mode.\n\n  // can be a string, array of strings, or object whose `import` property is one of those two\n  const currentEntryPoint = entryProperty[entryPointName];\n  let newEntryPoint = currentEntryPoint;\n\n  if (typeof currentEntryPoint === 'string' || Array.isArray(currentEntryPoint)) {\n    newEntryPoint = Array.isArray(currentEntryPoint) ? currentEntryPoint : [currentEntryPoint];\n    if (newEntryPoint.some(entry => filesToInsert.includes(entry))) {\n      return;\n    }\n\n    if (isDevMode) {\n      // Inserting at beginning breaks dev mode so we insert at the end\n      newEntryPoint.push(...filesToInsert);\n    } else {\n      // In other modes we insert at the beginning so that the SDK initializes as early as possible\n      newEntryPoint.unshift(...filesToInsert);\n    }\n  }\n  // descriptor object (webpack 5+)\n  else if (typeof currentEntryPoint === 'object' && 'import' in currentEntryPoint) {\n    const currentImportValue = currentEntryPoint.import;\n    const newImportValue = Array.isArray(currentImportValue) ? currentImportValue : [currentImportValue];\n    if (newImportValue.some(entry => filesToInsert.includes(entry))) {\n      return;\n    }\n\n    if (isDevMode) {\n      // Inserting at beginning breaks dev mode so we insert at the end\n      newImportValue.push(...filesToInsert);\n    } else {\n      // In other modes we insert at the beginning so that the SDK initializes as early as possible\n      newImportValue.unshift(...filesToInsert);\n    }\n\n    newEntryPoint = {\n      ...currentEntryPoint,\n      import: newImportValue,\n    };\n  }\n  // malformed entry point (use `console.error` rather than `logger.error` because it will always be printed, regardless\n  // of SDK settings)\n  else {\n    // eslint-disable-next-line no-console\n    console.error(\n      'Sentry Logger [Error]:',\n      `Could not inject SDK initialization code into entry point ${entryPointName}, as its current value is not in a recognized format.\\n`,\n      'Expected: string | Array<string> | { [key:string]: any, import: string | Array<string> }\\n',\n      `Got: ${currentEntryPoint}`,\n    );\n  }\n\n  if (newEntryPoint) {\n    entryProperty[entryPointName] = newEntryPoint;\n  }\n}\n\n/**\n * Ensure that `newConfig.module.rules` exists. Modifies the given config in place but also returns it in order to\n * change its type.\n *\n * @param newConfig A webpack config object which may or may not contain `module` and `module.rules`\n * @returns The same object, with an empty `module.rules` array added if necessary\n */\nfunction setUpModuleRules(newConfig: WebpackConfigObject): WebpackConfigObjectWithModuleRules {\n  newConfig.module = {\n    ...newConfig.module,\n    rules: [...(newConfig.module?.rules || [])],\n  };\n  // Surprising that we have to assert the type here, since we've demonstrably guaranteed the existence of\n  // `newConfig.module.rules` just above, but ¯\\_(ツ)_/¯\n  return newConfig as WebpackConfigObjectWithModuleRules;\n}\n\n/**\n * Adds loaders to inject values on the global object based on user configuration.\n */\n// TODO: Remove this loader and replace it with a nextConfig.env (https://web.archive.org/web/20240917153554/https://nextjs.org/docs/app/api-reference/next-config-js/env) or define based (https://github.com/vercel/next.js/discussions/71476) approach.\n// In order to remove this loader though we need to make sure the minimum supported Next.js version includes this PR (https://github.com/vercel/next.js/pull/61194), otherwise the nextConfig.env based approach will not work, as our SDK code is not processed by Next.js.\nfunction addValueInjectionLoader(\n  newConfig: WebpackConfigObjectWithModuleRules,\n  userNextConfig: NextConfigObject,\n  userSentryOptions: SentryBuildOptions,\n  buildContext: BuildContext,\n  releaseName: string | undefined,\n): void {\n  const assetPrefix = userNextConfig.assetPrefix || userNextConfig.basePath || '';\n\n  // Check if release creation is disabled to prevent injection that breaks build determinism\n  const shouldCreateRelease = userSentryOptions.release?.create !== false;\n  const releaseToInject = releaseName && shouldCreateRelease ? releaseName : undefined;\n\n  const isomorphicValues = {\n    // `rewritesTunnel` set by the user in Next.js config\n    _sentryRewritesTunnelPath:\n      userSentryOptions.tunnelRoute !== undefined &&\n      userNextConfig.output !== 'export' &&\n      typeof userSentryOptions.tunnelRoute === 'string'\n        ? `${userNextConfig.basePath ?? ''}${userSentryOptions.tunnelRoute}`\n        : undefined,\n\n    // The webpack plugin's release injection breaks the `app` directory so we inject the release manually here instead.\n    // Having a release defined in dev-mode spams releases in Sentry so we only set one in non-dev mode\n    // Only inject if release creation is not explicitly disabled (to maintain build determinism)\n    SENTRY_RELEASE: releaseToInject && !buildContext.dev ? { id: releaseToInject } : undefined,\n    _sentryBasePath: buildContext.dev ? userNextConfig.basePath : undefined,\n  };\n\n  const serverValues = {\n    ...isomorphicValues,\n    // Make sure that if we have a windows path, the backslashes are interpreted as such (rather than as escape\n    // characters)\n    _sentryRewriteFramesDistDir: userNextConfig.distDir?.replace(/\\\\/g, '\\\\\\\\') || '.next',\n  };\n\n  const clientValues = {\n    ...isomorphicValues,\n    // Get the path part of `assetPrefix`, minus any trailing slash. (We use a placeholder for the origin if\n    // `assetPrefix` doesn't include one. Since we only care about the path, it doesn't matter what it is.)\n    _sentryRewriteFramesAssetPrefixPath: assetPrefix\n      ? new URL(assetPrefix, 'http://dogs.are.great').pathname.replace(/\\/$/, '')\n      : '',\n    _sentryAssetPrefix: userNextConfig.assetPrefix,\n    _sentryExperimentalThirdPartyOriginStackFrames: userSentryOptions._experimental?.thirdPartyOriginStackFrames\n      ? 'true'\n      : undefined,\n  };\n\n  if (buildContext.isServer) {\n    newConfig.module.rules.push({\n      // TODO: Find a more bulletproof way of matching. For now this is fine and doesn't hurt anyone. It merely sets some globals.\n      test: /(src[\\\\/])?instrumentation.(js|ts)/,\n      use: [\n        {\n          loader: path.resolve(__dirname, 'loaders/valueInjectionLoader.js'),\n          options: {\n            values: serverValues,\n          },\n        },\n      ],\n    });\n  } else {\n    newConfig.module.rules.push({\n      test: /(?:sentry\\.client\\.config\\.(jsx?|tsx?)|(?:src[\\\\/])?instrumentation-client\\.(js|ts))$/,\n      use: [\n        {\n          loader: path.resolve(__dirname, 'loaders/valueInjectionLoader.js'),\n          options: {\n            values: clientValues,\n          },\n        },\n      ],\n    });\n  }\n}\n\nfunction resolveNextPackageDirFromDirectory(basedir: string): string | undefined {\n  try {\n    return path.dirname(resolveSync('next/package.json', { basedir }));\n  } catch {\n    // Should not happen in theory\n    return undefined;\n  }\n}\n\nconst POTENTIAL_REQUEST_ASYNC_STORAGE_LOCATIONS = [\n  // Original location of RequestAsyncStorage\n  // https://github.com/vercel/next.js/blob/46151dd68b417e7850146d00354f89930d10b43b/packages/next/src/client/components/request-async-storage.ts\n  'next/dist/client/components/request-async-storage.js',\n  // Introduced in Next.js 13.4.20\n  // https://github.com/vercel/next.js/blob/e1bc270830f2fc2df3542d4ef4c61b916c802df3/packages/next/src/client/components/request-async-storage.external.ts\n  'next/dist/client/components/request-async-storage.external.js',\n  // Introduced in Next.js 15.0.0-canary.180\n  // https://github.com/vercel/next.js/blob/541167b9b0fed6af9f36472e632863ffec41f18c/packages/next/src/server/app-render/work-unit-async-storage.external.ts\n  'next/dist/server/app-render/work-unit-async-storage.external.js',\n  // Introduced in Next.js 15.0.0-canary.182\n  // https://github.com/vercel/next.js/blob/f35159e5e80138ca7373f57b47edcaae3bcf1728/packages/next/src/client/components/work-unit-async-storage.external.ts\n  'next/dist/client/components/work-unit-async-storage.external.js',\n];\n\nfunction getRequestAsyncStorageModuleLocation(\n  webpackContextDir: string,\n  webpackResolvableModuleLocations: string[] | undefined,\n): string | undefined {\n  if (webpackResolvableModuleLocations === undefined) {\n    return undefined;\n  }\n\n  const absoluteWebpackResolvableModuleLocations = webpackResolvableModuleLocations.map(loc =>\n    path.resolve(webpackContextDir, loc),\n  );\n\n  for (const webpackResolvableLocation of absoluteWebpackResolvableModuleLocations) {\n    const nextPackageDir = resolveNextPackageDirFromDirectory(webpackResolvableLocation);\n    if (nextPackageDir) {\n      const asyncLocalStorageLocation = POTENTIAL_REQUEST_ASYNC_STORAGE_LOCATIONS.find(loc =>\n        fs.existsSync(path.join(nextPackageDir, '..', loc)),\n      );\n      if (asyncLocalStorageLocation) {\n        return asyncLocalStorageLocation;\n      }\n    }\n  }\n\n  return undefined;\n}\n\nfunction addOtelWarningIgnoreRule(newConfig: WebpackConfigObjectWithModuleRules): void {\n  const ignoreRules = [\n    // Inspired by @matmannion: https://github.com/getsentry/sentry-javascript/issues/12077#issuecomment-2180307072\n    (warning, compilation) => {\n      // This is wrapped in try-catch because we are vendoring types for this hook and we can't be 100% sure that we are accessing API that is there\n      try {\n        if (!warning.module) {\n          return false;\n        }\n\n        const isDependencyThatMayRaiseCriticalDependencyMessage =\n          /@opentelemetry\\/instrumentation/.test(warning.module.readableIdentifier(compilation.requestShortener)) ||\n          /@prisma\\/instrumentation/.test(warning.module.readableIdentifier(compilation.requestShortener));\n        const isCriticalDependencyMessage = /Critical dependency/.test(warning.message);\n\n        return isDependencyThatMayRaiseCriticalDependencyMessage && isCriticalDependencyMessage;\n      } catch {\n        return false;\n      }\n    },\n    // We provide these objects in addition to the hook above to provide redundancy in case the hook fails.\n    { module: /@opentelemetry\\/instrumentation/, message: /Critical dependency/ },\n    { module: /@prisma\\/instrumentation/, message: /Critical dependency/ },\n    { module: /require-in-the-middle/, message: /Critical dependency/ },\n  ] satisfies IgnoreWarningsOption;\n\n  if (newConfig.ignoreWarnings === undefined) {\n    newConfig.ignoreWarnings = ignoreRules;\n  } else if (Array.isArray(newConfig.ignoreWarnings)) {\n    newConfig.ignoreWarnings.push(...ignoreRules);\n  }\n}\n\nfunction _getModules(projectDir: string): Record<string, string> {\n  try {\n    const packageJson = path.join(projectDir, 'package.json');\n    const packageJsonContent = fs.readFileSync(packageJson, 'utf8');\n    const packageJsonObject = JSON.parse(packageJsonContent) as {\n      dependencies?: Record<string, string>;\n      devDependencies?: Record<string, string>;\n    };\n\n    return {\n      ...packageJsonObject.dependencies,\n      ...packageJsonObject.devDependencies,\n    };\n  } catch {\n    return {};\n  }\n}\n"],"names":["escapeStringForRegex","getNextjsVersion","parseSemver","logger","loadModule","getWebpackPluginOptions","resolveSync"],"mappings":"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"}},
    {"offset": {"line": 810, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 814, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/config/withSentryConfig.ts"],"sourcesContent":["/* eslint-disable max-lines */\n/* eslint-disable complexity */\nimport { isThenable, parseSemver } from '@sentry/core';\nimport { getSentryRelease } from '@sentry/node';\nimport * as childProcess from 'child_process';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport type {\n  ExportedNextConfig as NextConfig,\n  NextConfigFunction,\n  NextConfigObject,\n  SentryBuildOptions,\n} from './types';\nimport { getNextjsVersion } from './util';\nimport { constructWebpackConfigFunction } from './webpack';\n\nlet showedExportModeTunnelWarning = false;\nlet showedExperimentalBuildModeWarning = false;\n\n// Packages we auto-instrument need to be external for instrumentation to work\n// Next.js externalizes some packages by default, see: https://nextjs.org/docs/app/api-reference/config/next-config-js/serverExternalPackages\n// Others we need to add ourselves\n//\n// NOTE: 'ai' (Vercel AI SDK) is intentionally NOT included in this list.\n// When externalized, Next.js doesn't properly handle the package's conditional exports,\n// specifically the \"react-server\" export condition. This causes client-side code to be\n// loaded in server components instead of the appropriate server-side functions.\nexport const DEFAULT_SERVER_EXTERNAL_PACKAGES = [\n  'amqplib',\n  'connect',\n  'dataloader',\n  'express',\n  'generic-pool',\n  'graphql',\n  '@hapi/hapi',\n  'ioredis',\n  'kafkajs',\n  'koa',\n  'lru-memoizer',\n  'mongodb',\n  'mongoose',\n  'mysql',\n  'mysql2',\n  'knex',\n  'pg',\n  'pg-pool',\n  '@node-redis/client',\n  '@redis/client',\n  'redis',\n  'tedious',\n];\n\n/**\n * Modifies the passed in Next.js configuration with automatic build-time instrumentation and source map upload.\n *\n * @param nextConfig A Next.js configuration object, as usually exported in `next.config.js` or `next.config.mjs`.\n * @param sentryBuildOptions Additional options to configure instrumentation and\n * @returns The modified config to be exported\n */\nexport function withSentryConfig<C>(nextConfig?: C, sentryBuildOptions: SentryBuildOptions = {}): C {\n  const castNextConfig = (nextConfig as NextConfig) || {};\n  if (typeof castNextConfig === 'function') {\n    return function (this: unknown, ...webpackConfigFunctionArgs: unknown[]): ReturnType<NextConfigFunction> {\n      const maybePromiseNextConfig: ReturnType<typeof castNextConfig> = castNextConfig.apply(\n        this,\n        webpackConfigFunctionArgs,\n      );\n\n      if (isThenable(maybePromiseNextConfig)) {\n        return maybePromiseNextConfig.then(promiseResultNextConfig => {\n          return getFinalConfigObject(promiseResultNextConfig, sentryBuildOptions);\n        });\n      }\n\n      return getFinalConfigObject(maybePromiseNextConfig, sentryBuildOptions);\n    } as C;\n  } else {\n    return getFinalConfigObject(castNextConfig, sentryBuildOptions) as C;\n  }\n}\n\n/**\n * Generates a random tunnel route path that's less likely to be blocked by ad-blockers\n */\nfunction generateRandomTunnelRoute(): string {\n  // Generate a random 8-character alphanumeric string\n  const randomString = Math.random().toString(36).substring(2, 10);\n  return `/${randomString}`;\n}\n\n// Modify the materialized object form of the user's next config by deleting the `sentry` property and wrapping the\n// `webpack` property\nfunction getFinalConfigObject(\n  incomingUserNextConfigObject: NextConfigObject,\n  userSentryOptions: SentryBuildOptions,\n): NextConfigObject {\n  // Only determine a release name if release creation is not explicitly disabled\n  // This prevents injection of Git commit hashes that break build determinism\n  const shouldCreateRelease = userSentryOptions.release?.create !== false;\n  const releaseName = shouldCreateRelease\n    ? userSentryOptions.release?.name ?? getSentryRelease() ?? getGitRevision()\n    : userSentryOptions.release?.name;\n\n  if (userSentryOptions?.tunnelRoute) {\n    if (incomingUserNextConfigObject.output === 'export') {\n      if (!showedExportModeTunnelWarning) {\n        showedExportModeTunnelWarning = true;\n        // eslint-disable-next-line no-console\n        console.warn(\n          '[@sentry/nextjs] The Sentry Next.js SDK `tunnelRoute` option will not work in combination with Next.js static exports. The `tunnelRoute` option uses server-side features that cannot be accessed in export mode. If you still want to tunnel Sentry events, set up your own tunnel: https://docs.sentry.io/platforms/javascript/troubleshooting/#using-the-tunnel-option',\n        );\n      }\n    } else {\n      const resolvedTunnelRoute =\n        userSentryOptions.tunnelRoute === true ? generateRandomTunnelRoute() : userSentryOptions.tunnelRoute;\n\n      // Update the global options object to use the resolved value everywhere\n      userSentryOptions.tunnelRoute = resolvedTunnelRoute || undefined;\n      setUpTunnelRewriteRules(incomingUserNextConfigObject, resolvedTunnelRoute);\n    }\n  }\n\n  if (process.argv.includes('--experimental-build-mode')) {\n    if (!showedExperimentalBuildModeWarning) {\n      showedExperimentalBuildModeWarning = true;\n      // eslint-disable-next-line no-console\n      console.warn(\n        '[@sentry/nextjs] The Sentry Next.js SDK does not currently fully support next build --experimental-build-mode',\n      );\n    }\n    if (process.argv.includes('generate')) {\n      // Next.js v15.3.0-canary.1 splits the experimental build into two phases:\n      // 1. compile: Code compilation\n      // 2. generate: Environment variable inlining and prerendering (We don't instrument this phase, we inline in the compile phase)\n      //\n      // We assume a single \"full\" build and reruns Webpack instrumentation in both phases.\n      // During the generate step it collides with Next.js's inliner\n      // producing malformed JS and build failures.\n      // We skip Sentry processing during generate to avoid this issue.\n      return incomingUserNextConfigObject;\n    }\n  }\n\n  setUpBuildTimeVariables(incomingUserNextConfigObject, userSentryOptions, releaseName);\n\n  const nextJsVersion = getNextjsVersion();\n\n  // Add the `clientTraceMetadata` experimental option based on Next.js version. The option got introduced in Next.js version 15.0.0 (actually 14.3.0-canary.64).\n  // Adding the option on lower versions will cause Next.js to print nasty warnings we wouldn't confront our users with.\n  if (nextJsVersion) {\n    const { major, minor } = parseSemver(nextJsVersion);\n    if (major !== undefined && minor !== undefined && (major >= 15 || (major === 14 && minor >= 3))) {\n      incomingUserNextConfigObject.experimental = incomingUserNextConfigObject.experimental || {};\n      incomingUserNextConfigObject.experimental.clientTraceMetadata = [\n        'baggage',\n        'sentry-trace',\n        ...(incomingUserNextConfigObject.experimental?.clientTraceMetadata || []),\n      ];\n    }\n  } else {\n    // eslint-disable-next-line no-console\n    console.log(\n      \"[@sentry/nextjs] The Sentry SDK was not able to determine your Next.js version. If you are using Next.js version 15 or greater, please add `experimental.clientTraceMetadata: ['sentry-trace', 'baggage']` to your Next.js config to enable pageload tracing for App Router.\",\n    );\n  }\n\n  // From Next.js version (15.0.0-canary.124) onwards, Next.js does no longer require the `experimental.instrumentationHook` option and will\n  // print a warning when it is set, so we need to conditionally provide it for lower versions.\n  if (nextJsVersion) {\n    const { major, minor, patch, prerelease } = parseSemver(nextJsVersion);\n    const isFullySupportedRelease =\n      major !== undefined &&\n      minor !== undefined &&\n      patch !== undefined &&\n      major >= 15 &&\n      ((minor === 0 && patch === 0 && prerelease === undefined) || minor > 0 || patch > 0);\n    const isSupportedV15Rc =\n      major !== undefined &&\n      minor !== undefined &&\n      patch !== undefined &&\n      prerelease !== undefined &&\n      major === 15 &&\n      minor === 0 &&\n      patch === 0 &&\n      prerelease.startsWith('rc.') &&\n      parseInt(prerelease.split('.')[1] || '', 10) > 0;\n    const isSupportedCanary =\n      minor !== undefined &&\n      patch !== undefined &&\n      prerelease !== undefined &&\n      major === 15 &&\n      minor === 0 &&\n      patch === 0 &&\n      prerelease.startsWith('canary.') &&\n      parseInt(prerelease.split('.')[1] || '', 10) >= 124;\n\n    if (!isFullySupportedRelease && !isSupportedV15Rc && !isSupportedCanary) {\n      if (incomingUserNextConfigObject.experimental?.instrumentationHook === false) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          '[@sentry/nextjs] You turned off the `experimental.instrumentationHook` option. Note that Sentry will not be initialized if you did not set it up inside `instrumentation.(js|ts)`.',\n        );\n      }\n      incomingUserNextConfigObject.experimental = {\n        instrumentationHook: true,\n        ...incomingUserNextConfigObject.experimental,\n      };\n    }\n  } else {\n    // If we cannot detect a Next.js version for whatever reason, the sensible default is to set the `experimental.instrumentationHook`, even though it may create a warning.\n    if (\n      incomingUserNextConfigObject.experimental &&\n      'instrumentationHook' in incomingUserNextConfigObject.experimental\n    ) {\n      if (incomingUserNextConfigObject.experimental.instrumentationHook === false) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          '[@sentry/nextjs] You set `experimental.instrumentationHook` to `false`. If you are using Next.js version 15 or greater, you can remove that option. If you are using Next.js version 14 or lower, you need to set `experimental.instrumentationHook` in your `next.config.(js|mjs)` to `true` for the SDK to be properly initialized in combination with `instrumentation.(js|ts)`.',\n        );\n      }\n    } else {\n      // eslint-disable-next-line no-console\n      console.log(\n        \"[@sentry/nextjs] The Sentry SDK was not able to determine your Next.js version. If you are using Next.js version 15 or greater, Next.js will probably show you a warning about the `experimental.instrumentationHook` being set. To silence Next.js' warning, explicitly set the `experimental.instrumentationHook` option in your `next.config.(js|mjs|ts)` to `undefined`. If you are on Next.js version 14 or lower, you can silence this particular warning by explicitly setting the `experimental.instrumentationHook` option in your `next.config.(js|mjs)` to `true`.\",\n      );\n      incomingUserNextConfigObject.experimental = {\n        instrumentationHook: true,\n        ...incomingUserNextConfigObject.experimental,\n      };\n    }\n  }\n\n  // We wanna check whether the user added a `onRouterTransitionStart` handler to their client instrumentation file.\n  const instrumentationClientFileContents = getInstrumentationClientFileContents();\n  if (\n    instrumentationClientFileContents !== undefined &&\n    !instrumentationClientFileContents.includes('onRouterTransitionStart') &&\n    !userSentryOptions.suppressOnRouterTransitionStartWarning\n  ) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      '[@sentry/nextjs] ACTION REQUIRED: To instrument navigations, the Sentry SDK requires you to export an `onRouterTransitionStart` hook from your `instrumentation-client.(js|ts)` file. You can do so by adding `export const onRouterTransitionStart = Sentry.captureRouterTransitionStart;` to the file.',\n    );\n  }\n\n  let nextMajor: number | undefined;\n  if (nextJsVersion) {\n    const { major, minor, patch, prerelease } = parseSemver(nextJsVersion);\n    nextMajor = major;\n    const isSupportedVersion =\n      major !== undefined &&\n      minor !== undefined &&\n      patch !== undefined &&\n      (major > 15 ||\n        (major === 15 && minor > 3) ||\n        (major === 15 && minor === 3 && patch === 0 && prerelease === undefined) ||\n        (major === 15 && minor === 3 && patch > 0));\n    const isSupportedCanary =\n      major !== undefined &&\n      minor !== undefined &&\n      patch !== undefined &&\n      prerelease !== undefined &&\n      major === 15 &&\n      minor === 3 &&\n      patch === 0 &&\n      prerelease.startsWith('canary.') &&\n      parseInt(prerelease.split('.')[1] || '', 10) >= 28;\n    const supportsClientInstrumentation = isSupportedCanary || isSupportedVersion;\n\n    if (!supportsClientInstrumentation && process.env.TURBOPACK) {\n      if (process.env.NODE_ENV === 'development') {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `[@sentry/nextjs] WARNING: You are using the Sentry SDK with Turbopack (\\`next dev --turbo\\`). The Sentry SDK is compatible with Turbopack on Next.js version 15.3.0 or later. You are currently on ${nextJsVersion}. Please upgrade to a newer Next.js version to use the Sentry SDK with Turbopack. Note that the SDK will continue to work for non-Turbopack production builds. This warning is only about dev-mode.`,\n        );\n      } else if (process.env.NODE_ENV === 'production') {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `[@sentry/nextjs] WARNING: You are using the Sentry SDK with Turbopack (\\`next build --turbo\\`). The Sentry SDK is compatible with Turbopack on Next.js version 15.3.0 or later. You are currently on ${nextJsVersion}. Please upgrade to a newer Next.js version to use the Sentry SDK with Turbopack. Note that as Turbopack is still experimental for production builds, some of the Sentry SDK features like source maps will not work. Follow this issue for progress on Sentry + Turbopack: https://github.com/getsentry/sentry-javascript/issues/8105.`,\n        );\n      }\n    }\n  }\n\n  return {\n    ...incomingUserNextConfigObject,\n    ...(nextMajor && nextMajor >= 15\n      ? {\n          serverExternalPackages: [\n            ...(incomingUserNextConfigObject.serverExternalPackages || []),\n            ...DEFAULT_SERVER_EXTERNAL_PACKAGES,\n          ],\n        }\n      : {\n          experimental: {\n            ...incomingUserNextConfigObject.experimental,\n            serverComponentsExternalPackages: [\n              ...(incomingUserNextConfigObject.experimental?.serverComponentsExternalPackages || []),\n              ...DEFAULT_SERVER_EXTERNAL_PACKAGES,\n            ],\n          },\n        }),\n    webpack: constructWebpackConfigFunction(incomingUserNextConfigObject, userSentryOptions, releaseName),\n  };\n}\n\n/**\n * Injects rewrite rules into the Next.js config provided by the user to tunnel\n * requests from the `tunnelPath` to Sentry.\n *\n * See https://nextjs.org/docs/api-reference/next.config.js/rewrites.\n */\nfunction setUpTunnelRewriteRules(userNextConfig: NextConfigObject, tunnelPath: string): void {\n  const originalRewrites = userNextConfig.rewrites;\n\n  // This function doesn't take any arguments at the time of writing but we future-proof\n  // here in case Next.js ever decides to pass some\n  userNextConfig.rewrites = async (...args: unknown[]) => {\n    const tunnelRouteRewrite = {\n      // Matched rewrite routes will look like the following: `[tunnelPath]?o=[orgid]&p=[projectid]`\n      // Nextjs will automatically convert `source` into a regex for us\n      source: `${tunnelPath}(/?)`,\n      has: [\n        {\n          type: 'query',\n          key: 'o', // short for orgId - we keep it short so matching is harder for ad-blockers\n          value: '(?<orgid>\\\\d*)',\n        },\n        {\n          type: 'query',\n          key: 'p', // short for projectId - we keep it short so matching is harder for ad-blockers\n          value: '(?<projectid>\\\\d*)',\n        },\n      ],\n      destination: 'https://o:orgid.ingest.sentry.io/api/:projectid/envelope/?hsts=0',\n    };\n\n    const tunnelRouteRewriteWithRegion = {\n      // Matched rewrite routes will look like the following: `[tunnelPath]?o=[orgid]&p=[projectid]?r=[region]`\n      // Nextjs will automatically convert `source` into a regex for us\n      source: `${tunnelPath}(/?)`,\n      has: [\n        {\n          type: 'query',\n          key: 'o', // short for orgId - we keep it short so matching is harder for ad-blockers\n          value: '(?<orgid>\\\\d*)',\n        },\n        {\n          type: 'query',\n          key: 'p', // short for projectId - we keep it short so matching is harder for ad-blockers\n          value: '(?<projectid>\\\\d*)',\n        },\n        {\n          type: 'query',\n          key: 'r', // short for region - we keep it short so matching is harder for ad-blockers\n          value: '(?<region>[a-z]{2})',\n        },\n      ],\n      destination: 'https://o:orgid.ingest.:region.sentry.io/api/:projectid/envelope/?hsts=0',\n    };\n\n    // Order of these is important, they get applied first to last.\n    const newRewrites = [tunnelRouteRewriteWithRegion, tunnelRouteRewrite];\n\n    if (typeof originalRewrites !== 'function') {\n      return newRewrites;\n    }\n\n    // @ts-expect-error Expected 0 arguments but got 1 - this is from the future-proofing mentioned above, so we don't care about it\n    const originalRewritesResult = await originalRewrites(...args);\n\n    if (Array.isArray(originalRewritesResult)) {\n      return [...newRewrites, ...originalRewritesResult];\n    } else {\n      return {\n        ...originalRewritesResult,\n        beforeFiles: [...newRewrites, ...(originalRewritesResult.beforeFiles || [])],\n      };\n    }\n  };\n}\n\nfunction setUpBuildTimeVariables(\n  userNextConfig: NextConfigObject,\n  userSentryOptions: SentryBuildOptions,\n  releaseName: string | undefined,\n): void {\n  const assetPrefix = userNextConfig.assetPrefix || userNextConfig.basePath || '';\n  const basePath = userNextConfig.basePath ?? '';\n\n  const rewritesTunnelPath =\n    userSentryOptions.tunnelRoute !== undefined &&\n    userNextConfig.output !== 'export' &&\n    typeof userSentryOptions.tunnelRoute === 'string'\n      ? `${basePath}${userSentryOptions.tunnelRoute}`\n      : undefined;\n\n  const buildTimeVariables: Record<string, string> = {\n    // Make sure that if we have a windows path, the backslashes are interpreted as such (rather than as escape\n    // characters)\n    _sentryRewriteFramesDistDir: userNextConfig.distDir?.replace(/\\\\/g, '\\\\\\\\') || '.next',\n    // Get the path part of `assetPrefix`, minus any trailing slash. (We use a placeholder for the origin if\n    // `assetPrefix` doesn't include one. Since we only care about the path, it doesn't matter what it is.)\n    _sentryRewriteFramesAssetPrefixPath: assetPrefix\n      ? new URL(assetPrefix, 'http://dogs.are.great').pathname.replace(/\\/$/, '')\n      : '',\n  };\n\n  if (userNextConfig.assetPrefix) {\n    buildTimeVariables._assetsPrefix = userNextConfig.assetPrefix;\n  }\n\n  if (userSentryOptions._experimental?.thirdPartyOriginStackFrames) {\n    buildTimeVariables._experimentalThirdPartyOriginStackFrames = 'true';\n  }\n\n  if (rewritesTunnelPath) {\n    buildTimeVariables._sentryRewritesTunnelPath = rewritesTunnelPath;\n  }\n\n  if (basePath) {\n    buildTimeVariables._sentryBasePath = basePath;\n  }\n\n  if (userNextConfig.assetPrefix) {\n    buildTimeVariables._sentryAssetPrefix = userNextConfig.assetPrefix;\n  }\n\n  if (userSentryOptions._experimental?.thirdPartyOriginStackFrames) {\n    buildTimeVariables._experimentalThirdPartyOriginStackFrames = 'true';\n  }\n\n  if (releaseName) {\n    buildTimeVariables._sentryRelease = releaseName;\n  }\n\n  if (typeof userNextConfig.env === 'object') {\n    userNextConfig.env = { ...buildTimeVariables, ...userNextConfig.env };\n  } else if (userNextConfig.env === undefined) {\n    userNextConfig.env = buildTimeVariables;\n  }\n}\n\nfunction getGitRevision(): string | undefined {\n  let gitRevision: string | undefined;\n  try {\n    gitRevision = childProcess\n      .execSync('git rev-parse HEAD', { stdio: ['ignore', 'pipe', 'ignore'] })\n      .toString()\n      .trim();\n  } catch (e) {\n    // noop\n  }\n  return gitRevision;\n}\n\nfunction getInstrumentationClientFileContents(): string | void {\n  const potentialInstrumentationClientFileLocations = [\n    ['src', 'instrumentation-client.ts'],\n    ['src', 'instrumentation-client.js'],\n    ['instrumentation-client.ts'],\n    ['instrumentation-client.js'],\n  ];\n\n  for (const pathSegments of potentialInstrumentationClientFileLocations) {\n    try {\n      return fs.readFileSync(path.join(process.cwd(), ...pathSegments), 'utf-8');\n    } catch {\n      // noop\n    }\n  }\n}\n"],"names":["isThenable","getSentryRelease","getNextjsVersion","parseSemver","constructWebpackConfigFunction"],"mappings":"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"}},
    {"offset": {"line": 1179, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1183, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/common/debug-build.ts"],"sourcesContent":["declare const __DEBUG_BUILD__: boolean;\n\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nexport const DEBUG_BUILD = __DEBUG_BUILD__;\n"],"names":[],"mappings":";;;AAEA;;;;CAIA,GACO,MAAM,cAAc,OAAA,qBAAA,eAAA"}},
    {"offset": {"line": 1192, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1196, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/common/devErrorSymbolicationEventProcessor.ts"],"sourcesContent":["import type { Event, EventHint } from '@sentry/core';\nimport { GLOBAL_OBJ, logger, parseSemver, suppressTracing } from '@sentry/core';\nimport type { StackFrame } from 'stacktrace-parser';\nimport * as stackTraceParser from 'stacktrace-parser';\nimport { DEBUG_BUILD } from './debug-build';\n\ntype OriginalStackFrameResponse = {\n  originalStackFrame: StackFrame;\n  originalCodeFrame: string | null;\n  sourcePackage?: string;\n};\n\nconst globalWithInjectedValues = GLOBAL_OBJ as typeof GLOBAL_OBJ & {\n  _sentryBasePath?: string;\n  next?: {\n    version?: string;\n  };\n};\n\n/**\n * Event processor that will symbolicate errors by using the webpack/nextjs dev server that is used to show stack traces\n * in the dev overlay.\n */\nexport async function devErrorSymbolicationEventProcessor(event: Event, hint: EventHint): Promise<Event | null> {\n  // Filter out spans for requests resolving source maps for stack frames in dev mode\n  if (event.type === 'transaction') {\n    event.spans = event.spans?.filter(span => {\n      const httpUrlAttribute: unknown = span.data?.['http.url'];\n      if (typeof httpUrlAttribute === 'string') {\n        return !httpUrlAttribute.includes('__nextjs_original-stack-frame'); // could also be __nextjs_original-stack-frames (plural)\n      }\n\n      return true;\n    });\n  }\n\n  // Due to changes across Next.js versions, there are a million things that can go wrong here so we just try-catch the\n  // entire event processor. Symbolicated stack traces are just a nice to have.\n  try {\n    if (hint.originalException && hint.originalException instanceof Error && hint.originalException.stack) {\n      const frames = stackTraceParser.parse(hint.originalException.stack);\n\n      const nextjsVersion = globalWithInjectedValues.next?.version || '0.0.0';\n      const parsedNextjsVersion = nextjsVersion ? parseSemver(nextjsVersion) : {};\n\n      let resolvedFrames: ({\n        originalCodeFrame: string | null;\n        originalStackFrame: StackFrame | null;\n      } | null)[];\n\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      if (parsedNextjsVersion.major! > 15 || (parsedNextjsVersion.major === 15 && parsedNextjsVersion.minor! >= 2)) {\n        const r = await resolveStackFrames(frames);\n        if (r === null) {\n          return event;\n        }\n        resolvedFrames = r;\n      } else {\n        resolvedFrames = await Promise.all(\n          frames.map(frame => resolveStackFrame(frame, hint.originalException as Error)),\n        );\n      }\n\n      if (event.exception?.values?.[0]?.stacktrace?.frames) {\n        event.exception.values[0].stacktrace.frames = event.exception.values[0].stacktrace.frames.map(\n          (frame, i, frames) => {\n            const resolvedFrame = resolvedFrames[frames.length - 1 - i];\n            if (!resolvedFrame?.originalStackFrame || !resolvedFrame.originalCodeFrame) {\n              return {\n                ...frame,\n                platform: frame.filename?.startsWith('node:internal') ? 'nodejs' : undefined, // simple hack that will prevent a source mapping error from showing up\n                in_app: false,\n              };\n            }\n\n            const { contextLine, preContextLines, postContextLines } = parseOriginalCodeFrame(\n              resolvedFrame.originalCodeFrame,\n            );\n\n            return {\n              ...frame,\n              pre_context: preContextLines,\n              context_line: contextLine,\n              post_context: postContextLines,\n              function: resolvedFrame.originalStackFrame.methodName,\n              filename: resolvedFrame.originalStackFrame.file || undefined,\n              lineno: resolvedFrame.originalStackFrame.lineNumber || undefined,\n              colno: resolvedFrame.originalStackFrame.column || undefined,\n            };\n          },\n        );\n      }\n    }\n  } catch (e) {\n    return event;\n  }\n\n  return event;\n}\n\nasync function resolveStackFrame(\n  frame: StackFrame,\n  error: Error,\n): Promise<{ originalCodeFrame: string | null; originalStackFrame: StackFrame | null } | null> {\n  try {\n    if (!(frame.file?.startsWith('webpack-internal:') || frame.file?.startsWith('file:'))) {\n      return null;\n    }\n\n    const params = new URLSearchParams();\n    params.append('isServer', String(false)); // doesn't matter since it is overwritten by isAppDirectory\n    params.append('isEdgeServer', String(false)); // doesn't matter since it is overwritten by isAppDirectory\n    params.append('isAppDirectory', String(true)); // will force server to do more thorough checking\n    params.append('errorMessage', error.toString());\n    Object.keys(frame).forEach(key => {\n      params.append(key, (frame[key as keyof typeof frame] ?? '').toString());\n    });\n\n    let basePath = process.env._sentryBasePath ?? globalWithInjectedValues._sentryBasePath ?? '';\n\n    // Prefix the basepath with a slash if it doesn't have one\n    if (basePath !== '' && !basePath.match(/^\\//)) {\n      basePath = `/${basePath}`;\n    }\n\n    const controller = new AbortController();\n    const timer = setTimeout(() => controller.abort(), 3000);\n    const res = await suppressTracing(() =>\n      fetch(\n        `${\n          // eslint-disable-next-line no-restricted-globals\n          typeof window === 'undefined' ? 'http://localhost:3000' : '' // TODO: handle the case where users define a different port\n        }${basePath}/__nextjs_original-stack-frame?${params.toString()}`,\n        {\n          signal: controller.signal,\n        },\n      ).finally(() => {\n        clearTimeout(timer);\n      }),\n    );\n\n    if (!res.ok || res.status === 204) {\n      return null;\n    }\n\n    const body: OriginalStackFrameResponse = await res.json();\n\n    return {\n      originalCodeFrame: body.originalCodeFrame,\n      originalStackFrame: body.originalStackFrame,\n    };\n  } catch (e) {\n    DEBUG_BUILD && logger.error('Failed to symbolicate event with Next.js dev server', e);\n    return null;\n  }\n}\n\nasync function resolveStackFrames(\n  frames: StackFrame[],\n): Promise<{ originalCodeFrame: string | null; originalStackFrame: StackFrame | null }[] | null> {\n  try {\n    const postBody = {\n      frames: frames\n        .filter(frame => {\n          return !!frame.file;\n        })\n        .map(frame => {\n          // https://github.com/vercel/next.js/blob/df0573a478baa8b55478a7963c473dddd59a5e40/packages/next/src/client/components/react-dev-overlay/server/middleware-turbopack.ts#L129\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          frame.file = frame.file!.replace(/^rsc:\\/\\/React\\/[^/]+\\//, '').replace(/\\?\\d+$/, '');\n\n          return {\n            file: frame.file,\n            methodName: frame.methodName ?? '<unknown>',\n            arguments: [],\n            lineNumber: frame.lineNumber ?? 0,\n            column: frame.column ?? 0,\n          };\n        }),\n      isServer: false,\n      isEdgeServer: false,\n      isAppDirectory: true,\n    };\n\n    let basePath = process.env._sentryBasePath ?? globalWithInjectedValues._sentryBasePath ?? '';\n\n    // Prefix the basepath with a slash if it doesn't have one\n    if (basePath !== '' && !basePath.match(/^\\//)) {\n      basePath = `/${basePath}`;\n    }\n\n    const controller = new AbortController();\n    const timer = setTimeout(() => controller.abort(), 3000);\n\n    const res = await suppressTracing(() =>\n      fetch(\n        `${\n          // eslint-disable-next-line no-restricted-globals\n          typeof window === 'undefined' ? 'http://localhost:3000' : '' // TODO: handle the case where users define a different port\n        }${basePath}/__nextjs_original-stack-frames`,\n        {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          signal: controller.signal,\n          body: JSON.stringify(postBody),\n        },\n      ).finally(() => {\n        clearTimeout(timer);\n      }),\n    );\n\n    if (!res.ok || res.status === 204) {\n      return null;\n    }\n\n    const body: { value: OriginalStackFrameResponse }[] = await res.json();\n\n    return body.map(frame => {\n      return {\n        originalCodeFrame: frame.value.originalCodeFrame,\n        originalStackFrame: frame.value.originalStackFrame,\n      };\n    });\n  } catch (e) {\n    DEBUG_BUILD && logger.error('Failed to symbolicate event with Next.js dev server', e);\n    return null;\n  }\n}\n\nfunction parseOriginalCodeFrame(codeFrame: string): {\n  contextLine: string | undefined;\n  preContextLines: string[];\n  postContextLines: string[];\n} {\n  const preProcessedLines = codeFrame\n    // Remove ASCII control characters that are used for syntax highlighting\n    .replace(\n      // eslint-disable-next-line no-control-regex\n      /[\\u001b\\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g, // https://stackoverflow.com/a/29497680\n      '',\n    )\n    .split('\\n')\n    // Remove line that is supposed to indicate where the error happened\n    .filter(line => !line.match(/^\\s*\\|/))\n    // Find the error line\n    .map(line => ({\n      line,\n      isErrorLine: !!line.match(/^>/),\n    }))\n    // Remove the leading part that is just for prettier output\n    .map(lineObj => ({\n      ...lineObj,\n      line: lineObj.line.replace(/^.*\\|/, ''),\n    }));\n\n  const preContextLines = [];\n  let contextLine: string | undefined = undefined;\n  const postContextLines = [];\n\n  let reachedContextLine = false;\n\n  for (const preProcessedLine of preProcessedLines) {\n    if (preProcessedLine.isErrorLine) {\n      contextLine = preProcessedLine.line;\n      reachedContextLine = true;\n    } else if (reachedContextLine) {\n      postContextLines.push(preProcessedLine.line);\n    } else {\n      preContextLines.push(preProcessedLine.line);\n    }\n  }\n\n  return {\n    contextLine,\n    preContextLines,\n    postContextLines,\n  };\n}\n"],"names":["GLOBAL_OBJ","parseSemver","suppressTracing","DEBUG_BUILD","logger"],"mappings":"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"}},
    {"offset": {"line": 1393, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1397, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/common/getVercelEnv.ts"],"sourcesContent":["/**\n * Returns an environment setting value determined by Vercel's `VERCEL_ENV` environment variable.\n *\n * @param isClient Flag to indicate whether to use the `NEXT_PUBLIC_` prefixed version of the environment variable.\n */\nexport function getVercelEnv(isClient: boolean): string | undefined {\n  const vercelEnvVar = isClient ? process.env.NEXT_PUBLIC_VERCEL_ENV : process.env.VERCEL_ENV;\n  return vercelEnvVar ? `vercel-${vercelEnvVar}` : undefined;\n}\n"],"names":[],"mappings":";;;AAAA;;;;CAIA,GACO,SAAS,aAAa,QAAQ;IACnC,MAAM,eAAe,WAAW,QAAQ,GAAG,CAAC,sBAAA,GAAyB,QAAQ,GAAG,CAAC,UAAU;IAC3F,OAAO,eAAe,CAAC,OAAO,EAAE,aAAa,CAAA,GAAA;AACA"}},
    {"offset": {"line": 1409, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1413, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/common/span-attributes-with-logic-attached.ts"],"sourcesContent":["/**\n * If this attribute is attached to a transaction, the Next.js SDK will drop that transaction.\n */\nexport const TRANSACTION_ATTR_SHOULD_DROP_TRANSACTION = 'sentry.drop_transaction';\n\nexport const TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL = 'sentry.sentry_trace_backfill';\n\nexport const TRANSACTION_ATTR_SENTRY_ROUTE_BACKFILL = 'sentry.route_backfill';\n"],"names":[],"mappings":";;;AAAA;;CAEA,GACO,MAAM,2CAA2C;AAEjD,MAAM,yCAAyC;AAE/C,MAAM,yCAAyC"}},
    {"offset": {"line": 1424, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1428, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/common/utils/isBuild.ts"],"sourcesContent":["import { PHASE_PRODUCTION_BUILD } from 'next/constants';\n\n/**\n * Decide if the currently running process is part of the build phase or happening at runtime.\n */\nexport function isBuild(): boolean {\n  return process.env.NEXT_PHASE === PHASE_PRODUCTION_BUILD;\n}\n"],"names":["PHASE_PRODUCTION_BUILD"],"mappings":";;;;AAEA;;CAEA,GACO,SAAS;IACd,OAAO,QAAQ,GAAG,CAAC,UAAA,KAAeA,UAAAA,sBAAsB;AAC1D"}},
    {"offset": {"line": 1438, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1442, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/server/distDirRewriteFramesIntegration.ts"],"sourcesContent":["import { defineIntegration, escapeStringForRegex, rewriteFramesIntegration } from '@sentry/core';\nimport * as path from 'path';\n\nexport const distDirRewriteFramesIntegration = defineIntegration(({ distDirName }: { distDirName: string }) => {\n  // nextjs always puts the build directory at the project root level, which is also where you run `next start` from, so\n  // we can read in the project directory from the currently running process\n  const distDirAbsPath = path.resolve(distDirName).replace(/(\\/|\\\\)$/, ''); // We strip trailing slashes because \"app:///_next\" also doesn't have one\n\n  // eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor -- user input is escaped\n  const SOURCEMAP_FILENAME_REGEX = new RegExp(escapeStringForRegex(distDirAbsPath));\n\n  const rewriteFramesInstance = rewriteFramesIntegration({\n    iteratee: frame => {\n      frame.filename = frame.filename?.replace(SOURCEMAP_FILENAME_REGEX, 'app:///_next');\n      return frame;\n    },\n  });\n\n  return {\n    ...rewriteFramesInstance,\n    name: 'DistDirRewriteFrames',\n  };\n});\n"],"names":["defineIntegration","escapeStringForRegex","rewriteFramesIntegration"],"mappings":";;;;;AAGO,MAAM,kCAAkCA,KAAAA,iBAAiB,CAAC,CAAC,EAAE,WAAA,EAAa;IACjF,sHAAA;IACA,0EAAA;IACE,MAAM,iBAAiB,KAAK,OAAO,CAAC,aAAa,OAAO,CAAC,YAAY,KAAG,yEAAA;IAE1E,+FAAA;IACE,MAAM,2BAA2B,IAAI,OAAOC,KAAAA,oBAAoB,CAAC;IAEjE,MAAM,wBAAwBC,KAAAA,wBAAwB,CAAC;QACrD,UAAU,CAAA;YACR,MAAM,QAAA,GAAW,MAAM,QAAQ,EAAE,QAAQ,0BAA0B;YACnE,OAAO;QACb;IACA;IAEE,OAAO;QACL,GAAG,qBAAqB;QACxB,MAAM;IACV;AACA"}},
    {"offset": {"line": 1465, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1469, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/common/utils/responseEnd.ts"],"sourcesContent":["import type { Span } from '@sentry/core';\nimport { fill, flush, logger, setHttpStatus } from '@sentry/core';\nimport type { ServerResponse } from 'http';\nimport { DEBUG_BUILD } from '../debug-build';\nimport type { ResponseEndMethod, WrappedResponseEndMethod } from '../types';\n\n/**\n * Wrap `res.end()` so that it ends the span and flushes events before letting the request finish.\n *\n * Note: This wraps a sync method with an async method. While in general that's not a great idea in terms of keeping\n * things in the right order, in this case it's safe, because the native `.end()` actually *is* (effectively) async, and\n * its run actually *is* (literally) awaited, just manually so (which reflects the fact that the core of the\n * request/response code in Node by far predates the introduction of `async`/`await`). When `.end()` is done, it emits\n * the `prefinish` event, and only once that fires does request processing continue. See\n * https://github.com/nodejs/node/commit/7c9b607048f13741173d397795bac37707405ba7.\n *\n * Also note: `res.end()` isn't called until *after* all response data and headers have been sent, so blocking inside of\n * `end` doesn't delay data getting to the end user. See\n * https://nodejs.org/api/http.html#responseenddata-encoding-callback.\n *\n * @param span The span tracking the request\n * @param res: The request's corresponding response\n */\nexport function autoEndSpanOnResponseEnd(span: Span, res: ServerResponse): void {\n  const wrapEndMethod = (origEnd: ResponseEndMethod): WrappedResponseEndMethod => {\n    return function sentryWrappedEnd(this: ServerResponse, ...args: unknown[]) {\n      finishSpan(span, this);\n      return origEnd.call(this, ...args);\n    };\n  };\n\n  // Prevent double-wrapping\n  // res.end may be undefined during build when using `next export` to statically export a Next.js app\n  if (res.end && !(res.end as WrappedResponseEndMethod).__sentry_original__) {\n    fill(res, 'end', wrapEndMethod);\n  }\n}\n\n/** Finish the given response's span and set HTTP status data */\nexport function finishSpan(span: Span, res: ServerResponse): void {\n  setHttpStatus(span, res.statusCode);\n  span.end();\n}\n\n/**\n * Flushes pending Sentry events with a 2 second timeout and in a way that cannot create unhandled promise rejections.\n */\nexport async function flushSafelyWithTimeout(): Promise<void> {\n  try {\n    DEBUG_BUILD && logger.log('Flushing events...');\n    await flush(2000);\n    DEBUG_BUILD && logger.log('Done flushing events');\n  } catch (e) {\n    DEBUG_BUILD && logger.log('Error while flushing events:\\n', e);\n  }\n}\n"],"names":["DEBUG_BUILD","logger","flush"],"mappings":";;;;;AA4CA;;CAEA,GACO,eAAe;IACpB,IAAI;QACFA,WAAAA,WAAAA,IAAeC,KAAAA,MAAM,CAAC,GAAG,CAAC;QAC1B,MAAMC,KAAAA,KAAK,CAAC;QACZF,WAAAA,WAAAA,IAAeC,KAAAA,MAAM,CAAC,GAAG,CAAC;IAC9B,EAAI,OAAO,GAAG;QACVD,WAAAA,WAAA,IAAeC,KAAAA,MAAM,CAAC,GAAG,CAAC,kCAAkC;IAChE;AACA"}},
    {"offset": {"line": 1486, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1490, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/common/pages-router-instrumentation/_error.ts"],"sourcesContent":["import { captureException, httpRequestToRequestData, vercelWaitUntil, withScope } from '@sentry/core';\nimport type { NextPageContext } from 'next';\nimport { flushSafelyWithTimeout } from '../utils/responseEnd';\n\ntype ContextOrProps = {\n  req?: NextPageContext['req'];\n  res?: NextPageContext['res'];\n  err?: NextPageContext['err'] | string;\n  pathname?: string;\n  statusCode?: number;\n};\n\n/**\n * Capture the exception passed by nextjs to the `_error` page, adding context data as appropriate.\n *\n * @param contextOrProps The data passed to either `getInitialProps` or `render` by nextjs\n */\nexport async function captureUnderscoreErrorException(contextOrProps: ContextOrProps): Promise<void> {\n  const { req, res, err } = contextOrProps;\n\n  // 404s (and other 400-y friends) can trigger `_error`, but we don't want to send them to Sentry\n  const statusCode = res?.statusCode || contextOrProps.statusCode;\n  if (statusCode && statusCode < 500) {\n    return Promise.resolve();\n  }\n\n  // In previous versions of the suggested `_error.js` page in which this function is meant to be used, there was a\n  // workaround for https://github.com/vercel/next.js/issues/8592 which involved an extra call to this function, in the\n  // custom error component's `render` method, just in case it hadn't been called by `getInitialProps`. Now that that\n  // issue has been fixed, the second call is unnecessary, but since it lives in user code rather than our code, users\n  // have to be the ones to get rid of it, and guaraneteedly, not all of them will. So, rather than capture the error\n  // twice, we just bail if we sense we're in that now-extraneous second call. (We can tell which function we're in\n  // because Nextjs passes `pathname` to `getInitialProps` but not to `render`.)\n  if (!contextOrProps.pathname) {\n    return Promise.resolve();\n  }\n\n  withScope(scope => {\n    if (req) {\n      const normalizedRequest = httpRequestToRequestData(req);\n      scope.setSDKProcessingMetadata({ normalizedRequest });\n    }\n\n    // If third-party libraries (or users themselves) throw something falsy, we want to capture it as a message (which\n    // is what passing a string to `captureException` will wind up doing)\n    captureException(err || `_error.js called with falsy error (${err})`, {\n      mechanism: {\n        type: 'instrument',\n        handled: false,\n        data: {\n          function: '_error.getInitialProps',\n        },\n      },\n    });\n  });\n\n  vercelWaitUntil(flushSafelyWithTimeout());\n}\n"],"names":["withScope","httpRequestToRequestData","captureException","vercelWaitUntil","flushSafelyWithTimeout"],"mappings":";;;;;AAYA;;;;CAIA,GACO,eAAe,gCAAgC,cAAc;IAClE,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,GAAA,EAAI,GAAI;IAE5B,gGAAA;IACE,MAAM,aAAa,KAAK,cAAc,eAAe,UAAU;IAC/D,IAAI,cAAc,aAAa,KAAK;QAClC,OAAO,QAAQ,OAAO;IAC1B;IAEA,iHAAA;IACA,qHAAA;IACA,mHAAA;IACA,oHAAA;IACA,mHAAA;IACA,iHAAA;IACA,8EAAA;IACE,IAAI,CAAC,eAAe,QAAQ,EAAE;QAC5B,OAAO,QAAQ,OAAO;IAC1B;IAEEA,KAAAA,SAAS,CAAC,CAAA;QACR,IAAI,KAAK;YACP,MAAM,oBAAoBC,KAAAA,wBAAwB,CAAC;YACnD,MAAM,wBAAwB,CAAC;gBAAE;YAAA;QACvC;QAEA,kHAAA;QACA,qEAAA;QACIC,KAAAA,gBAAgB,CAAC,OAAO,CAAC,mCAAmC,EAAE,IAAI,CAAC,CAAC,EAAE;YACpE,WAAW;gBACT,MAAM;gBACN,SAAS;gBACT,MAAM;oBACJ,UAAU;gBACpB;YACA;QACA;IACA;IAEEC,KAAAA,eAAe,CAACC,YAAAA,sBAAsB;AACxC"}},
    {"offset": {"line": 1538, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1542, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/common/utils/wrapperUtils.ts"],"sourcesContent":["import {\n  captureException,\n  getActiveSpan,\n  getCurrentScope,\n  getIsolationScope,\n  getRootSpan,\n  getTraceData,\n  httpRequestToRequestData,\n} from '@sentry/core';\nimport type { IncomingMessage, ServerResponse } from 'http';\nimport { TRANSACTION_ATTR_SENTRY_ROUTE_BACKFILL } from '../span-attributes-with-logic-attached';\n\n/**\n * Wraps a function that potentially throws. If it does, the error is passed to `captureException` and rethrown.\n *\n * Note: This function turns the wrapped function into an asynchronous one.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function withErrorInstrumentation<F extends (...args: any[]) => any>(\n  origFunction: F,\n): (...params: Parameters<F>) => Promise<ReturnType<F>> {\n  return async function (this: unknown, ...origFunctionArguments: Parameters<F>): Promise<ReturnType<F>> {\n    try {\n      return await origFunction.apply(this, origFunctionArguments);\n    } catch (e) {\n      // TODO: Extract error logic from `withSentry` in here or create a new wrapper with said logic or something like that.\n      captureException(e, { mechanism: { handled: false } });\n      throw e;\n    }\n  };\n}\n\n/**\n * Calls a server-side data fetching function (that takes a `req` and `res` object in its context) with tracing\n * instrumentation. A transaction will be created for the incoming request (if it doesn't already exist) in addition to\n * a span for the wrapped data fetching function.\n *\n * All of the above happens in an isolated domain, meaning all thrown errors will be associated with the correct span.\n *\n * @param origDataFetcher The data fetching method to call.\n * @param origFunctionArguments The arguments to call the data fetching method with.\n * @param req The data fetching function's request object.\n * @param res The data fetching function's response object.\n * @param options Options providing details for the created transaction and span.\n * @returns what the data fetching method call returned.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function withTracedServerSideDataFetcher<F extends (...args: any[]) => Promise<any> | any>(\n  origDataFetcher: F,\n  req: IncomingMessage,\n  res: ServerResponse,\n  options: {\n    /** Parameterized route of the request - will be used for naming the transaction. */\n    requestedRouteName: string;\n    /** Name of the route the data fetcher was defined in - will be used for describing the data fetcher's span. */\n    dataFetcherRouteName: string;\n    /** Name of the data fetching method - will be used for describing the data fetcher's span. */\n    dataFetchingMethodName: string;\n  },\n): (...params: Parameters<F>) => Promise<{ data: ReturnType<F>; sentryTrace?: string; baggage?: string }> {\n  return async function (\n    this: unknown,\n    ...args: Parameters<F>\n  ): Promise<{ data: ReturnType<F>; sentryTrace?: string; baggage?: string }> {\n    const normalizedRequest = httpRequestToRequestData(req);\n    getCurrentScope().setTransactionName(`${options.dataFetchingMethodName} (${options.dataFetcherRouteName})`);\n    getIsolationScope().setSDKProcessingMetadata({ normalizedRequest });\n\n    const span = getActiveSpan();\n\n    // Only set the route backfill if the span is not for /_error\n    if (span && options.requestedRouteName !== '/_error') {\n      const root = getRootSpan(span);\n      root.setAttribute(TRANSACTION_ATTR_SENTRY_ROUTE_BACKFILL, options.requestedRouteName);\n    }\n\n    const { 'sentry-trace': sentryTrace, baggage } = getTraceData();\n\n    return {\n      sentryTrace: sentryTrace,\n      baggage: baggage,\n      data: await origDataFetcher.apply(this, args),\n    };\n  };\n}\n\n/**\n * Call a data fetcher and trace it. Only traces the function if there is an active transaction on the scope.\n *\n * We only do the following until we move transaction creation into this function: When called, the wrapped function\n * will also update the name of the active transaction with a parameterized route provided via the `options` argument.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport async function callDataFetcherTraced<F extends (...args: any[]) => Promise<any> | any>(\n  origFunction: F,\n  origFunctionArgs: Parameters<F>,\n): Promise<ReturnType<F>> {\n  try {\n    return await origFunction(...origFunctionArgs);\n  } catch (e) {\n    captureException(e, { mechanism: { handled: false } });\n    throw e;\n  }\n}\n"],"names":["captureException","httpRequestToRequestData","getCurrentScope","getIsolationScope","getActiveSpan","getRootSpan","TRANSACTION_ATTR_SENTRY_ROUTE_BACKFILL","getTraceData"],"mappings":";;;;;AAYA;;;;CAIA,GACA,8DAAA;AACO,SAAS,yBACd,YAAY;IAEZ,OAAO,eAA+B,GAAG,qBAAqB;QAC5D,IAAI;YACF,OAAO,MAAM,aAAa,KAAK,CAAC,IAAI,EAAE;QAC5C,EAAM,OAAO,GAAG;YAChB,sHAAA;YACMA,KAAAA,gBAAgB,CAAC,GAAG;gBAAE,WAAW;oBAAE,SAAS;gBAAA;YAAM;YAClD,MAAM;QACZ;IACA;AACA;AAEA;;;;;;;;;;;;;CAaA,GACA,8DAAA;AACO,SAAS,gCACd,eAAe,EACf,GAAG,EACH,GAAG,EACH,OAAA;IASA,OAAO,eAEL,GAAG,IAAA;QAEH,MAAM,oBAAoBC,KAAAA,wBAAwB,CAAC;QACnDC,KAAAA,eAAe,GAAG,kBAAkB,CAAC,CAAC,EAAA,QAAA,sBAAA,CAAA,EAAA,EAAA,QAAA,oBAAA,CAAA,CAAA,CAAA;QACAC,KAAAA,iBAAA,GAAA,wBAAA,CAAA;YAAA;QAAA;QAEA,MAAA,OAAAC,KAAAA,aAAA;QAEA,6DAAA;QACA,IAAA,QAAA,QAAA,kBAAA,KAAA,WAAA;YACA,MAAA,OAAAC,KAAAA,WAAA,CAAA;YACA,KAAA,YAAA,CAAAC,gCAAAA,sCAAA,EAAA,QAAA,kBAAA;QACA;QAEA,MAAA,EAAA,gBAAA,WAAA,EAAA,OAAA,EAAA,GAAAC,KAAAA,YAAA;QAEA,OAAA;YACA,aAAA;YACA,SAAA;YACA,MAAA,MAAA,gBAAA,KAAA,CAAA,IAAA,EAAA;QACA;IACA;AACA;AAEA;;;;;CAKA,GACA,8DAAA;AACA,eAAA,sBACA,YAAA,EACA,gBAAA;IAEA,IAAA;QACA,OAAA,MAAA,gBAAA;IACA,EAAA,OAAA,GAAA;QACAP,KAAAA,gBAAA,CAAA,GAAA;YAAA,WAAA;gBAAA,SAAA;YAAA;QAAA;QACA,MAAA;IACA;AACA"}},
    {"offset": {"line": 1623, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1627, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/common/pages-router-instrumentation/wrapGetStaticPropsWithSentry.ts"],"sourcesContent":["import type { GetStaticProps } from 'next';\nimport { isBuild } from '../utils/isBuild';\nimport { callDataFetcherTraced, withErrorInstrumentation } from '../utils/wrapperUtils';\n\ntype Props = { [key: string]: unknown };\n\n/**\n * Create a wrapped version of the user's exported `getStaticProps` function\n *\n * @param origGetStaticProps The user's `getStaticProps` function\n * @param parameterizedRoute The page's parameterized route\n * @returns A wrapped version of the function\n */\nexport function wrapGetStaticPropsWithSentry(\n  origGetStaticPropsa: GetStaticProps<Props>,\n  _parameterizedRoute: string,\n): GetStaticProps<Props> {\n  return new Proxy(origGetStaticPropsa, {\n    apply: async (wrappingTarget, thisArg, args: Parameters<GetStaticProps<Props>>) => {\n      if (isBuild()) {\n        return wrappingTarget.apply(thisArg, args);\n      }\n\n      const errorWrappedGetStaticProps = withErrorInstrumentation(wrappingTarget);\n      return callDataFetcherTraced(errorWrappedGetStaticProps, args);\n    },\n  });\n}\n"],"names":["isBuild","withErrorInstrumentation","callDataFetcherTraced"],"mappings":";;;;;AAMA;;;;;;CAMA,GACO,SAAS,6BACd,mBAAmB,EACnB,mBAAmB;IAEnB,OAAO,IAAI,MAAM,qBAAqB;QACpC,OAAO,OAAO,gBAAgB,SAAS;YACrC,IAAIA,QAAAA,OAAO,IAAI;gBACb,OAAO,eAAe,KAAK,CAAC,SAAS;YAC7C;YAEM,MAAM,6BAA6BC,aAAAA,wBAAwB,CAAC;YAC5D,OAAOC,aAAAA,qBAAqB,CAAC,4BAA4B;QAC/D;IACA;AACA"}},
    {"offset": {"line": 1650, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1654, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/common/pages-router-instrumentation/wrapGetInitialPropsWithSentry.ts"],"sourcesContent":["import type { NextPage } from 'next';\nimport { isBuild } from '../utils/isBuild';\nimport { withErrorInstrumentation, withTracedServerSideDataFetcher } from '../utils/wrapperUtils';\n\ntype GetInitialProps = Required<NextPage>['getInitialProps'];\n\n/**\n * Create a wrapped version of the user's exported `getInitialProps` function\n *\n * @param origGetInitialProps The user's `getInitialProps` function\n * @param parameterizedRoute The page's parameterized route\n * @returns A wrapped version of the function\n */\nexport function wrapGetInitialPropsWithSentry(origGetInitialProps: GetInitialProps): GetInitialProps {\n  return new Proxy(origGetInitialProps, {\n    apply: async (wrappingTarget, thisArg, args: Parameters<GetInitialProps>) => {\n      if (isBuild()) {\n        return wrappingTarget.apply(thisArg, args);\n      }\n\n      const [context] = args;\n      const { req, res } = context;\n\n      const errorWrappedGetInitialProps = withErrorInstrumentation(wrappingTarget);\n      // Generally we can assume that `req` and `res` are always defined on the server:\n      // https://nextjs.org/docs/api-reference/data-fetching/get-initial-props#context-object\n      // This does not seem to be the case in dev mode. Because we have no clean way of associating the the data fetcher\n      // span with each other when there are no req or res objects, we simply do not trace them at all here.\n      if (req && res) {\n        const tracedGetInitialProps = withTracedServerSideDataFetcher(errorWrappedGetInitialProps, req, res, {\n          dataFetcherRouteName: context.pathname,\n          requestedRouteName: context.pathname,\n          dataFetchingMethodName: 'getInitialProps',\n        });\n\n        const {\n          data: initialProps,\n          baggage,\n          sentryTrace,\n        }: {\n          data?: unknown;\n          baggage?: string;\n          sentryTrace?: string;\n        } = (await tracedGetInitialProps.apply(thisArg, args)) ?? {}; // Next.js allows undefined to be returned from a getInitialPropsFunction.\n\n        if (typeof initialProps === 'object' && initialProps !== null) {\n          // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n          if (sentryTrace) {\n            (initialProps as Record<string, unknown>)._sentryTraceData = sentryTrace;\n          }\n\n          // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n          if (baggage) {\n            (initialProps as Record<string, unknown>)._sentryBaggage = baggage;\n          }\n        }\n\n        return initialProps;\n      } else {\n        return errorWrappedGetInitialProps.apply(thisArg, args);\n      }\n    },\n  });\n}\n"],"names":["isBuild","withErrorInstrumentation","withTracedServerSideDataFetcher"],"mappings":";;;;;AAMA;;;;;;CAMA,GACO,SAAS,8BAA8B,mBAAmB;IAC/D,OAAO,IAAI,MAAM,qBAAqB;QACpC,OAAO,OAAO,gBAAgB,SAAS;YACrC,IAAIA,QAAAA,OAAO,IAAI;gBACb,OAAO,eAAe,KAAK,CAAC,SAAS;YAC7C;YAEM,MAAM,CAAC,QAAO,GAAI;YAClB,MAAM,EAAE,GAAG,EAAE,GAAA,EAAI,GAAI;YAErB,MAAM,8BAA8BC,aAAAA,wBAAwB,CAAC;YACnE,iFAAA;YACA,uFAAA;YACA,kHAAA;YACA,sGAAA;YACM,IAAI,OAAO,KAAK;gBACd,MAAM,wBAAwBC,aAAAA,+BAA+B,CAAC,6BAA6B,KAAK,KAAK;oBACnG,sBAAsB,QAAQ,QAAQ;oBACtC,oBAAoB,QAAQ,QAAQ;oBACpC,wBAAwB;gBAClC;gBAEQ,MAAM,EACJ,MAAM,YAAY,EAClB,OAAO,EACP,WAAW,EACrB,GAIY,AAAC,MAAM,sBAAsB,KAAK,CAAC,SAAS,SAAU,CAAA,GAAE,0EAAA;gBAE5D,IAAI,OAAO,iBAAiB,YAAY,iBAAiB,MAAM;oBACvE,wFAAA;oBACU,IAAI,aAAa;wBACd,aAAyC,gBAAA,GAAmB;oBACzE;oBAEA,wFAAA;oBACU,IAAI,SAAS;wBACV,aAAyC,cAAA,GAAiB;oBACvE;gBACA;gBAEQ,OAAO;YACf,OAAa;gBACL,OAAO,4BAA4B,KAAK,CAAC,SAAS;YAC1D;QACA;IACA;AACA"}},
    {"offset": {"line": 1703, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1707, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/common/pages-router-instrumentation/wrapAppGetInitialPropsWithSentry.ts"],"sourcesContent":["import type App from 'next/app';\nimport { isBuild } from '../utils/isBuild';\nimport { withErrorInstrumentation, withTracedServerSideDataFetcher } from '../utils/wrapperUtils';\n\ntype AppGetInitialProps = (typeof App)['getInitialProps'];\n\n/**\n * Create a wrapped version of the user's exported `getInitialProps` function in\n * a custom app (\"_app.js\").\n *\n * @param origAppGetInitialProps The user's `getInitialProps` function\n * @param parameterizedRoute The page's parameterized route\n * @returns A wrapped version of the function\n */\nexport function wrapAppGetInitialPropsWithSentry(origAppGetInitialProps: AppGetInitialProps): AppGetInitialProps {\n  return new Proxy(origAppGetInitialProps, {\n    apply: async (wrappingTarget, thisArg, args: Parameters<AppGetInitialProps>) => {\n      if (isBuild()) {\n        return wrappingTarget.apply(thisArg, args);\n      }\n\n      const [context] = args;\n      const { req, res } = context.ctx;\n\n      const errorWrappedAppGetInitialProps = withErrorInstrumentation(wrappingTarget);\n\n      // Generally we can assume that `req` and `res` are always defined on the server:\n      // https://nextjs.org/docs/api-reference/data-fetching/get-initial-props#context-object\n      // This does not seem to be the case in dev mode. Because we have no clean way of associating the the data fetcher\n      // span with each other when there are no req or res objects, we simply do not trace them at all here.\n      if (req && res) {\n        const tracedGetInitialProps = withTracedServerSideDataFetcher(errorWrappedAppGetInitialProps, req, res, {\n          dataFetcherRouteName: '/_app',\n          requestedRouteName: context.ctx.pathname,\n          dataFetchingMethodName: 'getInitialProps',\n        });\n\n        const {\n          data: appGetInitialProps,\n          sentryTrace,\n          baggage,\n        }: {\n          data?: unknown;\n          sentryTrace?: string;\n          baggage?: string;\n        } = await tracedGetInitialProps.apply(thisArg, args);\n\n        if (typeof appGetInitialProps === 'object' && appGetInitialProps !== null) {\n          // Per definition, `pageProps` is not optional, however an increased amount of users doesn't seem to call\n          // `App.getInitialProps(appContext)` in their custom `_app` pages which is required as per\n          // https://nextjs.org/docs/advanced-features/custom-app - resulting in missing `pageProps`.\n          // For this reason, we just handle the case where `pageProps` doesn't exist explicitly.\n          if (!(appGetInitialProps as Record<string, unknown>).pageProps) {\n            (appGetInitialProps as Record<string, unknown>).pageProps = {};\n          }\n\n          // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n          if (sentryTrace) {\n            (appGetInitialProps as { pageProps: Record<string, unknown> }).pageProps._sentryTraceData = sentryTrace;\n          }\n\n          // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n          if (baggage) {\n            (appGetInitialProps as { pageProps: Record<string, unknown> }).pageProps._sentryBaggage = baggage;\n          }\n        }\n\n        return appGetInitialProps;\n      } else {\n        return errorWrappedAppGetInitialProps.apply(thisArg, args);\n      }\n    },\n  });\n}\n"],"names":["isBuild","withErrorInstrumentation","withTracedServerSideDataFetcher"],"mappings":";;;;;AAMA;;;;;;;CAOA,GACO,SAAS,iCAAiC,sBAAsB;IACrE,OAAO,IAAI,MAAM,wBAAwB;QACvC,OAAO,OAAO,gBAAgB,SAAS;YACrC,IAAIA,QAAAA,OAAO,IAAI;gBACb,OAAO,eAAe,KAAK,CAAC,SAAS;YAC7C;YAEM,MAAM,CAAC,QAAO,GAAI;YAClB,MAAM,EAAE,GAAG,EAAE,GAAA,EAAI,GAAI,QAAQ,GAAG;YAEhC,MAAM,iCAAiCC,aAAAA,wBAAwB,CAAC;YAEtE,iFAAA;YACA,uFAAA;YACA,kHAAA;YACA,sGAAA;YACM,IAAI,OAAO,KAAK;gBACd,MAAM,wBAAwBC,aAAAA,+BAA+B,CAAC,gCAAgC,KAAK,KAAK;oBACtG,sBAAsB;oBACtB,oBAAoB,QAAQ,GAAG,CAAC,QAAQ;oBACxC,wBAAwB;gBAClC;gBAEQ,MAAM,EACJ,MAAM,kBAAkB,EACxB,WAAW,EACX,OAAO,EACjB,GAIY,MAAM,sBAAsB,KAAK,CAAC,SAAS;gBAE/C,IAAI,OAAO,uBAAuB,YAAY,uBAAuB,MAAM;oBACnF,yGAAA;oBACA,0FAAA;oBACA,2FAAA;oBACA,uFAAA;oBACU,IAAI,CAAC,AAAC,mBAA+C,SAAS,EAAE;wBAC7D,mBAA+C,SAAA,GAAY,CAAA;oBACxE;oBAEA,wFAAA;oBACU,IAAI,aAAa;wBACd,mBAA8D,SAAS,CAAC,gBAAA,GAAmB;oBACxG;oBAEA,wFAAA;oBACU,IAAI,SAAS;wBACV,mBAA8D,SAAS,CAAC,cAAA,GAAiB;oBACtG;gBACA;gBAEQ,OAAO;YACf,OAAa;gBACL,OAAO,+BAA+B,KAAK,CAAC,SAAS;YAC7D;QACA;IACA;AACA"}},
    {"offset": {"line": 1764, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1768, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/common/pages-router-instrumentation/wrapDocumentGetInitialPropsWithSentry.ts"],"sourcesContent":["import type Document from 'next/document';\nimport { isBuild } from '../utils/isBuild';\nimport { withErrorInstrumentation, withTracedServerSideDataFetcher } from '../utils/wrapperUtils';\n\ntype DocumentGetInitialProps = typeof Document.getInitialProps;\n\n/**\n * Create a wrapped version of the user's exported `getInitialProps` function in\n * a custom document (\"_document.js\").\n *\n * @param origDocumentGetInitialProps The user's `getInitialProps` function\n * @param parameterizedRoute The page's parameterized route\n * @returns A wrapped version of the function\n */\nexport function wrapDocumentGetInitialPropsWithSentry(\n  origDocumentGetInitialProps: DocumentGetInitialProps,\n): DocumentGetInitialProps {\n  return new Proxy(origDocumentGetInitialProps, {\n    apply: async (wrappingTarget, thisArg, args: Parameters<DocumentGetInitialProps>) => {\n      if (isBuild()) {\n        return wrappingTarget.apply(thisArg, args);\n      }\n\n      const [context] = args;\n      const { req, res } = context;\n\n      const errorWrappedGetInitialProps = withErrorInstrumentation(wrappingTarget);\n      // Generally we can assume that `req` and `res` are always defined on the server:\n      // https://nextjs.org/docs/api-reference/data-fetching/get-initial-props#context-object\n      // This does not seem to be the case in dev mode. Because we have no clean way of associating the the data fetcher\n      // span with each other when there are no req or res objects, we simply do not trace them at all here.\n      if (req && res) {\n        const tracedGetInitialProps = withTracedServerSideDataFetcher(errorWrappedGetInitialProps, req, res, {\n          dataFetcherRouteName: '/_document',\n          requestedRouteName: context.pathname,\n          dataFetchingMethodName: 'getInitialProps',\n        });\n\n        const { data } = await tracedGetInitialProps.apply(thisArg, args);\n        return data;\n      } else {\n        return errorWrappedGetInitialProps.apply(thisArg, args);\n      }\n    },\n  });\n}\n"],"names":["isBuild","withErrorInstrumentation","withTracedServerSideDataFetcher"],"mappings":";;;;;AAMA;;;;;;;CAOA,GACO,SAAS,sCACd,2BAA2B;IAE3B,OAAO,IAAI,MAAM,6BAA6B;QAC5C,OAAO,OAAO,gBAAgB,SAAS;YACrC,IAAIA,QAAAA,OAAO,IAAI;gBACb,OAAO,eAAe,KAAK,CAAC,SAAS;YAC7C;YAEM,MAAM,CAAC,QAAO,GAAI;YAClB,MAAM,EAAE,GAAG,EAAE,GAAA,EAAI,GAAI;YAErB,MAAM,8BAA8BC,aAAAA,wBAAwB,CAAC;YACnE,iFAAA;YACA,uFAAA;YACA,kHAAA;YACA,sGAAA;YACM,IAAI,OAAO,KAAK;gBACd,MAAM,wBAAwBC,aAAAA,+BAA+B,CAAC,6BAA6B,KAAK,KAAK;oBACnG,sBAAsB;oBACtB,oBAAoB,QAAQ,QAAQ;oBACpC,wBAAwB;gBAClC;gBAEQ,MAAM,EAAE,IAAA,EAAK,GAAI,MAAM,sBAAsB,KAAK,CAAC,SAAS;gBAC5D,OAAO;YACf,OAAa;gBACL,OAAO,4BAA4B,KAAK,CAAC,SAAS;YAC1D;QACA;IACA;AACA"}},
    {"offset": {"line": 1808, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1812, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/common/pages-router-instrumentation/wrapErrorGetInitialPropsWithSentry.ts"],"sourcesContent":["import type { NextPageContext } from 'next';\nimport type { ErrorProps } from 'next/error';\nimport { isBuild } from '../utils/isBuild';\nimport { withErrorInstrumentation, withTracedServerSideDataFetcher } from '../utils/wrapperUtils';\n\ntype ErrorGetInitialProps = (context: NextPageContext) => Promise<ErrorProps>;\n\n/**\n * Create a wrapped version of the user's exported `getInitialProps` function in\n * a custom error page (\"_error.js\").\n *\n * @param origErrorGetInitialProps The user's `getInitialProps` function\n * @param parameterizedRoute The page's parameterized route\n * @returns A wrapped version of the function\n */\nexport function wrapErrorGetInitialPropsWithSentry(\n  origErrorGetInitialProps: ErrorGetInitialProps,\n): ErrorGetInitialProps {\n  return new Proxy(origErrorGetInitialProps, {\n    apply: async (wrappingTarget, thisArg, args: Parameters<ErrorGetInitialProps>) => {\n      if (isBuild()) {\n        return wrappingTarget.apply(thisArg, args);\n      }\n\n      const [context] = args;\n      const { req, res } = context;\n\n      const errorWrappedGetInitialProps = withErrorInstrumentation(wrappingTarget);\n      // Generally we can assume that `req` and `res` are always defined on the server:\n      // https://nextjs.org/docs/api-reference/data-fetching/get-initial-props#context-object\n      // This does not seem to be the case in dev mode. Because we have no clean way of associating the the data fetcher\n      // span with each other when there are no req or res objects, we simply do not trace them at all here.\n      if (req && res) {\n        const tracedGetInitialProps = withTracedServerSideDataFetcher(errorWrappedGetInitialProps, req, res, {\n          dataFetcherRouteName: '/_error',\n          requestedRouteName: context.pathname,\n          dataFetchingMethodName: 'getInitialProps',\n        });\n\n        const {\n          data: errorGetInitialProps,\n          baggage,\n          sentryTrace,\n        }: {\n          data?: unknown;\n          baggage?: string;\n          sentryTrace?: string;\n        } = await tracedGetInitialProps.apply(thisArg, args);\n\n        if (typeof errorGetInitialProps === 'object' && errorGetInitialProps !== null) {\n          if (sentryTrace) {\n            // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n            (errorGetInitialProps as Record<string, unknown>)._sentryTraceData = sentryTrace;\n          }\n\n          // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n          if (baggage) {\n            (errorGetInitialProps as Record<string, unknown>)._sentryBaggage = baggage;\n          }\n        }\n\n        return errorGetInitialProps;\n      } else {\n        return errorWrappedGetInitialProps.apply(thisArg, args);\n      }\n    },\n  });\n}\n"],"names":["isBuild","withErrorInstrumentation","withTracedServerSideDataFetcher"],"mappings":";;;;;AAOA;;;;;;;CAOA,GACO,SAAS,mCACd,wBAAwB;IAExB,OAAO,IAAI,MAAM,0BAA0B;QACzC,OAAO,OAAO,gBAAgB,SAAS;YACrC,IAAIA,QAAAA,OAAO,IAAI;gBACb,OAAO,eAAe,KAAK,CAAC,SAAS;YAC7C;YAEM,MAAM,CAAC,QAAO,GAAI;YAClB,MAAM,EAAE,GAAG,EAAE,GAAA,EAAI,GAAI;YAErB,MAAM,8BAA8BC,aAAAA,wBAAwB,CAAC;YACnE,iFAAA;YACA,uFAAA;YACA,kHAAA;YACA,sGAAA;YACM,IAAI,OAAO,KAAK;gBACd,MAAM,wBAAwBC,aAAAA,+BAA+B,CAAC,6BAA6B,KAAK,KAAK;oBACnG,sBAAsB;oBACtB,oBAAoB,QAAQ,QAAQ;oBACpC,wBAAwB;gBAClC;gBAEQ,MAAM,EACJ,MAAM,oBAAoB,EAC1B,OAAO,EACP,WAAW,EACrB,GAIY,MAAM,sBAAsB,KAAK,CAAC,SAAS;gBAE/C,IAAI,OAAO,yBAAyB,YAAY,yBAAyB,MAAM;oBAC7E,IAAI,aAAa;wBAC3B,wFAAA;wBACa,qBAAiD,gBAAA,GAAmB;oBACjF;oBAEA,wFAAA;oBACU,IAAI,SAAS;wBACV,qBAAiD,cAAA,GAAiB;oBAC/E;gBACA;gBAEQ,OAAO;YACf,OAAa;gBACL,OAAO,4BAA4B,KAAK,CAAC,SAAS;YAC1D;QACA;IACA;AACA"}},
    {"offset": {"line": 1862, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1866, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/common/pages-router-instrumentation/wrapGetServerSidePropsWithSentry.ts"],"sourcesContent":["import type { GetServerSideProps } from 'next';\nimport { isBuild } from '../utils/isBuild';\nimport { withErrorInstrumentation, withTracedServerSideDataFetcher } from '../utils/wrapperUtils';\n\n/**\n * Create a wrapped version of the user's exported `getServerSideProps` function\n *\n * @param origGetServerSideProps The user's `getServerSideProps` function\n * @param parameterizedRoute The page's parameterized route\n * @returns A wrapped version of the function\n */\nexport function wrapGetServerSidePropsWithSentry(\n  origGetServerSideProps: GetServerSideProps,\n  parameterizedRoute: string,\n): GetServerSideProps {\n  return new Proxy(origGetServerSideProps, {\n    apply: async (wrappingTarget, thisArg, args: Parameters<GetServerSideProps>) => {\n      if (isBuild()) {\n        return wrappingTarget.apply(thisArg, args);\n      }\n\n      const [context] = args;\n      const { req, res } = context;\n\n      const errorWrappedGetServerSideProps = withErrorInstrumentation(wrappingTarget);\n      const tracedGetServerSideProps = withTracedServerSideDataFetcher(errorWrappedGetServerSideProps, req, res, {\n        dataFetcherRouteName: parameterizedRoute,\n        requestedRouteName: parameterizedRoute,\n        dataFetchingMethodName: 'getServerSideProps',\n      });\n\n      const {\n        data: serverSideProps,\n        baggage,\n        sentryTrace,\n      }: {\n        data?: unknown;\n        baggage?: string;\n        sentryTrace?: string;\n      } = await (tracedGetServerSideProps.apply(thisArg, args) as ReturnType<typeof tracedGetServerSideProps>);\n\n      if (typeof serverSideProps === 'object' && serverSideProps !== null && 'props' in serverSideProps) {\n        // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n        if (sentryTrace) {\n          (serverSideProps.props as Record<string, unknown>)._sentryTraceData = sentryTrace;\n        }\n\n        // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n        if (baggage) {\n          (serverSideProps.props as Record<string, unknown>)._sentryBaggage = baggage;\n        }\n      }\n\n      return serverSideProps;\n    },\n  });\n}\n"],"names":["isBuild","withErrorInstrumentation","withTracedServerSideDataFetcher"],"mappings":";;;;;AAIA;;;;;;CAMA,GACO,SAAS,iCACd,sBAAsB,EACtB,kBAAkB;IAElB,OAAO,IAAI,MAAM,wBAAwB;QACvC,OAAO,OAAO,gBAAgB,SAAS;YACrC,IAAIA,QAAAA,OAAO,IAAI;gBACb,OAAO,eAAe,KAAK,CAAC,SAAS;YAC7C;YAEM,MAAM,CAAC,QAAO,GAAI;YAClB,MAAM,EAAE,GAAG,EAAE,GAAA,EAAI,GAAI;YAErB,MAAM,iCAAiCC,aAAAA,wBAAwB,CAAC;YAChE,MAAM,2BAA2BC,aAAAA,+BAA+B,CAAC,gCAAgC,KAAK,KAAK;gBACzG,sBAAsB;gBACtB,oBAAoB;gBACpB,wBAAwB;YAChC;YAEM,MAAM,EACJ,MAAM,eAAe,EACrB,OAAO,EACP,WAAW,EACnB,GAIU,MAAO,yBAAyB,KAAK,CAAC,SAAS;YAEnD,IAAI,OAAO,oBAAoB,YAAY,oBAAoB,QAAQ,WAAW,iBAAiB;gBACzG,wFAAA;gBACQ,IAAI,aAAa;oBACd,gBAAgB,KAAA,CAAkC,gBAAA,GAAmB;gBAChF;gBAEA,wFAAA;gBACQ,IAAI,SAAS;oBACV,gBAAgB,KAAA,CAAkC,cAAA,GAAiB;gBAC9E;YACA;YAEM,OAAO;QACb;IACA;AACA"}},
    {"offset": {"line": 1907, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1911, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/common/nextNavigationErrorUtils.ts"],"sourcesContent":["import { isError } from '@sentry/core';\n\n/**\n * Determines whether input is a Next.js not-found error.\n * https://beta.nextjs.org/docs/api-reference/notfound#notfound\n */\nexport function isNotFoundNavigationError(subject: unknown): boolean {\n  return (\n    isError(subject) &&\n    ['NEXT_NOT_FOUND', 'NEXT_HTTP_ERROR_FALLBACK;404'].includes(\n      (subject as Error & { digest?: unknown }).digest as string,\n    )\n  );\n}\n\n/**\n * Determines whether input is a Next.js redirect error.\n * https://beta.nextjs.org/docs/api-reference/redirect#redirect\n */\nexport function isRedirectNavigationError(subject: unknown): boolean {\n  return (\n    isError(subject) &&\n    typeof (subject as Error & { digest?: unknown }).digest === 'string' &&\n    (subject as Error & { digest: string }).digest.startsWith('NEXT_REDIRECT;') // a redirect digest looks like \"NEXT_REDIRECT;[redirect path]\"\n  );\n}\n"],"names":["isError"],"mappings":";;;;AAEA;;;CAGA,GACO,SAAS,0BAA0B,OAAO;IAC/C,OACEA,KAAAA,OAAO,CAAC,YACR;QAAC;QAAkB;KAA+B,CAAC,QAAQ,CACzD,AAAC,QAAyC,MAAA;AAGhD;AAEA;;;CAGA,GACO,SAAS,0BAA0B,OAAO;IAC/C,OACEA,KAAAA,OAAO,CAAC,YACR,OAAO,AAAC,QAAyC,MAAA,KAAW,YAC5D,AAAC,QAAuC,MAAM,CAAC,UAAU,CAAC,kBAAgB,+DAAA;;AAE9E"}},
    {"offset": {"line": 1933, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1937, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/common/utils/tracingUtils.ts"],"sourcesContent":["import type { PropagationContext } from '@sentry/core';\nimport { getActiveSpan, getRootSpan, GLOBAL_OBJ, logger, Scope, spanToJSON, startNewTrace } from '@sentry/core';\nimport { DEBUG_BUILD } from '../debug-build';\nimport { TRANSACTION_ATTR_SHOULD_DROP_TRANSACTION } from '../span-attributes-with-logic-attached';\n\nconst commonPropagationContextMap = new WeakMap<object, PropagationContext>();\n\n/**\n * Takes a shared (garbage collectable) object between resources, e.g. a headers object shared between Next.js server components and returns a common propagation context.\n *\n * @param commonObject The shared object.\n * @param propagationContext The propagation context that should be shared between all the resources if no propagation context was registered yet.\n * @returns the shared propagation context.\n */\nexport function commonObjectToPropagationContext(\n  commonObject: unknown,\n  propagationContext: PropagationContext,\n): PropagationContext {\n  if (typeof commonObject === 'object' && commonObject) {\n    const memoPropagationContext = commonPropagationContextMap.get(commonObject);\n    if (memoPropagationContext) {\n      return memoPropagationContext;\n    } else {\n      commonPropagationContextMap.set(commonObject, propagationContext);\n      return propagationContext;\n    }\n  } else {\n    return propagationContext;\n  }\n}\n\nconst commonIsolationScopeMap = new WeakMap<object, Scope>();\n\n/**\n * Takes a shared (garbage collectable) object between resources, e.g. a headers object shared between Next.js server components and returns a common propagation context.\n *\n * @param commonObject The shared object.\n * @param isolationScope The isolationScope that should be shared between all the resources if no isolation scope was created yet.\n * @returns the shared isolation scope.\n */\nexport function commonObjectToIsolationScope(commonObject: unknown): Scope {\n  if (typeof commonObject === 'object' && commonObject) {\n    const memoIsolationScope = commonIsolationScopeMap.get(commonObject);\n    if (memoIsolationScope) {\n      return memoIsolationScope;\n    } else {\n      const newIsolationScope = new Scope();\n      commonIsolationScopeMap.set(commonObject, newIsolationScope);\n      return newIsolationScope;\n    }\n  } else {\n    return new Scope();\n  }\n}\n\ninterface AsyncLocalStorage<T> {\n  getStore(): T | undefined;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  run<R, TArgs extends any[]>(store: T, callback: (...args: TArgs) => R, ...args: TArgs): R;\n}\n\nlet nextjsEscapedAsyncStorage: AsyncLocalStorage<true>;\n\n/**\n * Will mark the execution context of the callback as \"escaped\" from Next.js internal tracing by unsetting the active\n * span and propagation context. When an execution passes through this function multiple times, it is a noop after the\n * first time.\n */\nexport function escapeNextjsTracing<T>(cb: () => T): T {\n  const MaybeGlobalAsyncLocalStorage = (GLOBAL_OBJ as { AsyncLocalStorage?: new () => AsyncLocalStorage<true> })\n    .AsyncLocalStorage;\n\n  if (!MaybeGlobalAsyncLocalStorage) {\n    DEBUG_BUILD &&\n      logger.warn(\n        \"Tried to register AsyncLocalStorage async context strategy in a runtime that doesn't support AsyncLocalStorage.\",\n      );\n    return cb();\n  }\n\n  if (!nextjsEscapedAsyncStorage) {\n    nextjsEscapedAsyncStorage = new MaybeGlobalAsyncLocalStorage();\n  }\n\n  if (nextjsEscapedAsyncStorage.getStore()) {\n    return cb();\n  } else {\n    return startNewTrace(() => {\n      return nextjsEscapedAsyncStorage.run(true, () => {\n        return cb();\n      });\n    });\n  }\n}\n\n/**\n * Ideally this function never lands in the develop branch.\n *\n * Drops the entire span tree this function was called in, if it was a span tree created by Next.js.\n */\nexport function dropNextjsRootContext(): void {\n  const nextJsOwnedSpan = getActiveSpan();\n  if (nextJsOwnedSpan) {\n    const rootSpan = getRootSpan(nextJsOwnedSpan);\n    const rootSpanAttributes = spanToJSON(rootSpan).data;\n    if (rootSpanAttributes?.['next.span_type']) {\n      getRootSpan(nextJsOwnedSpan)?.setAttribute(TRANSACTION_ATTR_SHOULD_DROP_TRANSACTION, true);\n    }\n  }\n}\n"],"names":["Scope","GLOBAL_OBJ","DEBUG_BUILD","logger","startNewTrace","getActiveSpan","getRootSpan","spanToJSON","TRANSACTION_ATTR_SHOULD_DROP_TRANSACTION"],"mappings":";;;;;;AAKA,MAAM,8BAA8B,IAAI;AAExC;;;;;;CAMA,GACO,SAAS,iCACd,YAAY,EACZ,kBAAkB;IAElB,IAAI,OAAO,iBAAiB,YAAY,cAAc;QACpD,MAAM,yBAAyB,4BAA4B,GAAG,CAAC;QAC/D,IAAI,wBAAwB;YAC1B,OAAO;QACb,OAAW;YACL,4BAA4B,GAAG,CAAC,cAAc;YAC9C,OAAO;QACb;IACA,OAAS;QACL,OAAO;IACX;AACA;AAEA,MAAM,0BAA0B,IAAI;AAEpC;;;;;;CAMA,GACO,SAAS,6BAA6B,YAAY;IACvD,IAAI,OAAO,iBAAiB,YAAY,cAAc;QACpD,MAAM,qBAAqB,wBAAwB,GAAG,CAAC;QACvD,IAAI,oBAAoB;YACtB,OAAO;QACb,OAAW;YACL,MAAM,oBAAoB,IAAIA,KAAAA,KAAK;YACnC,wBAAwB,GAAG,CAAC,cAAc;YAC1C,OAAO;QACb;IACA,OAAS;QACL,OAAO,IAAIA,KAAAA,KAAK;IACpB;AACA;AAQA,IAAI;AAEJ;;;;CAIA,GACO,SAAS,oBAAuB,EAAE;IACvC,MAAM,+BAA+B,AAACC,KAAAA,UAAA,CACnC,iBAAiB;IAEpB,IAAI,CAAC,8BAA8B;QACjCC,WAAAA,WAAA,IACEC,KAAAA,MAAM,CAAC,IAAI,CACT;QAEJ,OAAO;IACX;IAEE,IAAI,CAAC,2BAA2B;QAC9B,4BAA4B,IAAI;IACpC;IAEE,IAAI,0BAA0B,QAAQ,IAAI;QACxC,OAAO;IACX,OAAS;QACL,OAAOC,KAAAA,aAAa,CAAC;YACnB,OAAO,0BAA0B,GAAG,CAAC,MAAM;gBACzC,OAAO;YACf;QACA;IACA;AACA;AAEA;;;;CAIA,GACO,SAAS;IACd,MAAM,kBAAkBC,KAAAA,aAAa;IACrC,IAAI,iBAAiB;QACnB,MAAM,WAAWC,KAAAA,WAAW,CAAC;QAC7B,MAAM,qBAAqBC,KAAAA,UAAU,CAAC,UAAU,IAAI;QACpD,IAAI,oBAAkB,CAAG,iBAAiB,EAAE;YAC1CD,KAAAA,WAAW,CAAC,kBAAkB,aAAaE,gCAAAA,wCAAwC,EAAE;QAC3F;IACA;AACA"}},
    {"offset": {"line": 2026, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2030, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/common/utils/urls.ts"],"sourcesContent":["import { getSanitizedUrlStringFromUrlObject, parseStringToURLObject } from '@sentry/core';\n\ntype ComponentRouteParams = Record<string, string> | undefined;\ntype HeadersDict = Record<string, string> | undefined;\n\nconst HeaderKeys = {\n  FORWARDED_PROTO: 'x-forwarded-proto',\n  FORWARDED_HOST: 'x-forwarded-host',\n  HOST: 'host',\n  REFERER: 'referer',\n} as const;\n\n/**\n * Replaces route parameters in a path template with their values\n * @param path - The path template containing parameters in [paramName] format\n * @param params - Optional route parameters to replace in the template\n * @returns The path with parameters replaced\n */\nexport function substituteRouteParams(path: string, params?: ComponentRouteParams): string {\n  if (!params || typeof params !== 'object') return path;\n\n  let resultPath = path;\n  for (const [key, value] of Object.entries(params)) {\n    resultPath = resultPath.split(`[${key}]`).join(encodeURIComponent(value));\n  }\n  return resultPath;\n}\n\n/**\n * Normalizes a path by removing route groups\n * @param path - The path to normalize\n * @returns The normalized path\n */\nexport function sanitizeRoutePath(path: string): string {\n  const cleanedSegments = path\n    .split('/')\n    .filter(segment => segment && !(segment.startsWith('(') && segment.endsWith(')')));\n\n  return cleanedSegments.length > 0 ? `/${cleanedSegments.join('/')}` : '/';\n}\n\n/**\n * Constructs a full URL from the component route, parameters, and headers.\n *\n * @param componentRoute - The route template to construct the URL from\n * @param params - Optional route parameters to replace in the template\n * @param headersDict - Optional headers containing protocol and host information\n * @param pathname - Optional pathname coming from parent span \"http.target\"\n * @returns A sanitized URL string\n */\nexport function buildUrlFromComponentRoute(\n  componentRoute: string,\n  params?: ComponentRouteParams,\n  headersDict?: HeadersDict,\n  pathname?: string,\n): string {\n  const parameterizedPath = substituteRouteParams(componentRoute, params);\n  // If available, the pathname from the http.target of the HTTP request server span takes precedence over the parameterized path.\n  // Spans such as generateMetadata and Server Component rendering are typically direct children of that span.\n  const path = pathname ?? sanitizeRoutePath(parameterizedPath);\n\n  const protocol = headersDict?.[HeaderKeys.FORWARDED_PROTO];\n  const host = headersDict?.[HeaderKeys.FORWARDED_HOST] || headersDict?.[HeaderKeys.HOST];\n\n  if (!protocol || !host) {\n    return path;\n  }\n\n  const fullUrl = `${protocol}://${host}${path}`;\n\n  const urlObject = parseStringToURLObject(fullUrl);\n  if (!urlObject) {\n    return path;\n  }\n\n  return getSanitizedUrlStringFromUrlObject(urlObject);\n}\n\n/**\n * Returns a sanitized URL string from the referer header if it exists and is valid.\n *\n * @param headersDict - Optional headers containing the referer\n * @returns A sanitized URL string or undefined if referer is missing/invalid\n */\nexport function extractSanitizedUrlFromRefererHeader(headersDict?: HeadersDict): string | undefined {\n  const referer = headersDict?.[HeaderKeys.REFERER];\n  if (!referer) {\n    return undefined;\n  }\n\n  try {\n    const refererUrl = new URL(referer);\n    return getSanitizedUrlStringFromUrlObject(refererUrl);\n  } catch (error) {\n    return undefined;\n  }\n}\n\n/**\n * Returns a sanitized URL string using the referer header if available,\n * otherwise constructs the URL from the component route, params, and headers.\n *\n * @param componentRoute - The route template to construct the URL from\n * @param params - Optional route parameters to replace in the template\n * @param headersDict - Optional headers containing protocol, host, and referer\n * @param pathname - Optional pathname coming from root span \"http.target\"\n * @returns A sanitized URL string\n */\nexport function getSanitizedRequestUrl(\n  componentRoute: string,\n  params?: ComponentRouteParams,\n  headersDict?: HeadersDict,\n  pathname?: string,\n): string {\n  const refererUrl = extractSanitizedUrlFromRefererHeader(headersDict);\n  if (refererUrl) {\n    return refererUrl;\n  }\n\n  return buildUrlFromComponentRoute(componentRoute, params, headersDict, pathname);\n}\n"],"names":["parseStringToURLObject","getSanitizedUrlStringFromUrlObject"],"mappings":";;;;AAKA,MAAM,aAAa;IACjB,iBAAiB;IACjB,gBAAgB;IAChB,MAAM;IACN,SAAS;AACX;AAEA;;;;;CAKA,GACO,SAAS,sBAAsB,IAAI,EAAU,MAAM;IACxD,IAAI,CAAC,UAAU,OAAO,WAAW,UAAU,OAAO;IAElD,IAAI,aAAa;IACjB,KAAK,MAAM,CAAC,KAAK,MAAK,IAAK,OAAO,OAAO,CAAC,QAAS;QACjD,aAAa,WAAW,KAAK,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,mBAAmB;IACtE;IACE,OAAO;AACT;AAEA;;;;CAIA,GACO,SAAS,kBAAkB,IAAI;IACpC,MAAM,kBAAkB,KACrB,KAAK,CAAC,KACN,MAAM,CAAC,CAAA,UAAW,WAAW,CAAA,CAAE,QAAQ,UAAU,CAAC,QAAQ,QAAQ,QAAQ,CAAC,IAAI;IAElF,OAAO,gBAAgB,MAAA,GAAS,IAAI,CAAC,CAAC,EAAE,gBAAgB,IAAI,CAAC,KAAK,CAAA,GAAA;AACA;AAEA;;;;;;;;CAQA,GACA,SAAA,2BACA,cAAA,EACA,MAAA,EACA,WAAA,EACA,QAAA;IAEA,MAAA,oBAAA,sBAAA,gBAAA;IACA,gIAAA;IACA,4GAAA;IACA,MAAA,OAAA,YAAA,kBAAA;IAEA,MAAA,WAAA,aAAA,CAAA,WAAA,eAAA,CAAA;IACA,MAAA,OAAA,aAAA,CAAA,WAAA,cAAA,CAAA,IAAA,aAAA,CAAA,WAAA,IAAA,CAAA;IAEA,IAAA,CAAA,YAAA,CAAA,MAAA;QACA,OAAA;IACA;IAEA,MAAA,UAAA,CAAA,EAAA,SAAA,GAAA,EAAA,KAAA,EAAA,KAAA,CAAA;IAEA,MAAA,YAAAA,KAAAA,sBAAA,CAAA;IACA,IAAA,CAAA,WAAA;QACA,OAAA;IACA;IAEA,OAAAC,KAAAA,kCAAA,CAAA;AACA;AAEA;;;;;CAKA,GACA,SAAA,qCAAA,WAAA;IACA,MAAA,UAAA,aAAA,CAAA,WAAA,OAAA,CAAA;IACA,IAAA,CAAA,SAAA;QACA,OAAA;IACA;IAEA,IAAA;QACA,MAAA,aAAA,IAAA,IAAA;QACA,OAAAA,KAAAA,kCAAA,CAAA;IACA,EAAA,OAAA,OAAA;QACA,OAAA;IACA;AACA;AAEA;;;;;;;;;CASA,GACA,SAAA,uBACA,cAAA,EACA,MAAA,EACA,WAAA,EACA,QAAA;IAEA,MAAA,aAAA,qCAAA;IACA,IAAA,YAAA;QACA,OAAA;IACA;IAEA,OAAA,2BAAA,gBAAA,QAAA,aAAA;AACA"}},
    {"offset": {"line": 2124, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2128, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/common/wrapServerComponentWithSentry.ts"],"sourcesContent":["import type { RequestEventData } from '@sentry/core';\nimport {\n  captureException,\n  getActiveSpan,\n  getCapturedScopesOnSpan,\n  getClient,\n  getRootSpan,\n  handleCallbackErrors,\n  propagationContextFromHeaders,\n  Scope,\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n  SEMANTIC_ATTRIBUTE_SENTRY_SOURCE,\n  setCapturedScopesOnSpan,\n  SPAN_STATUS_ERROR,\n  SPAN_STATUS_OK,\n  spanToJSON,\n  startSpanManual,\n  vercelWaitUntil,\n  winterCGHeadersToDict,\n  withIsolationScope,\n  withScope,\n} from '@sentry/core';\nimport { isNotFoundNavigationError, isRedirectNavigationError } from '../common/nextNavigationErrorUtils';\nimport type { ServerComponentContext } from '../common/types';\nimport { TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL } from './span-attributes-with-logic-attached';\nimport { flushSafelyWithTimeout } from './utils/responseEnd';\nimport { commonObjectToIsolationScope, commonObjectToPropagationContext } from './utils/tracingUtils';\nimport { getSanitizedRequestUrl } from './utils/urls';\n\n/**\n * Wraps an `app` directory server component with Sentry error instrumentation.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function wrapServerComponentWithSentry<F extends (...args: any[]) => any>(\n  appDirComponent: F,\n  context: ServerComponentContext,\n): F {\n  const { componentRoute, componentType } = context;\n  // Even though users may define server components as async functions, for the client bundles\n  // Next.js will turn them into synchronous functions and it will transform any `await`s into instances of the `use`\n  // hook. 🤯\n  return new Proxy(appDirComponent, {\n    apply: (originalFunction, thisArg, args) => {\n      const requestTraceId = getActiveSpan()?.spanContext().traceId;\n      const isolationScope = commonObjectToIsolationScope(context.headers);\n\n      let pathname = undefined as string | undefined;\n      const activeSpan = getActiveSpan();\n      if (activeSpan) {\n        const rootSpan = getRootSpan(activeSpan);\n        const { scope } = getCapturedScopesOnSpan(rootSpan);\n        setCapturedScopesOnSpan(rootSpan, scope ?? new Scope(), isolationScope);\n\n        const spanData = spanToJSON(rootSpan);\n\n        if (spanData.data && 'http.target' in spanData.data) {\n          pathname = spanData.data['http.target']?.toString();\n        }\n      }\n\n      const headersDict = context.headers ? winterCGHeadersToDict(context.headers) : undefined;\n\n      let params: Record<string, string> | undefined = undefined;\n\n      if (getClient()?.getOptions().sendDefaultPii) {\n        const props: unknown = args[0];\n        params =\n          props && typeof props === 'object' && 'params' in props\n            ? (props.params as Record<string, string>)\n            : undefined;\n      }\n\n      isolationScope.setSDKProcessingMetadata({\n        normalizedRequest: {\n          headers: headersDict,\n          url: getSanitizedRequestUrl(componentRoute, params, headersDict, pathname),\n        } satisfies RequestEventData,\n      });\n\n      return withIsolationScope(isolationScope, () => {\n        return withScope(scope => {\n          scope.setTransactionName(`${componentType} Server Component (${componentRoute})`);\n\n          if (process.env.NEXT_RUNTIME === 'edge') {\n            const propagationContext = commonObjectToPropagationContext(\n              context.headers,\n              propagationContextFromHeaders(headersDict?.['sentry-trace'], headersDict?.['baggage']),\n            );\n\n            if (requestTraceId) {\n              propagationContext.traceId = requestTraceId;\n            }\n\n            scope.setPropagationContext(propagationContext);\n          }\n\n          const activeSpan = getActiveSpan();\n          if (activeSpan) {\n            const rootSpan = getRootSpan(activeSpan);\n            const sentryTrace = headersDict?.['sentry-trace'];\n            if (sentryTrace) {\n              rootSpan.setAttribute(TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL, sentryTrace);\n            }\n          }\n\n          return startSpanManual(\n            {\n              op: 'function.nextjs',\n              name: `${componentType} Server Component (${componentRoute})`,\n              attributes: {\n                [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'component',\n                [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.function.nextjs',\n                'sentry.nextjs.ssr.function.type': componentType,\n                'sentry.nextjs.ssr.function.route': componentRoute,\n              },\n            },\n            span => {\n              return handleCallbackErrors(\n                () => originalFunction.apply(thisArg, args),\n                error => {\n                  // When you read this code you might think: \"Wait a minute, shouldn't we set the status on the root span too?\"\n                  // The answer is: \"No.\" - The status of the root span is determined by whatever status code Next.js decides to put on the response.\n                  if (isNotFoundNavigationError(error)) {\n                    // We don't want to report \"not-found\"s\n                    span.setStatus({ code: SPAN_STATUS_ERROR, message: 'not_found' });\n                  } else if (isRedirectNavigationError(error)) {\n                    // We don't want to report redirects\n                    span.setStatus({ code: SPAN_STATUS_OK });\n                  } else {\n                    span.setStatus({ code: SPAN_STATUS_ERROR, message: 'internal_error' });\n                    captureException(error, {\n                      mechanism: {\n                        handled: false,\n                      },\n                    });\n                  }\n                },\n                () => {\n                  span.end();\n                  vercelWaitUntil(flushSafelyWithTimeout());\n                },\n              );\n            },\n          );\n        });\n      });\n    },\n  });\n}\n"],"names":["getActiveSpan","commonObjectToIsolationScope","getRootSpan","getCapturedScopesOnSpan","setCapturedScopesOnSpan","Scope","spanToJSON","winterCGHeadersToDict","getClient","getSanitizedRequestUrl","withIsolationScope","withScope","TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL","startSpanManual","SEMANTIC_ATTRIBUTE_SENTRY_SOURCE","SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN","handleCallbackErrors","isNotFoundNavigationError","SPAN_STATUS_ERROR","isRedirectNavigationError","SPAN_STATUS_OK","captureException","vercelWaitUntil","flushSafelyWithTimeout"],"mappings":"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"}},
    {"offset": {"line": 2232, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2236, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/common/wrapRouteHandlerWithSentry.ts"],"sourcesContent":["import type { RequestEventData } from '@sentry/core';\nimport {\n  captureException,\n  getActiveSpan,\n  getCapturedScopesOnSpan,\n  getIsolationScope,\n  getRootSpan,\n  handleCallbackErrors,\n  propagationContextFromHeaders,\n  Scope,\n  SEMANTIC_ATTRIBUTE_SENTRY_OP,\n  SEMANTIC_ATTRIBUTE_SENTRY_SOURCE,\n  setCapturedScopesOnSpan,\n  setHttpStatus,\n  winterCGHeadersToDict,\n  withIsolationScope,\n  withScope,\n} from '@sentry/core';\nimport { isNotFoundNavigationError, isRedirectNavigationError } from './nextNavigationErrorUtils';\nimport type { RouteHandlerContext } from './types';\nimport { commonObjectToIsolationScope } from './utils/tracingUtils';\n\n/**\n * Wraps a Next.js App Router Route handler with Sentry error and performance instrumentation.\n *\n * NOTICE: This wrapper is for App Router API routes. If you are looking to wrap Pages Router API routes use `wrapApiHandlerWithSentry` instead.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function wrapRouteHandlerWithSentry<F extends (...args: any[]) => any>(\n  routeHandler: F,\n  context: RouteHandlerContext,\n): (...args: Parameters<F>) => ReturnType<F> extends Promise<unknown> ? ReturnType<F> : Promise<ReturnType<F>> {\n  const { method, parameterizedRoute, headers } = context;\n\n  return new Proxy(routeHandler, {\n    apply: async (originalFunction, thisArg, args) => {\n      const activeSpan = getActiveSpan();\n      const rootSpan = activeSpan ? getRootSpan(activeSpan) : undefined;\n\n      let edgeRuntimeIsolationScopeOverride: Scope | undefined;\n      if (rootSpan && process.env.NEXT_RUNTIME === 'edge') {\n        const isolationScope = commonObjectToIsolationScope(headers);\n        const { scope } = getCapturedScopesOnSpan(rootSpan);\n        setCapturedScopesOnSpan(rootSpan, scope ?? new Scope(), isolationScope);\n\n        edgeRuntimeIsolationScopeOverride = isolationScope;\n\n        rootSpan.updateName(`${method} ${parameterizedRoute}`);\n        rootSpan.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, 'route');\n        rootSpan.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'http.server');\n      }\n\n      return withIsolationScope(\n        process.env.NEXT_RUNTIME === 'edge' ? edgeRuntimeIsolationScopeOverride : getIsolationScope(),\n        () => {\n          return withScope(async scope => {\n            scope.setTransactionName(`${method} ${parameterizedRoute}`);\n\n            if (process.env.NEXT_RUNTIME === 'edge') {\n              const completeHeadersDict: Record<string, string> = headers ? winterCGHeadersToDict(headers) : {};\n              const incomingPropagationContext = propagationContextFromHeaders(\n                completeHeadersDict['sentry-trace'],\n                completeHeadersDict['baggage'],\n              );\n              scope.setPropagationContext(incomingPropagationContext);\n              scope.setSDKProcessingMetadata({\n                normalizedRequest: {\n                  method,\n                  headers: completeHeadersDict,\n                } satisfies RequestEventData,\n              });\n            }\n\n            const response: Response = await handleCallbackErrors(\n              () => originalFunction.apply(thisArg, args),\n              error => {\n                // Next.js throws errors when calling `redirect()`. We don't wanna report these.\n                if (isRedirectNavigationError(error)) {\n                  // Don't do anything\n                } else if (isNotFoundNavigationError(error)) {\n                  if (activeSpan) {\n                    setHttpStatus(activeSpan, 404);\n                  }\n                  if (rootSpan) {\n                    setHttpStatus(rootSpan, 404);\n                  }\n                } else {\n                  captureException(error, {\n                    mechanism: {\n                      handled: false,\n                    },\n                  });\n                }\n              },\n            );\n\n            try {\n              if (response.status) {\n                if (activeSpan) {\n                  setHttpStatus(activeSpan, response.status);\n                }\n                if (rootSpan) {\n                  setHttpStatus(rootSpan, response.status);\n                }\n              }\n            } catch {\n              // best effort - response may be undefined?\n            }\n\n            return response;\n          });\n        },\n      );\n    },\n  });\n}\n"],"names":["getActiveSpan","getRootSpan","commonObjectToIsolationScope","getCapturedScopesOnSpan","setCapturedScopesOnSpan","Scope","SEMANTIC_ATTRIBUTE_SENTRY_SOURCE","SEMANTIC_ATTRIBUTE_SENTRY_OP","withIsolationScope","getIsolationScope","withScope","handleCallbackErrors","isRedirectNavigationError","isNotFoundNavigationError","setHttpStatus","captureException"],"mappings":";;;;;;AAsBA;;;;CAIA,GACA,8DAAA;AACO,SAAS,2BACd,YAAY,EACZ,OAAO;IAEP,MAAM,EAAE,MAAM,EAAE,kBAAkB,EAAE,OAAA,EAAQ,GAAI;IAEhD,OAAO,IAAI,MAAM,cAAc;QAC7B,OAAO,OAAO,kBAAkB,SAAS;YACvC,MAAM,aAAaA,KAAAA,aAAa;YAChC,MAAM,WAAW,aAAaC,KAAAA,WAAW,CAAC,cAAc;YAExD,IAAI;YACJ,IAAI,YAAY,+CAA6B,QAAQ;gBACnD,MAAM,iBAAiBC,aAAAA,4BAA4B,CAAC;gBACpD,MAAM,EAAE,KAAA,EAAM,GAAIC,KAAAA,uBAAuB,CAAC;gBAC1CC,KAAAA,uBAAuB,CAAC,UAAU,SAAS,IAAIC,KAAAA,KAAK,IAAI;gBAExD,oCAAoC;gBAEpC,SAAS,UAAU,CAAC,CAAC,EAAA,OAAA,CAAA,EAAA,mBAAA,CAAA;gBACA,SAAA,YAAA,CAAAC,KAAAA,gCAAA,EAAA;gBACA,SAAA,YAAA,CAAAC,KAAAA,4BAAA,EAAA;YACA;YAEA,OAAAC,KAAAA,kBAAA,CACA,6EAAAC,KAAAA,iBAAA,IACA;gBACA,OAAAC,KAAAA,SAAA,CAAA,OAAA;oBACA,MAAA,kBAAA,CAAA,CAAA,EAAA,OAAA,CAAA,EAAA,mBAAA,CAAA;oBAEA;;;oBAeA,MAAA,WAAA,MAAAC,KAAAA,oBAAA,CACA,IAAA,iBAAA,KAAA,CAAA,SAAA,OACA,CAAA;wBACA,gFAAA;wBACA,IAAAC,yBAAAA,yBAAA,CAAA;6BAEA,IAAAC,yBAAAA,yBAAA,CAAA,QAAA;4BACA,IAAA,YAAA;gCACAC,KAAAA,aAAA,CAAA,YAAA;4BACA;4BACA,IAAA,UAAA;gCACAA,KAAAA,aAAA,CAAA,UAAA;4BACA;wBACA,OAAA;4BACAC,KAAAA,gBAAA,CAAA,OAAA;gCACA,WAAA;oCACA,SAAA;gCACA;4BACA;wBACA;oBACA;oBAGA,IAAA;wBACA,IAAA,SAAA,MAAA,EAAA;4BACA,IAAA,YAAA;gCACAD,KAAAA,aAAA,CAAA,YAAA,SAAA,MAAA;4BACA;4BACA,IAAA,UAAA;gCACAA,KAAAA,aAAA,CAAA,UAAA,SAAA,MAAA;4BACA;wBACA;oBACA,EAAA,OAAA;oBACA,2CAAA;oBACA;oBAEA,OAAA;gBACA;YACA;QAEA;IACA;AACA"}},
    {"offset": {"line": 2306, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2310, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/common/pages-router-instrumentation/wrapApiHandlerWithSentryVercelCrons.ts"],"sourcesContent":["import { captureCheckIn } from '@sentry/core';\nimport type { NextApiRequest } from 'next';\nimport type { VercelCronsConfig } from '../types';\n\ntype EdgeRequest = {\n  nextUrl: URL;\n  headers: Headers;\n};\n\n/**\n * Wraps a function with Sentry crons instrumentation by automatically sending check-ins for the given Vercel crons config.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function wrapApiHandlerWithSentryVercelCrons<F extends (...args: any[]) => any>(\n  handler: F,\n  vercelCronsConfig: VercelCronsConfig,\n): F {\n  return new Proxy(handler, {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    apply: (originalFunction, thisArg, args: any[]) => {\n      if (!args?.[0]) {\n        return originalFunction.apply(thisArg, args);\n      }\n\n      const [req] = args as [NextApiRequest | EdgeRequest];\n\n      let maybePromiseResult;\n      const cronsKey = 'nextUrl' in req ? req.nextUrl.pathname : req.url;\n      const userAgentHeader = 'nextUrl' in req ? req.headers.get('user-agent') : req.headers['user-agent'];\n\n      if (\n        !vercelCronsConfig || // do nothing if vercel crons config is missing\n        !userAgentHeader?.includes('vercel-cron') // do nothing if endpoint is not called from vercel crons\n      ) {\n        return originalFunction.apply(thisArg, args);\n      }\n\n      const vercelCron = vercelCronsConfig.find(vercelCron => vercelCron.path === cronsKey);\n\n      if (!vercelCron?.path || !vercelCron.schedule) {\n        return originalFunction.apply(thisArg, args);\n      }\n\n      const monitorSlug = vercelCron.path;\n\n      const checkInId = captureCheckIn(\n        {\n          monitorSlug,\n          status: 'in_progress',\n        },\n        {\n          maxRuntime: 60 * 12, // (minutes) so 12 hours - just a very high arbitrary number since we don't know the actual duration of the users cron job\n          schedule: {\n            type: 'crontab',\n            value: vercelCron.schedule,\n          },\n        },\n      );\n\n      const startTime = Date.now() / 1000;\n\n      const handleErrorCase = (): void => {\n        captureCheckIn({\n          checkInId,\n          monitorSlug,\n          status: 'error',\n          duration: Date.now() / 1000 - startTime,\n        });\n      };\n\n      try {\n        maybePromiseResult = originalFunction.apply(thisArg, args);\n      } catch (e) {\n        handleErrorCase();\n        throw e;\n      }\n\n      if (typeof maybePromiseResult === 'object' && maybePromiseResult !== null && 'then' in maybePromiseResult) {\n        Promise.resolve(maybePromiseResult).then(\n          () => {\n            captureCheckIn({\n              checkInId,\n              monitorSlug,\n              status: 'ok',\n              duration: Date.now() / 1000 - startTime,\n            });\n          },\n          () => {\n            handleErrorCase();\n          },\n        );\n\n        // It is very important that we return the original promise here, because Next.js attaches various properties\n        // to that promise and will throw if they are not on the returned value.\n        return maybePromiseResult;\n      } else {\n        captureCheckIn({\n          checkInId,\n          monitorSlug,\n          status: 'ok',\n          duration: Date.now() / 1000 - startTime,\n        });\n        return maybePromiseResult;\n      }\n    },\n  });\n}\n"],"names":["captureCheckIn"],"mappings":";;;;AASA;;CAEA,GACA,8DAAA;AACO,SAAS,oCACd,OAAO,EACP,iBAAiB;IAEjB,OAAO,IAAI,MAAM,SAAS;QAC5B,8DAAA;QACI,OAAO,CAAC,kBAAkB,SAAS;YACjC,IAAI,CAAC,MAAI,CAAG,EAAE,EAAE;gBACd,OAAO,iBAAiB,KAAK,CAAC,SAAS;YAC/C;YAEM,MAAM,CAAC,IAAG,GAAI;YAEd,IAAI;YACJ,MAAM,WAAW,aAAa,MAAM,IAAI,OAAO,CAAC,QAAA,GAAW,IAAI,GAAG;YAClE,MAAM,kBAAkB,aAAa,MAAM,IAAI,OAAO,CAAC,GAAG,CAAC,gBAAgB,IAAI,OAAO,CAAC,aAAa;YAEpG,IACE,CAAC,qBAAA,+CAAA;YACD,CAAC,iBAAiB,SAAS,eAAa,yDAAA;cACxC;gBACA,OAAO,iBAAiB,KAAK,CAAC,SAAS;YAC/C;YAEM,MAAM,aAAa,kBAAkB,IAAI,CAAC,CAAA,aAAc,WAAW,IAAA,KAAS;YAE5E,IAAI,CAAC,YAAY,QAAQ,CAAC,WAAW,QAAQ,EAAE;gBAC7C,OAAO,iBAAiB,KAAK,CAAC,SAAS;YAC/C;YAEM,MAAM,cAAc,WAAW,IAAI;YAEnC,MAAM,YAAYA,KAAAA,cAAc,CAC9B;gBACE;gBACA,QAAQ;YAClB,GACQ;gBACE,YAAY,KAAK;gBACjB,UAAU;oBACR,MAAM;oBACN,OAAO,WAAW,QAAQ;gBACtC;YACA;YAGM,MAAM,YAAY,KAAK,GAAG,KAAK;YAE/B,MAAM,kBAAkB;gBACtBA,KAAAA,cAAc,CAAC;oBACb;oBACA;oBACA,QAAQ;oBACR,UAAU,KAAK,GAAG,KAAK,OAAO;gBACxC;YACA;YAEM,IAAI;gBACF,qBAAqB,iBAAiB,KAAK,CAAC,SAAS;YAC7D,EAAQ,OAAO,GAAG;gBACV;gBACA,MAAM;YACd;YAEM,IAAI,OAAO,uBAAuB,YAAY,uBAAuB,QAAQ,UAAU,oBAAoB;gBACzG,QAAQ,OAAO,CAAC,oBAAoB,IAAI,CACtC;oBACEA,KAAAA,cAAc,CAAC;wBACb;wBACA;wBACA,QAAQ;wBACR,UAAU,KAAK,GAAG,KAAK,OAAO;oBAC5C;gBACA,GACU;oBACE;gBACZ;gBAGA,6GAAA;gBACA,wEAAA;gBACQ,OAAO;YACf,OAAa;gBACLA,KAAAA,cAAc,CAAC;oBACb;oBACA;oBACA,QAAQ;oBACR,UAAU,KAAK,GAAG,KAAK,OAAO;gBACxC;gBACQ,OAAO;YACf;QACA;IACA;AACA"}},
    {"offset": {"line": 2390, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2394, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/common/wrapMiddlewareWithSentry.ts"],"sourcesContent":["import type { TransactionSource } from '@sentry/core';\nimport {\n  captureException,\n  getActiveSpan,\n  getCurrentScope,\n  getRootSpan,\n  handleCallbackErrors,\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n  SEMANTIC_ATTRIBUTE_SENTRY_SOURCE,\n  setCapturedScopesOnSpan,\n  startSpan,\n  vercelWaitUntil,\n  winterCGRequestToRequestData,\n  withIsolationScope,\n} from '@sentry/core';\nimport type { EdgeRouteHandler } from '../edge/types';\nimport { flushSafelyWithTimeout } from './utils/responseEnd';\n\n/**\n * Wraps Next.js middleware with Sentry error and performance instrumentation.\n *\n * @param middleware The middleware handler.\n * @returns a wrapped middleware handler.\n */\nexport function wrapMiddlewareWithSentry<H extends EdgeRouteHandler>(\n  middleware: H,\n): (...params: Parameters<H>) => Promise<ReturnType<H>> {\n  return new Proxy(middleware, {\n    apply: async (wrappingTarget, thisArg, args: Parameters<H>) => {\n      const tunnelRoute =\n        '_sentryRewritesTunnelPath' in globalThis\n          ? (globalThis as Record<string, unknown>)._sentryRewritesTunnelPath\n          : undefined;\n\n      if (tunnelRoute && typeof tunnelRoute === 'string') {\n        const req: unknown = args[0];\n        // Check if the current request matches the tunnel route\n        if (req instanceof Request) {\n          const url = new URL(req.url);\n          const isTunnelRequest = url.pathname.startsWith(tunnelRoute);\n\n          if (isTunnelRequest) {\n            // Create a simple response that mimics NextResponse.next() so we don't need to import internals here\n            // which breaks next 13 apps\n            // https://github.com/vercel/next.js/blob/c12c9c1f78ad384270902f0890dc4cd341408105/packages/next/src/server/web/spec-extension/response.ts#L146\n            return new Response(null, {\n              status: 200,\n              headers: {\n                'x-middleware-next': '1',\n              },\n            }) as ReturnType<H>;\n          }\n        }\n      }\n      // TODO: We still should add central isolation scope creation for when our build-time instrumentation does not work anymore with turbopack.\n      return withIsolationScope(isolationScope => {\n        const req: unknown = args[0];\n        const currentScope = getCurrentScope();\n\n        let spanName: string;\n        let spanSource: TransactionSource;\n\n        if (req instanceof Request) {\n          isolationScope.setSDKProcessingMetadata({\n            normalizedRequest: winterCGRequestToRequestData(req),\n          });\n          spanName = `middleware ${req.method} ${new URL(req.url).pathname}`;\n          spanSource = 'url';\n        } else {\n          spanName = 'middleware';\n          spanSource = 'component';\n        }\n\n        currentScope.setTransactionName(spanName);\n\n        const activeSpan = getActiveSpan();\n\n        if (activeSpan) {\n          // If there is an active span, it likely means that the automatic Next.js OTEL instrumentation worked and we can\n          // rely on that for parameterization.\n          spanName = 'middleware';\n          spanSource = 'component';\n\n          const rootSpan = getRootSpan(activeSpan);\n          if (rootSpan) {\n            setCapturedScopesOnSpan(rootSpan, currentScope, isolationScope);\n          }\n        }\n\n        return startSpan(\n          {\n            name: spanName,\n            op: 'http.server.middleware',\n            attributes: {\n              [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: spanSource,\n              [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.function.nextjs.wrapMiddlewareWithSentry',\n            },\n          },\n          () => {\n            return handleCallbackErrors(\n              () => wrappingTarget.apply(thisArg, args),\n              error => {\n                captureException(error, {\n                  mechanism: {\n                    type: 'instrument',\n                    handled: false,\n                  },\n                });\n              },\n              () => {\n                vercelWaitUntil(flushSafelyWithTimeout());\n              },\n            );\n          },\n        );\n      });\n    },\n  });\n}\n"],"names":["withIsolationScope","getCurrentScope","winterCGRequestToRequestData","getActiveSpan","getRootSpan","setCapturedScopesOnSpan","startSpan","SEMANTIC_ATTRIBUTE_SENTRY_SOURCE","SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN","handleCallbackErrors","captureException","vercelWaitUntil","flushSafelyWithTimeout"],"mappings":";;;;;AAkBA;;;;;CAKA,GACO,SAAS,yBACd,UAAU;IAEV,OAAO,IAAI,MAAM,YAAY;QAC3B,OAAO,OAAO,gBAAgB,SAAS;YACrC,MAAM,cACJ,+BAA+B,aAC3B,AAAC,WAAuC,yBAAA,GACxC;YAEN,IAAI,eAAe,OAAO,gBAAgB,UAAU;gBAClD,MAAM,MAAe,IAAI,CAAC,EAAE;gBACpC,wDAAA;gBACQ,IAAI,eAAe,SAAS;oBAC1B,MAAM,MAAM,IAAI,IAAI,IAAI,GAAG;oBAC3B,MAAM,kBAAkB,IAAI,QAAQ,CAAC,UAAU,CAAC;oBAEhD,IAAI,iBAAiB;wBAC/B,qGAAA;wBACA,4BAAA;wBACA,+IAAA;wBACY,OAAO,IAAI,SAAS,MAAM;4BACxB,QAAQ;4BACR,SAAS;gCACP,qBAAqB;4BACrC;wBACA;oBACA;gBACA;YACA;YACA,2IAAA;YACM,OAAOA,KAAAA,kBAAkB,CAAC,CAAA;gBACxB,MAAM,MAAe,IAAI,CAAC,EAAE;gBAC5B,MAAM,eAAeC,KAAAA,eAAe;gBAEpC,IAAI;gBACJ,IAAI;gBAEJ,IAAI,eAAe,SAAS;oBAC1B,eAAe,wBAAwB,CAAC;wBACtC,mBAAmBC,KAAAA,4BAA4B,CAAC;oBAC5D;oBACU,WAAW,CAAC,WAAW,EAAE,IAAI,MAAM,CAAC,CAAC,EAAE,IAAI,IAAI,IAAI,GAAG,EAAE,QAAQ,CAAC,CAAA;oBACA,aAAA;gBACA,OAAA;oBACA,WAAA;oBACA,aAAA;gBACA;gBAEA,aAAA,kBAAA,CAAA;gBAEA,MAAA,aAAAC,KAAAA,aAAA;gBAEA,IAAA,YAAA;oBACA,gHAAA;oBACA,qCAAA;oBACA,WAAA;oBACA,aAAA;oBAEA,MAAA,WAAAC,KAAAA,WAAA,CAAA;oBACA,IAAA,UAAA;wBACAC,KAAAA,uBAAA,CAAA,UAAA,cAAA;oBACA;gBACA;gBAEA,OAAAC,KAAAA,SAAA,CACA;oBACA,MAAA;oBACA,IAAA;oBACA,YAAA;wBACA,CAAAC,KAAAA,gCAAA,CAAA,EAAA;wBACA,CAAAC,KAAAA,gCAAA,CAAA,EAAA;oBACA;gBACA,GACA;oBACA,OAAAC,KAAAA,oBAAA,CACA,IAAA,eAAA,KAAA,CAAA,SAAA,OACA,CAAA;wBACAC,KAAAA,gBAAA,CAAA,OAAA;4BACA,WAAA;gCACA,MAAA;gCACA,SAAA;4BACA;wBACA;oBACA,GACA;wBACAC,KAAAA,eAAA,CAAAC,YAAAA,sBAAA;oBACA;gBAEA;YAEA;QACA;IACA;AACA"}},
    {"offset": {"line": 2479, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2483, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/common/pages-router-instrumentation/wrapPageComponentWithSentry.ts"],"sourcesContent":["import { captureException, extractTraceparentData, getCurrentScope, withIsolationScope } from '@sentry/core';\n\ninterface FunctionComponent {\n  (...args: unknown[]): unknown;\n}\n\ninterface ClassComponent {\n  new (...args: unknown[]): {\n    props?: unknown;\n    render(...args: unknown[]): unknown;\n  };\n}\n\nfunction isReactClassComponent(target: unknown): target is ClassComponent {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return typeof target === 'function' && target?.prototype?.isReactComponent;\n}\n\n/**\n * Wraps a page component with Sentry error instrumentation.\n */\nexport function wrapPageComponentWithSentry(pageComponent: FunctionComponent | ClassComponent): unknown {\n  if (isReactClassComponent(pageComponent)) {\n    return class SentryWrappedPageComponent extends pageComponent {\n      public render(...args: unknown[]): unknown {\n        return withIsolationScope(() => {\n          const scope = getCurrentScope();\n          // We extract the sentry trace data that is put in the component props by datafetcher wrappers\n          const sentryTraceData =\n            typeof this.props === 'object' &&\n            this.props !== null &&\n            '_sentryTraceData' in this.props &&\n            typeof this.props._sentryTraceData === 'string'\n              ? this.props._sentryTraceData\n              : undefined;\n\n          if (sentryTraceData) {\n            const traceparentData = extractTraceparentData(sentryTraceData);\n            scope.setContext('trace', {\n              span_id: traceparentData?.parentSpanId,\n              trace_id: traceparentData?.traceId,\n            });\n          }\n\n          try {\n            return super.render(...args);\n          } catch (e) {\n            captureException(e, {\n              mechanism: {\n                handled: false,\n              },\n            });\n            throw e;\n          }\n        });\n      }\n    };\n  } else if (typeof pageComponent === 'function') {\n    return new Proxy(pageComponent, {\n      apply(target, thisArg, argArray: [{ _sentryTraceData?: string } | undefined]) {\n        return withIsolationScope(() => {\n          const scope = getCurrentScope();\n          // We extract the sentry trace data that is put in the component props by datafetcher wrappers\n          const sentryTraceData = argArray?.[0]?._sentryTraceData;\n\n          if (sentryTraceData) {\n            const traceparentData = extractTraceparentData(sentryTraceData);\n            scope.setContext('trace', {\n              span_id: traceparentData?.parentSpanId,\n              trace_id: traceparentData?.traceId,\n            });\n          }\n\n          try {\n            return target.apply(thisArg, argArray);\n          } catch (e) {\n            captureException(e, {\n              mechanism: {\n                handled: false,\n              },\n            });\n            throw e;\n          }\n        });\n      },\n    });\n  } else {\n    return pageComponent;\n  }\n}\n"],"names":["withIsolationScope","getCurrentScope","extractTraceparentData","captureException"],"mappings":";;;;AAaA,SAAS,sBAAsB,MAAM;IACrC,sEAAA;IACE,OAAO,OAAO,WAAW,cAAc,QAAQ,WAAW;AAC5D;AAEA;;CAEA,GACO,SAAS,4BAA4B,aAAa;IACvD,IAAI,sBAAsB,gBAAgB;QACxC,OAAO,MAAM,mCAAmC;YACvC,OAAO,GAAG,IAAI,EAAsB;gBACzC,OAAOA,KAAAA,kBAAkB,CAAC;oBACxB,MAAM,QAAQC,KAAAA,eAAe;oBACvC,8FAAA;oBACU,MAAM,kBACJ,OAAO,IAAI,CAAC,KAAA,KAAU,YACtB,IAAI,CAAC,KAAA,KAAU,QACf,sBAAsB,IAAI,CAAC,KAAA,IAC3B,OAAO,IAAI,CAAC,KAAK,CAAC,gBAAA,KAAqB,WACnC,IAAI,CAAC,KAAK,CAAC,gBAAA,GACX;oBAEN,IAAI,iBAAiB;wBACnB,MAAM,kBAAkBC,KAAAA,sBAAsB,CAAC;wBAC/C,MAAM,UAAU,CAAC,SAAS;4BACxB,SAAS,iBAAiB;4BAC1B,UAAU,iBAAiB;wBACzC;oBACA;oBAEU,IAAI;wBACF,OAAO,KAAK,CAAC,UAAU;oBACnC,EAAY,OAAO,GAAG;wBACVC,KAAAA,gBAAgB,CAAC,GAAG;4BAClB,WAAW;gCACT,SAAS;4BACzB;wBACA;wBACY,MAAM;oBAClB;gBACA;YACA;QACA;IACA,OAAS,IAAI,OAAO,kBAAkB,YAAY;QAC9C,OAAO,IAAI,MAAM,eAAe;YAC9B,OAAM,MAAM,EAAE,OAAO,EAAE,QAAQ;gBAC7B,OAAOH,KAAAA,kBAAkB,CAAC;oBACxB,MAAM,QAAQC,KAAAA,eAAe;oBACvC,8FAAA;oBACU,MAAM,kBAAkB,UAAQ,CAAG,EAAE,EAAE;oBAEvC,IAAI,iBAAiB;wBACnB,MAAM,kBAAkBC,KAAAA,sBAAsB,CAAC;wBAC/C,MAAM,UAAU,CAAC,SAAS;4BACxB,SAAS,iBAAiB;4BAC1B,UAAU,iBAAiB;wBACzC;oBACA;oBAEU,IAAI;wBACF,OAAO,OAAO,KAAK,CAAC,SAAS;oBACzC,EAAY,OAAO,GAAG;wBACVC,KAAAA,gBAAgB,CAAC,GAAG;4BAClB,WAAW;gCACT,SAAS;4BACzB;wBACA;wBACY,MAAM;oBAClB;gBACA;YACA;QACA;IACA,OAAS;QACL,OAAO;IACX;AACA"}},
    {"offset": {"line": 2553, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2557, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/common/wrapGenerationFunctionWithSentry.ts"],"sourcesContent":["import type { RequestEventData, WebFetchHeaders } from '@sentry/core';\nimport {\n  captureException,\n  getActiveSpan,\n  getCapturedScopesOnSpan,\n  getClient,\n  getRootSpan,\n  handleCallbackErrors,\n  propagationContextFromHeaders,\n  Scope,\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n  SEMANTIC_ATTRIBUTE_SENTRY_SOURCE,\n  setCapturedScopesOnSpan,\n  SPAN_STATUS_ERROR,\n  SPAN_STATUS_OK,\n  spanToJSON,\n  startSpanManual,\n  winterCGHeadersToDict,\n  withIsolationScope,\n  withScope,\n} from '@sentry/core';\nimport type { GenerationFunctionContext } from '../common/types';\nimport { isNotFoundNavigationError, isRedirectNavigationError } from './nextNavigationErrorUtils';\nimport { TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL } from './span-attributes-with-logic-attached';\nimport { commonObjectToIsolationScope, commonObjectToPropagationContext } from './utils/tracingUtils';\nimport { getSanitizedRequestUrl } from './utils/urls';\n/**\n * Wraps a generation function (e.g. generateMetadata) with Sentry error and performance instrumentation.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function wrapGenerationFunctionWithSentry<F extends (...args: any[]) => any>(\n  generationFunction: F,\n  context: GenerationFunctionContext,\n): F {\n  const { requestAsyncStorage, componentRoute, componentType, generationFunctionIdentifier } = context;\n  return new Proxy(generationFunction, {\n    apply: (originalFunction, thisArg, args) => {\n      const requestTraceId = getActiveSpan()?.spanContext().traceId;\n      let headers: WebFetchHeaders | undefined = undefined;\n      // We try-catch here just in case anything goes wrong with the async storage here goes wrong since it is Next.js internal API\n      try {\n        headers = requestAsyncStorage?.getStore()?.headers;\n      } catch (e) {\n        /** empty */\n      }\n\n      const isolationScope = commonObjectToIsolationScope(headers);\n      let pathname = undefined as string | undefined;\n\n      const activeSpan = getActiveSpan();\n      if (activeSpan) {\n        const rootSpan = getRootSpan(activeSpan);\n        const { scope } = getCapturedScopesOnSpan(rootSpan);\n        setCapturedScopesOnSpan(rootSpan, scope ?? new Scope(), isolationScope);\n\n        const spanData = spanToJSON(rootSpan);\n\n        if (spanData.data && 'http.target' in spanData.data) {\n          pathname = spanData.data['http.target'] as string;\n        }\n      }\n\n      const headersDict = headers ? winterCGHeadersToDict(headers) : undefined;\n\n      let data: Record<string, unknown> | undefined = undefined;\n      if (getClient()?.getOptions().sendDefaultPii) {\n        const props: unknown = args[0];\n        const params = props && typeof props === 'object' && 'params' in props ? props.params : undefined;\n        const searchParams =\n          props && typeof props === 'object' && 'searchParams' in props ? props.searchParams : undefined;\n        data = { params, searchParams };\n      }\n\n      return withIsolationScope(isolationScope, () => {\n        return withScope(scope => {\n          scope.setTransactionName(`${componentType}.${generationFunctionIdentifier} (${componentRoute})`);\n\n          isolationScope.setSDKProcessingMetadata({\n            normalizedRequest: {\n              headers: headersDict,\n              url: getSanitizedRequestUrl(\n                componentRoute,\n                data?.params as Record<string, string> | undefined,\n                headersDict,\n                pathname,\n              ),\n            } satisfies RequestEventData,\n          });\n\n          const activeSpan = getActiveSpan();\n          if (activeSpan) {\n            const rootSpan = getRootSpan(activeSpan);\n            const sentryTrace = headersDict?.['sentry-trace'];\n            if (sentryTrace) {\n              rootSpan.setAttribute(TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL, sentryTrace);\n            }\n          }\n\n          const propagationContext = commonObjectToPropagationContext(\n            headers,\n            propagationContextFromHeaders(headersDict?.['sentry-trace'], headersDict?.['baggage']),\n          );\n\n          if (requestTraceId) {\n            propagationContext.traceId = requestTraceId;\n          }\n\n          scope.setPropagationContext(propagationContext);\n\n          scope.setExtra('route_data', data);\n\n          return startSpanManual(\n            {\n              op: 'function.nextjs',\n              name: `${componentType}.${generationFunctionIdentifier} (${componentRoute})`,\n              attributes: {\n                [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'route',\n                [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.function.nextjs',\n                'sentry.nextjs.ssr.function.type': generationFunctionIdentifier,\n                'sentry.nextjs.ssr.function.route': componentRoute,\n              },\n            },\n            span => {\n              return handleCallbackErrors(\n                () => originalFunction.apply(thisArg, args),\n                err => {\n                  // When you read this code you might think: \"Wait a minute, shouldn't we set the status on the root span too?\"\n                  // The answer is: \"No.\" - The status of the root span is determined by whatever status code Next.js decides to put on the response.\n                  if (isNotFoundNavigationError(err)) {\n                    // We don't want to report \"not-found\"s\n                    span.setStatus({ code: SPAN_STATUS_ERROR, message: 'not_found' });\n                    getRootSpan(span).setStatus({ code: SPAN_STATUS_ERROR, message: 'not_found' });\n                  } else if (isRedirectNavigationError(err)) {\n                    // We don't want to report redirects\n                    span.setStatus({ code: SPAN_STATUS_OK });\n                  } else {\n                    span.setStatus({ code: SPAN_STATUS_ERROR, message: 'internal_error' });\n                    getRootSpan(span).setStatus({ code: SPAN_STATUS_ERROR, message: 'internal_error' });\n                    captureException(err, {\n                      mechanism: {\n                        handled: false,\n                      },\n                    });\n                  }\n                },\n                () => {\n                  span.end();\n                },\n              );\n            },\n          );\n        });\n      });\n    },\n  });\n}\n"],"names":["getActiveSpan","commonObjectToIsolationScope","getRootSpan","getCapturedScopesOnSpan","setCapturedScopesOnSpan","Scope","spanToJSON","winterCGHeadersToDict","getClient","withIsolationScope","withScope","getSanitizedRequestUrl","TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL","commonObjectToPropagationContext","propagationContextFromHeaders","startSpanManual","SEMANTIC_ATTRIBUTE_SENTRY_SOURCE","SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN","handleCallbackErrors","isNotFoundNavigationError","SPAN_STATUS_ERROR","isRedirectNavigationError","SPAN_STATUS_OK","captureException"],"mappings":"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"}},
    {"offset": {"line": 2678, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2682, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/common/withServerActionInstrumentation.ts"],"sourcesContent":["import type { RequestEventData } from '@sentry/core';\nimport {\n  captureException,\n  continueTrace,\n  getActiveSpan,\n  getClient,\n  getIsolationScope,\n  handleCallbackErrors,\n  logger,\n  SEMANTIC_ATTRIBUTE_SENTRY_SOURCE,\n  SPAN_STATUS_ERROR,\n  startSpan,\n  vercelWaitUntil,\n  withIsolationScope,\n} from '@sentry/core';\nimport { DEBUG_BUILD } from './debug-build';\nimport { isNotFoundNavigationError, isRedirectNavigationError } from './nextNavigationErrorUtils';\nimport { flushSafelyWithTimeout } from './utils/responseEnd';\n\ninterface Options {\n  formData?: FormData;\n\n  /**\n   * Headers as returned from `headers()`.\n   *\n   * Currently accepts both a plain `Headers` object and `Promise<ReadonlyHeaders>` to be compatible with async APIs introduced in Next.js 15: https://github.com/vercel/next.js/pull/68812\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  headers?: Headers | Promise<any>;\n\n  /**\n   * Whether the server action response should be included in any events captured within the server action.\n   */\n  recordResponse?: boolean;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function withServerActionInstrumentation<A extends (...args: any[]) => any>(\n  serverActionName: string,\n  callback: A,\n): Promise<ReturnType<A>>;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function withServerActionInstrumentation<A extends (...args: any[]) => any>(\n  serverActionName: string,\n  options: Options,\n  callback: A,\n): Promise<ReturnType<A>>;\n\n/**\n * Wraps a Next.js Server Action implementation with Sentry Error and Performance instrumentation.\n */\nexport function withServerActionInstrumentation<A extends (...args: unknown[]) => unknown>(\n  ...args: [string, Options, A] | [string, A]\n): Promise<ReturnType<A>> {\n  if (typeof args[1] === 'function') {\n    const [serverActionName, callback] = args;\n    return withServerActionInstrumentationImplementation(serverActionName, {}, callback);\n  } else {\n    const [serverActionName, options, callback] = args;\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return withServerActionInstrumentationImplementation(serverActionName, options, callback!);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nasync function withServerActionInstrumentationImplementation<A extends (...args: any[]) => any>(\n  serverActionName: string,\n  options: Options,\n  callback: A,\n): Promise<ReturnType<A>> {\n  return withIsolationScope(async isolationScope => {\n    const sendDefaultPii = getClient()?.getOptions().sendDefaultPii;\n\n    let sentryTraceHeader;\n    let baggageHeader;\n    const fullHeadersObject: Record<string, string> = {};\n    try {\n      const awaitedHeaders: Headers = await options.headers;\n      sentryTraceHeader = awaitedHeaders?.get('sentry-trace') ?? undefined;\n      baggageHeader = awaitedHeaders?.get('baggage');\n      awaitedHeaders?.forEach((value, key) => {\n        fullHeadersObject[key] = value;\n      });\n    } catch (e) {\n      DEBUG_BUILD &&\n        logger.warn(\n          \"Sentry wasn't able to extract the tracing headers for a server action. Will not trace this request.\",\n        );\n    }\n\n    isolationScope.setTransactionName(`serverAction/${serverActionName}`);\n    isolationScope.setSDKProcessingMetadata({\n      normalizedRequest: {\n        headers: fullHeadersObject,\n      } satisfies RequestEventData,\n    });\n\n    // Normally, there is an active span here (from Next.js OTEL) and we just use that as parent\n    // Else, we manually continueTrace from the incoming headers\n    const continueTraceIfNoActiveSpan = getActiveSpan()\n      ? <T>(_opts: unknown, callback: () => T) => callback()\n      : continueTrace;\n\n    return continueTraceIfNoActiveSpan(\n      {\n        sentryTrace: sentryTraceHeader,\n        baggage: baggageHeader,\n      },\n      async () => {\n        try {\n          return await startSpan(\n            {\n              op: 'function.server_action',\n              name: `serverAction/${serverActionName}`,\n              forceTransaction: true,\n              attributes: {\n                [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'route',\n              },\n            },\n            async span => {\n              const result = await handleCallbackErrors(callback, error => {\n                if (isNotFoundNavigationError(error)) {\n                  // We don't want to report \"not-found\"s\n                  span.setStatus({ code: SPAN_STATUS_ERROR, message: 'not_found' });\n                } else if (isRedirectNavigationError(error)) {\n                  // Don't do anything for redirects\n                } else {\n                  span.setStatus({ code: SPAN_STATUS_ERROR, message: 'internal_error' });\n                  captureException(error, {\n                    mechanism: {\n                      handled: false,\n                    },\n                  });\n                }\n              });\n\n              if (options.recordResponse !== undefined ? options.recordResponse : sendDefaultPii) {\n                getIsolationScope().setExtra('server_action_result', result);\n              }\n\n              if (options.formData) {\n                options.formData.forEach((value, key) => {\n                  getIsolationScope().setExtra(\n                    `server_action_form_data.${key}`,\n                    typeof value === 'string' ? value : '[non-string value]',\n                  );\n                });\n              }\n\n              return result;\n            },\n          );\n        } finally {\n          vercelWaitUntil(flushSafelyWithTimeout());\n        }\n      },\n    );\n  });\n}\n"],"names":["withIsolationScope","getClient","DEBUG_BUILD","logger","getActiveSpan","continueTrace","startSpan","SEMANTIC_ATTRIBUTE_SENTRY_SOURCE","handleCallbackErrors","isNotFoundNavigationError","SPAN_STATUS_ERROR","isRedirectNavigationError","captureException","getIsolationScope","vercelWaitUntil","flushSafelyWithTimeout"],"mappings":";;;;;;;AAiDA;;CAEA,GACO,SAAS,gCACd,GAAG,IAAA;IAEH,IAAI,OAAO,IAAI,CAAC,EAAC,KAAM,YAAY;QACjC,MAAM,CAAC,kBAAkB,SAAQ,GAAI;QACrC,OAAO,8CAA8C,kBAAkB,CAAA,GAAI;IAC/E,OAAS;QACL,MAAM,CAAC,kBAAkB,SAAS,SAAQ,GAAI;QAClD,oEAAA;QACI,OAAO,8CAA8C,kBAAkB,SAAS;IACpF;AACA;AAEA,8DAAA;AACA,eAAe,8CACb,gBAAgB,EAChB,OAAO,EACP,QAAQ;IAER,OAAOA,KAAAA,kBAAkB,CAAC,OAAM;QAC9B,MAAM,iBAAiBC,KAAAA,SAAS,IAAI,aAAa;QAEjD,IAAI;QACJ,IAAI;QACJ,MAAM,oBAA4C,CAAA;QAClD,IAAI;YACF,MAAM,iBAA0B,MAAM,QAAQ,OAAO;YACrD,oBAAoB,gBAAgB,IAAI,mBAAmB;YAC3D,gBAAgB,gBAAgB,IAAI;YACpC,gBAAgB,QAAQ,CAAC,OAAO;gBAC9B,iBAAiB,CAAC,IAAG,GAAI;YACjC;QACA,EAAM,OAAO,GAAG;YACVC,WAAAA,WAAA,IACEC,KAAAA,MAAM,CAAC,IAAI,CACT;QAEV;QAEI,eAAe,kBAAkB,CAAC,CAAC,aAAa,EAAE,iBAAiB,CAAA;QACA,eAAA,wBAAA,CAAA;YACA,mBAAA;gBACA,SAAA;YACA;QACA;QAEA,4FAAA;QACA,4DAAA;QACA,MAAA,8BAAAC,KAAAA,aAAA,KACA,CAAA,OAAA,WAAA,aACAC,KAAAA,aAAA;QAEA,OAAA,4BACA;YACA,aAAA;YACA,SAAA;QACA,GACA;YACA,IAAA;gBACA,OAAA,MAAAC,KAAAA,SAAA,CACA;oBACA,IAAA;oBACA,MAAA,CAAA,aAAA,EAAA,iBAAA,CAAA;oBACA,kBAAA;oBACA,YAAA;wBACA,CAAAC,KAAAA,gCAAA,CAAA,EAAA;oBACA;gBACA,GACA,OAAA;oBACA,MAAA,SAAA,MAAAC,KAAAA,oBAAA,CAAA,UAAA,CAAA;wBACA,IAAAC,yBAAAA,yBAAA,CAAA,QAAA;4BACA,uCAAA;4BACA,KAAA,SAAA,CAAA;gCAAA,MAAAC,KAAAA,iBAAA;gCAAA,SAAA;4BAAA;wBACA,OAAA,IAAAC,yBAAAA,yBAAA,CAAA,QAAA;wBACA,kCAAA;wBACA,OAAA;4BACA,KAAA,SAAA,CAAA;gCAAA,MAAAD,KAAAA,iBAAA;gCAAA,SAAA;4BAAA;4BACAE,KAAAA,gBAAA,CAAA,OAAA;gCACA,WAAA;oCACA,SAAA;gCACA;4BACA;wBACA;oBACA;oBAEA,IAAA,QAAA,cAAA,KAAA,YAAA,QAAA,cAAA,GAAA,gBAAA;wBACAC,KAAAA,iBAAA,GAAA,QAAA,CAAA,wBAAA;oBACA;oBAEA,IAAA,QAAA,QAAA,EAAA;wBACA,QAAA,QAAA,CAAA,OAAA,CAAA,CAAA,OAAA;4BACAA,KAAAA,iBAAA,GAAA,QAAA,CACA,CAAA,wBAAA,EAAA,IAAA,CAAA,EACA,OAAA,UAAA,WAAA,QAAA;wBAEA;oBACA;oBAEA,OAAA;gBACA;YAEA,SAAA;gBACAC,KAAAA,eAAA,CAAAC,YAAAA,sBAAA;YACA;QACA;IAEA;AACA"}},
    {"offset": {"line": 2778, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2782, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/common/captureRequestError.ts"],"sourcesContent":["import type { RequestEventData } from '@sentry/core';\nimport { captureException, headersToDict, vercelWaitUntil, withScope } from '@sentry/core';\nimport { flushSafelyWithTimeout } from './utils/responseEnd';\n\ntype RequestInfo = {\n  path: string;\n  method: string;\n  headers: Record<string, string | string[] | undefined>;\n};\n\ntype ErrorContext = {\n  routerKind: string; // 'Pages Router' | 'App Router'\n  routePath: string;\n  routeType: string; // 'render' | 'route' | 'middleware'\n};\n\n/**\n * Reports errors passed to the the Next.js `onRequestError` instrumentation hook.\n */\nexport function captureRequestError(error: unknown, request: RequestInfo, errorContext: ErrorContext): void {\n  withScope(scope => {\n    scope.setSDKProcessingMetadata({\n      normalizedRequest: {\n        headers: headersToDict(request.headers),\n        method: request.method,\n      } satisfies RequestEventData,\n    });\n\n    scope.setContext('nextjs', {\n      request_path: request.path,\n      router_kind: errorContext.routerKind,\n      router_path: errorContext.routePath,\n      route_type: errorContext.routeType,\n    });\n\n    scope.setTransactionName(errorContext.routePath);\n\n    captureException(error, {\n      mechanism: {\n        handled: false,\n      },\n    });\n\n    vercelWaitUntil(flushSafelyWithTimeout());\n  });\n}\n"],"names":["withScope","headersToDict","captureException","vercelWaitUntil","flushSafelyWithTimeout"],"mappings":";;;;;AAgBA;;CAEA,GACO,SAAS,oBAAoB,KAAK,EAAW,OAAO,EAAe,YAAY;IACpFA,KAAAA,SAAS,CAAC,CAAA;QACR,MAAM,wBAAwB,CAAC;YAC7B,mBAAmB;gBACjB,SAASC,KAAAA,aAAa,CAAC,QAAQ,OAAO;gBACtC,QAAQ,QAAQ,MAAM;YAC9B;QACA;QAEI,MAAM,UAAU,CAAC,UAAU;YACzB,cAAc,QAAQ,IAAI;YAC1B,aAAa,aAAa,UAAU;YACpC,aAAa,aAAa,SAAS;YACnC,YAAY,aAAa,SAAS;QACxC;QAEI,MAAM,kBAAkB,CAAC,aAAa,SAAS;QAE/CC,KAAAA,gBAAgB,CAAC,OAAO;YACtB,WAAW;gBACT,SAAS;YACjB;QACA;QAEIC,KAAAA,eAAe,CAACC,YAAAA,sBAAsB;IAC1C;AACA"}},
    {"offset": {"line": 2813, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2817, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/common/pages-router-instrumentation/wrapApiHandlerWithSentry.ts"],"sourcesContent":["import {\n  captureException,\n  continueTrace,\n  getActiveSpan,\n  httpRequestToRequestData,\n  isString,\n  logger,\n  objectify,\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n  SEMANTIC_ATTRIBUTE_SENTRY_SOURCE,\n  setHttpStatus,\n  startSpanManual,\n  vercelWaitUntil,\n  withIsolationScope,\n} from '@sentry/core';\nimport type { NextApiRequest } from 'next';\nimport type { AugmentedNextApiResponse, NextApiHandler } from '../types';\nimport { flushSafelyWithTimeout } from '../utils/responseEnd';\nimport { dropNextjsRootContext, escapeNextjsTracing } from '../utils/tracingUtils';\n\nexport type AugmentedNextApiRequest = NextApiRequest & {\n  __withSentry_applied__?: boolean;\n};\n\n/**\n * Wrap the given API route handler with error nad performance monitoring.\n *\n * @param apiHandler The handler exported from the user's API page route file, which may or may not already be\n * wrapped with `withSentry`\n * @param parameterizedRoute The page's parameterized route.\n * @returns The wrapped handler which will always return a Promise.\n */\nexport function wrapApiHandlerWithSentry(apiHandler: NextApiHandler, parameterizedRoute: string): NextApiHandler {\n  return new Proxy(apiHandler, {\n    apply: (\n      wrappingTarget,\n      thisArg,\n      args: [AugmentedNextApiRequest | undefined, AugmentedNextApiResponse | undefined],\n    ) => {\n      dropNextjsRootContext();\n      return escapeNextjsTracing(() => {\n        const [req, res] = args;\n\n        if (!req) {\n          logger.debug(\n            `Wrapped API handler on route \"${parameterizedRoute}\" was not passed a request object. Will not instrument.`,\n          );\n          return wrappingTarget.apply(thisArg, args);\n        } else if (!res) {\n          logger.debug(\n            `Wrapped API handler on route \"${parameterizedRoute}\" was not passed a response object. Will not instrument.`,\n          );\n          return wrappingTarget.apply(thisArg, args);\n        }\n\n        // Prevent double wrapping of the same request.\n        if (req.__withSentry_applied__) {\n          return wrappingTarget.apply(thisArg, args);\n        }\n        req.__withSentry_applied__ = true;\n\n        return withIsolationScope(isolationScope => {\n          // Normally, there is an active span here (from Next.js OTEL) and we just use that as parent\n          // Else, we manually continueTrace from the incoming headers\n          const continueTraceIfNoActiveSpan = getActiveSpan()\n            ? <T>(_opts: unknown, callback: () => T) => callback()\n            : continueTrace;\n\n          return continueTraceIfNoActiveSpan(\n            {\n              sentryTrace:\n                req.headers && isString(req.headers['sentry-trace']) ? req.headers['sentry-trace'] : undefined,\n              baggage: req.headers?.baggage,\n            },\n            () => {\n              const reqMethod = `${(req.method || 'GET').toUpperCase()} `;\n              const normalizedRequest = httpRequestToRequestData(req);\n\n              isolationScope.setSDKProcessingMetadata({ normalizedRequest });\n              isolationScope.setTransactionName(`${reqMethod}${parameterizedRoute}`);\n\n              return startSpanManual(\n                {\n                  name: `${reqMethod}${parameterizedRoute}`,\n                  op: 'http.server',\n                  forceTransaction: true,\n                  attributes: {\n                    [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'route',\n                    [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.nextjs',\n                  },\n                },\n                async span => {\n                  // eslint-disable-next-line @typescript-eslint/unbound-method\n                  res.end = new Proxy(res.end, {\n                    apply(target, thisArg, argArray) {\n                      setHttpStatus(span, res.statusCode);\n                      span.end();\n                      vercelWaitUntil(flushSafelyWithTimeout());\n                      return target.apply(thisArg, argArray);\n                    },\n                  });\n                  try {\n                    return await wrappingTarget.apply(thisArg, args);\n                  } catch (e) {\n                    // In case we have a primitive, wrap it in the equivalent wrapper class (string -> String, etc.) so that we can\n                    // store a seen flag on it. (Because of the one-way-on-Vercel-one-way-off-of-Vercel approach we've been forced\n                    // to take, it can happen that the same thrown object gets caught in two different ways, and flagging it is a\n                    // way to prevent it from actually being reported twice.)\n                    const objectifiedErr = objectify(e);\n\n                    captureException(objectifiedErr, {\n                      mechanism: {\n                        type: 'instrument',\n                        handled: false,\n                        data: {\n                          wrapped_handler: wrappingTarget.name,\n                          function: 'withSentry',\n                        },\n                      },\n                    });\n\n                    setHttpStatus(span, 500);\n                    span.end();\n\n                    // we need to await the flush here to ensure that the error is captured\n                    // as the runtime freezes as soon as the error is thrown below\n                    await flushSafelyWithTimeout();\n\n                    // We rethrow here so that nextjs can do with the error whatever it would normally do. (Sometimes \"whatever it\n                    // would normally do\" is to allow the error to bubble up to the global handlers - another reason we need to mark\n                    // the error as already having been captured.)\n                    throw objectifiedErr;\n                  }\n                },\n              );\n            },\n          );\n        });\n      });\n    },\n  });\n}\n"],"names":["dropNextjsRootContext","escapeNextjsTracing","logger","withIsolationScope","getActiveSpan","continueTrace","isString","httpRequestToRequestData","startSpanManual","SEMANTIC_ATTRIBUTE_SENTRY_SOURCE","SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN","setHttpStatus","vercelWaitUntil","flushSafelyWithTimeout","objectify","captureException"],"mappings":";;;;;;AAwBA;;;;;;;CAOA,GACO,SAAS,yBAAyB,UAAU,EAAkB,kBAAkB;IACrF,OAAO,IAAI,MAAM,YAAY;QAC3B,OAAO,CACL,gBACA,SACA;YAEAA,aAAAA,qBAAqB;YACrB,OAAOC,aAAAA,mBAAmB,CAAC;gBACzB,MAAM,CAAC,KAAK,IAAG,GAAI;gBAEnB,IAAI,CAAC,KAAK;oBACRC,KAAAA,MAAM,CAAC,KAAK,CACV,CAAC,8BAA8B,EAAE,mBAAmB,uDAAuD,CAAC;oBAE9G,OAAO,eAAe,KAAK,CAAC,SAAS;gBAC/C,OAAe,IAAI,CAAC,KAAK;oBACfA,KAAAA,MAAM,CAAC,KAAK,CACV,CAAC,8BAA8B,EAAE,mBAAmB,wDAAwD,CAAC;oBAE/G,OAAO,eAAe,KAAK,CAAC,SAAS;gBAC/C;gBAEA,+CAAA;gBACQ,IAAI,IAAI,sBAAsB,EAAE;oBAC9B,OAAO,eAAe,KAAK,CAAC,SAAS;gBAC/C;gBACQ,IAAI,sBAAA,GAAyB;gBAE7B,OAAOC,KAAAA,kBAAkB,CAAC,CAAA;oBAClC,4FAAA;oBACA,4DAAA;oBACU,MAAM,8BAA8BC,KAAAA,aAAa,KAC7C,CAAI,OAAgB,WAAsB,aAC1CC,KAAAA,aAAa;oBAEjB,OAAO,4BACL;wBACE,aACE,IAAI,OAAA,IAAWC,KAAAA,QAAQ,CAAC,IAAI,OAAO,CAAC,eAAe,IAAI,IAAI,OAAO,CAAC,eAAc,GAAI;wBACvF,SAAS,IAAI,OAAO,EAAE;oBACpC,GACY;wBACE,MAAM,YAAY,CAAC,EAAA,CAAA,IAAA,MAAA,IAAA,KAAA,EAAA,WAAA,GAAA,CAAA,CAAA;wBACA,MAAA,oBAAAC,KAAAA,wBAAA,CAAA;wBAEA,eAAA,wBAAA,CAAA;4BAAA;wBAAA;wBACA,eAAA,kBAAA,CAAA,CAAA,EAAA,UAAA,EAAA,mBAAA,CAAA;wBAEA,OAAAC,KAAAA,eAAA,CACA;4BACA,MAAA,CAAA,EAAA,UAAA,EAAA,mBAAA,CAAA;4BACA,IAAA;4BACA,kBAAA;4BACA,YAAA;gCACA,CAAAC,KAAAA,gCAAA,CAAA,EAAA;gCACA,CAAAC,KAAAA,gCAAA,CAAA,EAAA;4BACA;wBACA,GACA,OAAA;4BACA,6DAAA;4BACA,IAAA,GAAA,GAAA,IAAA,MAAA,IAAA,GAAA,EAAA;gCACA,OAAA,MAAA,EAAA,OAAA,EAAA,QAAA;oCACAC,KAAAA,aAAA,CAAA,MAAA,IAAA,UAAA;oCACA,KAAA,GAAA;oCACAC,KAAAA,eAAA,CAAAC,YAAAA,sBAAA;oCACA,OAAA,OAAA,KAAA,CAAA,SAAA;gCACA;4BACA;4BACA,IAAA;gCACA,OAAA,MAAA,eAAA,KAAA,CAAA,SAAA;4BACA,EAAA,OAAA,GAAA;gCACA,+GAAA;gCACA,8GAAA;gCACA,6GAAA;gCACA,yDAAA;gCACA,MAAA,iBAAAC,KAAAA,SAAA,CAAA;gCAEAC,KAAAA,gBAAA,CAAA,gBAAA;oCACA,WAAA;wCACA,MAAA;wCACA,SAAA;wCACA,MAAA;4CACA,iBAAA,eAAA,IAAA;4CACA,UAAA;wCACA;oCACA;gCACA;gCAEAJ,KAAAA,aAAA,CAAA,MAAA;gCACA,KAAA,GAAA;gCAEA,uEAAA;gCACA,8DAAA;gCACA,MAAAE,YAAAA,sBAAA;gCAEA,8GAAA;gCACA,gHAAA;gCACA,8CAAA;gCACA,MAAA;4BACA;wBACA;oBAEA;gBAEA;YACA;QACA;IACA;AACA"}},
    {"offset": {"line": 2916, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2920, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/server/index.ts"],"sourcesContent":["import { context } from '@opentelemetry/api';\nimport {\n  ATTR_HTTP_REQUEST_METHOD,\n  ATTR_HTTP_ROUTE,\n  ATTR_URL_QUERY,\n  SEMATTRS_HTTP_METHOD,\n  SEMATTRS_HTTP_TARGET,\n} from '@opentelemetry/semantic-conventions';\nimport type { EventProcessor } from '@sentry/core';\nimport {\n  applySdkMetadata,\n  extractTraceparentData,\n  getCapturedScopesOnSpan,\n  getClient,\n  getCurrentScope,\n  getGlobalScope,\n  getIsolationScope,\n  getRootSpan,\n  GLOBAL_OBJ,\n  logger,\n  SEMANTIC_ATTRIBUTE_SENTRY_OP,\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n  SEMANTIC_ATTRIBUTE_SENTRY_SOURCE,\n  setCapturedScopesOnSpan,\n  spanToJSON,\n  stripUrlQueryAndFragment,\n} from '@sentry/core';\nimport type { NodeClient, NodeOptions } from '@sentry/node';\nimport { getDefaultIntegrations, httpIntegration, init as nodeInit } from '@sentry/node';\nimport { getScopesFromContext } from '@sentry/opentelemetry';\nimport { DEBUG_BUILD } from '../common/debug-build';\nimport { devErrorSymbolicationEventProcessor } from '../common/devErrorSymbolicationEventProcessor';\nimport { getVercelEnv } from '../common/getVercelEnv';\nimport {\n  TRANSACTION_ATTR_SENTRY_ROUTE_BACKFILL,\n  TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL,\n  TRANSACTION_ATTR_SHOULD_DROP_TRANSACTION,\n} from '../common/span-attributes-with-logic-attached';\nimport { isBuild } from '../common/utils/isBuild';\nimport { distDirRewriteFramesIntegration } from './distDirRewriteFramesIntegration';\n\nexport * from '@sentry/node';\n\nexport { captureUnderscoreErrorException } from '../common/pages-router-instrumentation/_error';\n\nconst globalWithInjectedValues = GLOBAL_OBJ as typeof GLOBAL_OBJ & {\n  _sentryRewriteFramesDistDir?: string;\n  _sentryRewritesTunnelPath?: string;\n  _sentryRelease?: string;\n};\n\n/**\n * A passthrough error boundary for the server that doesn't depend on any react. Error boundaries don't catch SSR errors\n * so they should simply be a passthrough.\n */\nexport const ErrorBoundary = (props: React.PropsWithChildren<unknown>): React.ReactNode => {\n  if (!props.children) {\n    return null;\n  }\n\n  if (typeof props.children === 'function') {\n    return (props.children as () => React.ReactNode)();\n  }\n\n  // since Next.js >= 10 requires React ^16.6.0 we are allowed to return children like this here\n  return props.children as React.ReactNode;\n};\n\n/**\n * A passthrough redux enhancer for the server that doesn't depend on anything from the `@sentry/react` package.\n */\nexport function createReduxEnhancer() {\n  return (createStore: unknown) => createStore;\n}\n\n/**\n * A passthrough error boundary wrapper for the server that doesn't depend on any react. Error boundaries don't catch\n * SSR errors so they should simply be a passthrough.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function withErrorBoundary<P extends Record<string, any>>(\n  WrappedComponent: React.ComponentType<P>,\n): React.FC<P> {\n  return WrappedComponent as React.FC<P>;\n}\n\n/**\n * Just a passthrough since we're on the server and showing the report dialog on the server doesn't make any sense.\n */\nexport function showReportDialog(): void {\n  return;\n}\n\n/** Inits the Sentry NextJS SDK on node. */\nexport function init(options: NodeOptions): NodeClient | undefined {\n  if (isBuild()) {\n    return;\n  }\n\n  const customDefaultIntegrations = getDefaultIntegrations(options)\n    .filter(integration => integration.name !== 'Http')\n    .concat(\n      // We are using the HTTP integration without instrumenting incoming HTTP requests because Next.js does that by itself.\n      httpIntegration({\n        disableIncomingRequestSpans: true,\n      }),\n    );\n\n  // Turn off Next.js' own fetch instrumentation\n  // https://github.com/lforst/nextjs-fork/blob/1994fd186defda77ad971c36dc3163db263c993f/packages/next/src/server/lib/patch-fetch.ts#L245\n  process.env.NEXT_OTEL_FETCH_DISABLED = '1';\n\n  // This value is injected at build time, based on the output directory specified in the build config. Though a default\n  // is set there, we set it here as well, just in case something has gone wrong with the injection.\n  const distDirName = process.env._sentryRewriteFramesDistDir || globalWithInjectedValues._sentryRewriteFramesDistDir;\n  if (distDirName) {\n    customDefaultIntegrations.push(distDirRewriteFramesIntegration({ distDirName }));\n  }\n\n  const opts: NodeOptions = {\n    environment: process.env.SENTRY_ENVIRONMENT || getVercelEnv(false) || process.env.NODE_ENV,\n    release: process.env._sentryRelease || globalWithInjectedValues._sentryRelease,\n    defaultIntegrations: customDefaultIntegrations,\n    ...options,\n  };\n\n  if (DEBUG_BUILD && opts.debug) {\n    logger.enable();\n  }\n\n  DEBUG_BUILD && logger.log('Initializing SDK...');\n\n  if (sdkAlreadyInitialized()) {\n    DEBUG_BUILD && logger.log('SDK already initialized');\n    return;\n  }\n\n  applySdkMetadata(opts, 'nextjs', ['nextjs', 'node']);\n\n  const client = nodeInit(opts);\n  client?.on('beforeSampling', ({ spanAttributes }, samplingDecision) => {\n    // There are situations where the Next.js Node.js server forwards requests for the Edge Runtime server (e.g. in\n    // middleware) and this causes spans for Sentry ingest requests to be created. These are not exempt from our tracing\n    // because we didn't get the chance to do `suppressTracing`, since this happens outside of userland.\n    // We need to drop these spans.\n    if (\n      // eslint-disable-next-line deprecation/deprecation\n      (typeof spanAttributes[SEMATTRS_HTTP_TARGET] === 'string' &&\n        // eslint-disable-next-line deprecation/deprecation\n        spanAttributes[SEMATTRS_HTTP_TARGET].includes('sentry_key') &&\n        // eslint-disable-next-line deprecation/deprecation\n        spanAttributes[SEMATTRS_HTTP_TARGET].includes('sentry_client')) ||\n      (typeof spanAttributes[ATTR_URL_QUERY] === 'string' &&\n        spanAttributes[ATTR_URL_QUERY].includes('sentry_key') &&\n        spanAttributes[ATTR_URL_QUERY].includes('sentry_client'))\n    ) {\n      samplingDecision.decision = false;\n    }\n  });\n\n  client?.on('spanStart', span => {\n    const spanAttributes = spanToJSON(span).data;\n\n    // What we do in this glorious piece of code, is hoist any information about parameterized routes from spans emitted\n    // by Next.js via the `next.route` attribute, up to the transaction by setting the http.route attribute.\n    if (typeof spanAttributes?.['next.route'] === 'string') {\n      const rootSpan = getRootSpan(span);\n      const rootSpanAttributes = spanToJSON(rootSpan).data;\n\n      // Only hoist the http.route attribute if the transaction doesn't already have it\n      if (\n        // eslint-disable-next-line deprecation/deprecation\n        (rootSpanAttributes?.[ATTR_HTTP_REQUEST_METHOD] || rootSpanAttributes?.[SEMATTRS_HTTP_METHOD]) &&\n        !rootSpanAttributes?.[ATTR_HTTP_ROUTE]\n      ) {\n        const route = spanAttributes['next.route'].replace(/\\/route$/, '');\n        rootSpan.updateName(route);\n        rootSpan.setAttribute(ATTR_HTTP_ROUTE, route);\n        // Preserving the original attribute despite internally not depending on it\n        rootSpan.setAttribute('next.route', route);\n      }\n    }\n\n    // We want to skip span data inference for any spans generated by Next.js. Reason being that Next.js emits spans\n    // with patterns (e.g. http.server spans) that will produce confusing data.\n    if (spanAttributes?.['next.span_type'] !== undefined) {\n      span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto');\n    }\n\n    // We want to fork the isolation scope for incoming requests\n    if (spanAttributes?.['next.span_type'] === 'BaseServer.handleRequest' && span === getRootSpan(span)) {\n      const scopes = getCapturedScopesOnSpan(span);\n\n      const isolationScope = (scopes.isolationScope || getIsolationScope()).clone();\n      const scope = scopes.scope || getCurrentScope();\n\n      const currentScopesPointer = getScopesFromContext(context.active());\n      if (currentScopesPointer) {\n        currentScopesPointer.isolationScope = isolationScope;\n      }\n\n      setCapturedScopesOnSpan(span, scope, isolationScope);\n    }\n  });\n\n  getGlobalScope().addEventProcessor(\n    Object.assign(\n      (event => {\n        if (event.type === 'transaction') {\n          // Filter out transactions for static assets\n          // This regex matches the default path to the static assets (`_next/static`) and could potentially filter out too many transactions.\n          // We match `/_next/static/` anywhere in the transaction name because its location may change with the basePath setting.\n          if (event.transaction?.match(/^GET (\\/.*)?\\/_next\\/static\\//)) {\n            return null;\n          }\n\n          // Filter out transactions for requests to the tunnel route\n          if (\n            (globalWithInjectedValues._sentryRewritesTunnelPath &&\n              event.transaction === `POST ${globalWithInjectedValues._sentryRewritesTunnelPath}`) ||\n            (process.env._sentryRewritesTunnelPath &&\n              event.transaction === `POST ${process.env._sentryRewritesTunnelPath}`)\n          ) {\n            return null;\n          }\n\n          // Filter out requests to resolve source maps for stack frames in dev mode\n          if (event.transaction?.match(/\\/__nextjs_original-stack-frame/)) {\n            return null;\n          }\n\n          // Filter out /404 transactions which seem to be created excessively\n          if (\n            // Pages router\n            event.transaction === '/404' ||\n            // App router (could be \"GET /404\", \"POST /404\", ...)\n            event.transaction?.match(/^(GET|HEAD|POST|PUT|DELETE|CONNECT|OPTIONS|TRACE|PATCH) \\/(404|_not-found)$/)\n          ) {\n            return null;\n          }\n\n          // Filter transactions that we explicitly want to drop.\n          if (event.contexts?.trace?.data?.[TRANSACTION_ATTR_SHOULD_DROP_TRANSACTION]) {\n            return null;\n          }\n\n          // Next.js 13 sometimes names the root transactions like this containing useless tracing.\n          if (event.transaction === 'NextServer.getRequestHandler') {\n            return null;\n          }\n\n          // Next.js 13 is not correctly picking up tracing data for trace propagation so we use a back-fill strategy\n          if (typeof event.contexts?.trace?.data?.[TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL] === 'string') {\n            const traceparentData = extractTraceparentData(\n              event.contexts.trace.data[TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL],\n            );\n\n            if (traceparentData?.parentSampled === false) {\n              return null;\n            }\n          }\n\n          return event;\n        } else {\n          return event;\n        }\n      }) satisfies EventProcessor,\n      { id: 'NextLowQualityTransactionsFilter' },\n    ),\n  );\n\n  getGlobalScope().addEventProcessor(\n    Object.assign(\n      ((event, hint) => {\n        if (event.type !== undefined) {\n          return event;\n        }\n\n        const originalException = hint.originalException;\n\n        const isPostponeError =\n          typeof originalException === 'object' &&\n          originalException !== null &&\n          '$$typeof' in originalException &&\n          originalException.$$typeof === Symbol.for('react.postpone');\n\n        if (isPostponeError) {\n          // Postpone errors are used for partial-pre-rendering (PPR)\n          return null;\n        }\n\n        // We don't want to capture suspense errors as they are simply used by React/Next.js for control flow\n        const exceptionMessage = event.exception?.values?.[0]?.value;\n        if (\n          exceptionMessage?.includes('Suspense Exception: This is not a real error!') ||\n          exceptionMessage?.includes('Suspense Exception: This is not a real error, and should not leak')\n        ) {\n          return null;\n        }\n\n        return event;\n      }) satisfies EventProcessor,\n      { id: 'DropReactControlFlowErrors' },\n    ),\n  );\n\n  // Use the preprocessEvent hook instead of an event processor, so that the users event processors receive the most\n  // up-to-date value, but also so that the logic that detects changes to the transaction names to set the source to\n  // \"custom\", doesn't trigger.\n  client?.on('preprocessEvent', event => {\n    // Enhance route handler transactions\n    if (\n      event.type === 'transaction' &&\n      event.contexts?.trace?.data?.['next.span_type'] === 'BaseServer.handleRequest'\n    ) {\n      event.contexts.trace.data[SEMANTIC_ATTRIBUTE_SENTRY_OP] = 'http.server';\n      event.contexts.trace.op = 'http.server';\n\n      if (event.transaction) {\n        event.transaction = stripUrlQueryAndFragment(event.transaction);\n      }\n\n      // eslint-disable-next-line deprecation/deprecation\n      const method = event.contexts.trace.data[SEMATTRS_HTTP_METHOD];\n      // eslint-disable-next-line deprecation/deprecation\n      const target = event.contexts?.trace?.data?.[SEMATTRS_HTTP_TARGET];\n      const route = event.contexts.trace.data[ATTR_HTTP_ROUTE] || event.contexts.trace.data['next.route'];\n\n      if (typeof method === 'string' && typeof route === 'string') {\n        const cleanRoute = route.replace(/\\/route$/, '');\n        event.transaction = `${method} ${cleanRoute}`;\n        event.contexts.trace.data[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] = 'route';\n        // Preserve next.route in case it did not get hoisted\n        event.contexts.trace.data['next.route'] = cleanRoute;\n      }\n\n      // backfill transaction name for pages that would otherwise contain unparameterized routes\n      if (event.contexts.trace.data[TRANSACTION_ATTR_SENTRY_ROUTE_BACKFILL] && event.transaction !== 'GET /_app') {\n        event.transaction = `${method} ${event.contexts.trace.data[TRANSACTION_ATTR_SENTRY_ROUTE_BACKFILL]}`;\n      }\n\n      // Next.js overrides transaction names for page loads that throw an error\n      // but we want to keep the original target name\n      if (event.transaction === 'GET /_error' && target) {\n        event.transaction = `${method ? `${method} ` : ''}${target}`;\n      }\n    }\n\n    // Next.js 13 is not correctly picking up tracing data for trace propagation so we use a back-fill strategy\n    if (\n      event.type === 'transaction' &&\n      typeof event.contexts?.trace?.data?.[TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL] === 'string'\n    ) {\n      const traceparentData = extractTraceparentData(event.contexts.trace.data[TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL]);\n\n      if (traceparentData?.traceId) {\n        event.contexts.trace.trace_id = traceparentData.traceId;\n      }\n\n      if (traceparentData?.parentSpanId) {\n        event.contexts.trace.parent_span_id = traceparentData.parentSpanId;\n      }\n    }\n  });\n\n  if (process.env.NODE_ENV === 'development') {\n    getGlobalScope().addEventProcessor(devErrorSymbolicationEventProcessor);\n  }\n\n  try {\n    // @ts-expect-error `process.turbopack` is a magic string that will be replaced by Next.js\n    if (process.turbopack) {\n      getGlobalScope().setTag('turbopack', true);\n    }\n  } catch {\n    // Noop\n    // The statement above can throw because process is not defined on the client\n  }\n\n  DEBUG_BUILD && logger.log('SDK successfully initialized');\n\n  return client;\n}\n\nfunction sdkAlreadyInitialized(): boolean {\n  return !!getClient();\n}\n\nexport * from '../common';\n\nexport { wrapApiHandlerWithSentry } from '../common/pages-router-instrumentation/wrapApiHandlerWithSentry';\n"],"names":["GLOBAL_OBJ","isBuild","getDefaultIntegrations","httpIntegration","distDirRewriteFramesIntegration","getVercelEnv","DEBUG_BUILD","logger","applySdkMetadata","nodeInit","SEMATTRS_HTTP_TARGET","ATTR_URL_QUERY","spanToJSON","getRootSpan","ATTR_HTTP_REQUEST_METHOD","SEMATTRS_HTTP_METHOD","ATTR_HTTP_ROUTE","SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN","getCapturedScopesOnSpan","getIsolationScope","getCurrentScope","getScopesFromContext","context","setCapturedScopesOnSpan","getGlobalScope","TRANSACTION_ATTR_SHOULD_DROP_TRANSACTION","TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL","extractTraceparentData","SEMANTIC_ATTRIBUTE_SENTRY_OP","stripUrlQueryAndFragment","SEMANTIC_ATTRIBUTE_SENTRY_SOURCE","TRANSACTION_ATTR_SENTRY_ROUTE_BACKFILL","devErrorSymbolicationEventProcessor","getClient"],"mappings":"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"}},
    {"offset": {"line": 3218, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3222, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 3273, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}