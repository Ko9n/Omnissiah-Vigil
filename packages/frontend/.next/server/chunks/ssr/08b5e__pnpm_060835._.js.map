{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@opentelemetry+resources@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/platform/node/default-service-name.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function defaultServiceName(): string {\n  return `unknown_service:${process.argv0}`;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;AAgBM,SAAU;IACd,OAAO,qBAAmB,QAAQ,KAAO;AAC3C"}},
    {"offset": {"line": 25, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 30, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@opentelemetry+resources@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/Resource.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport {\n  SEMRESATTRS_SERVICE_NAME,\n  SEMRESATTRS_TELEMETRY_SDK_LANGUAGE,\n  SEMRESATTRS_TELEMETRY_SDK_NAME,\n  SEMRESATTRS_TELEMETRY_SDK_VERSION,\n} from '@opentelemetry/semantic-conventions';\nimport { SDK_INFO } from '@opentelemetry/core';\nimport { ResourceAttributes } from './types';\nimport { defaultServiceName } from './platform';\nimport { IResource } from './IResource';\n\n/**\n * A Resource describes the entity for which a signals (metrics or trace) are\n * collected.\n */\nexport class Resource implements IResource {\n  static readonly EMPTY = new Resource({});\n  private _syncAttributes?: ResourceAttributes;\n  private _asyncAttributesPromise?: Promise<ResourceAttributes>;\n  private _attributes?: ResourceAttributes;\n\n  /**\n   * Check if async attributes have resolved. This is useful to avoid awaiting\n   * waitForAsyncAttributes (which will introduce asynchronous behavior) when not necessary.\n   *\n   * @returns true if the resource \"attributes\" property is not yet settled to its final value\n   */\n  public asyncAttributesPending?: boolean;\n\n  /**\n   * Returns an empty Resource\n   */\n  static empty(): IResource {\n    return Resource.EMPTY;\n  }\n\n  /**\n   * Returns a Resource that identifies the SDK in use.\n   */\n  static default(): IResource {\n    return new Resource({\n      [SEMRESATTRS_SERVICE_NAME]: defaultServiceName(),\n      [SEMRESATTRS_TELEMETRY_SDK_LANGUAGE]:\n        SDK_INFO[SEMRESATTRS_TELEMETRY_SDK_LANGUAGE],\n      [SEMRESATTRS_TELEMETRY_SDK_NAME]:\n        SDK_INFO[SEMRESATTRS_TELEMETRY_SDK_NAME],\n      [SEMRESATTRS_TELEMETRY_SDK_VERSION]:\n        SDK_INFO[SEMRESATTRS_TELEMETRY_SDK_VERSION],\n    });\n  }\n\n  constructor(\n    /**\n     * A dictionary of attributes with string keys and values that provide\n     * information about the entity as numbers, strings or booleans\n     * TODO: Consider to add check/validation on attributes.\n     */\n    attributes: ResourceAttributes,\n    asyncAttributesPromise?: Promise<ResourceAttributes>\n  ) {\n    this._attributes = attributes;\n    this.asyncAttributesPending = asyncAttributesPromise != null;\n    this._syncAttributes = this._attributes ?? {};\n    this._asyncAttributesPromise = asyncAttributesPromise?.then(\n      asyncAttributes => {\n        this._attributes = Object.assign({}, this._attributes, asyncAttributes);\n        this.asyncAttributesPending = false;\n        return asyncAttributes;\n      },\n      err => {\n        diag.debug(\"a resource's async attributes promise rejected: %s\", err);\n        this.asyncAttributesPending = false;\n        return {};\n      }\n    );\n  }\n\n  get attributes(): ResourceAttributes {\n    if (this.asyncAttributesPending) {\n      diag.error(\n        'Accessing resource attributes before async attributes settled'\n      );\n    }\n\n    return this._attributes ?? {};\n  }\n\n  /**\n   * Returns a promise that will never be rejected. Resolves when all async attributes have finished being added to\n   * this Resource's attributes. This is useful in exporters to block until resource detection\n   * has finished.\n   */\n  async waitForAsyncAttributes?(): Promise<void> {\n    if (this.asyncAttributesPending) {\n      await this._asyncAttributesPromise;\n    }\n  }\n\n  /**\n   * Returns a new, merged {@link Resource} by merging the current Resource\n   * with the other Resource. In case of a collision, other Resource takes\n   * precedence.\n   *\n   * @param other the Resource that will be merged with this.\n   * @returns the newly merged Resource.\n   */\n  merge(other: IResource | null): IResource {\n    if (!other) return this;\n\n    // SpanAttributes from other resource overwrite attributes from this resource.\n    const mergedSyncAttributes = {\n      ...this._syncAttributes,\n      //Support for old resource implementation where _syncAttributes is not defined\n      ...((other as Resource)._syncAttributes ?? other.attributes),\n    };\n\n    if (\n      !this._asyncAttributesPromise &&\n      !(other as Resource)._asyncAttributesPromise\n    ) {\n      return new Resource(mergedSyncAttributes);\n    }\n\n    const mergedAttributesPromise = Promise.all([\n      this._asyncAttributesPromise,\n      (other as Resource)._asyncAttributesPromise,\n    ]).then(([thisAsyncAttributes, otherAsyncAttributes]) => {\n      return {\n        ...this._syncAttributes,\n        ...thisAsyncAttributes,\n        //Support for old resource implementation where _syncAttributes is not defined\n        ...((other as Resource)._syncAttributes ?? other.attributes),\n        ...otherAsyncAttributes,\n      };\n    });\n\n    return new Resource(mergedSyncAttributes, mergedAttributesPromise);\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 312, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 317, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@opentelemetry+resources@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/index.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { Resource } from './Resource';\nexport { IResource } from './IResource';\nexport { defaultServiceName } from './platform';\nexport { DetectorSync, ResourceAttributes, Detector } from './types';\nexport { ResourceDetectionConfig } from './config';\nexport {\n  browserDetector,\n  browserDetectorSync,\n  envDetector,\n  envDetectorSync,\n  hostDetector,\n  hostDetectorSync,\n  osDetector,\n  osDetectorSync,\n  processDetector,\n  processDetectorSync,\n  serviceInstanceIdDetectorSync,\n} from './detectors';\nexport { detectResourcesSync, detectResources } from './detect-resources';\n"],"names":[],"mappings":"AAAA"}},
    {"offset": {"line": 337, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 350, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@opentelemetry+resources@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/BrowserDetectorSync.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  SEMRESATTRS_PROCESS_RUNTIME_DESCRIPTION,\n  SEMRESATTRS_PROCESS_RUNTIME_NAME,\n  SEMRESATTRS_PROCESS_RUNTIME_VERSION,\n} from '@opentelemetry/semantic-conventions';\nimport { DetectorSync, ResourceAttributes } from '../types';\nimport { diag } from '@opentelemetry/api';\nimport { ResourceDetectionConfig } from '../config';\nimport { IResource } from '../IResource';\nimport { Resource } from '../Resource';\n\n/**\n * BrowserDetectorSync will be used to detect the resources related to browser.\n */\nclass BrowserDetectorSync implements DetectorSync {\n  detect(config?: ResourceDetectionConfig): IResource {\n    const isBrowser =\n      typeof navigator !== 'undefined' &&\n      global.process?.versions?.node === undefined && // Node.js v21 adds `navigator`\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore don't have Bun types\n      global.Bun?.version === undefined; // Bun (bun.sh) defines `navigator`\n    if (!isBrowser) {\n      return Resource.empty();\n    }\n    const browserResource: ResourceAttributes = {\n      [SEMRESATTRS_PROCESS_RUNTIME_NAME]: 'browser',\n      [SEMRESATTRS_PROCESS_RUNTIME_DESCRIPTION]: 'Web Browser',\n      [SEMRESATTRS_PROCESS_RUNTIME_VERSION]: navigator.userAgent,\n    };\n    return this._getResourceAttributes(browserResource, config);\n  }\n  /**\n   * Validates process resource attribute map from process variables\n   *\n   * @param browserResource The un-sanitized resource attributes from process as key/value pairs.\n   * @param config: Config\n   * @returns The sanitized resource attributes.\n   */\n  private _getResourceAttributes(\n    browserResource: ResourceAttributes,\n    _config?: ResourceDetectionConfig\n  ) {\n    if (browserResource[SEMRESATTRS_PROCESS_RUNTIME_VERSION] === '') {\n      diag.debug(\n        'BrowserDetector failed: Unable to find required browser resources. '\n      );\n      return Resource.empty();\n    } else {\n      return new Resource({\n        ...browserResource,\n      });\n    }\n  }\n}\n\nexport const browserDetectorSync = new BrowserDetectorSync();\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;;IAGA,IAAA,sBAAA;IAAA,SAAA,uBAwCA;IAvCE,oBAAA,SAAA,CAAA,MAAM,GAAN,SAAO,MAAgC;;;QACrC,IAAM,YACJ,OAAO,cAAc,eACrB,CAAA,CAAA,KAAA,CAAA,KAAA,OAAO,OAAO,MAAA,QAAA,OAAA,KAAA,IAAA,KAAA,IAAA,GAAE,QAAQ,MAAA,QAAA,OAAA,KAAA,IAAA,KAAA,IAAA,GAAE,IAAI,MAAK,aAAa,+BAA+B;QAC/E,6DAA6D;QAC7D,kCAAkC;QAClC,CAAA,CAAA,KAAA,OAAO,GAAG,MAAA,QAAA,OAAA,KAAA,IAAA,KAAA,IAAA,GAAE,OAAO,MAAK,WAAW,mCAAmC;QACxE,IAAI,CAAC,WAAW;YACd,OAAO,0RAAA,CAAA,WAAQ,CAAC,KAAK;;QAEvB,IAAM,kBAAe,CAAA,KAAA,CAAA,GACnB,EAAA,CAAC,4SAAA,CAAA,mCAAgC,CAAA,GAAG,WACpC,EAAA,CAAC,4SAAA,CAAA,0CAAuC,CAAA,GAAG,eAC3C,EAAA,CAAC,4SAAA,CAAA,sCAAmC,CAAA,GAAG,UAAU,SAAS;QAE5D,OAAO,IAAI,CAAC,sBAAsB,CAAC,iBAAiB;IACtD;IACA;;;;;;QAOQ,oBAAA,SAAA,CAAA,sBAAsB,GAA9B,SACE,eAAmC,EACnC,OAAiC;QAEjC,IAAI,eAAe,CAAC,4SAAA,CAAA,sCAAmC,CAAC,KAAK,IAAI;YAC/D,2DAAA,CAAA,OAAI,CAAC,KAAK,CACR;YAEF,OAAO,0RAAA,CAAA,WAAQ,CAAC,KAAK;eAChB;YACL,OAAO,IAAI,0RAAA,CAAA,WAAQ,CAAA,SAAA,CAAA,GACd;;IAGT;IACF,OAAA;AAAA;AAEO,IAAM,sBAAsB,IAAI"}},
    {"offset": {"line": 418, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 423, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@opentelemetry+resources@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/BrowserDetector.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IResource } from '../IResource';\nimport { ResourceDetectionConfig } from '../config';\nimport { Detector } from '../types';\nimport { browserDetectorSync } from './BrowserDetectorSync';\n\n/**\n * BrowserDetector will be used to detect the resources related to browser.\n */\nclass BrowserDetector implements Detector {\n  detect(config?: ResourceDetectionConfig): Promise<IResource> {\n    return Promise.resolve(browserDetectorSync.detect(config));\n  }\n}\n\nexport const browserDetector = new BrowserDetector();\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;AAqBA;;IAGA,IAAA,kBAAA;IAAA,SAAA,mBAIA;IAHE,gBAAA,SAAA,CAAA,MAAM,GAAN,SAAO,MAAgC;QACrC,OAAO,QAAQ,OAAO,CAAC,kTAAA,CAAA,sBAAmB,CAAC,MAAM,CAAC;IACpD;IACF,OAAA;AAAA;AAEO,IAAM,kBAAkB,IAAI"}},
    {"offset": {"line": 453, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 458, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@opentelemetry+resources@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/utils.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const isPromiseLike = <R>(val: any): val is PromiseLike<R> => {\n  return (\n    val !== null && typeof val === 'object' && typeof val.then === 'function'\n  );\n};\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;AAgBO,IAAM,gBAAgB,SAAI,GAAQ;IACvC,OACE,QAAQ,QAAQ,OAAO,QAAQ,YAAY,OAAO,IAAI,IAAI,KAAK;AAEnE"}},
    {"offset": {"line": 478, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 483, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@opentelemetry+resources@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detect-resources.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Resource } from './Resource';\nimport { ResourceDetectionConfig } from './config';\nimport { diag } from '@opentelemetry/api';\nimport { isPromiseLike } from './utils';\nimport { Detector, DetectorSync } from './types';\nimport { IResource } from './IResource';\n\n/**\n * Runs all resource detectors and returns the results merged into a single Resource. Promise\n * does not resolve until all the underlying detectors have resolved, unlike\n * detectResourcesSync.\n *\n * @deprecated use detectResourcesSync() instead.\n * @param config Configuration for resource detection\n */\nexport const detectResources = async (\n  config: ResourceDetectionConfig = {}\n): Promise<IResource> => {\n  const resources: IResource[] = await Promise.all(\n    (config.detectors || []).map(async d => {\n      try {\n        const resource = await d.detect(config);\n        diag.debug(`${d.constructor.name} found resource.`, resource);\n        return resource;\n      } catch (e) {\n        diag.debug(`${d.constructor.name} failed: ${e.message}`);\n        return Resource.empty();\n      }\n    })\n  );\n\n  // Future check if verbose logging is enabled issue #1903\n  logResources(resources);\n\n  return resources.reduce(\n    (acc, resource) => acc.merge(resource),\n    Resource.empty()\n  );\n};\n\n/**\n * Runs all resource detectors synchronously, merging their results. In case of attribute collision later resources will take precedence.\n *\n * @param config Configuration for resource detection\n */\nexport const detectResourcesSync = (\n  config: ResourceDetectionConfig = {}\n): IResource => {\n  const resources: IResource[] = (config.detectors ?? []).map(\n    (d: Detector | DetectorSync) => {\n      try {\n        const resourceOrPromise = d.detect(config);\n        let resource: IResource;\n        if (isPromiseLike<Resource>(resourceOrPromise)) {\n          const createPromise = async () => {\n            const resolvedResource = await resourceOrPromise;\n            await resolvedResource.waitForAsyncAttributes?.();\n            return resolvedResource.attributes;\n          };\n          resource = new Resource({}, createPromise());\n        } else {\n          resource = resourceOrPromise as IResource;\n        }\n\n        if (resource.waitForAsyncAttributes) {\n          void resource\n            .waitForAsyncAttributes()\n            .then(() =>\n              diag.debug(`${d.constructor.name} found resource.`, resource)\n            );\n        } else {\n          diag.debug(`${d.constructor.name} found resource.`, resource);\n        }\n\n        return resource;\n      } catch (e) {\n        diag.error(`${d.constructor.name} failed: ${e.message}`);\n        return Resource.empty();\n      }\n    }\n  );\n\n  const mergedResources = resources.reduce(\n    (acc, resource) => acc.merge(resource),\n    Resource.empty()\n  );\n\n  if (mergedResources.waitForAsyncAttributes) {\n    void mergedResources.waitForAsyncAttributes().then(() => {\n      // Future check if verbose logging is enabled issue #1903\n      logResources(resources);\n    });\n  }\n\n  return mergedResources;\n};\n\n/**\n * Writes debug information about the detected resources to the logger defined in the resource detection config, if one is provided.\n *\n * @param resources The array of {@link Resource} that should be logged. Empty entries will be ignored.\n */\nconst logResources = (resources: Array<IResource>) => {\n  resources.forEach(resource => {\n    // Print only populated resources\n    if (Object.keys(resource.attributes).length > 0) {\n      const resourceDebugString = JSON.stringify(resource.attributes, null, 4);\n      diag.verbose(resourceDebugString);\n    }\n  });\n};\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 772, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 777, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@opentelemetry+resources@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/EnvDetectorSync.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport { getEnv } from '@opentelemetry/core';\nimport { SEMRESATTRS_SERVICE_NAME } from '@opentelemetry/semantic-conventions';\nimport { Resource } from '../Resource';\nimport { DetectorSync, ResourceAttributes } from '../types';\nimport { ResourceDetectionConfig } from '../config';\nimport { IResource } from '../IResource';\n\n/**\n * EnvDetectorSync can be used to detect the presence of and create a Resource\n * from the OTEL_RESOURCE_ATTRIBUTES environment variable.\n */\nclass EnvDetectorSync implements DetectorSync {\n  // Type, attribute keys, and attribute values should not exceed 256 characters.\n  private readonly _MAX_LENGTH = 255;\n\n  // OTEL_RESOURCE_ATTRIBUTES is a comma-separated list of attributes.\n  private readonly _COMMA_SEPARATOR = ',';\n\n  // OTEL_RESOURCE_ATTRIBUTES contains key value pair separated by '='.\n  private readonly _LABEL_KEY_VALUE_SPLITTER = '=';\n\n  private readonly _ERROR_MESSAGE_INVALID_CHARS =\n    'should be a ASCII string with a length greater than 0 and not exceed ' +\n    this._MAX_LENGTH +\n    ' characters.';\n\n  private readonly _ERROR_MESSAGE_INVALID_VALUE =\n    'should be a ASCII string with a length not exceed ' +\n    this._MAX_LENGTH +\n    ' characters.';\n\n  /**\n   * Returns a {@link Resource} populated with attributes from the\n   * OTEL_RESOURCE_ATTRIBUTES environment variable. Note this is an async\n   * function to conform to the Detector interface.\n   *\n   * @param config The resource detection config\n   */\n  detect(_config?: ResourceDetectionConfig): IResource {\n    const attributes: ResourceAttributes = {};\n    const env = getEnv();\n\n    const rawAttributes = env.OTEL_RESOURCE_ATTRIBUTES;\n    const serviceName = env.OTEL_SERVICE_NAME;\n\n    if (rawAttributes) {\n      try {\n        const parsedAttributes = this._parseResourceAttributes(rawAttributes);\n        Object.assign(attributes, parsedAttributes);\n      } catch (e) {\n        diag.debug(`EnvDetector failed: ${e.message}`);\n      }\n    }\n\n    if (serviceName) {\n      attributes[SEMRESATTRS_SERVICE_NAME] = serviceName;\n    }\n\n    return new Resource(attributes);\n  }\n\n  /**\n   * Creates an attribute map from the OTEL_RESOURCE_ATTRIBUTES environment\n   * variable.\n   *\n   * OTEL_RESOURCE_ATTRIBUTES: A comma-separated list of attributes describing\n   * the source in more detail, e.g. “key1=val1,key2=val2”. Domain names and\n   * paths are accepted as attribute keys. Values may be quoted or unquoted in\n   * general. If a value contains whitespace, =, or \" characters, it must\n   * always be quoted.\n   *\n   * @param rawEnvAttributes The resource attributes as a comma-separated list\n   * of key/value pairs.\n   * @returns The sanitized resource attributes.\n   */\n  private _parseResourceAttributes(\n    rawEnvAttributes?: string\n  ): ResourceAttributes {\n    if (!rawEnvAttributes) return {};\n\n    const attributes: ResourceAttributes = {};\n    const rawAttributes: string[] = rawEnvAttributes.split(\n      this._COMMA_SEPARATOR,\n      -1\n    );\n    for (const rawAttribute of rawAttributes) {\n      const keyValuePair: string[] = rawAttribute.split(\n        this._LABEL_KEY_VALUE_SPLITTER,\n        -1\n      );\n      if (keyValuePair.length !== 2) {\n        continue;\n      }\n      let [key, value] = keyValuePair;\n      // Leading and trailing whitespaces are trimmed.\n      key = key.trim();\n      value = value.trim().split(/^\"|\"$/).join('');\n      if (!this._isValidAndNotEmpty(key)) {\n        throw new Error(`Attribute key ${this._ERROR_MESSAGE_INVALID_CHARS}`);\n      }\n      if (!this._isValid(value)) {\n        throw new Error(`Attribute value ${this._ERROR_MESSAGE_INVALID_VALUE}`);\n      }\n      attributes[key] = decodeURIComponent(value);\n    }\n    return attributes;\n  }\n\n  /**\n   * Determines whether the given String is a valid printable ASCII string with\n   * a length not exceed _MAX_LENGTH characters.\n   *\n   * @param str The String to be validated.\n   * @returns Whether the String is valid.\n   */\n  private _isValid(name: string): boolean {\n    return name.length <= this._MAX_LENGTH && this._isBaggageOctetString(name);\n  }\n\n  // https://www.w3.org/TR/baggage/#definition\n  private _isBaggageOctetString(str: string): boolean {\n    for (let i = 0; i < str.length; i++) {\n      const ch = str.charCodeAt(i);\n      if (ch < 0x21 || ch === 0x2c || ch === 0x3b || ch === 0x5c || ch > 0x7e) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determines whether the given String is a valid printable ASCII string with\n   * a length greater than 0 and not exceed _MAX_LENGTH characters.\n   *\n   * @param str The String to be validated.\n   * @returns Whether the String is valid and not empty.\n   */\n  private _isValidAndNotEmpty(str: string): boolean {\n    return str.length > 0 && this._isValid(str);\n  }\n}\n\nexport const envDetectorSync = new EnvDetectorSync();\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;;;IAIA,IAAA,kBAAA;IAAA,SAAA;QACE,+EAA+E;QAC9D,IAAA,CAAA,WAAW,GAAG;QAE/B,oEAAoE;QACnD,IAAA,CAAA,gBAAgB,GAAG;QAEpC,qEAAqE;QACpD,IAAA,CAAA,yBAAyB,GAAG;QAE5B,IAAA,CAAA,4BAA4B,GAC3C,0EACA,IAAI,CAAC,WAAW,GAChB;QAEe,IAAA,CAAA,4BAA4B,GAC3C,uDACA,IAAI,CAAC,WAAW,GAChB;IA+GJ;IA7GE;;;;;;QAOA,gBAAA,SAAA,CAAA,MAAM,GAAN,SAAO,OAAiC;QACtC,IAAM,aAAiC,CAAA;QACvC,IAAM,MAAM,CAAA,GAAA,uSAAA,CAAA,SAAM,AAAN;QAEZ,IAAM,gBAAgB,IAAI,wBAAwB;QAClD,IAAM,cAAc,IAAI,iBAAiB;QAEzC,IAAI,eAAe;YACjB,IAAI;gBACF,IAAM,mBAAmB,IAAI,CAAC,wBAAwB,CAAC;gBACvD,OAAO,MAAM,CAAC,YAAY;cAC1B,OAAO,GAAG;gBACV,2DAAA,CAAA,OAAI,CAAC,KAAK,CAAC,yBAAuB,EAAE,OAAS;;;QAIjD,IAAI,aAAa;YACf,UAAU,CAAC,4SAAA,CAAA,2BAAwB,CAAC,GAAG;;QAGzC,OAAO,IAAI,0RAAA,CAAA,WAAQ,CAAC;IACtB;IAEA;;;;;;;;;;;;;QAcQ,gBAAA,SAAA,CAAA,wBAAwB,GAAhC,SACE,gBAAyB;;QAEzB,IAAI,CAAC,kBAAkB,OAAO,CAAA;QAE9B,IAAM,aAAiC,CAAA;QACvC,IAAM,gBAA0B,iBAAiB,KAAK,CACpD,IAAI,CAAC,gBAAgB,EACrB,CAAC;;YAEH,IAA2B,IAAA,kBAAA,SAAA,gBAAa,oBAAA,gBAAA,IAAA,IAAA,CAAA,kBAAA,IAAA,EAAA,oBAAA,gBAAA,IAAA,GAAE;gBAArC,IAAM,eAAY,kBAAA,KAAA;gBACrB,IAAM,eAAyB,aAAa,KAAK,CAC/C,IAAI,CAAC,yBAAyB,EAC9B,CAAC;gBAEH,IAAI,aAAa,MAAM,KAAK,GAAG;oBAC7B;;gBAEE,IAAA,KAAA,OAAe,cAAY,IAA1B,MAAG,EAAA,CAAA,EAAA,EAAE,QAAK,EAAA,CAAA,EAAgB;gBAC/B,gDAAgD;gBAChD,MAAM,IAAI,IAAI;gBACd,QAAQ,MAAM,IAAI,GAAG,KAAK,CAAC,SAAS,IAAI,CAAC;gBACzC,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,MAAM;oBAClC,MAAM,IAAI,MAAM,mBAAiB,IAAI,CAAC,4BAA8B;;gBAEtE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ;oBACzB,MAAM,IAAI,MAAM,qBAAmB,IAAI,CAAC,4BAA8B;;gBAExE,UAAU,CAAC,IAAI,GAAG,mBAAmB;;;;;;;;;;;;;QAEvC,OAAO;IACT;IAEA;;;;;;QAOQ,gBAAA,SAAA,CAAA,QAAQ,GAAhB,SAAiB,IAAY;QAC3B,OAAO,KAAK,MAAM,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,qBAAqB,CAAC;IACvE;IAEA,4CAA4C;IACpC,gBAAA,SAAA,CAAA,qBAAqB,GAA7B,SAA8B,GAAW;QACvC,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,MAAM,EAAE,IAAK;YACnC,IAAM,KAAK,IAAI,UAAU,CAAC;YAC1B,IAAI,KAAK,QAAQ,OAAO,QAAQ,OAAO,QAAQ,OAAO,QAAQ,KAAK,MAAM;gBACvE,OAAO;;;QAGX,OAAO;IACT;IAEA;;;;;;QAOQ,gBAAA,SAAA,CAAA,mBAAmB,GAA3B,SAA4B,GAAW;QACrC,OAAO,IAAI,MAAM,GAAG,KAAK,IAAI,CAAC,QAAQ,CAAC;IACzC;IACF,OAAA;AAAA;AAEO,IAAM,kBAAkB,IAAI"}},
    {"offset": {"line": 955, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 960, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@opentelemetry+resources@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/EnvDetector.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Detector } from '../types';\nimport { ResourceDetectionConfig } from '../config';\nimport { IResource } from '../IResource';\nimport { envDetectorSync } from './EnvDetectorSync';\n\n/**\n * EnvDetector can be used to detect the presence of and create a Resource\n * from the OTEL_RESOURCE_ATTRIBUTES environment variable.\n */\nclass EnvDetector implements Detector {\n  /**\n   * Returns a {@link Resource} populated with attributes from the\n   * OTEL_RESOURCE_ATTRIBUTES environment variable. Note this is an async\n   * function to conform to the Detector interface.\n   *\n   * @param config The resource detection config\n   */\n  detect(config?: ResourceDetectionConfig): Promise<IResource> {\n    return Promise.resolve(envDetectorSync.detect(config));\n  }\n}\n\nexport const envDetector = new EnvDetector();\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;AAqBA;;;IAIA,IAAA,cAAA;IAAA,SAAA,eAWA;IAVE;;;;;;QAOA,YAAA,SAAA,CAAA,MAAM,GAAN,SAAO,MAAgC;QACrC,OAAO,QAAQ,OAAO,CAAC,8SAAA,CAAA,kBAAe,CAAC,MAAM,CAAC;IAChD;IACF,OAAA;AAAA;AAEO,IAAM,cAAc,IAAI"}},
    {"offset": {"line": 997, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1002, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@opentelemetry+resources@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/platform/node/utils.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport const normalizeArch = (nodeArchString: string): string => {\n  // Maps from https://nodejs.org/api/os.html#osarch to arch values in spec:\n  // https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/resource/semantic_conventions/host.md\n  switch (nodeArchString) {\n    case 'arm':\n      return 'arm32';\n    case 'ppc':\n      return 'ppc32';\n    case 'x64':\n      return 'amd64';\n    default:\n      return nodeArchString;\n  }\n};\n\nexport const normalizeType = (nodePlatform: string): string => {\n  // Maps from https://nodejs.org/api/os.html#osplatform to arch values in spec:\n  // https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/resource/semantic_conventions/os.md\n  switch (nodePlatform) {\n    case 'sunos':\n      return 'solaris';\n    case 'win32':\n      return 'windows';\n    default:\n      return nodePlatform;\n  }\n};\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAeO,IAAM,gBAAgB,SAAC,cAAsB;IAClD,0EAA0E;IAC1E,8HAA8H;IAC9H,OAAQ;QACN,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT;YACE,OAAO;;AAEb;AAEO,IAAM,gBAAgB,SAAC,YAAoB;IAChD,8EAA8E;IAC9E,4HAA4H;IAC5H,OAAQ;QACN,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT;YACE,OAAO;;AAEb"}},
    {"offset": {"line": 1046, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1051, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@opentelemetry+resources@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/platform/node/machine-id/execAsync.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as child_process from 'child_process';\nimport * as util from 'util';\n\nexport const execAsync = util.promisify(child_process.exec);\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;AAmBO,IAAM,YAAY,wCAAK,SAAS,CAAC,iDAAc,IAAI"}},
    {"offset": {"line": 1074, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1079, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@opentelemetry+resources@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/platform/node/machine-id/getMachineId-darwin.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { execAsync } from './execAsync';\nimport { diag } from '@opentelemetry/api';\n\nexport async function getMachineId(): Promise<string> {\n  try {\n    const result = await execAsync('ioreg -rd1 -c \"IOPlatformExpertDevice\"');\n\n    const idLine = result.stdout\n      .split('\\n')\n      .find(line => line.includes('IOPlatformUUID'));\n\n    if (!idLine) {\n      return '';\n    }\n\n    const parts = idLine.split('\" = \"');\n    if (parts.length === 2) {\n      return parts[1].slice(0, -1);\n    }\n  } catch (e) {\n    diag.debug(`error reading machine id: ${e}`);\n  }\n\n  return '';\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmBM,SAAgB;;;;;;;;;;;;oBAEH,OAAA;wBAAA,EAAA,OAAA;wBAAM,CAAA,GAAA,6UAAA,CAAA,YAAS,AAAT,EAAU;qBAAyC;;oBAAlE,SAAS,GAAA,IAAA;oBAET,SAAS,OAAO,MAAM,CACzB,KAAK,CAAC,MACN,IAAI,CAAC,SAAA,IAAI;wBAAI,OAAA,KAAK,QAAQ,CAAC;oBAAd;oBAEhB,IAAI,CAAC,QAAQ;wBACX,OAAA;4BAAA,EAAA,QAAA;4BAAO;yBAAE;;oBAGL,QAAQ,OAAO,KAAK,CAAC;oBAC3B,IAAI,MAAM,MAAM,KAAK,GAAG;wBACtB,OAAA;4BAAA,EAAA,QAAA;4BAAO,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC;yBAAE;;;;;;;;oBAG9B,2DAAA,CAAA,OAAI,CAAC,KAAK,CAAC,+BAA6B;;;;;;oBAG1C,OAAA;wBAAA,EAAA,QAAA;wBAAO;qBAAE"}},
    {"offset": {"line": 1277, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1282, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@opentelemetry+resources@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/platform/node/machine-id/getMachineId-linux.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { promises as fs } from 'fs';\nimport { diag } from '@opentelemetry/api';\n\nexport async function getMachineId(): Promise<string> {\n  const paths = ['/etc/machine-id', '/var/lib/dbus/machine-id'];\n\n  for (const path of paths) {\n    try {\n      const result = await fs.readFile(path, { encoding: 'utf8' });\n      return result.trim();\n    } catch (e) {\n      diag.debug(`error reading machine id: ${e}`);\n    }\n  }\n\n  return '';\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBM,SAAgB;;;;;;;oBACd,QAAQ;wBAAC;wBAAmB;qBAA2B;;;;;;;;;oBAE1C,UAAA,SAAA,QAAK,YAAA,QAAA,IAAA;;;;;;;oBAAb,OAAI,UAAA,KAAA;;;;;;;;;oBAEI,OAAA;wBAAA,EAAA,OAAA;wBAAM,qCAAA,CAAA,WAAE,CAAC,QAAQ,CAAC,MAAM;4BAAE,UAAU;wBAAM;qBAAG;;oBAAtD,SAAS,GAAA,IAAA;oBACf,OAAA;wBAAA,EAAA,QAAA;wBAAO,OAAO,IAAI;qBAAE;;;oBAEpB,2DAAA,CAAA,OAAI,CAAC,KAAK,CAAC,+BAA6B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAI5C,OAAA;wBAAA,EAAA,QAAA;wBAAO;qBAAE"}},
    {"offset": {"line": 1518, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1523, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@opentelemetry+resources@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/platform/node/machine-id/getMachineId-bsd.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { promises as fs } from 'fs';\nimport { execAsync } from './execAsync';\nimport { diag } from '@opentelemetry/api';\n\nexport async function getMachineId(): Promise<string> {\n  try {\n    const result = await fs.readFile('/etc/hostid', { encoding: 'utf8' });\n    return result.trim();\n  } catch (e) {\n    diag.debug(`error reading machine id: ${e}`);\n  }\n\n  try {\n    const result = await execAsync('kenv -q smbios.system.uuid');\n    return result.stdout.trim();\n  } catch (e) {\n    diag.debug(`error reading machine id: ${e}`);\n  }\n\n  return '';\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoBM,SAAgB;;;;;;;;;;;;oBAEH,OAAA;wBAAA,EAAA,OAAA;wBAAM,qCAAA,CAAA,WAAE,CAAC,QAAQ,CAAC,eAAe;4BAAE,UAAU;wBAAM;qBAAG;;oBAA/D,SAAS,GAAA,IAAA;oBACf,OAAA;wBAAA,EAAA,QAAA;wBAAO,OAAO,IAAI;qBAAE;;;oBAEpB,2DAAA,CAAA,OAAI,CAAC,KAAK,CAAC,+BAA6B;;;;;;;;;;;;oBAIzB,OAAA;wBAAA,EAAA,OAAA;wBAAM,CAAA,GAAA,6UAAA,CAAA,YAAS,AAAT,EAAU;qBAA6B;;oBAAtD,SAAS,GAAA,IAAA;oBACf,OAAA;wBAAA,EAAA,QAAA;wBAAO,OAAO,MAAM,CAAC,IAAI;qBAAE;;;oBAE3B,2DAAA,CAAA,OAAI,CAAC,KAAK,CAAC,+BAA6B;;;;;;oBAG1C,OAAA;wBAAA,EAAA,QAAA;wBAAO;qBAAE"}},
    {"offset": {"line": 1733, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1738, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@opentelemetry+resources@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/platform/node/machine-id/getMachineId-win.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as process from 'process';\nimport { execAsync } from './execAsync';\nimport { diag } from '@opentelemetry/api';\n\nexport async function getMachineId(): Promise<string> {\n  const args =\n    'QUERY HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Cryptography /v MachineGuid';\n  let command = '%windir%\\\\System32\\\\REG.exe';\n  if (process.arch === 'ia32' && 'PROCESSOR_ARCHITEW6432' in process.env) {\n    command = '%windir%\\\\sysnative\\\\cmd.exe /c ' + command;\n  }\n\n  try {\n    const result = await execAsync(`${command} ${args}`);\n    const parts = result.stdout.split('REG_SZ');\n    if (parts.length === 2) {\n      return parts[1].trim();\n    }\n  } catch (e) {\n    diag.debug(`error reading machine id: ${e}`);\n  }\n\n  return '';\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoBM,SAAgB;;;;;;oBACd,OACJ;oBACE,UAAU;oBACd,IAAI,2CAAQ,IAAI,KAAK,UAAU,4BAA4B,2CAAQ,GAAG,EAAE;wBACtE,UAAU,qCAAqC;;;;;;;;;;oBAIhC,OAAA;wBAAA,EAAA,OAAA;wBAAM,CAAA,GAAA,6UAAA,CAAA,YAAS,AAAT,EAAa,UAAO,MAAI;qBAAO;;oBAA9C,SAAS,GAAA,IAAA;oBACT,QAAQ,OAAO,MAAM,CAAC,KAAK,CAAC;oBAClC,IAAI,MAAM,MAAM,KAAK,GAAG;wBACtB,OAAA;4BAAA,EAAA,QAAA;4BAAO,KAAK,CAAC,EAAE,CAAC,IAAI;yBAAE;;;;;;;;oBAGxB,2DAAA,CAAA,OAAI,CAAC,KAAK,CAAC,+BAA6B;;;;;;oBAG1C,OAAA;wBAAA,EAAA,QAAA;wBAAO;qBAAE"}},
    {"offset": {"line": 1936, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1941, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@opentelemetry+resources@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/platform/node/machine-id/getMachineId-unsupported.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\n\nexport async function getMachineId(): Promise<string> {\n  diag.debug('could not read machine-id: unsupported platform');\n  return '';\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBM,SAAgB;;;YACpB,2DAAA,CAAA,OAAI,CAAC,KAAK,CAAC;YACX,OAAA;gBAAA,EAAA,QAAA;gBAAO;aAAE"}},
    {"offset": {"line": 2094, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2099, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@opentelemetry+resources@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/platform/node/machine-id/getMachineId.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as process from 'process';\n\nlet getMachineId: () => Promise<string>;\n\nswitch (process.platform) {\n  case 'darwin':\n    ({ getMachineId } = require('./getMachineId-darwin'));\n    break;\n  case 'linux':\n    ({ getMachineId } = require('./getMachineId-linux'));\n    break;\n  case 'freebsd':\n    ({ getMachineId } = require('./getMachineId-bsd'));\n    break;\n  case 'win32':\n    ({ getMachineId } = require('./getMachineId-win'));\n    break;\n  default:\n    ({ getMachineId } = require('./getMachineId-unsupported'));\n}\n\nexport { getMachineId };\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;AAiBA,IAAI;AAEJ,OAAQ,2CAAQ,QAAQ;IACtB,KAAK;QACA,eAAiB,gPAAgC,YAArC;QACf;IACF,KAAK;QACA,eAAiB,+OAA+B,YAApC;QACf;IACF,KAAK;QACA,eAAiB,6OAA6B,YAAlC;QACf;IACF,KAAK;QACA,eAAiB,6OAA6B,YAAlC;QACf;IACF;QACK,eAAiB,qPAAqC,YAA1C"}},
    {"offset": {"line": 2138, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2143, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@opentelemetry+resources@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/platform/node/HostDetectorSync.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  SEMRESATTRS_HOST_ARCH,\n  SEMRESATTRS_HOST_ID,\n  SEMRESATTRS_HOST_NAME,\n} from '@opentelemetry/semantic-conventions';\nimport { Resource } from '../../../Resource';\nimport { DetectorSync, ResourceAttributes } from '../../../types';\nimport { ResourceDetectionConfig } from '../../../config';\nimport { arch, hostname } from 'os';\nimport { normalizeArch } from './utils';\nimport { getMachineId } from './machine-id/getMachineId';\n\n/**\n * HostDetectorSync detects the resources related to the host current process is\n * running on. Currently only non-cloud-based attributes are included.\n */\nclass HostDetectorSync implements DetectorSync {\n  detect(_config?: ResourceDetectionConfig): Resource {\n    const attributes: ResourceAttributes = {\n      [SEMRESATTRS_HOST_NAME]: hostname(),\n      [SEMRESATTRS_HOST_ARCH]: normalizeArch(arch()),\n    };\n\n    return new Resource(attributes, this._getAsyncAttributes());\n  }\n\n  private _getAsyncAttributes(): Promise<ResourceAttributes> {\n    return getMachineId().then(machineId => {\n      const attributes: ResourceAttributes = {};\n      if (machineId) {\n        attributes[SEMRESATTRS_HOST_ID] = machineId;\n      }\n      return attributes;\n    });\n  }\n}\n\nexport const hostDetectorSync = new HostDetectorSync();\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;;;IAIA,IAAA,mBAAA;IAAA,SAAA,oBAmBA;IAlBE,iBAAA,SAAA,CAAA,MAAM,GAAN,SAAO,OAAiC;;QACtC,IAAM,aAAU,CAAA,KAAA,CAAA,GACd,EAAA,CAAC,4SAAA,CAAA,wBAAqB,CAAA,GAAG,CAAA,GAAA,qCAAA,CAAA,WAAQ,AAAR,KACzB,EAAA,CAAC,4SAAA,CAAA,wBAAqB,CAAA,GAAG,CAAA,GAAA,wTAAA,CAAA,gBAAa,AAAb,EAAc,CAAA,GAAA,qCAAA,CAAA,OAAI,AAAJ;QAGzC,OAAO,IAAI,0RAAA,CAAA,WAAQ,CAAC,YAAY,IAAI,CAAC,mBAAmB;IAC1D;IAEQ,iBAAA,SAAA,CAAA,mBAAmB,GAA3B;QACE,OAAO,CAAA,GAAA,gVAAA,CAAA,eAAY,AAAZ,IAAe,IAAI,CAAC,SAAA,SAAS;YAClC,IAAM,aAAiC,CAAA;YACvC,IAAI,WAAW;gBACb,UAAU,CAAC,4SAAA,CAAA,sBAAmB,CAAC,GAAG;;YAEpC,OAAO;QACT;IACF;IACF,OAAA;AAAA;AAEO,IAAM,mBAAmB,IAAI"}},
    {"offset": {"line": 2193, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2198, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@opentelemetry+resources@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/platform/node/HostDetector.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Detector } from '../../../types';\nimport { ResourceDetectionConfig } from '../../../config';\nimport { IResource } from '../../../IResource';\nimport { hostDetectorSync } from './HostDetectorSync';\n\n/**\n * HostDetector detects the resources related to the host current process is\n * running on. Currently only non-cloud-based attributes are included.\n */\nclass HostDetector implements Detector {\n  detect(_config?: ResourceDetectionConfig): Promise<IResource> {\n    return Promise.resolve(hostDetectorSync.detect(_config));\n  }\n}\n\nexport const hostDetector = new HostDetector();\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;AAqBA;;;IAIA,IAAA,eAAA;IAAA,SAAA,gBAIA;IAHE,aAAA,SAAA,CAAA,MAAM,GAAN,SAAO,OAAiC;QACtC,OAAO,QAAQ,OAAO,CAAC,mUAAA,CAAA,mBAAgB,CAAC,MAAM,CAAC;IACjD;IACF,OAAA;AAAA;AAEO,IAAM,eAAe,IAAI"}},
    {"offset": {"line": 2229, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2234, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@opentelemetry+resources@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/platform/node/OSDetectorSync.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  SEMRESATTRS_OS_TYPE,\n  SEMRESATTRS_OS_VERSION,\n} from '@opentelemetry/semantic-conventions';\nimport { Resource } from '../../../Resource';\nimport { DetectorSync, ResourceAttributes } from '../../../types';\nimport { ResourceDetectionConfig } from '../../../config';\nimport { platform, release } from 'os';\nimport { normalizeType } from './utils';\n\n/**\n * OSDetectorSync detects the resources related to the operating system (OS) on\n * which the process represented by this resource is running.\n */\nclass OSDetectorSync implements DetectorSync {\n  detect(_config?: ResourceDetectionConfig): Resource {\n    const attributes: ResourceAttributes = {\n      [SEMRESATTRS_OS_TYPE]: normalizeType(platform()),\n      [SEMRESATTRS_OS_VERSION]: release(),\n    };\n    return new Resource(attributes);\n  }\n}\n\nexport const osDetectorSync = new OSDetectorSync();\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;;;IAIA,IAAA,iBAAA;IAAA,SAAA,kBAQA;IAPE,eAAA,SAAA,CAAA,MAAM,GAAN,SAAO,OAAiC;;QACtC,IAAM,aAAU,CAAA,KAAA,CAAA,GACd,EAAA,CAAC,4SAAA,CAAA,sBAAmB,CAAA,GAAG,CAAA,GAAA,wTAAA,CAAA,gBAAa,AAAb,EAAc,CAAA,GAAA,qCAAA,CAAA,WAAQ,AAAR,MACrC,EAAA,CAAC,4SAAA,CAAA,yBAAsB,CAAA,GAAG,CAAA,GAAA,qCAAA,CAAA,UAAO,AAAP;QAE5B,OAAO,IAAI,0RAAA,CAAA,WAAQ,CAAC;IACtB;IACF,OAAA;AAAA;AAEO,IAAM,iBAAiB,IAAI"}},
    {"offset": {"line": 2273, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2278, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@opentelemetry+resources@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/platform/node/OSDetector.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Detector } from '../../../types';\nimport { ResourceDetectionConfig } from '../../../config';\nimport { IResource } from '../../../IResource';\nimport { osDetectorSync } from './OSDetectorSync';\n\n/**\n * OSDetector detects the resources related to the operating system (OS) on\n * which the process represented by this resource is running.\n */\nclass OSDetector implements Detector {\n  detect(_config?: ResourceDetectionConfig): Promise<IResource> {\n    return Promise.resolve(osDetectorSync.detect(_config));\n  }\n}\n\nexport const osDetector = new OSDetector();\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;AAqBA;;;IAIA,IAAA,aAAA;IAAA,SAAA,cAIA;IAHE,WAAA,SAAA,CAAA,MAAM,GAAN,SAAO,OAAiC;QACtC,OAAO,QAAQ,OAAO,CAAC,iUAAA,CAAA,iBAAc,CAAC,MAAM,CAAC;IAC/C;IACF,OAAA;AAAA;AAEO,IAAM,aAAa,IAAI"}},
    {"offset": {"line": 2309, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2314, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@opentelemetry+resources@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/platform/node/ProcessDetectorSync.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport {\n  SEMRESATTRS_PROCESS_COMMAND,\n  SEMRESATTRS_PROCESS_COMMAND_ARGS,\n  SEMRESATTRS_PROCESS_EXECUTABLE_NAME,\n  SEMRESATTRS_PROCESS_EXECUTABLE_PATH,\n  SEMRESATTRS_PROCESS_OWNER,\n  SEMRESATTRS_PROCESS_PID,\n  SEMRESATTRS_PROCESS_RUNTIME_DESCRIPTION,\n  SEMRESATTRS_PROCESS_RUNTIME_NAME,\n  SEMRESATTRS_PROCESS_RUNTIME_VERSION,\n} from '@opentelemetry/semantic-conventions';\nimport { Resource } from '../../../Resource';\nimport { DetectorSync, ResourceAttributes } from '../../../types';\nimport { ResourceDetectionConfig } from '../../../config';\nimport { IResource } from '../../../IResource';\nimport * as os from 'os';\n\n/**\n * ProcessDetectorSync will be used to detect the resources related current process running\n * and being instrumented from the NodeJS Process module.\n */\nclass ProcessDetectorSync implements DetectorSync {\n  detect(_config?: ResourceDetectionConfig): IResource {\n    const attributes: ResourceAttributes = {\n      [SEMRESATTRS_PROCESS_PID]: process.pid,\n      [SEMRESATTRS_PROCESS_EXECUTABLE_NAME]: process.title,\n      [SEMRESATTRS_PROCESS_EXECUTABLE_PATH]: process.execPath,\n      [SEMRESATTRS_PROCESS_COMMAND_ARGS]: [\n        process.argv[0],\n        ...process.execArgv,\n        ...process.argv.slice(1),\n      ],\n      [SEMRESATTRS_PROCESS_RUNTIME_VERSION]: process.versions.node,\n      [SEMRESATTRS_PROCESS_RUNTIME_NAME]: 'nodejs',\n      [SEMRESATTRS_PROCESS_RUNTIME_DESCRIPTION]: 'Node.js',\n    };\n\n    if (process.argv.length > 1) {\n      attributes[SEMRESATTRS_PROCESS_COMMAND] = process.argv[1];\n    }\n\n    try {\n      const userInfo = os.userInfo();\n      attributes[SEMRESATTRS_PROCESS_OWNER] = userInfo.username;\n    } catch (e) {\n      diag.debug(`error obtaining process owner: ${e}`);\n    }\n\n    return new Resource(attributes);\n  }\n}\n\nexport const processDetectorSync = new ProcessDetectorSync();\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA;;;IAIA,IAAA,sBAAA;IAAA,SAAA,uBA6BA;IA5BE,oBAAA,SAAA,CAAA,MAAM,GAAN,SAAO,OAAiC;;QACtC,IAAM,aAAU,CAAA,KAAA,CAAA,GACd,EAAA,CAAC,4SAAA,CAAA,0BAAuB,CAAA,GAAG,QAAQ,GAAG,EACtC,EAAA,CAAC,4SAAA,CAAA,sCAAmC,CAAA,GAAG,QAAQ,KAAK,EACpD,EAAA,CAAC,4SAAA,CAAA,sCAAmC,CAAA,GAAG,QAAQ,QAAQ,EACvD,EAAA,CAAC,4SAAA,CAAA,mCAAgC,CAAA,GAAA,cAAA,cAAA;YAC/B,QAAQ,IAAI,CAAC,EAAE;kBACZ,QAAQ,QAAQ,GAAA,QAAA,OAChB,QAAQ,IAAI,CAAC,KAAK,CAAC,KAAE,QAE1B,EAAA,CAAC,4SAAA,CAAA,sCAAmC,CAAA,GAAG,QAAQ,QAAQ,CAAC,IAAI,EAC5D,EAAA,CAAC,4SAAA,CAAA,mCAAgC,CAAA,GAAG,UACpC,EAAA,CAAC,4SAAA,CAAA,0CAAuC,CAAA,GAAG;QAG7C,IAAI,QAAQ,IAAI,CAAC,MAAM,GAAG,GAAG;YAC3B,UAAU,CAAC,4SAAA,CAAA,8BAA2B,CAAC,GAAG,QAAQ,IAAI,CAAC,EAAE;;QAG3D,IAAI;YACF,IAAM,WAAW,sCAAG,QAAQ;YAC5B,UAAU,CAAC,4SAAA,CAAA,4BAAyB,CAAC,GAAG,SAAS,QAAQ;UACzD,OAAO,GAAG;YACV,2DAAA,CAAA,OAAI,CAAC,KAAK,CAAC,oCAAkC;;QAG/C,OAAO,IAAI,0RAAA,CAAA,WAAQ,CAAC;IACtB;IACF,OAAA;AAAA;AAEO,IAAM,sBAAsB,IAAI"}},
    {"offset": {"line": 2392, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2397, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@opentelemetry+resources@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/platform/node/ProcessDetector.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Detector } from '../../../types';\nimport { ResourceDetectionConfig } from '../../../config';\nimport { IResource } from '../../../IResource';\nimport { processDetectorSync } from './ProcessDetectorSync';\n\n/**\n * ProcessDetector will be used to detect the resources related current process running\n * and being instrumented from the NodeJS Process module.\n */\nclass ProcessDetector implements Detector {\n  detect(config?: ResourceDetectionConfig): Promise<IResource> {\n    return Promise.resolve(processDetectorSync.detect(config));\n  }\n}\n\nexport const processDetector = new ProcessDetector();\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;AAqBA;;;IAIA,IAAA,kBAAA;IAAA,SAAA,mBAIA;IAHE,gBAAA,SAAA,CAAA,MAAM,GAAN,SAAO,MAAgC;QACrC,OAAO,QAAQ,OAAO,CAAC,sUAAA,CAAA,sBAAmB,CAAC,MAAM,CAAC;IACpD;IACF,OAAA;AAAA;AAEO,IAAM,kBAAkB,IAAI"}},
    {"offset": {"line": 2428, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2433, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@opentelemetry+resources@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/platform/node/ServiceInstanceIdDetectorSync.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SEMRESATTRS_SERVICE_INSTANCE_ID } from '@opentelemetry/semantic-conventions';\nimport { Resource } from '../../../Resource';\nimport { DetectorSync, ResourceAttributes } from '../../../types';\nimport { ResourceDetectionConfig } from '../../../config';\nimport { randomUUID } from 'crypto';\n\n/**\n * ServiceInstanceIdDetectorSync detects the resources related to the service instance ID.\n */\nclass ServiceInstanceIdDetectorSync implements DetectorSync {\n  detect(_config?: ResourceDetectionConfig): Resource {\n    const attributes: ResourceAttributes = {\n      [SEMRESATTRS_SERVICE_INSTANCE_ID]: randomUUID(),\n    };\n\n    return new Resource(attributes);\n  }\n}\n\n/**\n * @experimental\n */\nexport const serviceInstanceIdDetectorSync =\n  new ServiceInstanceIdDetectorSync();\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAsBA;;IAGA,IAAA,gCAAA;IAAA,SAAA,iCAQA;IAPE,8BAAA,SAAA,CAAA,MAAM,GAAN,SAAO,OAAiC;;QACtC,IAAM,aAAU,CAAA,KAAA,CAAA,GACd,EAAA,CAAC,4SAAA,CAAA,kCAA+B,CAAA,GAAG,CAAA,GAAA,yCAAA,CAAA,aAAU,AAAV;QAGrC,OAAO,IAAI,0RAAA,CAAA,WAAQ,CAAC;IACtB;IACF,OAAA;AAAA;AAKO,IAAM,gCACX,IAAI"}},
    {"offset": {"line": 2469, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2537, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@opentelemetry+resources@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/platform/node/default-service-name.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function defaultServiceName(): string {\n  return `unknown_service:${process.argv0}`;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;AAgBM,SAAU;IACd,OAAO,CAAA,gBAAA,EAAmB,QAAQ,KAAK,CAAA,CAAE;AAC3C"}},
    {"offset": {"line": 2557, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2562, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@opentelemetry+resources@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/utils.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const isPromiseLike = <R>(val: unknown): val is PromiseLike<R> => {\n  return (\n    val !== null &&\n    typeof val === 'object' &&\n    typeof (val as Partial<PromiseLike<R>>).then === 'function'\n  );\n};\n\nexport function identity<T>(_: T): T {\n  return _;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAgBO,MAAM,gBAAgB,CAAI;IAC/B,OACE,QAAQ,QACR,OAAO,QAAQ,YACf,OAAQ,IAAgC,IAAI,KAAK;AAErD;AAEM,SAAU,SAAY,CAAI;IAC9B,OAAO;AACT"}},
    {"offset": {"line": 2586, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2591, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@opentelemetry+resources@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/ResourceImpl.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Attributes, AttributeValue, diag } from '@opentelemetry/api';\nimport { SDK_INFO } from '@opentelemetry/core';\nimport {\n  ATTR_SERVICE_NAME,\n  ATTR_TELEMETRY_SDK_LANGUAGE,\n  ATTR_TELEMETRY_SDK_NAME,\n  ATTR_TELEMETRY_SDK_VERSION,\n} from '@opentelemetry/semantic-conventions';\nimport { Resource } from './Resource';\nimport { defaultServiceName } from './platform';\nimport {\n  DetectedResource,\n  DetectedResourceAttributes,\n  MaybePromise,\n  RawResourceAttribute,\n} from './types';\nimport { isPromiseLike } from './utils';\n\nclass ResourceImpl implements Resource {\n  private _rawAttributes: RawResourceAttribute[];\n  private _asyncAttributesPending = false;\n\n  private _memoizedAttributes?: Attributes;\n\n  static FromAttributeList(\n    attributes: [string, MaybePromise<AttributeValue | undefined>][]\n  ): Resource {\n    const res = new ResourceImpl({});\n    res._rawAttributes = guardedRawAttributes(attributes);\n    res._asyncAttributesPending =\n      attributes.filter(([_, val]) => isPromiseLike(val)).length > 0;\n    return res;\n  }\n\n  constructor(\n    /**\n     * A dictionary of attributes with string keys and values that provide\n     * information about the entity as numbers, strings or booleans\n     * TODO: Consider to add check/validation on attributes.\n     */\n    resource: DetectedResource\n  ) {\n    const attributes = resource.attributes ?? {};\n    this._rawAttributes = Object.entries(attributes).map(([k, v]) => {\n      if (isPromiseLike(v)) {\n        // side-effect\n        this._asyncAttributesPending = true;\n      }\n\n      return [k, v];\n    });\n\n    this._rawAttributes = guardedRawAttributes(this._rawAttributes);\n  }\n\n  public get asyncAttributesPending(): boolean {\n    return this._asyncAttributesPending;\n  }\n\n  public async waitForAsyncAttributes(): Promise<void> {\n    if (!this.asyncAttributesPending) {\n      return;\n    }\n\n    for (let i = 0; i < this._rawAttributes.length; i++) {\n      const [k, v] = this._rawAttributes[i];\n      this._rawAttributes[i] = [k, isPromiseLike(v) ? await v : v];\n    }\n\n    this._asyncAttributesPending = false;\n  }\n\n  public get attributes(): Attributes {\n    if (this.asyncAttributesPending) {\n      diag.error(\n        'Accessing resource attributes before async attributes settled'\n      );\n    }\n\n    if (this._memoizedAttributes) {\n      return this._memoizedAttributes;\n    }\n\n    const attrs: Attributes = {};\n    for (const [k, v] of this._rawAttributes) {\n      if (isPromiseLike(v)) {\n        diag.debug(`Unsettled resource attribute ${k} skipped`);\n        continue;\n      }\n      if (v != null) {\n        attrs[k] ??= v;\n      }\n    }\n\n    // only memoize output if all attributes are settled\n    if (!this._asyncAttributesPending) {\n      this._memoizedAttributes = attrs;\n    }\n\n    return attrs;\n  }\n\n  public getRawAttributes(): RawResourceAttribute[] {\n    return this._rawAttributes;\n  }\n\n  public merge(resource: Resource | null): Resource {\n    if (resource == null) return this;\n\n    // Order is important\n    // Spec states incoming attributes override existing attributes\n    return ResourceImpl.FromAttributeList([\n      ...resource.getRawAttributes(),\n      ...this.getRawAttributes(),\n    ]);\n  }\n}\n\nexport function resourceFromAttributes(\n  attributes: DetectedResourceAttributes\n): Resource {\n  return ResourceImpl.FromAttributeList(Object.entries(attributes));\n}\n\nexport function resourceFromDetectedResource(\n  detectedResource: DetectedResource\n): Resource {\n  return new ResourceImpl(detectedResource);\n}\n\nexport function emptyResource(): Resource {\n  return resourceFromAttributes({});\n}\n\nexport function defaultResource(): Resource {\n  return resourceFromAttributes({\n    [ATTR_SERVICE_NAME]: defaultServiceName(),\n    [ATTR_TELEMETRY_SDK_LANGUAGE]: SDK_INFO[ATTR_TELEMETRY_SDK_LANGUAGE],\n    [ATTR_TELEMETRY_SDK_NAME]: SDK_INFO[ATTR_TELEMETRY_SDK_NAME],\n    [ATTR_TELEMETRY_SDK_VERSION]: SDK_INFO[ATTR_TELEMETRY_SDK_VERSION],\n  });\n}\n\nfunction guardedRawAttributes(\n  attributes: RawResourceAttribute[]\n): RawResourceAttribute[] {\n  return attributes.map(([k, v]) => {\n    if (isPromiseLike(v)) {\n      return [\n        k,\n        v.catch(err => {\n          diag.debug(\n            'promise rejection for resource attribute: %s - %s',\n            k,\n            err\n          );\n          return undefined;\n        }),\n      ];\n    }\n    return [k, v];\n  });\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA,MAAM;IACI,eAAuC;IACvC,0BAA0B,MAAM;IAEhC,oBAAiC;IAEzC,OAAO,kBACL,UAAgE,EAAA;QAEhE,MAAM,MAAM,IAAI,aAAa,CAAA;QAC7B,IAAI,cAAc,GAAG,qBAAqB;QAC1C,IAAI,uBAAuB,GACzB,WAAW,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,GAAK,CAAA,GAAA,sRAAA,CAAA,gBAAa,AAAb,EAAc,MAAM,MAAM,GAAG;QAC/D,OAAO;IACT;IAEA,YACE;;;;QAKA,QAA0B,CAAA;QAE1B,MAAM,aAAa,SAAS,UAAU,IAAI,CAAA;QAC1C,IAAI,CAAC,cAAc,GAAG,OAAO,OAAO,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE;YAC1D,IAAI,CAAA,GAAA,sRAAA,CAAA,gBAAa,AAAb,EAAc,IAAI;gBACpB,cAAc;gBACd,IAAI,CAAC,uBAAuB,GAAG;;YAGjC,OAAO;gBAAC;gBAAG;aAAE;QACf;QAEA,IAAI,CAAC,cAAc,GAAG,qBAAqB,IAAI,CAAC,cAAc;IAChE;IAEA,IAAW,yBAAsB;QAC/B,OAAO,IAAI,CAAC,uBAAuB;IACrC;IAEO,MAAM,yBAAsB;QACjC,IAAI,CAAC,IAAI,CAAC,sBAAsB,EAAE;YAChC;;QAGF,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,IAAK;YACnD,MAAM,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,cAAc,CAAC,EAAE;YACrC,IAAI,CAAC,cAAc,CAAC,EAAE,GAAG;gBAAC;gBAAG,CAAA,GAAA,sRAAA,CAAA,gBAAa,AAAb,EAAc,KAAK,MAAM,IAAI;aAAE;;QAG9D,IAAI,CAAC,uBAAuB,GAAG;IACjC;IAEA,IAAW,aAAU;QACnB,IAAI,IAAI,CAAC,sBAAsB,EAAE;YAC/B,2DAAA,CAAA,OAAI,CAAC,KAAK,CACR;;QAIJ,IAAI,IAAI,CAAC,mBAAmB,EAAE;YAC5B,OAAO,IAAI,CAAC,mBAAmB;;QAGjC,MAAM,QAAoB,CAAA;QAC1B,KAAK,MAAM,CAAC,GAAG,EAAE,IAAI,IAAI,CAAC,cAAc,CAAE;YACxC,IAAI,CAAA,GAAA,sRAAA,CAAA,gBAAa,AAAb,EAAc,IAAI;gBACpB,2DAAA,CAAA,OAAI,CAAC,KAAK,CAAC,CAAA,6BAAA,EAAgC,EAAC,QAAA,CAAU;gBACtD;;YAEF,IAAI,KAAK,MAAM;gBACb,KAAK,CAAC,EAAE,KAAK;;;QAIjB,oDAAoD;QACpD,IAAI,CAAC,IAAI,CAAC,uBAAuB,EAAE;YACjC,IAAI,CAAC,mBAAmB,GAAG;;QAG7B,OAAO;IACT;IAEO,mBAAgB;QACrB,OAAO,IAAI,CAAC,cAAc;IAC5B;IAEO,MAAM,QAAyB,EAAA;QACpC,IAAI,YAAY,MAAM,OAAO,IAAI;QAEjC,qBAAqB;QACrB,+DAA+D;QAC/D,OAAO,aAAa,iBAAiB,CAAC;eACjC,SAAS,gBAAgB;eACzB,IAAI,CAAC,gBAAgB;SACzB;IACH;;AAGI,SAAU,uBACd,UAAsC;IAEtC,OAAO,aAAa,iBAAiB,CAAC,OAAO,OAAO,CAAC;AACvD;AAEM,SAAU,6BACd,gBAAkC;IAElC,OAAO,IAAI,aAAa;AAC1B;AAEM,SAAU;IACd,OAAO,uBAAuB,CAAA;AAChC;AAEM,SAAU;IACd,OAAO,uBAAuB;QAC5B,CAAC,uRAAA,CAAA,oBAAiB,CAAC,EAAE,CAAA,GAAA,+TAAA,CAAA,qBAAkB,AAAlB;QACrB,CAAC,uRAAA,CAAA,8BAA2B,CAAC,EAAE,sSAAA,CAAA,WAAQ,CAAC,uRAAA,CAAA,8BAA2B,CAAC;QACpE,CAAC,uRAAA,CAAA,0BAAuB,CAAC,EAAE,sSAAA,CAAA,WAAQ,CAAC,uRAAA,CAAA,0BAAuB,CAAC;QAC5D,CAAC,uRAAA,CAAA,6BAA0B,CAAC,EAAE,sSAAA,CAAA,WAAQ,CAAC,uRAAA,CAAA,6BAA0B,CAAC;;AAEtE;AAEA,SAAS,qBACP,UAAkC;IAElC,OAAO,WAAW,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE;QAC3B,IAAI,CAAA,GAAA,sRAAA,CAAA,gBAAa,AAAb,EAAc,IAAI;YACpB,OAAO;gBACL;gBACA,EAAE,KAAK,CAAC,CAAA;oBACN,2DAAA,CAAA,OAAI,CAAC,KAAK,CACR,qDACA,GACA;oBAEF,OAAO;gBACT;aACD;;QAEH,OAAO;YAAC;YAAG;SAAE;IACf;AACF"}},
    {"offset": {"line": 2736, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}