{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 27, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 40, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/client/routing/appRouterRoutingInstrumentation.ts"],"sourcesContent":["import type { Client, Span } from '@sentry/core';\nimport {\n  browserPerformanceTimeOrigin,\n  GLOBAL_OBJ,\n  SEMANTIC_ATTRIBUTE_SENTRY_OP,\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n  SEMANTIC_ATTRIBUTE_SENTRY_SOURCE,\n} from '@sentry/core';\nimport { startBrowserTracingNavigationSpan, startBrowserTracingPageLoadSpan, WINDOW } from '@sentry/react';\n\nexport const INCOMPLETE_APP_ROUTER_INSTRUMENTATION_TRANSACTION_NAME = 'incomplete-app-router-transaction';\n\n/**\n * This mutable keeps track of what router navigation instrumentation mechanism we are using.\n *\n * The default one is 'router-patch' which is a way of instrumenting that worked up until Next.js 15.3.0 was released.\n * For this method we took the global router instance and simply monkey patched all the router methods like push(), replace(), and so on.\n * This worked because Next.js itself called the router methods for things like the <Link /> component.\n * Vercel decided that it is not good to call these public API methods from within the framework so they switched to an internal system that completely bypasses our monkey patching. This happened in 15.3.0.\n *\n * We raised with Vercel that this breaks our SDK so together with them we came up with an API for `instrumentation-client.ts` called `onRouterTransitionStart` that is called whenever a navigation is kicked off.\n *\n * Now we have the problem of version compatibility.\n * For older Next.js versions we cannot use the new hook so we need to always patch the router.\n * For newer Next.js versions we cannot know whether the user actually registered our handler for the `onRouterTransitionStart` hook, so we need to wait until it was called at least once before switching the instrumentation mechanism.\n * The problem is, that the user may still have registered a hook and then call a patched router method.\n * First, the monkey patched router method will be called, starting a navigation span, then the hook will also called.\n * We need to handle this case and not create two separate navigation spans but instead update the current navigation span and then switch to the new instrumentation mode.\n * This is all denoted by this `navigationRoutingMode` variable.\n */\nlet navigationRoutingMode: 'router-patch' | 'transition-start-hook' = 'router-patch';\n\nconst currentRouterPatchingNavigationSpanRef: NavigationSpanRef = { current: undefined };\n\n/** Instruments the Next.js app router for pageloads. */\nexport function appRouterInstrumentPageLoad(client: Client): void {\n  const origin = browserPerformanceTimeOrigin();\n  startBrowserTracingPageLoadSpan(client, {\n    name: WINDOW.location.pathname,\n    // pageload should always start at timeOrigin (and needs to be in s, not ms)\n    startTime: origin ? origin / 1000 : undefined,\n    attributes: {\n      [SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'pageload',\n      [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.pageload.nextjs.app_router_instrumentation',\n      [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'url',\n    },\n  });\n}\n\ninterface NavigationSpanRef {\n  current: Span | undefined;\n}\n\ninterface NextRouter {\n  back: () => void;\n  forward: () => void;\n  push: (target: string) => void;\n  replace: (target: string) => void;\n}\n\n// Yes, yes, I know we shouldn't depend on these internals. But that's where we are at. We write the ugly code, so you don't have to.\nconst GLOBAL_OBJ_WITH_NEXT_ROUTER = GLOBAL_OBJ as typeof GLOBAL_OBJ & {\n  // Available until 13.4.4-canary.3 - https://github.com/vercel/next.js/pull/50210\n  nd?: {\n    router?: NextRouter;\n  };\n  // Available from 13.4.4-canary.4 - https://github.com/vercel/next.js/pull/50210\n  next?: {\n    router?: NextRouter;\n  };\n};\n\n/*\n * The routing instrumentation needs to handle a few cases:\n * - Router operations:\n *  - router.push() (either explicitly called or implicitly through <Link /> tags)\n *  - router.replace() (either explicitly called or implicitly through <Link replace /> tags)\n *  - router.back()\n *  - router.forward()\n * - Browser operations:\n *  - native Browser-back / popstate event (implicitly called by router.back())\n *  - native Browser-forward / popstate event (implicitly called by router.forward())\n */\n\n/** Instruments the Next.js app router for navigation. */\nexport function appRouterInstrumentNavigation(client: Client): void {\n  routerTransitionHandler = (href, navigationType) => {\n    const pathname = new URL(href, WINDOW.location.href).pathname;\n\n    if (navigationRoutingMode === 'router-patch') {\n      navigationRoutingMode = 'transition-start-hook';\n    }\n\n    const currentNavigationSpan = currentRouterPatchingNavigationSpanRef.current;\n    if (currentNavigationSpan) {\n      currentNavigationSpan.updateName(pathname);\n      currentNavigationSpan.setAttributes({\n        'navigation.type': `router.${navigationType}`,\n      });\n      currentRouterPatchingNavigationSpanRef.current = undefined;\n    } else {\n      startBrowserTracingNavigationSpan(client, {\n        name: pathname,\n        attributes: {\n          [SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'navigation',\n          [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.navigation.nextjs.app_router_instrumentation',\n          [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'url',\n          'navigation.type': `router.${navigationType}`,\n        },\n      });\n    }\n  };\n\n  WINDOW.addEventListener('popstate', () => {\n    if (currentRouterPatchingNavigationSpanRef.current?.isRecording()) {\n      currentRouterPatchingNavigationSpanRef.current.updateName(WINDOW.location.pathname);\n      currentRouterPatchingNavigationSpanRef.current.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, 'url');\n    } else {\n      currentRouterPatchingNavigationSpanRef.current = startBrowserTracingNavigationSpan(client, {\n        name: WINDOW.location.pathname,\n        attributes: {\n          [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.navigation.nextjs.app_router_instrumentation',\n          [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'url',\n          'navigation.type': 'browser.popstate',\n        },\n      });\n    }\n  });\n\n  let routerPatched = false;\n  let triesToFindRouter = 0;\n  const MAX_TRIES_TO_FIND_ROUTER = 500;\n  const ROUTER_AVAILABILITY_CHECK_INTERVAL_MS = 20;\n  const checkForRouterAvailabilityInterval = setInterval(() => {\n    triesToFindRouter++;\n    const router = GLOBAL_OBJ_WITH_NEXT_ROUTER?.next?.router ?? GLOBAL_OBJ_WITH_NEXT_ROUTER?.nd?.router;\n\n    if (routerPatched || triesToFindRouter > MAX_TRIES_TO_FIND_ROUTER) {\n      clearInterval(checkForRouterAvailabilityInterval);\n    } else if (router) {\n      clearInterval(checkForRouterAvailabilityInterval);\n      routerPatched = true;\n\n      patchRouter(client, router, currentRouterPatchingNavigationSpanRef);\n\n      // If the router at any point gets overridden - patch again\n      (['nd', 'next'] as const).forEach(globalValueName => {\n        const globalValue = GLOBAL_OBJ_WITH_NEXT_ROUTER[globalValueName];\n        if (globalValue) {\n          GLOBAL_OBJ_WITH_NEXT_ROUTER[globalValueName] = new Proxy(globalValue, {\n            set(target, p, newValue) {\n              if (p === 'router' && typeof newValue === 'object' && newValue !== null) {\n                patchRouter(client, newValue, currentRouterPatchingNavigationSpanRef);\n              }\n\n              // @ts-expect-error we cannot possibly type this\n              target[p] = newValue;\n              return true;\n            },\n          });\n        }\n      });\n    }\n  }, ROUTER_AVAILABILITY_CHECK_INTERVAL_MS);\n}\n\nfunction transactionNameifyRouterArgument(target: string): string {\n  try {\n    // We provide an arbitrary base because we only care about the pathname and it makes URL parsing more resilient.\n    return new URL(target, 'http://example.com/').pathname;\n  } catch {\n    return '/';\n  }\n}\n\nconst patchedRouters = new WeakSet<NextRouter>();\n\nfunction patchRouter(client: Client, router: NextRouter, currentNavigationSpanRef: NavigationSpanRef): void {\n  if (patchedRouters.has(router)) {\n    return;\n  }\n  patchedRouters.add(router);\n\n  (['back', 'forward', 'push', 'replace'] as const).forEach(routerFunctionName => {\n    if (router?.[routerFunctionName]) {\n      // @ts-expect-error Weird type error related to not knowing how to associate return values with the individual functions - we can just ignore\n      router[routerFunctionName] = new Proxy(router[routerFunctionName], {\n        apply(target, thisArg, argArray) {\n          if (navigationRoutingMode !== 'router-patch') {\n            return target.apply(thisArg, argArray);\n          }\n\n          let transactionName = INCOMPLETE_APP_ROUTER_INSTRUMENTATION_TRANSACTION_NAME;\n          const transactionAttributes: Record<string, string> = {\n            [SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'navigation',\n            [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.navigation.nextjs.app_router_instrumentation',\n            [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'url',\n          };\n\n          if (routerFunctionName === 'push') {\n            transactionName = transactionNameifyRouterArgument(argArray[0]);\n            transactionAttributes['navigation.type'] = 'router.push';\n          } else if (routerFunctionName === 'replace') {\n            transactionName = transactionNameifyRouterArgument(argArray[0]);\n            transactionAttributes['navigation.type'] = 'router.replace';\n          } else if (routerFunctionName === 'back') {\n            transactionAttributes['navigation.type'] = 'router.back';\n          } else if (routerFunctionName === 'forward') {\n            transactionAttributes['navigation.type'] = 'router.forward';\n          }\n\n          currentNavigationSpanRef.current = startBrowserTracingNavigationSpan(client, {\n            name: transactionName,\n            attributes: transactionAttributes,\n          });\n\n          return target.apply(thisArg, argArray);\n        },\n      });\n    }\n  });\n}\n\nlet routerTransitionHandler: undefined | ((href: string, navigationType: string) => void) = undefined;\n\n/**\n * A handler for Next.js' `onRouterTransitionStart` hook in `instrumentation-client.ts` to record navigation spans in Sentry.\n */\nexport function captureRouterTransitionStart(href: string, navigationType: string): void {\n  if (routerTransitionHandler) {\n    routerTransitionHandler(href, navigationType);\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 240, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 245, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/common/debug-build.ts"],"sourcesContent":["declare const __DEBUG_BUILD__: boolean;\n\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nexport const DEBUG_BUILD = __DEBUG_BUILD__;\n"],"names":[],"mappings":"AAEA;;;;CAIA;;;AACO,MAAM,cAAc,OAAA,qBAAA,eAAA"}},
    {"offset": {"line": 255, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 260, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/client/routing/pagesRouterRoutingInstrumentation.ts"],"sourcesContent":["import type { Client, TransactionSource } from '@sentry/core';\nimport {\n  browserPerformanceTimeOrigin,\n  logger,\n  parseBaggageHeader,\n  SEMANTIC_ATTRIBUTE_SENTRY_OP,\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n  SEMANTIC_ATTRIBUTE_SENTRY_SOURCE,\n  stripUrlQueryAndFragment,\n} from '@sentry/core';\nimport { startBrowserTracingNavigationSpan, startBrowserTracingPageLoadSpan, WINDOW } from '@sentry/react';\nimport type { NEXT_DATA } from 'next/dist/shared/lib/utils';\nimport RouterImport from 'next/router';\nimport type { ParsedUrlQuery } from 'querystring';\nimport { DEBUG_BUILD } from '../../common/debug-build';\n\n// next/router v10 is CJS\n//\n// For ESM/CJS interoperability 'reasons', depending on how this file is loaded, Router might be on the default export\nconst Router: typeof RouterImport = RouterImport.events\n  ? RouterImport\n  : (RouterImport as unknown as { default: typeof RouterImport }).default;\n\nconst globalObject = WINDOW as typeof WINDOW & {\n  __BUILD_MANIFEST?: {\n    sortedPages?: string[];\n  };\n};\n\n/**\n * Describes data located in the __NEXT_DATA__ script tag. This tag is present on every page of a Next.js app.\n */\ninterface SentryEnhancedNextData extends NEXT_DATA {\n  props: {\n    pageProps?: {\n      _sentryTraceData?: string; // trace parent info, if injected by a data-fetcher\n      _sentryBaggage?: string; // baggage, if injected by a data-fetcher\n      // These two values are only injected by `getStaticProps` in a very special case with the following conditions:\n      // 1. The page's `getStaticPaths` method must have returned `fallback: 'blocking'`.\n      // 2. The requested page must be a \"miss\" in terms of \"Incremental Static Regeneration\", meaning the requested page has not been generated before.\n      // In this case, a page is requested and only served when `getStaticProps` is done. There is not even a fallback page or similar.\n    };\n  };\n}\n\ninterface NextDataTagInfo {\n  route?: string;\n  params?: ParsedUrlQuery;\n  sentryTrace?: string;\n  baggage?: string;\n}\n\n/**\n * Every Next.js page (static and dynamic ones) comes with a script tag with the id \"__NEXT_DATA__\". This script tag\n * contains a JSON object with data that was either generated at build time for static pages (`getStaticProps`), or at\n * runtime with data fetchers like `getServerSideProps.`.\n *\n * We can use this information to:\n * - Always get the parameterized route we're in when loading a page.\n * - Send trace information (trace-id, baggage) from the server to the client.\n *\n * This function extracts this information.\n */\nfunction extractNextDataTagInformation(): NextDataTagInfo {\n  let nextData: SentryEnhancedNextData | undefined;\n  // Let's be on the safe side and actually check first if there is really a __NEXT_DATA__ script tag on the page.\n  // Theoretically this should always be the case though.\n  const nextDataTag = globalObject.document.getElementById('__NEXT_DATA__');\n  if (nextDataTag?.innerHTML) {\n    try {\n      nextData = JSON.parse(nextDataTag.innerHTML);\n    } catch (e) {\n      DEBUG_BUILD && logger.warn('Could not extract __NEXT_DATA__');\n    }\n  }\n\n  if (!nextData) {\n    return {};\n  }\n\n  const nextDataTagInfo: NextDataTagInfo = {};\n\n  const { page, query, props } = nextData;\n\n  // `nextData.page` always contains the parameterized route - except for when an error occurs in a data fetching\n  // function, then it is \"/_error\", but that isn't a problem since users know which route threw by looking at the\n  // parent transaction\n  // TODO: Actually this is a problem (even though it is not that big), because the DSC and the transaction payload will contain\n  // a different transaction name. Maybe we can fix this. Idea: Also send transaction name via pageProps when available.\n  nextDataTagInfo.route = page;\n  nextDataTagInfo.params = query;\n\n  if (props?.pageProps) {\n    nextDataTagInfo.sentryTrace = props.pageProps._sentryTraceData;\n    nextDataTagInfo.baggage = props.pageProps._sentryBaggage;\n  }\n\n  return nextDataTagInfo;\n}\n\n/**\n * Instruments the Next.js pages router for pageloads.\n * Only supported for client side routing. Works for Next >= 10.\n *\n * Leverages the SingletonRouter from the `next/router` to\n * generate pageload/navigation transactions and parameterize\n * transaction names.\n */\nexport function pagesRouterInstrumentPageLoad(client: Client): void {\n  const { route, params, sentryTrace, baggage } = extractNextDataTagInformation();\n  const parsedBaggage = parseBaggageHeader(baggage);\n  let name = route || globalObject.location.pathname;\n\n  // /_error is the fallback page for all errors. If there is a transaction name for /_error, use that instead\n  if (parsedBaggage?.['sentry-transaction'] && name === '/_error') {\n    name = parsedBaggage['sentry-transaction'];\n    // Strip any HTTP method from the span name\n    name = name.replace(/^(GET|POST|PUT|DELETE|PATCH|HEAD|OPTIONS|TRACE|CONNECT)\\s+/i, '');\n  }\n\n  const origin = browserPerformanceTimeOrigin();\n  startBrowserTracingPageLoadSpan(\n    client,\n    {\n      name,\n      // pageload should always start at timeOrigin (and needs to be in s, not ms)\n      startTime: origin ? origin / 1000 : undefined,\n      attributes: {\n        [SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'pageload',\n        [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.pageload.nextjs.pages_router_instrumentation',\n        [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: route ? 'route' : 'url',\n        ...(params && client.getOptions().sendDefaultPii && { ...params }),\n      },\n    },\n    { sentryTrace, baggage },\n  );\n}\n\n/**\n * Instruments the Next.js pages router for navigation.\n * Only supported for client side routing. Works for Next >= 10.\n *\n * Leverages the SingletonRouter from the `next/router` to\n * generate pageload/navigation transactions and parameterize\n * transaction names.\n */\nexport function pagesRouterInstrumentNavigation(client: Client): void {\n  Router.events.on('routeChangeStart', (navigationTarget: string) => {\n    const strippedNavigationTarget = stripUrlQueryAndFragment(navigationTarget);\n    const matchedRoute = getNextRouteFromPathname(strippedNavigationTarget);\n\n    let newLocation: string;\n    let spanSource: TransactionSource;\n\n    if (matchedRoute) {\n      newLocation = matchedRoute;\n      spanSource = 'route';\n    } else {\n      newLocation = strippedNavigationTarget;\n      spanSource = 'url';\n    }\n\n    startBrowserTracingNavigationSpan(client, {\n      name: newLocation,\n      attributes: {\n        [SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'navigation',\n        [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.navigation.nextjs.pages_router_instrumentation',\n        [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: spanSource,\n      },\n    });\n  });\n}\n\nfunction getNextRouteFromPathname(pathname: string): string | undefined {\n  const pageRoutes = globalObject.__BUILD_MANIFEST?.sortedPages;\n\n  // Page route should in 99.999% of the cases be defined by now but just to be sure we make a check here\n  if (!pageRoutes) {\n    return;\n  }\n\n  return pageRoutes.find(route => {\n    const routeRegExp = convertNextRouteToRegExp(route);\n    return pathname.match(routeRegExp);\n  });\n}\n\n/**\n * Converts a Next.js style route to a regular expression that matches on pathnames (no query params or URL fragments).\n *\n * In general this involves replacing any instances of square brackets in a route with a wildcard:\n * e.g. \"/users/[id]/info\" becomes /\\/users\\/([^/]+?)\\/info/\n *\n * Some additional edgecases need to be considered:\n * - All routes have an optional slash at the end, meaning users can navigate to \"/users/[id]/info\" or\n *   \"/users/[id]/info/\" - both will be resolved to \"/users/[id]/info\".\n * - Non-optional \"catchall\"s at the end of a route must be considered when matching (e.g. \"/users/[...params]\").\n * - Optional \"catchall\"s at the end of a route must be considered when matching (e.g. \"/users/[[...params]]\").\n *\n * @param route A Next.js style route as it is found in `global.__BUILD_MANIFEST.sortedPages`\n */\nfunction convertNextRouteToRegExp(route: string): RegExp {\n  // We can assume a route is at least \"/\".\n  const routeParts = route.split('/');\n\n  let optionalCatchallWildcardRegex = '';\n  if (routeParts[routeParts.length - 1]?.match(/^\\[\\[\\.\\.\\..+\\]\\]$/)) {\n    // If last route part has pattern \"[[...xyz]]\" we pop the latest route part to get rid of the required trailing\n    // slash that would come before it if we didn't pop it.\n    routeParts.pop();\n    optionalCatchallWildcardRegex = '(?:/(.+?))?';\n  }\n\n  const rejoinedRouteParts = routeParts\n    .map(\n      routePart =>\n        routePart\n          .replace(/^\\[\\.\\.\\..+\\]$/, '(.+?)') // Replace catch all wildcard with regex wildcard\n          .replace(/^\\[.*\\]$/, '([^/]+?)'), // Replace route wildcards with lazy regex wildcards\n    )\n    .join('/');\n\n  // eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor -- routeParts are from the build manifest, so no raw user input\n  return new RegExp(\n    `^${rejoinedRouteParts}${optionalCatchallWildcardRegex}(?:/)?$`, // optional slash at the end\n  );\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 431, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 436, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/client/routing/nextRoutingInstrumentation.ts"],"sourcesContent":["import type { Client } from '@sentry/core';\nimport { WINDOW } from '@sentry/react';\nimport { appRouterInstrumentNavigation, appRouterInstrumentPageLoad } from './appRouterRoutingInstrumentation';\nimport { pagesRouterInstrumentNavigation, pagesRouterInstrumentPageLoad } from './pagesRouterRoutingInstrumentation';\n\n/**\n * Instruments the Next.js Client Router for page loads.\n */\nexport function nextRouterInstrumentPageLoad(client: Client): void {\n  const isAppRouter = !WINDOW.document.getElementById('__NEXT_DATA__');\n  if (isAppRouter) {\n    appRouterInstrumentPageLoad(client);\n  } else {\n    pagesRouterInstrumentPageLoad(client);\n  }\n}\n\n/**\n * Instruments the Next.js Client Router for navigation.\n */\nexport function nextRouterInstrumentNavigation(client: Client): void {\n  const isAppRouter = !WINDOW.document.getElementById('__NEXT_DATA__');\n  if (isAppRouter) {\n    appRouterInstrumentNavigation(client);\n  } else {\n    pagesRouterInstrumentNavigation(client);\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;;AAKA;;CAEA,GACO,SAAS,6BAA6B,MAAM;IACjD,MAAM,cAAc,CAAC,yOAAA,CAAA,SAAM,CAAC,QAAQ,CAAC,cAAc,CAAC;IACpD,IAAI,aAAa;QACf,CAAA,GAAA,uZAAA,CAAA,8BAA2B,AAA3B,EAA4B;IAChC,OAAS;QACL,CAAA,GAAA,yZAAA,CAAA,gCAA6B,AAA7B,EAA8B;IAClC;AACA;AAEA;;CAEA,GACO,SAAS,+BAA+B,MAAM;IACnD,MAAM,cAAc,CAAC,yOAAA,CAAA,SAAM,CAAC,QAAQ,CAAC,cAAc,CAAC;IACpD,IAAI,aAAa;QACf,CAAA,GAAA,uZAAA,CAAA,gCAA6B,AAA7B,EAA8B;IAClC,OAAS;QACL,CAAA,GAAA,yZAAA,CAAA,kCAA+B,AAA/B,EAAgC;IACpC;AACA"}},
    {"offset": {"line": 469, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 474, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/client/browserTracingIntegration.ts"],"sourcesContent":["import type { Integration } from '@sentry/core';\nimport { browserTracingIntegration as originalBrowserTracingIntegration } from '@sentry/react';\nimport { nextRouterInstrumentNavigation, nextRouterInstrumentPageLoad } from './routing/nextRoutingInstrumentation';\n\n/**\n * A custom browser tracing integration for Next.js.\n */\nexport function browserTracingIntegration(\n  options: Parameters<typeof originalBrowserTracingIntegration>[0] = {},\n): Integration {\n  const browserTracingIntegrationInstance = originalBrowserTracingIntegration({\n    ...options,\n    instrumentNavigation: false,\n    instrumentPageLoad: false,\n    onRequestSpanStart(...args) {\n      const [span, { headers }] = args;\n\n      // Next.js prefetch requests have a `next-router-prefetch` header\n      if (headers?.get('next-router-prefetch')) {\n        span?.setAttribute('http.request.prefetch', true);\n      }\n\n      return options.onRequestSpanStart?.(...args);\n    },\n  });\n\n  const { instrumentPageLoad = true, instrumentNavigation = true } = options;\n\n  return {\n    ...browserTracingIntegrationInstance,\n    afterAllSetup(client) {\n      // We need to run the navigation span instrumentation before the `afterAllSetup` hook on the normal browser\n      // tracing integration because we need to ensure the order of execution is as follows:\n      // Instrumentation to start span on RSC fetch request runs -> Instrumentation to put tracing headers from active span on fetch runs\n      // If it were the other way around, the RSC fetch request would not receive the tracing headers from the navigation transaction.\n      if (instrumentNavigation) {\n        nextRouterInstrumentNavigation(client);\n      }\n\n      browserTracingIntegrationInstance.afterAllSetup(client);\n\n      if (instrumentPageLoad) {\n        nextRouterInstrumentPageLoad(client);\n      }\n    },\n  };\n}\n"],"names":["originalBrowserTracingIntegration"],"mappings":";;;;;;;;AAIA;;CAEA,GACO,SAAS,0BACd,UAAmE,CAAA,CAAE;IAErE,MAAM,oCAAoCA,CAAAA,GAAAA,sQAAAA,CAAAA,4BAAiC,AAAjCA,EAAkC;QAC1E,GAAG,OAAO;QACV,sBAAsB;QACtB,oBAAoB;QACpB,oBAAmB,GAAG,IAAI;YACxB,MAAM,CAAC,MAAM,EAAE,OAAA,EAAS,CAAA,GAAI;YAElC,iEAAA;YACM,IAAI,SAAS,IAAI,yBAAyB;gBACxC,MAAM,aAAa,yBAAyB;YACpD;YAEM,OAAO,QAAQ,kBAAkB,MAAM;QAC7C;IACA;IAEE,MAAM,EAAE,qBAAqB,IAAI,EAAE,uBAAuB,IAAA,EAAK,GAAI;IAEnE,OAAO;QACL,GAAG,iCAAiC;QACpC,eAAc,MAAM;YACxB,2GAAA;YACA,sFAAA;YACA,mIAAA;YACA,gIAAA;YACM,IAAI,sBAAsB;gBACxB,CAAA,GAAA,kZAAA,CAAA,iCAA8B,AAA9B,EAA+B;YACvC;YAEM,kCAAkC,aAAa,CAAC;YAEhD,IAAI,oBAAoB;gBACtB,CAAA,GAAA,kZAAA,CAAA,+BAA4B,AAA5B,EAA6B;YACrC;QACA;IACA;AACA"}},
    {"offset": {"line": 518, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 523, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/common/utils/responseEnd.ts"],"sourcesContent":["import type { Span } from '@sentry/core';\nimport { fill, flush, logger, setHttpStatus } from '@sentry/core';\nimport type { ServerResponse } from 'http';\nimport { DEBUG_BUILD } from '../debug-build';\nimport type { ResponseEndMethod, WrappedResponseEndMethod } from '../types';\n\n/**\n * Wrap `res.end()` so that it ends the span and flushes events before letting the request finish.\n *\n * Note: This wraps a sync method with an async method. While in general that's not a great idea in terms of keeping\n * things in the right order, in this case it's safe, because the native `.end()` actually *is* (effectively) async, and\n * its run actually *is* (literally) awaited, just manually so (which reflects the fact that the core of the\n * request/response code in Node by far predates the introduction of `async`/`await`). When `.end()` is done, it emits\n * the `prefinish` event, and only once that fires does request processing continue. See\n * https://github.com/nodejs/node/commit/7c9b607048f13741173d397795bac37707405ba7.\n *\n * Also note: `res.end()` isn't called until *after* all response data and headers have been sent, so blocking inside of\n * `end` doesn't delay data getting to the end user. See\n * https://nodejs.org/api/http.html#responseenddata-encoding-callback.\n *\n * @param span The span tracking the request\n * @param res: The request's corresponding response\n */\nexport function autoEndSpanOnResponseEnd(span: Span, res: ServerResponse): void {\n  const wrapEndMethod = (origEnd: ResponseEndMethod): WrappedResponseEndMethod => {\n    return function sentryWrappedEnd(this: ServerResponse, ...args: unknown[]) {\n      finishSpan(span, this);\n      return origEnd.call(this, ...args);\n    };\n  };\n\n  // Prevent double-wrapping\n  // res.end may be undefined during build when using `next export` to statically export a Next.js app\n  if (res.end && !(res.end as WrappedResponseEndMethod).__sentry_original__) {\n    fill(res, 'end', wrapEndMethod);\n  }\n}\n\n/** Finish the given response's span and set HTTP status data */\nexport function finishSpan(span: Span, res: ServerResponse): void {\n  setHttpStatus(span, res.statusCode);\n  span.end();\n}\n\n/**\n * Flushes pending Sentry events with a 2 second timeout and in a way that cannot create unhandled promise rejections.\n */\nexport async function flushSafelyWithTimeout(): Promise<void> {\n  try {\n    DEBUG_BUILD && logger.log('Flushing events...');\n    await flush(2000);\n    DEBUG_BUILD && logger.log('Done flushing events');\n  } catch (e) {\n    DEBUG_BUILD && logger.log('Error while flushing events:\\n', e);\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;AA4CA;;CAEA,GACO,eAAe;IACpB,IAAI;QACF,2XAAA,CAAA,cAAA,IAAe,oOAAA,CAAA,SAAM,CAAC,GAAG,CAAC;QAC1B,MAAM,CAAA,GAAA,4NAAA,CAAA,QAAK,AAAL,EAAM;QACZ,2XAAA,CAAA,cAAA,IAAe,oOAAA,CAAA,SAAM,CAAC,GAAG,CAAC;IAC9B,EAAI,OAAO,GAAG;QACV,2XAAA,CAAA,cAAA,IAAe,oOAAA,CAAA,SAAM,CAAC,GAAG,CAAC,kCAAkC;IAChE;AACA"}},
    {"offset": {"line": 545, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 550, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/common/captureRequestError.ts"],"sourcesContent":["import type { RequestEventData } from '@sentry/core';\nimport { captureException, headersToDict, vercelWaitUntil, withScope } from '@sentry/core';\nimport { flushSafelyWithTimeout } from './utils/responseEnd';\n\ntype RequestInfo = {\n  path: string;\n  method: string;\n  headers: Record<string, string | string[] | undefined>;\n};\n\ntype ErrorContext = {\n  routerKind: string; // 'Pages Router' | 'App Router'\n  routePath: string;\n  routeType: string; // 'render' | 'route' | 'middleware'\n};\n\n/**\n * Reports errors passed to the the Next.js `onRequestError` instrumentation hook.\n */\nexport function captureRequestError(error: unknown, request: RequestInfo, errorContext: ErrorContext): void {\n  withScope(scope => {\n    scope.setSDKProcessingMetadata({\n      normalizedRequest: {\n        headers: headersToDict(request.headers),\n        method: request.method,\n      } satisfies RequestEventData,\n    });\n\n    scope.setContext('nextjs', {\n      request_path: request.path,\n      router_kind: errorContext.routerKind,\n      router_path: errorContext.routePath,\n      route_type: errorContext.routeType,\n    });\n\n    scope.setTransactionName(errorContext.routePath);\n\n    captureException(error, {\n      mechanism: {\n        handled: false,\n      },\n    });\n\n    vercelWaitUntil(flushSafelyWithTimeout());\n  });\n}\n"],"names":[],"mappings":";;;;;;;;;;;AAgBA;;CAEA,GACO,SAAS,oBAAoB,KAAK,EAAW,OAAO,EAAe,YAAY;IACpF,CAAA,GAAA,kOAAA,CAAA,YAAS,AAAT,EAAU,CAAA;QACR,MAAM,wBAAwB,CAAC;YAC7B,mBAAmB;gBACjB,SAAS,CAAA,GAAA,qOAAA,CAAA,gBAAa,AAAb,EAAc,QAAQ,OAAO;gBACtC,QAAQ,QAAQ,MAAM;YAC9B;QACA;QAEI,MAAM,UAAU,CAAC,UAAU;YACzB,cAAc,QAAQ,IAAI;YAC1B,aAAa,aAAa,UAAU;YACpC,aAAa,aAAa,SAAS;YACnC,YAAY,aAAa,SAAS;QACxC;QAEI,MAAM,kBAAkB,CAAC,aAAa,SAAS;QAE/C,CAAA,GAAA,4NAAA,CAAA,mBAAgB,AAAhB,EAAiB,OAAO;YACtB,WAAW;gBACT,SAAS;YACjB;QACA;QAEI,CAAA,GAAA,6OAAA,CAAA,kBAAe,AAAf,EAAgB,CAAA,GAAA,iYAAA,CAAA,yBAAsB,AAAtB;IACpB;AACA"}},
    {"offset": {"line": 588, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 593, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/common/pages-router-instrumentation/_error.ts"],"sourcesContent":["import { captureException, httpRequestToRequestData, vercelWaitUntil, withScope } from '@sentry/core';\nimport type { NextPageContext } from 'next';\nimport { flushSafelyWithTimeout } from '../utils/responseEnd';\n\ntype ContextOrProps = {\n  req?: NextPageContext['req'];\n  res?: NextPageContext['res'];\n  err?: NextPageContext['err'] | string;\n  pathname?: string;\n  statusCode?: number;\n};\n\n/**\n * Capture the exception passed by nextjs to the `_error` page, adding context data as appropriate.\n *\n * @param contextOrProps The data passed to either `getInitialProps` or `render` by nextjs\n */\nexport async function captureUnderscoreErrorException(contextOrProps: ContextOrProps): Promise<void> {\n  const { req, res, err } = contextOrProps;\n\n  // 404s (and other 400-y friends) can trigger `_error`, but we don't want to send them to Sentry\n  const statusCode = res?.statusCode || contextOrProps.statusCode;\n  if (statusCode && statusCode < 500) {\n    return Promise.resolve();\n  }\n\n  // In previous versions of the suggested `_error.js` page in which this function is meant to be used, there was a\n  // workaround for https://github.com/vercel/next.js/issues/8592 which involved an extra call to this function, in the\n  // custom error component's `render` method, just in case it hadn't been called by `getInitialProps`. Now that that\n  // issue has been fixed, the second call is unnecessary, but since it lives in user code rather than our code, users\n  // have to be the ones to get rid of it, and guaraneteedly, not all of them will. So, rather than capture the error\n  // twice, we just bail if we sense we're in that now-extraneous second call. (We can tell which function we're in\n  // because Nextjs passes `pathname` to `getInitialProps` but not to `render`.)\n  if (!contextOrProps.pathname) {\n    return Promise.resolve();\n  }\n\n  withScope(scope => {\n    if (req) {\n      const normalizedRequest = httpRequestToRequestData(req);\n      scope.setSDKProcessingMetadata({ normalizedRequest });\n    }\n\n    // If third-party libraries (or users themselves) throw something falsy, we want to capture it as a message (which\n    // is what passing a string to `captureException` will wind up doing)\n    captureException(err || `_error.js called with falsy error (${err})`, {\n      mechanism: {\n        type: 'instrument',\n        handled: false,\n        data: {\n          function: '_error.getInitialProps',\n        },\n      },\n    });\n  });\n\n  vercelWaitUntil(flushSafelyWithTimeout());\n}\n"],"names":[],"mappings":";;;;;;;;;;;AAYA;;;;CAIA,GACO,eAAe,gCAAgC,cAAc;IAClE,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,GAAA,EAAI,GAAI;IAE5B,gGAAA;IACE,MAAM,aAAa,KAAK,cAAc,eAAe,UAAU;IAC/D,IAAI,cAAc,aAAa,KAAK;QAClC,OAAO,QAAQ,OAAO;IAC1B;IAEA,iHAAA;IACA,qHAAA;IACA,mHAAA;IACA,oHAAA;IACA,mHAAA;IACA,iHAAA;IACA,8EAAA;IACE,IAAI,CAAC,eAAe,QAAQ,EAAE;QAC5B,OAAO,QAAQ,OAAO;IAC1B;IAEE,CAAA,GAAA,kOAAA,CAAA,YAAS,AAAT,EAAU,CAAA;QACR,IAAI,KAAK;YACP,MAAM,oBAAoB,CAAA,GAAA,qOAAA,CAAA,2BAAwB,AAAxB,EAAyB;YACnD,MAAM,wBAAwB,CAAC;gBAAE;YAAA;QACvC;QAEA,kHAAA;QACA,qEAAA;QACI,CAAA,GAAA,4NAAA,CAAA,mBAAgB,AAAhB,EAAiB,OAAO,CAAC,mCAAmC,EAAE,IAAI,CAAC,CAAC,EAAE;YACpE,WAAW;gBACT,MAAM;gBACN,SAAS;gBACT,MAAM;oBACJ,UAAU;gBACpB;YACA;QACA;IACA;IAEE,CAAA,GAAA,6OAAA,CAAA,kBAAe,AAAf,EAAgB,CAAA,GAAA,iYAAA,CAAA,yBAAsB,AAAtB;AAClB"}},
    {"offset": {"line": 648, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 653, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/common/getVercelEnv.ts"],"sourcesContent":["/**\n * Returns an environment setting value determined by Vercel's `VERCEL_ENV` environment variable.\n *\n * @param isClient Flag to indicate whether to use the `NEXT_PUBLIC_` prefixed version of the environment variable.\n */\nexport function getVercelEnv(isClient: boolean): string | undefined {\n  const vercelEnvVar = isClient ? process.env.NEXT_PUBLIC_VERCEL_ENV : process.env.VERCEL_ENV;\n  return vercelEnvVar ? `vercel-${vercelEnvVar}` : undefined;\n}\n"],"names":[],"mappings":"AAAA;;;;CAIA;;;;;AACO,SAAS,aAAa,QAAQ;IACnC,MAAM,eAAe,WAAW,gVAAA,CAAA,UAAO,CAAC,GAAG,CAAC,sBAAA,GAAyB,gVAAA,CAAA,UAAO,CAAC,GAAG,CAAC,UAAU;IAC3F,OAAO,eAAe,CAAC,OAAO,EAAE,aAAa,CAAA,GAAA;AACA"}},
    {"offset": {"line": 668, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 673, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/client/tunnelRoute.ts"],"sourcesContent":["import { dsnFromString, GLOBAL_OBJ, logger } from '@sentry/core';\nimport type { BrowserOptions } from '@sentry/react';\nimport { DEBUG_BUILD } from '../common/debug-build';\n\nconst globalWithInjectedValues = GLOBAL_OBJ as typeof GLOBAL_OBJ & {\n  _sentryRewritesTunnelPath?: string;\n};\n\n/**\n * Applies the `tunnel` option to the Next.js SDK options based on `withSentryConfig`'s `tunnelRoute` option.\n */\nexport function applyTunnelRouteOption(options: BrowserOptions): void {\n  const tunnelRouteOption = process.env._sentryRewritesTunnelPath || globalWithInjectedValues._sentryRewritesTunnelPath;\n  if (tunnelRouteOption && options.dsn) {\n    const dsnComponents = dsnFromString(options.dsn);\n    if (!dsnComponents) {\n      return;\n    }\n    const sentrySaasDsnMatch = dsnComponents.host.match(/^o(\\d+)\\.ingest(?:\\.([a-z]{2}))?\\.sentry\\.io$/);\n    if (sentrySaasDsnMatch) {\n      const orgId = sentrySaasDsnMatch[1];\n      const regionCode = sentrySaasDsnMatch[2];\n      let tunnelPath = `${tunnelRouteOption}?o=${orgId}&p=${dsnComponents.projectId}`;\n      if (regionCode) {\n        tunnelPath += `&r=${regionCode}`;\n      }\n      options.tunnel = tunnelPath;\n      DEBUG_BUILD && logger.info(`Tunneling events to \"${tunnelPath}\"`);\n    } else {\n      DEBUG_BUILD && logger.warn('Provided DSN is not a Sentry SaaS DSN. Will not tunnel events.');\n    }\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;;AAIA,MAAM,2BAA2B,uOAAA,CAAA,aAAA;AAIjC;;CAEA,GACO,SAAS,uBAAuB,OAAO;IAC5C,MAAM,oBAAoB,gVAAA,CAAA,UAAO,CAAC,GAAG,CAAC,yBAAA,IAA6B,yBAAyB,yBAAyB;IACrH,IAAI,qBAAqB,QAAQ,GAAG,EAAE;QACpC,MAAM,gBAAgB,CAAA,GAAA,iOAAA,CAAA,gBAAa,AAAb,EAAc,QAAQ,GAAG;QAC/C,IAAI,CAAC,eAAe;YAClB;QACN;QACI,MAAM,qBAAqB,cAAc,IAAI,CAAC,KAAK,CAAC;QACpD,IAAI,oBAAoB;YACtB,MAAM,QAAQ,kBAAkB,CAAC,EAAE;YACnC,MAAM,aAAa,kBAAkB,CAAC,EAAE;YACxC,IAAI,aAAa,CAAC,EAAA,kBAAA,GAAA,EAAA,MAAA,GAAA,EAAA,cAAA,SAAA,CAAA,CAAA;YACA,IAAA,YAAA;gBACA,cAAA,CAAA,GAAA,EAAA,WAAA,CAAA;YACA;YACA,QAAA,MAAA,GAAA;YACA,2XAAA,CAAA,cAAA,IAAA,oOAAA,CAAA,SAAA,CAAA,IAAA,CAAA,CAAA,qBAAA,EAAA,WAAA,CAAA,CAAA;QACA,OAAA;YACA,2XAAA,CAAA,cAAA,IAAA,oOAAA,CAAA,SAAA,CAAA,IAAA,CAAA;QACA;IACA;AACA"}},
    {"offset": {"line": 711, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 716, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/common/nextNavigationErrorUtils.ts"],"sourcesContent":["import { isError } from '@sentry/core';\n\n/**\n * Determines whether input is a Next.js not-found error.\n * https://beta.nextjs.org/docs/api-reference/notfound#notfound\n */\nexport function isNotFoundNavigationError(subject: unknown): boolean {\n  return (\n    isError(subject) &&\n    ['NEXT_NOT_FOUND', 'NEXT_HTTP_ERROR_FALLBACK;404'].includes(\n      (subject as Error & { digest?: unknown }).digest as string,\n    )\n  );\n}\n\n/**\n * Determines whether input is a Next.js redirect error.\n * https://beta.nextjs.org/docs/api-reference/redirect#redirect\n */\nexport function isRedirectNavigationError(subject: unknown): boolean {\n  return (\n    isError(subject) &&\n    typeof (subject as Error & { digest?: unknown }).digest === 'string' &&\n    (subject as Error & { digest: string }).digest.startsWith('NEXT_REDIRECT;') // a redirect digest looks like \"NEXT_REDIRECT;[redirect path]\"\n  );\n}\n"],"names":[],"mappings":";;;;;;;AAEA;;;CAGA,GACO,SAAS,0BAA0B,OAAO;IAC/C,OACE,CAAA,GAAA,gOAAA,CAAA,UAAO,AAAP,EAAQ,YACR;QAAC;QAAkB;KAA+B,CAAC,QAAQ,CACzD,AAAC,QAAyC,MAAA;AAGhD;AAEA;;;CAGA,GACO,SAAS,0BAA0B,OAAO;IAC/C,OACE,CAAA,GAAA,gOAAA,CAAA,UAAO,AAAP,EAAQ,YACR,OAAO,AAAC,QAAyC,MAAA,KAAW,YAC5D,AAAC,QAAuC,MAAM,CAAC,UAAU,CAAC,kBAAgB,+DAAA;;AAE9E"}},
    {"offset": {"line": 741, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 746, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/common/devErrorSymbolicationEventProcessor.ts"],"sourcesContent":["import type { Event, EventHint } from '@sentry/core';\nimport { GLOBAL_OBJ, logger, parseSemver, suppressTracing } from '@sentry/core';\nimport type { StackFrame } from 'stacktrace-parser';\nimport * as stackTraceParser from 'stacktrace-parser';\nimport { DEBUG_BUILD } from './debug-build';\n\ntype OriginalStackFrameResponse = {\n  originalStackFrame: StackFrame;\n  originalCodeFrame: string | null;\n  sourcePackage?: string;\n};\n\nconst globalWithInjectedValues = GLOBAL_OBJ as typeof GLOBAL_OBJ & {\n  _sentryBasePath?: string;\n  next?: {\n    version?: string;\n  };\n};\n\n/**\n * Event processor that will symbolicate errors by using the webpack/nextjs dev server that is used to show stack traces\n * in the dev overlay.\n */\nexport async function devErrorSymbolicationEventProcessor(event: Event, hint: EventHint): Promise<Event | null> {\n  // Filter out spans for requests resolving source maps for stack frames in dev mode\n  if (event.type === 'transaction') {\n    event.spans = event.spans?.filter(span => {\n      const httpUrlAttribute: unknown = span.data?.['http.url'];\n      if (typeof httpUrlAttribute === 'string') {\n        return !httpUrlAttribute.includes('__nextjs_original-stack-frame'); // could also be __nextjs_original-stack-frames (plural)\n      }\n\n      return true;\n    });\n  }\n\n  // Due to changes across Next.js versions, there are a million things that can go wrong here so we just try-catch the\n  // entire event processor. Symbolicated stack traces are just a nice to have.\n  try {\n    if (hint.originalException && hint.originalException instanceof Error && hint.originalException.stack) {\n      const frames = stackTraceParser.parse(hint.originalException.stack);\n\n      const nextjsVersion = globalWithInjectedValues.next?.version || '0.0.0';\n      const parsedNextjsVersion = nextjsVersion ? parseSemver(nextjsVersion) : {};\n\n      let resolvedFrames: ({\n        originalCodeFrame: string | null;\n        originalStackFrame: StackFrame | null;\n      } | null)[];\n\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      if (parsedNextjsVersion.major! > 15 || (parsedNextjsVersion.major === 15 && parsedNextjsVersion.minor! >= 2)) {\n        const r = await resolveStackFrames(frames);\n        if (r === null) {\n          return event;\n        }\n        resolvedFrames = r;\n      } else {\n        resolvedFrames = await Promise.all(\n          frames.map(frame => resolveStackFrame(frame, hint.originalException as Error)),\n        );\n      }\n\n      if (event.exception?.values?.[0]?.stacktrace?.frames) {\n        event.exception.values[0].stacktrace.frames = event.exception.values[0].stacktrace.frames.map(\n          (frame, i, frames) => {\n            const resolvedFrame = resolvedFrames[frames.length - 1 - i];\n            if (!resolvedFrame?.originalStackFrame || !resolvedFrame.originalCodeFrame) {\n              return {\n                ...frame,\n                platform: frame.filename?.startsWith('node:internal') ? 'nodejs' : undefined, // simple hack that will prevent a source mapping error from showing up\n                in_app: false,\n              };\n            }\n\n            const { contextLine, preContextLines, postContextLines } = parseOriginalCodeFrame(\n              resolvedFrame.originalCodeFrame,\n            );\n\n            return {\n              ...frame,\n              pre_context: preContextLines,\n              context_line: contextLine,\n              post_context: postContextLines,\n              function: resolvedFrame.originalStackFrame.methodName,\n              filename: resolvedFrame.originalStackFrame.file || undefined,\n              lineno: resolvedFrame.originalStackFrame.lineNumber || undefined,\n              colno: resolvedFrame.originalStackFrame.column || undefined,\n            };\n          },\n        );\n      }\n    }\n  } catch (e) {\n    return event;\n  }\n\n  return event;\n}\n\nasync function resolveStackFrame(\n  frame: StackFrame,\n  error: Error,\n): Promise<{ originalCodeFrame: string | null; originalStackFrame: StackFrame | null } | null> {\n  try {\n    if (!(frame.file?.startsWith('webpack-internal:') || frame.file?.startsWith('file:'))) {\n      return null;\n    }\n\n    const params = new URLSearchParams();\n    params.append('isServer', String(false)); // doesn't matter since it is overwritten by isAppDirectory\n    params.append('isEdgeServer', String(false)); // doesn't matter since it is overwritten by isAppDirectory\n    params.append('isAppDirectory', String(true)); // will force server to do more thorough checking\n    params.append('errorMessage', error.toString());\n    Object.keys(frame).forEach(key => {\n      params.append(key, (frame[key as keyof typeof frame] ?? '').toString());\n    });\n\n    let basePath = process.env._sentryBasePath ?? globalWithInjectedValues._sentryBasePath ?? '';\n\n    // Prefix the basepath with a slash if it doesn't have one\n    if (basePath !== '' && !basePath.match(/^\\//)) {\n      basePath = `/${basePath}`;\n    }\n\n    const controller = new AbortController();\n    const timer = setTimeout(() => controller.abort(), 3000);\n    const res = await suppressTracing(() =>\n      fetch(\n        `${\n          // eslint-disable-next-line no-restricted-globals\n          typeof window === 'undefined' ? 'http://localhost:3000' : '' // TODO: handle the case where users define a different port\n        }${basePath}/__nextjs_original-stack-frame?${params.toString()}`,\n        {\n          signal: controller.signal,\n        },\n      ).finally(() => {\n        clearTimeout(timer);\n      }),\n    );\n\n    if (!res.ok || res.status === 204) {\n      return null;\n    }\n\n    const body: OriginalStackFrameResponse = await res.json();\n\n    return {\n      originalCodeFrame: body.originalCodeFrame,\n      originalStackFrame: body.originalStackFrame,\n    };\n  } catch (e) {\n    DEBUG_BUILD && logger.error('Failed to symbolicate event with Next.js dev server', e);\n    return null;\n  }\n}\n\nasync function resolveStackFrames(\n  frames: StackFrame[],\n): Promise<{ originalCodeFrame: string | null; originalStackFrame: StackFrame | null }[] | null> {\n  try {\n    const postBody = {\n      frames: frames\n        .filter(frame => {\n          return !!frame.file;\n        })\n        .map(frame => {\n          // https://github.com/vercel/next.js/blob/df0573a478baa8b55478a7963c473dddd59a5e40/packages/next/src/client/components/react-dev-overlay/server/middleware-turbopack.ts#L129\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          frame.file = frame.file!.replace(/^rsc:\\/\\/React\\/[^/]+\\//, '').replace(/\\?\\d+$/, '');\n\n          return {\n            file: frame.file,\n            methodName: frame.methodName ?? '<unknown>',\n            arguments: [],\n            lineNumber: frame.lineNumber ?? 0,\n            column: frame.column ?? 0,\n          };\n        }),\n      isServer: false,\n      isEdgeServer: false,\n      isAppDirectory: true,\n    };\n\n    let basePath = process.env._sentryBasePath ?? globalWithInjectedValues._sentryBasePath ?? '';\n\n    // Prefix the basepath with a slash if it doesn't have one\n    if (basePath !== '' && !basePath.match(/^\\//)) {\n      basePath = `/${basePath}`;\n    }\n\n    const controller = new AbortController();\n    const timer = setTimeout(() => controller.abort(), 3000);\n\n    const res = await suppressTracing(() =>\n      fetch(\n        `${\n          // eslint-disable-next-line no-restricted-globals\n          typeof window === 'undefined' ? 'http://localhost:3000' : '' // TODO: handle the case where users define a different port\n        }${basePath}/__nextjs_original-stack-frames`,\n        {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          signal: controller.signal,\n          body: JSON.stringify(postBody),\n        },\n      ).finally(() => {\n        clearTimeout(timer);\n      }),\n    );\n\n    if (!res.ok || res.status === 204) {\n      return null;\n    }\n\n    const body: { value: OriginalStackFrameResponse }[] = await res.json();\n\n    return body.map(frame => {\n      return {\n        originalCodeFrame: frame.value.originalCodeFrame,\n        originalStackFrame: frame.value.originalStackFrame,\n      };\n    });\n  } catch (e) {\n    DEBUG_BUILD && logger.error('Failed to symbolicate event with Next.js dev server', e);\n    return null;\n  }\n}\n\nfunction parseOriginalCodeFrame(codeFrame: string): {\n  contextLine: string | undefined;\n  preContextLines: string[];\n  postContextLines: string[];\n} {\n  const preProcessedLines = codeFrame\n    // Remove ASCII control characters that are used for syntax highlighting\n    .replace(\n      // eslint-disable-next-line no-control-regex\n      /[\\u001b\\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g, // https://stackoverflow.com/a/29497680\n      '',\n    )\n    .split('\\n')\n    // Remove line that is supposed to indicate where the error happened\n    .filter(line => !line.match(/^\\s*\\|/))\n    // Find the error line\n    .map(line => ({\n      line,\n      isErrorLine: !!line.match(/^>/),\n    }))\n    // Remove the leading part that is just for prettier output\n    .map(lineObj => ({\n      ...lineObj,\n      line: lineObj.line.replace(/^.*\\|/, ''),\n    }));\n\n  const preContextLines = [];\n  let contextLine: string | undefined = undefined;\n  const postContextLines = [];\n\n  let reachedContextLine = false;\n\n  for (const preProcessedLine of preProcessedLines) {\n    if (preProcessedLine.isErrorLine) {\n      contextLine = preProcessedLine.line;\n      reachedContextLine = true;\n    } else if (reachedContextLine) {\n      postContextLines.push(preProcessedLine.line);\n    } else {\n      preContextLines.push(preProcessedLine.line);\n    }\n  }\n\n  return {\n    contextLine,\n    preContextLines,\n    postContextLines,\n  };\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 952, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 957, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/client/clientNormalizationIntegration.ts"],"sourcesContent":["import { defineIntegration } from '@sentry/core';\nimport { rewriteFramesIntegration } from '@sentry/react';\n\nexport const nextjsClientStackFrameNormalizationIntegration = defineIntegration(\n  ({\n    assetPrefix,\n    basePath,\n    rewriteFramesAssetPrefixPath,\n    experimentalThirdPartyOriginStackFrames,\n  }: {\n    assetPrefix?: string;\n    basePath?: string;\n    rewriteFramesAssetPrefixPath: string;\n    experimentalThirdPartyOriginStackFrames: boolean;\n  }) => {\n    const rewriteFramesInstance = rewriteFramesIntegration({\n      // Turn `<origin>/<path>/_next/static/...` into `app:///_next/static/...`\n      iteratee: frame => {\n        if (experimentalThirdPartyOriginStackFrames) {\n          // Not sure why but access to global WINDOW from @sentry/Browser causes hideous ci errors\n          // eslint-disable-next-line no-restricted-globals\n          const windowOrigin = typeof window !== 'undefined' && window.location ? window.location.origin : '';\n          // A filename starting with the local origin and not ending with JS is most likely JS in HTML which we do not want to rewrite\n          if (frame.filename?.startsWith(windowOrigin) && !frame.filename.endsWith('.js')) {\n            return frame;\n          }\n\n          if (assetPrefix) {\n            // If the user defined an asset prefix, we need to strip it so that we can match it with uploaded sourcemaps.\n            // assetPrefix always takes priority over basePath.\n            if (frame.filename?.startsWith(assetPrefix)) {\n              frame.filename = frame.filename.replace(assetPrefix, 'app://');\n            }\n          } else if (basePath) {\n            // If the user defined a base path, we need to strip it to match with uploaded sourcemaps.\n            // We should only do this for same-origin filenames though, so that third party assets are not rewritten.\n            try {\n              const { origin: frameOrigin } = new URL(frame.filename as string);\n              if (frameOrigin === windowOrigin) {\n                frame.filename = frame.filename?.replace(frameOrigin, 'app://').replace(basePath, '');\n              }\n            } catch (err) {\n              // Filename wasn't a properly formed URL, so there's nothing we can do\n            }\n          }\n        } else {\n          try {\n            const { origin } = new URL(frame.filename as string);\n            frame.filename = frame.filename?.replace(origin, 'app://').replace(rewriteFramesAssetPrefixPath, '');\n          } catch (err) {\n            // Filename wasn't a properly formed URL, so there's nothing we can do\n          }\n        }\n\n        // We need to URI-decode the filename because Next.js has wildcard routes like \"/users/[id].js\" which show up as \"/users/%5id%5.js\" in Error stacktraces.\n        // The corresponding sources that Next.js generates have proper brackets so we also need proper brackets in the frame so that source map resolving works.\n        if (experimentalThirdPartyOriginStackFrames) {\n          if (frame.filename?.includes('/_next')) {\n            frame.filename = decodeURI(frame.filename);\n          }\n\n          if (\n            frame.filename?.match(\n              /\\/_next\\/static\\/chunks\\/(main-|main-app-|polyfills-|webpack-|framework-|framework\\.)[0-9a-f]+\\.js$/,\n            )\n          ) {\n            // We don't care about these frames. It's Next.js internal code.\n            frame.in_app = false;\n          }\n        } else {\n          if (frame.filename?.startsWith('app:///_next')) {\n            frame.filename = decodeURI(frame.filename);\n          }\n\n          if (\n            frame.filename?.match(\n              /^app:\\/\\/\\/_next\\/static\\/chunks\\/(main-|main-app-|polyfills-|webpack-|framework-|framework\\.)[0-9a-f]+\\.js$/,\n            )\n          ) {\n            // We don't care about these frames. It's Next.js internal code.\n            frame.in_app = false;\n          }\n        }\n\n        return frame;\n      },\n    });\n\n    return {\n      ...rewriteFramesInstance,\n      name: 'NextjsClientStackFrameNormalization',\n    };\n  },\n);\n"],"names":[],"mappings":";;;;;;;;AAGO,MAAM,iDAAiD,CAAA,GAAA,gOAAA,CAAA,oBAAiB,AAAjB,EAC5D,CAAC,EACC,WAAW,EACX,QAAQ,EACR,4BAA4B,EAC5B,uCAAuC,EAC3C;IAMI,MAAM,wBAAwB,CAAA,GAAA,kPAAA,CAAA,2BAAwB,AAAxB,EAAyB;QAC3D,yEAAA;QACM,UAAU,CAAA;YACR,IAAI,yCAAyC;gBACrD,yFAAA;gBACA,iDAAA;gBACU,MAAM,eAAe,OAAO,WAAW,eAAe,OAAO,QAAA,GAAW,OAAO,QAAQ,CAAC,MAAA,GAAS;gBAC3G,6HAAA;gBACU,IAAI,MAAM,QAAQ,EAAE,WAAW,iBAAiB,CAAC,MAAM,QAAQ,CAAC,QAAQ,CAAC,QAAQ;oBAC/E,OAAO;gBACnB;gBAEU,IAAI,aAAa;oBAC3B,6GAAA;oBACA,mDAAA;oBACY,IAAI,MAAM,QAAQ,EAAE,WAAW,cAAc;wBAC3C,MAAM,QAAA,GAAW,MAAM,QAAQ,CAAC,OAAO,CAAC,aAAa;oBACnE;gBACA,OAAiB,IAAI,UAAU;oBAC/B,0FAAA;oBACA,yGAAA;oBACY,IAAI;wBACF,MAAM,EAAE,QAAQ,WAAA,EAAY,GAAI,IAAI,IAAI,MAAM,QAAA;wBAC9C,IAAI,gBAAgB,cAAc;4BAChC,MAAM,QAAA,GAAW,MAAM,QAAQ,EAAE,QAAQ,aAAa,UAAU,QAAQ,UAAU;wBAClG;oBACA,EAAc,OAAO,KAAK;oBAC1B,sEAAA;oBACA;gBACA;YACA,OAAe;gBACL,IAAI;oBACF,MAAM,EAAE,MAAA,EAAO,GAAI,IAAI,IAAI,MAAM,QAAA;oBACjC,MAAM,QAAA,GAAW,MAAM,QAAQ,EAAE,QAAQ,QAAQ,UAAU,QAAQ,8BAA8B;gBAC7G,EAAY,OAAO,KAAK;gBACxB,sEAAA;gBACA;YACA;YAEA,yJAAA;YACA,yJAAA;YACQ,IAAI,yCAAyC;gBAC3C,IAAI,MAAM,QAAQ,EAAE,SAAS,WAAW;oBACtC,MAAM,QAAA,GAAW,UAAU,MAAM,QAAQ;gBACrD;gBAEU,IACE,MAAM,QAAQ,EAAE,MACd,wGAEF;oBACZ,gEAAA;oBACY,MAAM,MAAA,GAAS;gBAC3B;YACA,OAAe;gBACL,IAAI,MAAM,QAAQ,EAAE,WAAW,iBAAiB;oBAC9C,MAAM,QAAA,GAAW,UAAU,MAAM,QAAQ;gBACrD;gBAEU,IACE,MAAM,QAAQ,EAAE,MACd,iHAEF;oBACZ,gEAAA;oBACY,MAAM,MAAA,GAAS;gBAC3B;YACA;YAEQ,OAAO;QACf;IACA;IAEI,OAAO;QACL,GAAG,qBAAqB;QACxB,MAAM;IACZ;AACA"}},
    {"offset": {"line": 1032, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1037, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/client/index.ts"],"sourcesContent":["import type { Client, EventProcessor, Integration } from '@sentry/core';\nimport { addEventProcessor, applySdkMetadata, consoleSandbox, getGlobalScope, GLOBAL_OBJ } from '@sentry/core';\nimport type { BrowserOptions } from '@sentry/react';\nimport { getDefaultIntegrations as getReactDefaultIntegrations, init as reactInit } from '@sentry/react';\nimport { devErrorSymbolicationEventProcessor } from '../common/devErrorSymbolicationEventProcessor';\nimport { getVercelEnv } from '../common/getVercelEnv';\nimport { isRedirectNavigationError } from '../common/nextNavigationErrorUtils';\nimport { browserTracingIntegration } from './browserTracingIntegration';\nimport { nextjsClientStackFrameNormalizationIntegration } from './clientNormalizationIntegration';\nimport { INCOMPLETE_APP_ROUTER_INSTRUMENTATION_TRANSACTION_NAME } from './routing/appRouterRoutingInstrumentation';\nimport { applyTunnelRouteOption } from './tunnelRoute';\n\nexport * from '@sentry/react';\nexport * from '../common';\nexport { captureUnderscoreErrorException } from '../common/pages-router-instrumentation/_error';\nexport { browserTracingIntegration } from './browserTracingIntegration';\nexport { captureRouterTransitionStart } from './routing/appRouterRoutingInstrumentation';\n\nlet clientIsInitialized = false;\n\nconst globalWithInjectedValues = GLOBAL_OBJ as typeof GLOBAL_OBJ & {\n  _sentryRewriteFramesAssetPrefixPath: string;\n  _sentryAssetPrefix?: string;\n  _sentryBasePath?: string;\n  _sentryRelease?: string;\n  _experimentalThirdPartyOriginStackFrames?: string;\n};\n\n// Treeshakable guard to remove all code related to tracing\ndeclare const __SENTRY_TRACING__: boolean;\n\n/** Inits the Sentry NextJS SDK on the browser with the React SDK. */\nexport function init(options: BrowserOptions): Client | undefined {\n  if (clientIsInitialized) {\n    consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn(\n        '[@sentry/nextjs] You are calling `Sentry.init()` more than once on the client. This can happen if you have both a `sentry.client.config.ts` and a `instrumentation-client.ts` file with `Sentry.init()` calls. It is recommended to call `Sentry.init()` once in `instrumentation-client.ts`.',\n      );\n    });\n  }\n  clientIsInitialized = true;\n\n  const opts = {\n    environment: getVercelEnv(true) || process.env.NODE_ENV,\n    defaultIntegrations: getDefaultIntegrations(options),\n    release: process.env._sentryRelease || globalWithInjectedValues._sentryRelease,\n    ...options,\n  } satisfies BrowserOptions;\n\n  applyTunnelRouteOption(opts);\n  applySdkMetadata(opts, 'nextjs', ['nextjs', 'react']);\n\n  const client = reactInit(opts);\n\n  const filterTransactions: EventProcessor = event =>\n    event.type === 'transaction' && event.transaction === '/404' ? null : event;\n  filterTransactions.id = 'NextClient404Filter';\n  addEventProcessor(filterTransactions);\n\n  const filterIncompleteNavigationTransactions: EventProcessor = event =>\n    event.type === 'transaction' && event.transaction === INCOMPLETE_APP_ROUTER_INSTRUMENTATION_TRANSACTION_NAME\n      ? null\n      : event;\n  filterIncompleteNavigationTransactions.id = 'IncompleteTransactionFilter';\n  addEventProcessor(filterIncompleteNavigationTransactions);\n\n  const filterNextRedirectError: EventProcessor = (event, hint) =>\n    isRedirectNavigationError(hint?.originalException) || event.exception?.values?.[0]?.value === 'NEXT_REDIRECT'\n      ? null\n      : event;\n  filterNextRedirectError.id = 'NextRedirectErrorFilter';\n  addEventProcessor(filterNextRedirectError);\n\n  if (process.env.NODE_ENV === 'development') {\n    addEventProcessor(devErrorSymbolicationEventProcessor);\n  }\n\n  try {\n    // @ts-expect-error `process.turbopack` is a magic string that will be replaced by Next.js\n    if (process.turbopack) {\n      getGlobalScope().setTag('turbopack', true);\n    }\n  } catch (e) {\n    // Noop\n    // The statement above can throw because process is not defined on the client\n  }\n\n  return client;\n}\n\nfunction getDefaultIntegrations(options: BrowserOptions): Integration[] {\n  const customDefaultIntegrations = getReactDefaultIntegrations(options);\n  // This evaluates to true unless __SENTRY_TRACING__ is text-replaced with \"false\",\n  // in which case everything inside will get tree-shaken away\n  if (typeof __SENTRY_TRACING__ === 'undefined' || __SENTRY_TRACING__) {\n    customDefaultIntegrations.push(browserTracingIntegration());\n  }\n\n  // These values are injected at build time, based on the output directory specified in the build config. Though a default\n  // is set there, we set it here as well, just in case something has gone wrong with the injection.\n  const rewriteFramesAssetPrefixPath =\n    process.env._sentryRewriteFramesAssetPrefixPath ||\n    globalWithInjectedValues._sentryRewriteFramesAssetPrefixPath ||\n    '';\n  const assetPrefix = process.env._sentryAssetPrefix || globalWithInjectedValues._sentryAssetPrefix;\n  const basePath = process.env._sentryBasePath || globalWithInjectedValues._sentryBasePath;\n  const experimentalThirdPartyOriginStackFrames =\n    process.env._experimentalThirdPartyOriginStackFrames === 'true' ||\n    globalWithInjectedValues._experimentalThirdPartyOriginStackFrames === 'true';\n  customDefaultIntegrations.push(\n    nextjsClientStackFrameNormalizationIntegration({\n      assetPrefix,\n      basePath,\n      rewriteFramesAssetPrefixPath,\n      experimentalThirdPartyOriginStackFrames,\n    }),\n  );\n\n  return customDefaultIntegrations;\n}\n\n/**\n * Just a passthrough in case this is imported from the client.\n */\nexport function withSentryConfig<T>(exportedUserNextConfig: T): T {\n  return exportedUserNextConfig;\n}\n"],"names":["reactInit","getReactDefaultIntegrations"],"mappings":"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"}},
    {"offset": {"line": 1158, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1163, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/common/withServerActionInstrumentation.ts"],"sourcesContent":["import type { RequestEventData } from '@sentry/core';\nimport {\n  captureException,\n  continueTrace,\n  getActiveSpan,\n  getClient,\n  getIsolationScope,\n  handleCallbackErrors,\n  logger,\n  SEMANTIC_ATTRIBUTE_SENTRY_SOURCE,\n  SPAN_STATUS_ERROR,\n  startSpan,\n  vercelWaitUntil,\n  withIsolationScope,\n} from '@sentry/core';\nimport { DEBUG_BUILD } from './debug-build';\nimport { isNotFoundNavigationError, isRedirectNavigationError } from './nextNavigationErrorUtils';\nimport { flushSafelyWithTimeout } from './utils/responseEnd';\n\ninterface Options {\n  formData?: FormData;\n\n  /**\n   * Headers as returned from `headers()`.\n   *\n   * Currently accepts both a plain `Headers` object and `Promise<ReadonlyHeaders>` to be compatible with async APIs introduced in Next.js 15: https://github.com/vercel/next.js/pull/68812\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  headers?: Headers | Promise<any>;\n\n  /**\n   * Whether the server action response should be included in any events captured within the server action.\n   */\n  recordResponse?: boolean;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function withServerActionInstrumentation<A extends (...args: any[]) => any>(\n  serverActionName: string,\n  callback: A,\n): Promise<ReturnType<A>>;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function withServerActionInstrumentation<A extends (...args: any[]) => any>(\n  serverActionName: string,\n  options: Options,\n  callback: A,\n): Promise<ReturnType<A>>;\n\n/**\n * Wraps a Next.js Server Action implementation with Sentry Error and Performance instrumentation.\n */\nexport function withServerActionInstrumentation<A extends (...args: unknown[]) => unknown>(\n  ...args: [string, Options, A] | [string, A]\n): Promise<ReturnType<A>> {\n  if (typeof args[1] === 'function') {\n    const [serverActionName, callback] = args;\n    return withServerActionInstrumentationImplementation(serverActionName, {}, callback);\n  } else {\n    const [serverActionName, options, callback] = args;\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return withServerActionInstrumentationImplementation(serverActionName, options, callback!);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nasync function withServerActionInstrumentationImplementation<A extends (...args: any[]) => any>(\n  serverActionName: string,\n  options: Options,\n  callback: A,\n): Promise<ReturnType<A>> {\n  return withIsolationScope(async isolationScope => {\n    const sendDefaultPii = getClient()?.getOptions().sendDefaultPii;\n\n    let sentryTraceHeader;\n    let baggageHeader;\n    const fullHeadersObject: Record<string, string> = {};\n    try {\n      const awaitedHeaders: Headers = await options.headers;\n      sentryTraceHeader = awaitedHeaders?.get('sentry-trace') ?? undefined;\n      baggageHeader = awaitedHeaders?.get('baggage');\n      awaitedHeaders?.forEach((value, key) => {\n        fullHeadersObject[key] = value;\n      });\n    } catch (e) {\n      DEBUG_BUILD &&\n        logger.warn(\n          \"Sentry wasn't able to extract the tracing headers for a server action. Will not trace this request.\",\n        );\n    }\n\n    isolationScope.setTransactionName(`serverAction/${serverActionName}`);\n    isolationScope.setSDKProcessingMetadata({\n      normalizedRequest: {\n        headers: fullHeadersObject,\n      } satisfies RequestEventData,\n    });\n\n    // Normally, there is an active span here (from Next.js OTEL) and we just use that as parent\n    // Else, we manually continueTrace from the incoming headers\n    const continueTraceIfNoActiveSpan = getActiveSpan()\n      ? <T>(_opts: unknown, callback: () => T) => callback()\n      : continueTrace;\n\n    return continueTraceIfNoActiveSpan(\n      {\n        sentryTrace: sentryTraceHeader,\n        baggage: baggageHeader,\n      },\n      async () => {\n        try {\n          return await startSpan(\n            {\n              op: 'function.server_action',\n              name: `serverAction/${serverActionName}`,\n              forceTransaction: true,\n              attributes: {\n                [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'route',\n              },\n            },\n            async span => {\n              const result = await handleCallbackErrors(callback, error => {\n                if (isNotFoundNavigationError(error)) {\n                  // We don't want to report \"not-found\"s\n                  span.setStatus({ code: SPAN_STATUS_ERROR, message: 'not_found' });\n                } else if (isRedirectNavigationError(error)) {\n                  // Don't do anything for redirects\n                } else {\n                  span.setStatus({ code: SPAN_STATUS_ERROR, message: 'internal_error' });\n                  captureException(error, {\n                    mechanism: {\n                      handled: false,\n                    },\n                  });\n                }\n              });\n\n              if (options.recordResponse !== undefined ? options.recordResponse : sendDefaultPii) {\n                getIsolationScope().setExtra('server_action_result', result);\n              }\n\n              if (options.formData) {\n                options.formData.forEach((value, key) => {\n                  getIsolationScope().setExtra(\n                    `server_action_form_data.${key}`,\n                    typeof value === 'string' ? value : '[non-string value]',\n                  );\n                });\n              }\n\n              return result;\n            },\n          );\n        } finally {\n          vercelWaitUntil(flushSafelyWithTimeout());\n        }\n      },\n    );\n  });\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAiDA;;CAEA,GACO,SAAS,gCACd,GAAG,IAAA;IAEH,IAAI,OAAO,IAAI,CAAC,EAAC,KAAM,YAAY;QACjC,MAAM,CAAC,kBAAkB,SAAQ,GAAI;QACrC,OAAO,8CAA8C,kBAAkB,CAAA,GAAI;IAC/E,OAAS;QACL,MAAM,CAAC,kBAAkB,SAAS,SAAQ,GAAI;QAClD,oEAAA;QACI,OAAO,8CAA8C,kBAAkB,SAAS;IACpF;AACA;AAEA,8DAAA;AACA,eAAe,8CACb,gBAAgB,EAChB,OAAO,EACP,QAAQ;IAER,OAAO,CAAA,GAAA,kOAAA,CAAA,qBAAkB,AAAlB,EAAmB,OAAM;QAC9B,MAAM,iBAAiB,CAAA,GAAA,kOAAA,CAAA,YAAS,AAAT,KAAa,aAAa;QAEjD,IAAI;QACJ,IAAI;QACJ,MAAM,oBAA4C,CAAA;QAClD,IAAI;YACF,MAAM,iBAA0B,MAAM,QAAQ,OAAO;YACrD,oBAAoB,gBAAgB,IAAI,mBAAmB;YAC3D,gBAAgB,gBAAgB,IAAI;YACpC,gBAAgB,QAAQ,CAAC,OAAO;gBAC9B,iBAAiB,CAAC,IAAG,GAAI;YACjC;QACA,EAAM,OAAO,GAAG;YACV,2XAAA,CAAA,cAAA,IACE,oOAAA,CAAA,SAAM,CAAC,IAAI,CACT;QAEV;QAEI,eAAe,kBAAkB,CAAC,CAAC,aAAa,EAAE,iBAAiB,CAAA;QACA,eAAA,wBAAA,CAAA;YACA,mBAAA;gBACA,SAAA;YACA;QACA;QAEA,4FAAA;QACA,4DAAA;QACA,MAAA,8BAAA,CAAA,GAAA,uOAAA,CAAA,gBAAA,MACA,CAAA,OAAA,WAAA,aACA,qOAAA,CAAA,gBAAA;QAEA,OAAA,4BACA;YACA,aAAA;YACA,SAAA;QACA,GACA;YACA,IAAA;gBACA,OAAA,MAAA,CAAA,GAAA,qOAAA,CAAA,YAAA,EACA;oBACA,IAAA;oBACA,MAAA,CAAA,aAAA,EAAA,iBAAA,CAAA;oBACA,kBAAA;oBACA,YAAA;wBACA,CAAA,uOAAA,CAAA,mCAAA,CAAA,EAAA;oBACA;gBACA,GACA,OAAA;oBACA,MAAA,SAAA,MAAA,CAAA,GAAA,kPAAA,CAAA,uBAAA,EAAA,UAAA,CAAA;wBACA,IAAA,CAAA,GAAA,qYAAA,CAAA,4BAAA,EAAA,QAAA;4BACA,uCAAA;4BACA,KAAA,SAAA,CAAA;gCAAA,MAAA,0OAAA,CAAA,oBAAA;gCAAA,SAAA;4BAAA;wBACA,OAAA,IAAA,CAAA,GAAA,qYAAA,CAAA,4BAAA,EAAA,QAAA;wBACA,kCAAA;wBACA,OAAA;4BACA,KAAA,SAAA,CAAA;gCAAA,MAAA,0OAAA,CAAA,oBAAA;gCAAA,SAAA;4BAAA;4BACA,CAAA,GAAA,4NAAA,CAAA,mBAAA,EAAA,OAAA;gCACA,WAAA;oCACA,SAAA;gCACA;4BACA;wBACA;oBACA;oBAEA,IAAA,QAAA,cAAA,KAAA,YAAA,QAAA,cAAA,GAAA,gBAAA;wBACA,CAAA,GAAA,kOAAA,CAAA,oBAAA,IAAA,QAAA,CAAA,wBAAA;oBACA;oBAEA,IAAA,QAAA,QAAA,EAAA;wBACA,QAAA,QAAA,CAAA,OAAA,CAAA,CAAA,OAAA;4BACA,CAAA,GAAA,kOAAA,CAAA,oBAAA,IAAA,QAAA,CACA,CAAA,wBAAA,EAAA,IAAA,CAAA,EACA,OAAA,UAAA,WAAA,QAAA;wBAEA;oBACA;oBAEA,OAAA;gBACA;YAEA,SAAA;gBACA,CAAA,GAAA,6OAAA,CAAA,kBAAA,EAAA,CAAA,GAAA,iYAAA,CAAA,yBAAA;YACA;QACA;IAEA;AACA"}},
    {"offset": {"line": 1273, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1278, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/common/pages-router-instrumentation/wrapApiHandlerWithSentryVercelCrons.ts"],"sourcesContent":["import { captureCheckIn } from '@sentry/core';\nimport type { NextApiRequest } from 'next';\nimport type { VercelCronsConfig } from '../types';\n\ntype EdgeRequest = {\n  nextUrl: URL;\n  headers: Headers;\n};\n\n/**\n * Wraps a function with Sentry crons instrumentation by automatically sending check-ins for the given Vercel crons config.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function wrapApiHandlerWithSentryVercelCrons<F extends (...args: any[]) => any>(\n  handler: F,\n  vercelCronsConfig: VercelCronsConfig,\n): F {\n  return new Proxy(handler, {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    apply: (originalFunction, thisArg, args: any[]) => {\n      if (!args?.[0]) {\n        return originalFunction.apply(thisArg, args);\n      }\n\n      const [req] = args as [NextApiRequest | EdgeRequest];\n\n      let maybePromiseResult;\n      const cronsKey = 'nextUrl' in req ? req.nextUrl.pathname : req.url;\n      const userAgentHeader = 'nextUrl' in req ? req.headers.get('user-agent') : req.headers['user-agent'];\n\n      if (\n        !vercelCronsConfig || // do nothing if vercel crons config is missing\n        !userAgentHeader?.includes('vercel-cron') // do nothing if endpoint is not called from vercel crons\n      ) {\n        return originalFunction.apply(thisArg, args);\n      }\n\n      const vercelCron = vercelCronsConfig.find(vercelCron => vercelCron.path === cronsKey);\n\n      if (!vercelCron?.path || !vercelCron.schedule) {\n        return originalFunction.apply(thisArg, args);\n      }\n\n      const monitorSlug = vercelCron.path;\n\n      const checkInId = captureCheckIn(\n        {\n          monitorSlug,\n          status: 'in_progress',\n        },\n        {\n          maxRuntime: 60 * 12, // (minutes) so 12 hours - just a very high arbitrary number since we don't know the actual duration of the users cron job\n          schedule: {\n            type: 'crontab',\n            value: vercelCron.schedule,\n          },\n        },\n      );\n\n      const startTime = Date.now() / 1000;\n\n      const handleErrorCase = (): void => {\n        captureCheckIn({\n          checkInId,\n          monitorSlug,\n          status: 'error',\n          duration: Date.now() / 1000 - startTime,\n        });\n      };\n\n      try {\n        maybePromiseResult = originalFunction.apply(thisArg, args);\n      } catch (e) {\n        handleErrorCase();\n        throw e;\n      }\n\n      if (typeof maybePromiseResult === 'object' && maybePromiseResult !== null && 'then' in maybePromiseResult) {\n        Promise.resolve(maybePromiseResult).then(\n          () => {\n            captureCheckIn({\n              checkInId,\n              monitorSlug,\n              status: 'ok',\n              duration: Date.now() / 1000 - startTime,\n            });\n          },\n          () => {\n            handleErrorCase();\n          },\n        );\n\n        // It is very important that we return the original promise here, because Next.js attaches various properties\n        // to that promise and will throw if they are not on the returned value.\n        return maybePromiseResult;\n      } else {\n        captureCheckIn({\n          checkInId,\n          monitorSlug,\n          status: 'ok',\n          duration: Date.now() / 1000 - startTime,\n        });\n        return maybePromiseResult;\n      }\n    },\n  });\n}\n"],"names":[],"mappings":";;;;;;AASA;;CAEA,GACA,8DAAA;AACO,SAAS,oCACd,OAAO,EACP,iBAAiB;IAEjB,OAAO,IAAI,MAAM,SAAS;QAC5B,8DAAA;QACI,OAAO,CAAC,kBAAkB,SAAS;YACjC,IAAI,CAAC,MAAI,CAAG,EAAE,EAAE;gBACd,OAAO,iBAAiB,KAAK,CAAC,SAAS;YAC/C;YAEM,MAAM,CAAC,IAAG,GAAI;YAEd,IAAI;YACJ,MAAM,WAAW,aAAa,MAAM,IAAI,OAAO,CAAC,QAAA,GAAW,IAAI,GAAG;YAClE,MAAM,kBAAkB,aAAa,MAAM,IAAI,OAAO,CAAC,GAAG,CAAC,gBAAgB,IAAI,OAAO,CAAC,aAAa;YAEpG,IACE,CAAC,qBAAA,+CAAA;YACD,CAAC,iBAAiB,SAAS,eAAa,yDAAA;cACxC;gBACA,OAAO,iBAAiB,KAAK,CAAC,SAAS;YAC/C;YAEM,MAAM,aAAa,kBAAkB,IAAI,CAAC,CAAA,aAAc,WAAW,IAAA,KAAS;YAE5E,IAAI,CAAC,YAAY,QAAQ,CAAC,WAAW,QAAQ,EAAE;gBAC7C,OAAO,iBAAiB,KAAK,CAAC,SAAS;YAC/C;YAEM,MAAM,cAAc,WAAW,IAAI;YAEnC,MAAM,YAAY,CAAA,GAAA,4NAAA,CAAA,iBAAc,AAAd,EAChB;gBACE;gBACA,QAAQ;YAClB,GACQ;gBACE,YAAY,KAAK;gBACjB,UAAU;oBACR,MAAM;oBACN,OAAO,WAAW,QAAQ;gBACtC;YACA;YAGM,MAAM,YAAY,KAAK,GAAG,KAAK;YAE/B,MAAM,kBAAkB;gBACtB,CAAA,GAAA,4NAAA,CAAA,iBAAc,AAAd,EAAe;oBACb;oBACA;oBACA,QAAQ;oBACR,UAAU,KAAK,GAAG,KAAK,OAAO;gBACxC;YACA;YAEM,IAAI;gBACF,qBAAqB,iBAAiB,KAAK,CAAC,SAAS;YAC7D,EAAQ,OAAO,GAAG;gBACV;gBACA,MAAM;YACd;YAEM,IAAI,OAAO,uBAAuB,YAAY,uBAAuB,QAAQ,UAAU,oBAAoB;gBACzG,QAAQ,OAAO,CAAC,oBAAoB,IAAI,CACtC;oBACE,CAAA,GAAA,4NAAA,CAAA,iBAAc,AAAd,EAAe;wBACb;wBACA;wBACA,QAAQ;wBACR,UAAU,KAAK,GAAG,KAAK,OAAO;oBAC5C;gBACA,GACU;oBACE;gBACZ;gBAGA,6GAAA;gBACA,wEAAA;gBACQ,OAAO;YACf,OAAa;gBACL,CAAA,GAAA,4NAAA,CAAA,iBAAc,AAAd,EAAe;oBACb;oBACA;oBACA,QAAQ;oBACR,UAAU,KAAK,GAAG,KAAK,OAAO;gBACxC;gBACQ,OAAO;YACf;QACA;IACA;AACA"}},
    {"offset": {"line": 1361, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1366, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/common/utils/isBuild.ts"],"sourcesContent":["import { PHASE_PRODUCTION_BUILD } from 'next/constants';\n\n/**\n * Decide if the currently running process is part of the build phase or happening at runtime.\n */\nexport function isBuild(): boolean {\n  return process.env.NEXT_PHASE === PHASE_PRODUCTION_BUILD;\n}\n"],"names":[],"mappings":";;;;;;;AAEA;;CAEA,GACO,SAAS;IACd,OAAO,gVAAA,CAAA,UAAO,CAAC,GAAG,CAAC,UAAA,KAAe,oTAAA,CAAA,yBAAsB;AAC1D"}},
    {"offset": {"line": 1380, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1385, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/common/span-attributes-with-logic-attached.ts"],"sourcesContent":["/**\n * If this attribute is attached to a transaction, the Next.js SDK will drop that transaction.\n */\nexport const TRANSACTION_ATTR_SHOULD_DROP_TRANSACTION = 'sentry.drop_transaction';\n\nexport const TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL = 'sentry.sentry_trace_backfill';\n\nexport const TRANSACTION_ATTR_SENTRY_ROUTE_BACKFILL = 'sentry.route_backfill';\n"],"names":[],"mappings":"AAAA;;CAEA;;;;;AACO,MAAM,2CAA2C;AAEjD,MAAM,yCAAyC;AAE/C,MAAM,yCAAyC"}},
    {"offset": {"line": 1397, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1402, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/common/utils/wrapperUtils.ts"],"sourcesContent":["import {\n  captureException,\n  getActiveSpan,\n  getCurrentScope,\n  getIsolationScope,\n  getRootSpan,\n  getTraceData,\n  httpRequestToRequestData,\n} from '@sentry/core';\nimport type { IncomingMessage, ServerResponse } from 'http';\nimport { TRANSACTION_ATTR_SENTRY_ROUTE_BACKFILL } from '../span-attributes-with-logic-attached';\n\n/**\n * Wraps a function that potentially throws. If it does, the error is passed to `captureException` and rethrown.\n *\n * Note: This function turns the wrapped function into an asynchronous one.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function withErrorInstrumentation<F extends (...args: any[]) => any>(\n  origFunction: F,\n): (...params: Parameters<F>) => Promise<ReturnType<F>> {\n  return async function (this: unknown, ...origFunctionArguments: Parameters<F>): Promise<ReturnType<F>> {\n    try {\n      return await origFunction.apply(this, origFunctionArguments);\n    } catch (e) {\n      // TODO: Extract error logic from `withSentry` in here or create a new wrapper with said logic or something like that.\n      captureException(e, { mechanism: { handled: false } });\n      throw e;\n    }\n  };\n}\n\n/**\n * Calls a server-side data fetching function (that takes a `req` and `res` object in its context) with tracing\n * instrumentation. A transaction will be created for the incoming request (if it doesn't already exist) in addition to\n * a span for the wrapped data fetching function.\n *\n * All of the above happens in an isolated domain, meaning all thrown errors will be associated with the correct span.\n *\n * @param origDataFetcher The data fetching method to call.\n * @param origFunctionArguments The arguments to call the data fetching method with.\n * @param req The data fetching function's request object.\n * @param res The data fetching function's response object.\n * @param options Options providing details for the created transaction and span.\n * @returns what the data fetching method call returned.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function withTracedServerSideDataFetcher<F extends (...args: any[]) => Promise<any> | any>(\n  origDataFetcher: F,\n  req: IncomingMessage,\n  res: ServerResponse,\n  options: {\n    /** Parameterized route of the request - will be used for naming the transaction. */\n    requestedRouteName: string;\n    /** Name of the route the data fetcher was defined in - will be used for describing the data fetcher's span. */\n    dataFetcherRouteName: string;\n    /** Name of the data fetching method - will be used for describing the data fetcher's span. */\n    dataFetchingMethodName: string;\n  },\n): (...params: Parameters<F>) => Promise<{ data: ReturnType<F>; sentryTrace?: string; baggage?: string }> {\n  return async function (\n    this: unknown,\n    ...args: Parameters<F>\n  ): Promise<{ data: ReturnType<F>; sentryTrace?: string; baggage?: string }> {\n    const normalizedRequest = httpRequestToRequestData(req);\n    getCurrentScope().setTransactionName(`${options.dataFetchingMethodName} (${options.dataFetcherRouteName})`);\n    getIsolationScope().setSDKProcessingMetadata({ normalizedRequest });\n\n    const span = getActiveSpan();\n\n    // Only set the route backfill if the span is not for /_error\n    if (span && options.requestedRouteName !== '/_error') {\n      const root = getRootSpan(span);\n      root.setAttribute(TRANSACTION_ATTR_SENTRY_ROUTE_BACKFILL, options.requestedRouteName);\n    }\n\n    const { 'sentry-trace': sentryTrace, baggage } = getTraceData();\n\n    return {\n      sentryTrace: sentryTrace,\n      baggage: baggage,\n      data: await origDataFetcher.apply(this, args),\n    };\n  };\n}\n\n/**\n * Call a data fetcher and trace it. Only traces the function if there is an active transaction on the scope.\n *\n * We only do the following until we move transaction creation into this function: When called, the wrapped function\n * will also update the name of the active transaction with a parameterized route provided via the `options` argument.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport async function callDataFetcherTraced<F extends (...args: any[]) => Promise<any> | any>(\n  origFunction: F,\n  origFunctionArgs: Parameters<F>,\n): Promise<ReturnType<F>> {\n  try {\n    return await origFunction(...origFunctionArgs);\n  } catch (e) {\n    captureException(e, { mechanism: { handled: false } });\n    throw e;\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;AAYA;;;;CAIA,GACA,8DAAA;AACO,SAAS,yBACd,YAAY;IAEZ,OAAO,eAA+B,GAAG,qBAAqB;QAC5D,IAAI;YACF,OAAO,MAAM,aAAa,KAAK,CAAC,IAAI,EAAE;QAC5C,EAAM,OAAO,GAAG;YAChB,sHAAA;YACM,CAAA,GAAA,4NAAA,CAAA,mBAAgB,AAAhB,EAAiB,GAAG;gBAAE,WAAW;oBAAE,SAAS;gBAAA;YAAM;YAClD,MAAM;QACZ;IACA;AACA;AAEA;;;;;;;;;;;;;CAaA,GACA,8DAAA;AACO,SAAS,gCACd,eAAe,EACf,GAAG,EACH,GAAG,EACH,OAAA;IASA,OAAO,eAEL,GAAG,IAAA;QAEH,MAAM,oBAAoB,CAAA,GAAA,qOAAA,CAAA,2BAAwB,AAAxB,EAAyB;QACnD,CAAA,GAAA,kOAAA,CAAA,kBAAe,AAAf,IAAkB,kBAAkB,CAAC,CAAC,EAAA,QAAA,sBAAA,CAAA,EAAA,EAAA,QAAA,oBAAA,CAAA,CAAA,CAAA;QACA,CAAA,GAAA,kOAAA,CAAA,oBAAA,IAAA,wBAAA,CAAA;YAAA;QAAA;QAEA,MAAA,OAAA,CAAA,GAAA,uOAAA,CAAA,gBAAA;QAEA,6DAAA;QACA,IAAA,QAAA,QAAA,kBAAA,KAAA,WAAA;YACA,MAAA,OAAA,CAAA,GAAA,uOAAA,CAAA,cAAA,EAAA;YACA,KAAA,YAAA,CAAA,4ZAAA,CAAA,yCAAA,EAAA,QAAA,kBAAA;QACA;QAEA,MAAA,EAAA,gBAAA,WAAA,EAAA,OAAA,EAAA,GAAA,CAAA,GAAA,uOAAA,CAAA,eAAA;QAEA,OAAA;YACA,aAAA;YACA,SAAA;YACA,MAAA,MAAA,gBAAA,KAAA,CAAA,IAAA,EAAA;QACA;IACA;AACA;AAEA;;;;;CAKA,GACA,8DAAA;AACA,eAAA,sBACA,YAAA,EACA,gBAAA;IAEA,IAAA;QACA,OAAA,MAAA,gBAAA;IACA,EAAA,OAAA,GAAA;QACA,CAAA,GAAA,4NAAA,CAAA,mBAAA,EAAA,GAAA;YAAA,WAAA;gBAAA,SAAA;YAAA;QAAA;QACA,MAAA;IACA;AACA"}},
    {"offset": {"line": 1491, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1496, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/common/pages-router-instrumentation/wrapAppGetInitialPropsWithSentry.ts"],"sourcesContent":["import type App from 'next/app';\nimport { isBuild } from '../utils/isBuild';\nimport { withErrorInstrumentation, withTracedServerSideDataFetcher } from '../utils/wrapperUtils';\n\ntype AppGetInitialProps = (typeof App)['getInitialProps'];\n\n/**\n * Create a wrapped version of the user's exported `getInitialProps` function in\n * a custom app (\"_app.js\").\n *\n * @param origAppGetInitialProps The user's `getInitialProps` function\n * @param parameterizedRoute The page's parameterized route\n * @returns A wrapped version of the function\n */\nexport function wrapAppGetInitialPropsWithSentry(origAppGetInitialProps: AppGetInitialProps): AppGetInitialProps {\n  return new Proxy(origAppGetInitialProps, {\n    apply: async (wrappingTarget, thisArg, args: Parameters<AppGetInitialProps>) => {\n      if (isBuild()) {\n        return wrappingTarget.apply(thisArg, args);\n      }\n\n      const [context] = args;\n      const { req, res } = context.ctx;\n\n      const errorWrappedAppGetInitialProps = withErrorInstrumentation(wrappingTarget);\n\n      // Generally we can assume that `req` and `res` are always defined on the server:\n      // https://nextjs.org/docs/api-reference/data-fetching/get-initial-props#context-object\n      // This does not seem to be the case in dev mode. Because we have no clean way of associating the the data fetcher\n      // span with each other when there are no req or res objects, we simply do not trace them at all here.\n      if (req && res) {\n        const tracedGetInitialProps = withTracedServerSideDataFetcher(errorWrappedAppGetInitialProps, req, res, {\n          dataFetcherRouteName: '/_app',\n          requestedRouteName: context.ctx.pathname,\n          dataFetchingMethodName: 'getInitialProps',\n        });\n\n        const {\n          data: appGetInitialProps,\n          sentryTrace,\n          baggage,\n        }: {\n          data?: unknown;\n          sentryTrace?: string;\n          baggage?: string;\n        } = await tracedGetInitialProps.apply(thisArg, args);\n\n        if (typeof appGetInitialProps === 'object' && appGetInitialProps !== null) {\n          // Per definition, `pageProps` is not optional, however an increased amount of users doesn't seem to call\n          // `App.getInitialProps(appContext)` in their custom `_app` pages which is required as per\n          // https://nextjs.org/docs/advanced-features/custom-app - resulting in missing `pageProps`.\n          // For this reason, we just handle the case where `pageProps` doesn't exist explicitly.\n          if (!(appGetInitialProps as Record<string, unknown>).pageProps) {\n            (appGetInitialProps as Record<string, unknown>).pageProps = {};\n          }\n\n          // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n          if (sentryTrace) {\n            (appGetInitialProps as { pageProps: Record<string, unknown> }).pageProps._sentryTraceData = sentryTrace;\n          }\n\n          // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n          if (baggage) {\n            (appGetInitialProps as { pageProps: Record<string, unknown> }).pageProps._sentryBaggage = baggage;\n          }\n        }\n\n        return appGetInitialProps;\n      } else {\n        return errorWrappedAppGetInitialProps.apply(thisArg, args);\n      }\n    },\n  });\n}\n"],"names":[],"mappings":";;;;;;;;AAMA;;;;;;;CAOA,GACO,SAAS,iCAAiC,sBAAsB;IACrE,OAAO,IAAI,MAAM,wBAAwB;QACvC,OAAO,OAAO,gBAAgB,SAAS;YACrC,IAAI,CAAA,GAAA,6XAAA,CAAA,UAAO,AAAP,KAAW;gBACb,OAAO,eAAe,KAAK,CAAC,SAAS;YAC7C;YAEM,MAAM,CAAC,QAAO,GAAI;YAClB,MAAM,EAAE,GAAG,EAAE,GAAA,EAAI,GAAI,QAAQ,GAAG;YAEhC,MAAM,iCAAiC,CAAA,GAAA,kYAAA,CAAA,2BAAwB,AAAxB,EAAyB;YAEtE,iFAAA;YACA,uFAAA;YACA,kHAAA;YACA,sGAAA;YACM,IAAI,OAAO,KAAK;gBACd,MAAM,wBAAwB,CAAA,GAAA,kYAAA,CAAA,kCAA+B,AAA/B,EAAgC,gCAAgC,KAAK,KAAK;oBACtG,sBAAsB;oBACtB,oBAAoB,QAAQ,GAAG,CAAC,QAAQ;oBACxC,wBAAwB;gBAClC;gBAEQ,MAAM,EACJ,MAAM,kBAAkB,EACxB,WAAW,EACX,OAAO,EACjB,GAIY,MAAM,sBAAsB,KAAK,CAAC,SAAS;gBAE/C,IAAI,OAAO,uBAAuB,YAAY,uBAAuB,MAAM;oBACnF,yGAAA;oBACA,0FAAA;oBACA,2FAAA;oBACA,uFAAA;oBACU,IAAI,CAAC,AAAC,mBAA+C,SAAS,EAAE;wBAC7D,mBAA+C,SAAA,GAAY,CAAA;oBACxE;oBAEA,wFAAA;oBACU,IAAI,aAAa;wBACd,mBAA8D,SAAS,CAAC,gBAAA,GAAmB;oBACxG;oBAEA,wFAAA;oBACU,IAAI,SAAS;wBACV,mBAA8D,SAAS,CAAC,cAAA,GAAiB;oBACtG;gBACA;gBAEQ,OAAO;YACf,OAAa;gBACL,OAAO,+BAA+B,KAAK,CAAC,SAAS;YAC7D;QACA;IACA;AACA"}},
    {"offset": {"line": 1557, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1562, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/common/pages-router-instrumentation/wrapDocumentGetInitialPropsWithSentry.ts"],"sourcesContent":["import type Document from 'next/document';\nimport { isBuild } from '../utils/isBuild';\nimport { withErrorInstrumentation, withTracedServerSideDataFetcher } from '../utils/wrapperUtils';\n\ntype DocumentGetInitialProps = typeof Document.getInitialProps;\n\n/**\n * Create a wrapped version of the user's exported `getInitialProps` function in\n * a custom document (\"_document.js\").\n *\n * @param origDocumentGetInitialProps The user's `getInitialProps` function\n * @param parameterizedRoute The page's parameterized route\n * @returns A wrapped version of the function\n */\nexport function wrapDocumentGetInitialPropsWithSentry(\n  origDocumentGetInitialProps: DocumentGetInitialProps,\n): DocumentGetInitialProps {\n  return new Proxy(origDocumentGetInitialProps, {\n    apply: async (wrappingTarget, thisArg, args: Parameters<DocumentGetInitialProps>) => {\n      if (isBuild()) {\n        return wrappingTarget.apply(thisArg, args);\n      }\n\n      const [context] = args;\n      const { req, res } = context;\n\n      const errorWrappedGetInitialProps = withErrorInstrumentation(wrappingTarget);\n      // Generally we can assume that `req` and `res` are always defined on the server:\n      // https://nextjs.org/docs/api-reference/data-fetching/get-initial-props#context-object\n      // This does not seem to be the case in dev mode. Because we have no clean way of associating the the data fetcher\n      // span with each other when there are no req or res objects, we simply do not trace them at all here.\n      if (req && res) {\n        const tracedGetInitialProps = withTracedServerSideDataFetcher(errorWrappedGetInitialProps, req, res, {\n          dataFetcherRouteName: '/_document',\n          requestedRouteName: context.pathname,\n          dataFetchingMethodName: 'getInitialProps',\n        });\n\n        const { data } = await tracedGetInitialProps.apply(thisArg, args);\n        return data;\n      } else {\n        return errorWrappedGetInitialProps.apply(thisArg, args);\n      }\n    },\n  });\n}\n"],"names":[],"mappings":";;;;;;;;AAMA;;;;;;;CAOA,GACO,SAAS,sCACd,2BAA2B;IAE3B,OAAO,IAAI,MAAM,6BAA6B;QAC5C,OAAO,OAAO,gBAAgB,SAAS;YACrC,IAAI,CAAA,GAAA,6XAAA,CAAA,UAAO,AAAP,KAAW;gBACb,OAAO,eAAe,KAAK,CAAC,SAAS;YAC7C;YAEM,MAAM,CAAC,QAAO,GAAI;YAClB,MAAM,EAAE,GAAG,EAAE,GAAA,EAAI,GAAI;YAErB,MAAM,8BAA8B,CAAA,GAAA,kYAAA,CAAA,2BAAwB,AAAxB,EAAyB;YACnE,iFAAA;YACA,uFAAA;YACA,kHAAA;YACA,sGAAA;YACM,IAAI,OAAO,KAAK;gBACd,MAAM,wBAAwB,CAAA,GAAA,kYAAA,CAAA,kCAA+B,AAA/B,EAAgC,6BAA6B,KAAK,KAAK;oBACnG,sBAAsB;oBACtB,oBAAoB,QAAQ,QAAQ;oBACpC,wBAAwB;gBAClC;gBAEQ,MAAM,EAAE,IAAA,EAAK,GAAI,MAAM,sBAAsB,KAAK,CAAC,SAAS;gBAC5D,OAAO;YACf,OAAa;gBACL,OAAO,4BAA4B,KAAK,CAAC,SAAS;YAC1D;QACA;IACA;AACA"}},
    {"offset": {"line": 1606, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1611, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/common/pages-router-instrumentation/wrapErrorGetInitialPropsWithSentry.ts"],"sourcesContent":["import type { NextPageContext } from 'next';\nimport type { ErrorProps } from 'next/error';\nimport { isBuild } from '../utils/isBuild';\nimport { withErrorInstrumentation, withTracedServerSideDataFetcher } from '../utils/wrapperUtils';\n\ntype ErrorGetInitialProps = (context: NextPageContext) => Promise<ErrorProps>;\n\n/**\n * Create a wrapped version of the user's exported `getInitialProps` function in\n * a custom error page (\"_error.js\").\n *\n * @param origErrorGetInitialProps The user's `getInitialProps` function\n * @param parameterizedRoute The page's parameterized route\n * @returns A wrapped version of the function\n */\nexport function wrapErrorGetInitialPropsWithSentry(\n  origErrorGetInitialProps: ErrorGetInitialProps,\n): ErrorGetInitialProps {\n  return new Proxy(origErrorGetInitialProps, {\n    apply: async (wrappingTarget, thisArg, args: Parameters<ErrorGetInitialProps>) => {\n      if (isBuild()) {\n        return wrappingTarget.apply(thisArg, args);\n      }\n\n      const [context] = args;\n      const { req, res } = context;\n\n      const errorWrappedGetInitialProps = withErrorInstrumentation(wrappingTarget);\n      // Generally we can assume that `req` and `res` are always defined on the server:\n      // https://nextjs.org/docs/api-reference/data-fetching/get-initial-props#context-object\n      // This does not seem to be the case in dev mode. Because we have no clean way of associating the the data fetcher\n      // span with each other when there are no req or res objects, we simply do not trace them at all here.\n      if (req && res) {\n        const tracedGetInitialProps = withTracedServerSideDataFetcher(errorWrappedGetInitialProps, req, res, {\n          dataFetcherRouteName: '/_error',\n          requestedRouteName: context.pathname,\n          dataFetchingMethodName: 'getInitialProps',\n        });\n\n        const {\n          data: errorGetInitialProps,\n          baggage,\n          sentryTrace,\n        }: {\n          data?: unknown;\n          baggage?: string;\n          sentryTrace?: string;\n        } = await tracedGetInitialProps.apply(thisArg, args);\n\n        if (typeof errorGetInitialProps === 'object' && errorGetInitialProps !== null) {\n          if (sentryTrace) {\n            // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n            (errorGetInitialProps as Record<string, unknown>)._sentryTraceData = sentryTrace;\n          }\n\n          // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n          if (baggage) {\n            (errorGetInitialProps as Record<string, unknown>)._sentryBaggage = baggage;\n          }\n        }\n\n        return errorGetInitialProps;\n      } else {\n        return errorWrappedGetInitialProps.apply(thisArg, args);\n      }\n    },\n  });\n}\n"],"names":[],"mappings":";;;;;;;;AAOA;;;;;;;CAOA,GACO,SAAS,mCACd,wBAAwB;IAExB,OAAO,IAAI,MAAM,0BAA0B;QACzC,OAAO,OAAO,gBAAgB,SAAS;YACrC,IAAI,CAAA,GAAA,6XAAA,CAAA,UAAO,AAAP,KAAW;gBACb,OAAO,eAAe,KAAK,CAAC,SAAS;YAC7C;YAEM,MAAM,CAAC,QAAO,GAAI;YAClB,MAAM,EAAE,GAAG,EAAE,GAAA,EAAI,GAAI;YAErB,MAAM,8BAA8B,CAAA,GAAA,kYAAA,CAAA,2BAAwB,AAAxB,EAAyB;YACnE,iFAAA;YACA,uFAAA;YACA,kHAAA;YACA,sGAAA;YACM,IAAI,OAAO,KAAK;gBACd,MAAM,wBAAwB,CAAA,GAAA,kYAAA,CAAA,kCAA+B,AAA/B,EAAgC,6BAA6B,KAAK,KAAK;oBACnG,sBAAsB;oBACtB,oBAAoB,QAAQ,QAAQ;oBACpC,wBAAwB;gBAClC;gBAEQ,MAAM,EACJ,MAAM,oBAAoB,EAC1B,OAAO,EACP,WAAW,EACrB,GAIY,MAAM,sBAAsB,KAAK,CAAC,SAAS;gBAE/C,IAAI,OAAO,yBAAyB,YAAY,yBAAyB,MAAM;oBAC7E,IAAI,aAAa;wBAC3B,wFAAA;wBACa,qBAAiD,gBAAA,GAAmB;oBACjF;oBAEA,wFAAA;oBACU,IAAI,SAAS;wBACV,qBAAiD,cAAA,GAAiB;oBAC/E;gBACA;gBAEQ,OAAO;YACf,OAAa;gBACL,OAAO,4BAA4B,KAAK,CAAC,SAAS;YAC1D;QACA;IACA;AACA"}},
    {"offset": {"line": 1665, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1670, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/common/utils/tracingUtils.ts"],"sourcesContent":["import type { PropagationContext } from '@sentry/core';\nimport { getActiveSpan, getRootSpan, GLOBAL_OBJ, logger, Scope, spanToJSON, startNewTrace } from '@sentry/core';\nimport { DEBUG_BUILD } from '../debug-build';\nimport { TRANSACTION_ATTR_SHOULD_DROP_TRANSACTION } from '../span-attributes-with-logic-attached';\n\nconst commonPropagationContextMap = new WeakMap<object, PropagationContext>();\n\n/**\n * Takes a shared (garbage collectable) object between resources, e.g. a headers object shared between Next.js server components and returns a common propagation context.\n *\n * @param commonObject The shared object.\n * @param propagationContext The propagation context that should be shared between all the resources if no propagation context was registered yet.\n * @returns the shared propagation context.\n */\nexport function commonObjectToPropagationContext(\n  commonObject: unknown,\n  propagationContext: PropagationContext,\n): PropagationContext {\n  if (typeof commonObject === 'object' && commonObject) {\n    const memoPropagationContext = commonPropagationContextMap.get(commonObject);\n    if (memoPropagationContext) {\n      return memoPropagationContext;\n    } else {\n      commonPropagationContextMap.set(commonObject, propagationContext);\n      return propagationContext;\n    }\n  } else {\n    return propagationContext;\n  }\n}\n\nconst commonIsolationScopeMap = new WeakMap<object, Scope>();\n\n/**\n * Takes a shared (garbage collectable) object between resources, e.g. a headers object shared between Next.js server components and returns a common propagation context.\n *\n * @param commonObject The shared object.\n * @param isolationScope The isolationScope that should be shared between all the resources if no isolation scope was created yet.\n * @returns the shared isolation scope.\n */\nexport function commonObjectToIsolationScope(commonObject: unknown): Scope {\n  if (typeof commonObject === 'object' && commonObject) {\n    const memoIsolationScope = commonIsolationScopeMap.get(commonObject);\n    if (memoIsolationScope) {\n      return memoIsolationScope;\n    } else {\n      const newIsolationScope = new Scope();\n      commonIsolationScopeMap.set(commonObject, newIsolationScope);\n      return newIsolationScope;\n    }\n  } else {\n    return new Scope();\n  }\n}\n\ninterface AsyncLocalStorage<T> {\n  getStore(): T | undefined;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  run<R, TArgs extends any[]>(store: T, callback: (...args: TArgs) => R, ...args: TArgs): R;\n}\n\nlet nextjsEscapedAsyncStorage: AsyncLocalStorage<true>;\n\n/**\n * Will mark the execution context of the callback as \"escaped\" from Next.js internal tracing by unsetting the active\n * span and propagation context. When an execution passes through this function multiple times, it is a noop after the\n * first time.\n */\nexport function escapeNextjsTracing<T>(cb: () => T): T {\n  const MaybeGlobalAsyncLocalStorage = (GLOBAL_OBJ as { AsyncLocalStorage?: new () => AsyncLocalStorage<true> })\n    .AsyncLocalStorage;\n\n  if (!MaybeGlobalAsyncLocalStorage) {\n    DEBUG_BUILD &&\n      logger.warn(\n        \"Tried to register AsyncLocalStorage async context strategy in a runtime that doesn't support AsyncLocalStorage.\",\n      );\n    return cb();\n  }\n\n  if (!nextjsEscapedAsyncStorage) {\n    nextjsEscapedAsyncStorage = new MaybeGlobalAsyncLocalStorage();\n  }\n\n  if (nextjsEscapedAsyncStorage.getStore()) {\n    return cb();\n  } else {\n    return startNewTrace(() => {\n      return nextjsEscapedAsyncStorage.run(true, () => {\n        return cb();\n      });\n    });\n  }\n}\n\n/**\n * Ideally this function never lands in the develop branch.\n *\n * Drops the entire span tree this function was called in, if it was a span tree created by Next.js.\n */\nexport function dropNextjsRootContext(): void {\n  const nextJsOwnedSpan = getActiveSpan();\n  if (nextJsOwnedSpan) {\n    const rootSpan = getRootSpan(nextJsOwnedSpan);\n    const rootSpanAttributes = spanToJSON(rootSpan).data;\n    if (rootSpanAttributes?.['next.span_type']) {\n      getRootSpan(nextJsOwnedSpan)?.setAttribute(TRANSACTION_ATTR_SHOULD_DROP_TRANSACTION, true);\n    }\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAKA,MAAM,8BAA8B,IAAI;AAExC;;;;;;CAMA,GACO,SAAS,iCACd,YAAY,EACZ,kBAAkB;IAElB,IAAI,OAAO,iBAAiB,YAAY,cAAc;QACpD,MAAM,yBAAyB,4BAA4B,GAAG,CAAC;QAC/D,IAAI,wBAAwB;YAC1B,OAAO;QACb,OAAW;YACL,4BAA4B,GAAG,CAAC,cAAc;YAC9C,OAAO;QACb;IACA,OAAS;QACL,OAAO;IACX;AACA;AAEA,MAAM,0BAA0B,IAAI;AAEpC;;;;;;CAMA,GACO,SAAS,6BAA6B,YAAY;IACvD,IAAI,OAAO,iBAAiB,YAAY,cAAc;QACpD,MAAM,qBAAqB,wBAAwB,GAAG,CAAC;QACvD,IAAI,oBAAoB;YACtB,OAAO;QACb,OAAW;YACL,MAAM,oBAAoB,IAAI,0NAAA,CAAA,QAAK;YACnC,wBAAwB,GAAG,CAAC,cAAc;YAC1C,OAAO;QACb;IACA,OAAS;QACL,OAAO,IAAI,0NAAA,CAAA,QAAK;IACpB;AACA;AAQA,IAAI;AAEJ;;;;CAIA,GACO,SAAS,oBAAuB,EAAE;IACvC,MAAM,+BAA+B,AAAC,uOAAA,CAAA,aAAA,CACnC,iBAAiB;IAEpB,IAAI,CAAC,8BAA8B;QACjC,2XAAA,CAAA,cAAA,IACE,oOAAA,CAAA,SAAM,CAAC,IAAI,CACT;QAEJ,OAAO;IACX;IAEE,IAAI,CAAC,2BAA2B;QAC9B,4BAA4B,IAAI;IACpC;IAEE,IAAI,0BAA0B,QAAQ,IAAI;QACxC,OAAO;IACX,OAAS;QACL,OAAO,CAAA,GAAA,qOAAA,CAAA,gBAAa,AAAb,EAAc;YACnB,OAAO,0BAA0B,GAAG,CAAC,MAAM;gBACzC,OAAO;YACf;QACA;IACA;AACA;AAEA;;;;CAIA,GACO,SAAS;IACd,MAAM,kBAAkB,CAAA,GAAA,uOAAA,CAAA,gBAAa,AAAb;IACxB,IAAI,iBAAiB;QACnB,MAAM,WAAW,CAAA,GAAA,uOAAA,CAAA,cAAW,AAAX,EAAY;QAC7B,MAAM,qBAAqB,CAAA,GAAA,uOAAA,CAAA,aAAU,AAAV,EAAW,UAAU,IAAI;QACpD,IAAI,oBAAkB,CAAG,iBAAiB,EAAE;YAC1C,CAAA,GAAA,uOAAA,CAAA,cAAW,AAAX,EAAY,kBAAkB,aAAa,4ZAAA,CAAA,2CAAwC,EAAE;QAC3F;IACA;AACA"}},
    {"offset": {"line": 1768, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1773, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/common/utils/urls.ts"],"sourcesContent":["import { getSanitizedUrlStringFromUrlObject, parseStringToURLObject } from '@sentry/core';\n\ntype ComponentRouteParams = Record<string, string> | undefined;\ntype HeadersDict = Record<string, string> | undefined;\n\nconst HeaderKeys = {\n  FORWARDED_PROTO: 'x-forwarded-proto',\n  FORWARDED_HOST: 'x-forwarded-host',\n  HOST: 'host',\n  REFERER: 'referer',\n} as const;\n\n/**\n * Replaces route parameters in a path template with their values\n * @param path - The path template containing parameters in [paramName] format\n * @param params - Optional route parameters to replace in the template\n * @returns The path with parameters replaced\n */\nexport function substituteRouteParams(path: string, params?: ComponentRouteParams): string {\n  if (!params || typeof params !== 'object') return path;\n\n  let resultPath = path;\n  for (const [key, value] of Object.entries(params)) {\n    resultPath = resultPath.split(`[${key}]`).join(encodeURIComponent(value));\n  }\n  return resultPath;\n}\n\n/**\n * Normalizes a path by removing route groups\n * @param path - The path to normalize\n * @returns The normalized path\n */\nexport function sanitizeRoutePath(path: string): string {\n  const cleanedSegments = path\n    .split('/')\n    .filter(segment => segment && !(segment.startsWith('(') && segment.endsWith(')')));\n\n  return cleanedSegments.length > 0 ? `/${cleanedSegments.join('/')}` : '/';\n}\n\n/**\n * Constructs a full URL from the component route, parameters, and headers.\n *\n * @param componentRoute - The route template to construct the URL from\n * @param params - Optional route parameters to replace in the template\n * @param headersDict - Optional headers containing protocol and host information\n * @param pathname - Optional pathname coming from parent span \"http.target\"\n * @returns A sanitized URL string\n */\nexport function buildUrlFromComponentRoute(\n  componentRoute: string,\n  params?: ComponentRouteParams,\n  headersDict?: HeadersDict,\n  pathname?: string,\n): string {\n  const parameterizedPath = substituteRouteParams(componentRoute, params);\n  // If available, the pathname from the http.target of the HTTP request server span takes precedence over the parameterized path.\n  // Spans such as generateMetadata and Server Component rendering are typically direct children of that span.\n  const path = pathname ?? sanitizeRoutePath(parameterizedPath);\n\n  const protocol = headersDict?.[HeaderKeys.FORWARDED_PROTO];\n  const host = headersDict?.[HeaderKeys.FORWARDED_HOST] || headersDict?.[HeaderKeys.HOST];\n\n  if (!protocol || !host) {\n    return path;\n  }\n\n  const fullUrl = `${protocol}://${host}${path}`;\n\n  const urlObject = parseStringToURLObject(fullUrl);\n  if (!urlObject) {\n    return path;\n  }\n\n  return getSanitizedUrlStringFromUrlObject(urlObject);\n}\n\n/**\n * Returns a sanitized URL string from the referer header if it exists and is valid.\n *\n * @param headersDict - Optional headers containing the referer\n * @returns A sanitized URL string or undefined if referer is missing/invalid\n */\nexport function extractSanitizedUrlFromRefererHeader(headersDict?: HeadersDict): string | undefined {\n  const referer = headersDict?.[HeaderKeys.REFERER];\n  if (!referer) {\n    return undefined;\n  }\n\n  try {\n    const refererUrl = new URL(referer);\n    return getSanitizedUrlStringFromUrlObject(refererUrl);\n  } catch (error) {\n    return undefined;\n  }\n}\n\n/**\n * Returns a sanitized URL string using the referer header if available,\n * otherwise constructs the URL from the component route, params, and headers.\n *\n * @param componentRoute - The route template to construct the URL from\n * @param params - Optional route parameters to replace in the template\n * @param headersDict - Optional headers containing protocol, host, and referer\n * @param pathname - Optional pathname coming from root span \"http.target\"\n * @returns A sanitized URL string\n */\nexport function getSanitizedRequestUrl(\n  componentRoute: string,\n  params?: ComponentRouteParams,\n  headersDict?: HeadersDict,\n  pathname?: string,\n): string {\n  const refererUrl = extractSanitizedUrlFromRefererHeader(headersDict);\n  if (refererUrl) {\n    return refererUrl;\n  }\n\n  return buildUrlFromComponentRoute(componentRoute, params, headersDict, pathname);\n}\n"],"names":[],"mappings":";;;;;;;;;;AAKA,MAAM,aAAa;IACjB,iBAAiB;IACjB,gBAAgB;IAChB,MAAM;IACN,SAAS;AACX;AAEA;;;;;CAKA,GACO,SAAS,sBAAsB,IAAI,EAAU,MAAM;IACxD,IAAI,CAAC,UAAU,OAAO,WAAW,UAAU,OAAO;IAElD,IAAI,aAAa;IACjB,KAAK,MAAM,CAAC,KAAK,MAAK,IAAK,OAAO,OAAO,CAAC,QAAS;QACjD,aAAa,WAAW,KAAK,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,mBAAmB;IACtE;IACE,OAAO;AACT;AAEA;;;;CAIA,GACO,SAAS,kBAAkB,IAAI;IACpC,MAAM,kBAAkB,KACrB,KAAK,CAAC,KACN,MAAM,CAAC,CAAA,UAAW,WAAW,CAAA,CAAE,QAAQ,UAAU,CAAC,QAAQ,QAAQ,QAAQ,CAAC,IAAI;IAElF,OAAO,gBAAgB,MAAA,GAAS,IAAI,CAAC,CAAC,EAAE,gBAAgB,IAAI,CAAC,KAAK,CAAA,GAAA;AACA;AAEA;;;;;;;;CAQA,GACA,SAAA,2BACA,cAAA,EACA,MAAA,EACA,WAAA,EACA,QAAA;IAEA,MAAA,oBAAA,sBAAA,gBAAA;IACA,gIAAA;IACA,4GAAA;IACA,MAAA,OAAA,YAAA,kBAAA;IAEA,MAAA,WAAA,aAAA,CAAA,WAAA,eAAA,CAAA;IACA,MAAA,OAAA,aAAA,CAAA,WAAA,cAAA,CAAA,IAAA,aAAA,CAAA,WAAA,IAAA,CAAA;IAEA,IAAA,CAAA,YAAA,CAAA,MAAA;QACA,OAAA;IACA;IAEA,MAAA,UAAA,CAAA,EAAA,SAAA,GAAA,EAAA,KAAA,EAAA,KAAA,CAAA;IAEA,MAAA,YAAA,CAAA,GAAA,iOAAA,CAAA,yBAAA,EAAA;IACA,IAAA,CAAA,WAAA;QACA,OAAA;IACA;IAEA,OAAA,CAAA,GAAA,iOAAA,CAAA,qCAAA,EAAA;AACA;AAEA;;;;;CAKA,GACA,SAAA,qCAAA,WAAA;IACA,MAAA,UAAA,aAAA,CAAA,WAAA,OAAA,CAAA;IACA,IAAA,CAAA,SAAA;QACA,OAAA;IACA;IAEA,IAAA;QACA,MAAA,aAAA,IAAA,IAAA;QACA,OAAA,CAAA,GAAA,iOAAA,CAAA,qCAAA,EAAA;IACA,EAAA,OAAA,OAAA;QACA,OAAA;IACA;AACA;AAEA;;;;;;;;;CASA,GACA,SAAA,uBACA,cAAA,EACA,MAAA,EACA,WAAA,EACA,QAAA;IAEA,MAAA,aAAA,qCAAA;IACA,IAAA,YAAA;QACA,OAAA;IACA;IAEA,OAAA,2BAAA,gBAAA,QAAA,aAAA;AACA"}},
    {"offset": {"line": 1870, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1875, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/common/wrapGenerationFunctionWithSentry.ts"],"sourcesContent":["import type { RequestEventData, WebFetchHeaders } from '@sentry/core';\nimport {\n  captureException,\n  getActiveSpan,\n  getCapturedScopesOnSpan,\n  getClient,\n  getRootSpan,\n  handleCallbackErrors,\n  propagationContextFromHeaders,\n  Scope,\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n  SEMANTIC_ATTRIBUTE_SENTRY_SOURCE,\n  setCapturedScopesOnSpan,\n  SPAN_STATUS_ERROR,\n  SPAN_STATUS_OK,\n  spanToJSON,\n  startSpanManual,\n  winterCGHeadersToDict,\n  withIsolationScope,\n  withScope,\n} from '@sentry/core';\nimport type { GenerationFunctionContext } from '../common/types';\nimport { isNotFoundNavigationError, isRedirectNavigationError } from './nextNavigationErrorUtils';\nimport { TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL } from './span-attributes-with-logic-attached';\nimport { commonObjectToIsolationScope, commonObjectToPropagationContext } from './utils/tracingUtils';\nimport { getSanitizedRequestUrl } from './utils/urls';\n/**\n * Wraps a generation function (e.g. generateMetadata) with Sentry error and performance instrumentation.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function wrapGenerationFunctionWithSentry<F extends (...args: any[]) => any>(\n  generationFunction: F,\n  context: GenerationFunctionContext,\n): F {\n  const { requestAsyncStorage, componentRoute, componentType, generationFunctionIdentifier } = context;\n  return new Proxy(generationFunction, {\n    apply: (originalFunction, thisArg, args) => {\n      const requestTraceId = getActiveSpan()?.spanContext().traceId;\n      let headers: WebFetchHeaders | undefined = undefined;\n      // We try-catch here just in case anything goes wrong with the async storage here goes wrong since it is Next.js internal API\n      try {\n        headers = requestAsyncStorage?.getStore()?.headers;\n      } catch (e) {\n        /** empty */\n      }\n\n      const isolationScope = commonObjectToIsolationScope(headers);\n      let pathname = undefined as string | undefined;\n\n      const activeSpan = getActiveSpan();\n      if (activeSpan) {\n        const rootSpan = getRootSpan(activeSpan);\n        const { scope } = getCapturedScopesOnSpan(rootSpan);\n        setCapturedScopesOnSpan(rootSpan, scope ?? new Scope(), isolationScope);\n\n        const spanData = spanToJSON(rootSpan);\n\n        if (spanData.data && 'http.target' in spanData.data) {\n          pathname = spanData.data['http.target'] as string;\n        }\n      }\n\n      const headersDict = headers ? winterCGHeadersToDict(headers) : undefined;\n\n      let data: Record<string, unknown> | undefined = undefined;\n      if (getClient()?.getOptions().sendDefaultPii) {\n        const props: unknown = args[0];\n        const params = props && typeof props === 'object' && 'params' in props ? props.params : undefined;\n        const searchParams =\n          props && typeof props === 'object' && 'searchParams' in props ? props.searchParams : undefined;\n        data = { params, searchParams };\n      }\n\n      return withIsolationScope(isolationScope, () => {\n        return withScope(scope => {\n          scope.setTransactionName(`${componentType}.${generationFunctionIdentifier} (${componentRoute})`);\n\n          isolationScope.setSDKProcessingMetadata({\n            normalizedRequest: {\n              headers: headersDict,\n              url: getSanitizedRequestUrl(\n                componentRoute,\n                data?.params as Record<string, string> | undefined,\n                headersDict,\n                pathname,\n              ),\n            } satisfies RequestEventData,\n          });\n\n          const activeSpan = getActiveSpan();\n          if (activeSpan) {\n            const rootSpan = getRootSpan(activeSpan);\n            const sentryTrace = headersDict?.['sentry-trace'];\n            if (sentryTrace) {\n              rootSpan.setAttribute(TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL, sentryTrace);\n            }\n          }\n\n          const propagationContext = commonObjectToPropagationContext(\n            headers,\n            propagationContextFromHeaders(headersDict?.['sentry-trace'], headersDict?.['baggage']),\n          );\n\n          if (requestTraceId) {\n            propagationContext.traceId = requestTraceId;\n          }\n\n          scope.setPropagationContext(propagationContext);\n\n          scope.setExtra('route_data', data);\n\n          return startSpanManual(\n            {\n              op: 'function.nextjs',\n              name: `${componentType}.${generationFunctionIdentifier} (${componentRoute})`,\n              attributes: {\n                [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'route',\n                [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.function.nextjs',\n                'sentry.nextjs.ssr.function.type': generationFunctionIdentifier,\n                'sentry.nextjs.ssr.function.route': componentRoute,\n              },\n            },\n            span => {\n              return handleCallbackErrors(\n                () => originalFunction.apply(thisArg, args),\n                err => {\n                  // When you read this code you might think: \"Wait a minute, shouldn't we set the status on the root span too?\"\n                  // The answer is: \"No.\" - The status of the root span is determined by whatever status code Next.js decides to put on the response.\n                  if (isNotFoundNavigationError(err)) {\n                    // We don't want to report \"not-found\"s\n                    span.setStatus({ code: SPAN_STATUS_ERROR, message: 'not_found' });\n                    getRootSpan(span).setStatus({ code: SPAN_STATUS_ERROR, message: 'not_found' });\n                  } else if (isRedirectNavigationError(err)) {\n                    // We don't want to report redirects\n                    span.setStatus({ code: SPAN_STATUS_OK });\n                  } else {\n                    span.setStatus({ code: SPAN_STATUS_ERROR, message: 'internal_error' });\n                    getRootSpan(span).setStatus({ code: SPAN_STATUS_ERROR, message: 'internal_error' });\n                    captureException(err, {\n                      mechanism: {\n                        handled: false,\n                      },\n                    });\n                  }\n                },\n                () => {\n                  span.end();\n                },\n              );\n            },\n          );\n        });\n      });\n    },\n  });\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 2013, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2018, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/common/pages-router-instrumentation/wrapGetInitialPropsWithSentry.ts"],"sourcesContent":["import type { NextPage } from 'next';\nimport { isBuild } from '../utils/isBuild';\nimport { withErrorInstrumentation, withTracedServerSideDataFetcher } from '../utils/wrapperUtils';\n\ntype GetInitialProps = Required<NextPage>['getInitialProps'];\n\n/**\n * Create a wrapped version of the user's exported `getInitialProps` function\n *\n * @param origGetInitialProps The user's `getInitialProps` function\n * @param parameterizedRoute The page's parameterized route\n * @returns A wrapped version of the function\n */\nexport function wrapGetInitialPropsWithSentry(origGetInitialProps: GetInitialProps): GetInitialProps {\n  return new Proxy(origGetInitialProps, {\n    apply: async (wrappingTarget, thisArg, args: Parameters<GetInitialProps>) => {\n      if (isBuild()) {\n        return wrappingTarget.apply(thisArg, args);\n      }\n\n      const [context] = args;\n      const { req, res } = context;\n\n      const errorWrappedGetInitialProps = withErrorInstrumentation(wrappingTarget);\n      // Generally we can assume that `req` and `res` are always defined on the server:\n      // https://nextjs.org/docs/api-reference/data-fetching/get-initial-props#context-object\n      // This does not seem to be the case in dev mode. Because we have no clean way of associating the the data fetcher\n      // span with each other when there are no req or res objects, we simply do not trace them at all here.\n      if (req && res) {\n        const tracedGetInitialProps = withTracedServerSideDataFetcher(errorWrappedGetInitialProps, req, res, {\n          dataFetcherRouteName: context.pathname,\n          requestedRouteName: context.pathname,\n          dataFetchingMethodName: 'getInitialProps',\n        });\n\n        const {\n          data: initialProps,\n          baggage,\n          sentryTrace,\n        }: {\n          data?: unknown;\n          baggage?: string;\n          sentryTrace?: string;\n        } = (await tracedGetInitialProps.apply(thisArg, args)) ?? {}; // Next.js allows undefined to be returned from a getInitialPropsFunction.\n\n        if (typeof initialProps === 'object' && initialProps !== null) {\n          // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n          if (sentryTrace) {\n            (initialProps as Record<string, unknown>)._sentryTraceData = sentryTrace;\n          }\n\n          // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n          if (baggage) {\n            (initialProps as Record<string, unknown>)._sentryBaggage = baggage;\n          }\n        }\n\n        return initialProps;\n      } else {\n        return errorWrappedGetInitialProps.apply(thisArg, args);\n      }\n    },\n  });\n}\n"],"names":[],"mappings":";;;;;;;;AAMA;;;;;;CAMA,GACO,SAAS,8BAA8B,mBAAmB;IAC/D,OAAO,IAAI,MAAM,qBAAqB;QACpC,OAAO,OAAO,gBAAgB,SAAS;YACrC,IAAI,CAAA,GAAA,6XAAA,CAAA,UAAO,AAAP,KAAW;gBACb,OAAO,eAAe,KAAK,CAAC,SAAS;YAC7C;YAEM,MAAM,CAAC,QAAO,GAAI;YAClB,MAAM,EAAE,GAAG,EAAE,GAAA,EAAI,GAAI;YAErB,MAAM,8BAA8B,CAAA,GAAA,kYAAA,CAAA,2BAAwB,AAAxB,EAAyB;YACnE,iFAAA;YACA,uFAAA;YACA,kHAAA;YACA,sGAAA;YACM,IAAI,OAAO,KAAK;gBACd,MAAM,wBAAwB,CAAA,GAAA,kYAAA,CAAA,kCAA+B,AAA/B,EAAgC,6BAA6B,KAAK,KAAK;oBACnG,sBAAsB,QAAQ,QAAQ;oBACtC,oBAAoB,QAAQ,QAAQ;oBACpC,wBAAwB;gBAClC;gBAEQ,MAAM,EACJ,MAAM,YAAY,EAClB,OAAO,EACP,WAAW,EACrB,GAIY,AAAC,MAAM,sBAAsB,KAAK,CAAC,SAAS,SAAU,CAAA,GAAE,0EAAA;gBAE5D,IAAI,OAAO,iBAAiB,YAAY,iBAAiB,MAAM;oBACvE,wFAAA;oBACU,IAAI,aAAa;wBACd,aAAyC,gBAAA,GAAmB;oBACzE;oBAEA,wFAAA;oBACU,IAAI,SAAS;wBACV,aAAyC,cAAA,GAAiB;oBACvE;gBACA;gBAEQ,OAAO;YACf,OAAa;gBACL,OAAO,4BAA4B,KAAK,CAAC,SAAS;YAC1D;QACA;IACA;AACA"}},
    {"offset": {"line": 2071, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2076, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/common/pages-router-instrumentation/wrapGetServerSidePropsWithSentry.ts"],"sourcesContent":["import type { GetServerSideProps } from 'next';\nimport { isBuild } from '../utils/isBuild';\nimport { withErrorInstrumentation, withTracedServerSideDataFetcher } from '../utils/wrapperUtils';\n\n/**\n * Create a wrapped version of the user's exported `getServerSideProps` function\n *\n * @param origGetServerSideProps The user's `getServerSideProps` function\n * @param parameterizedRoute The page's parameterized route\n * @returns A wrapped version of the function\n */\nexport function wrapGetServerSidePropsWithSentry(\n  origGetServerSideProps: GetServerSideProps,\n  parameterizedRoute: string,\n): GetServerSideProps {\n  return new Proxy(origGetServerSideProps, {\n    apply: async (wrappingTarget, thisArg, args: Parameters<GetServerSideProps>) => {\n      if (isBuild()) {\n        return wrappingTarget.apply(thisArg, args);\n      }\n\n      const [context] = args;\n      const { req, res } = context;\n\n      const errorWrappedGetServerSideProps = withErrorInstrumentation(wrappingTarget);\n      const tracedGetServerSideProps = withTracedServerSideDataFetcher(errorWrappedGetServerSideProps, req, res, {\n        dataFetcherRouteName: parameterizedRoute,\n        requestedRouteName: parameterizedRoute,\n        dataFetchingMethodName: 'getServerSideProps',\n      });\n\n      const {\n        data: serverSideProps,\n        baggage,\n        sentryTrace,\n      }: {\n        data?: unknown;\n        baggage?: string;\n        sentryTrace?: string;\n      } = await (tracedGetServerSideProps.apply(thisArg, args) as ReturnType<typeof tracedGetServerSideProps>);\n\n      if (typeof serverSideProps === 'object' && serverSideProps !== null && 'props' in serverSideProps) {\n        // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n        if (sentryTrace) {\n          (serverSideProps.props as Record<string, unknown>)._sentryTraceData = sentryTrace;\n        }\n\n        // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n        if (baggage) {\n          (serverSideProps.props as Record<string, unknown>)._sentryBaggage = baggage;\n        }\n      }\n\n      return serverSideProps;\n    },\n  });\n}\n"],"names":[],"mappings":";;;;;;;;AAIA;;;;;;CAMA,GACO,SAAS,iCACd,sBAAsB,EACtB,kBAAkB;IAElB,OAAO,IAAI,MAAM,wBAAwB;QACvC,OAAO,OAAO,gBAAgB,SAAS;YACrC,IAAI,CAAA,GAAA,6XAAA,CAAA,UAAO,AAAP,KAAW;gBACb,OAAO,eAAe,KAAK,CAAC,SAAS;YAC7C;YAEM,MAAM,CAAC,QAAO,GAAI;YAClB,MAAM,EAAE,GAAG,EAAE,GAAA,EAAI,GAAI;YAErB,MAAM,iCAAiC,CAAA,GAAA,kYAAA,CAAA,2BAAwB,AAAxB,EAAyB;YAChE,MAAM,2BAA2B,CAAA,GAAA,kYAAA,CAAA,kCAA+B,AAA/B,EAAgC,gCAAgC,KAAK,KAAK;gBACzG,sBAAsB;gBACtB,oBAAoB;gBACpB,wBAAwB;YAChC;YAEM,MAAM,EACJ,MAAM,eAAe,EACrB,OAAO,EACP,WAAW,EACnB,GAIU,MAAO,yBAAyB,KAAK,CAAC,SAAS;YAEnD,IAAI,OAAO,oBAAoB,YAAY,oBAAoB,QAAQ,WAAW,iBAAiB;gBACzG,wFAAA;gBACQ,IAAI,aAAa;oBACd,gBAAgB,KAAA,CAAkC,gBAAA,GAAmB;gBAChF;gBAEA,wFAAA;gBACQ,IAAI,SAAS;oBACV,gBAAgB,KAAA,CAAkC,cAAA,GAAiB;gBAC9E;YACA;YAEM,OAAO;QACb;IACA;AACA"}},
    {"offset": {"line": 2121, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2126, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/common/pages-router-instrumentation/wrapGetStaticPropsWithSentry.ts"],"sourcesContent":["import type { GetStaticProps } from 'next';\nimport { isBuild } from '../utils/isBuild';\nimport { callDataFetcherTraced, withErrorInstrumentation } from '../utils/wrapperUtils';\n\ntype Props = { [key: string]: unknown };\n\n/**\n * Create a wrapped version of the user's exported `getStaticProps` function\n *\n * @param origGetStaticProps The user's `getStaticProps` function\n * @param parameterizedRoute The page's parameterized route\n * @returns A wrapped version of the function\n */\nexport function wrapGetStaticPropsWithSentry(\n  origGetStaticPropsa: GetStaticProps<Props>,\n  _parameterizedRoute: string,\n): GetStaticProps<Props> {\n  return new Proxy(origGetStaticPropsa, {\n    apply: async (wrappingTarget, thisArg, args: Parameters<GetStaticProps<Props>>) => {\n      if (isBuild()) {\n        return wrappingTarget.apply(thisArg, args);\n      }\n\n      const errorWrappedGetStaticProps = withErrorInstrumentation(wrappingTarget);\n      return callDataFetcherTraced(errorWrappedGetStaticProps, args);\n    },\n  });\n}\n"],"names":[],"mappings":";;;;;;;;AAMA;;;;;;CAMA,GACO,SAAS,6BACd,mBAAmB,EACnB,mBAAmB;IAEnB,OAAO,IAAI,MAAM,qBAAqB;QACpC,OAAO,OAAO,gBAAgB,SAAS;YACrC,IAAI,CAAA,GAAA,6XAAA,CAAA,UAAO,AAAP,KAAW;gBACb,OAAO,eAAe,KAAK,CAAC,SAAS;YAC7C;YAEM,MAAM,6BAA6B,CAAA,GAAA,kYAAA,CAAA,2BAAwB,AAAxB,EAAyB;YAC5D,OAAO,CAAA,GAAA,kYAAA,CAAA,wBAAqB,AAArB,EAAsB,4BAA4B;QAC/D;IACA;AACA"}},
    {"offset": {"line": 2153, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2158, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/common/wrapMiddlewareWithSentry.ts"],"sourcesContent":["import type { TransactionSource } from '@sentry/core';\nimport {\n  captureException,\n  getActiveSpan,\n  getCurrentScope,\n  getRootSpan,\n  handleCallbackErrors,\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n  SEMANTIC_ATTRIBUTE_SENTRY_SOURCE,\n  setCapturedScopesOnSpan,\n  startSpan,\n  vercelWaitUntil,\n  winterCGRequestToRequestData,\n  withIsolationScope,\n} from '@sentry/core';\nimport type { EdgeRouteHandler } from '../edge/types';\nimport { flushSafelyWithTimeout } from './utils/responseEnd';\n\n/**\n * Wraps Next.js middleware with Sentry error and performance instrumentation.\n *\n * @param middleware The middleware handler.\n * @returns a wrapped middleware handler.\n */\nexport function wrapMiddlewareWithSentry<H extends EdgeRouteHandler>(\n  middleware: H,\n): (...params: Parameters<H>) => Promise<ReturnType<H>> {\n  return new Proxy(middleware, {\n    apply: async (wrappingTarget, thisArg, args: Parameters<H>) => {\n      const tunnelRoute =\n        '_sentryRewritesTunnelPath' in globalThis\n          ? (globalThis as Record<string, unknown>)._sentryRewritesTunnelPath\n          : undefined;\n\n      if (tunnelRoute && typeof tunnelRoute === 'string') {\n        const req: unknown = args[0];\n        // Check if the current request matches the tunnel route\n        if (req instanceof Request) {\n          const url = new URL(req.url);\n          const isTunnelRequest = url.pathname.startsWith(tunnelRoute);\n\n          if (isTunnelRequest) {\n            // Create a simple response that mimics NextResponse.next() so we don't need to import internals here\n            // which breaks next 13 apps\n            // https://github.com/vercel/next.js/blob/c12c9c1f78ad384270902f0890dc4cd341408105/packages/next/src/server/web/spec-extension/response.ts#L146\n            return new Response(null, {\n              status: 200,\n              headers: {\n                'x-middleware-next': '1',\n              },\n            }) as ReturnType<H>;\n          }\n        }\n      }\n      // TODO: We still should add central isolation scope creation for when our build-time instrumentation does not work anymore with turbopack.\n      return withIsolationScope(isolationScope => {\n        const req: unknown = args[0];\n        const currentScope = getCurrentScope();\n\n        let spanName: string;\n        let spanSource: TransactionSource;\n\n        if (req instanceof Request) {\n          isolationScope.setSDKProcessingMetadata({\n            normalizedRequest: winterCGRequestToRequestData(req),\n          });\n          spanName = `middleware ${req.method} ${new URL(req.url).pathname}`;\n          spanSource = 'url';\n        } else {\n          spanName = 'middleware';\n          spanSource = 'component';\n        }\n\n        currentScope.setTransactionName(spanName);\n\n        const activeSpan = getActiveSpan();\n\n        if (activeSpan) {\n          // If there is an active span, it likely means that the automatic Next.js OTEL instrumentation worked and we can\n          // rely on that for parameterization.\n          spanName = 'middleware';\n          spanSource = 'component';\n\n          const rootSpan = getRootSpan(activeSpan);\n          if (rootSpan) {\n            setCapturedScopesOnSpan(rootSpan, currentScope, isolationScope);\n          }\n        }\n\n        return startSpan(\n          {\n            name: spanName,\n            op: 'http.server.middleware',\n            attributes: {\n              [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: spanSource,\n              [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.function.nextjs.wrapMiddlewareWithSentry',\n            },\n          },\n          () => {\n            return handleCallbackErrors(\n              () => wrappingTarget.apply(thisArg, args),\n              error => {\n                captureException(error, {\n                  mechanism: {\n                    type: 'instrument',\n                    handled: false,\n                  },\n                });\n              },\n              () => {\n                vercelWaitUntil(flushSafelyWithTimeout());\n              },\n            );\n          },\n        );\n      });\n    },\n  });\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAkBA;;;;;CAKA,GACO,SAAS,yBACd,UAAU;IAEV,OAAO,IAAI,MAAM,YAAY;QAC3B,OAAO,OAAO,gBAAgB,SAAS;YACrC,MAAM,cACJ,+BAA+B,aAC3B,AAAC,WAAuC,yBAAA,GACxC;YAEN,IAAI,eAAe,OAAO,gBAAgB,UAAU;gBAClD,MAAM,MAAe,IAAI,CAAC,EAAE;gBACpC,wDAAA;gBACQ,IAAI,eAAe,SAAS;oBAC1B,MAAM,MAAM,IAAI,IAAI,IAAI,GAAG;oBAC3B,MAAM,kBAAkB,IAAI,QAAQ,CAAC,UAAU,CAAC;oBAEhD,IAAI,iBAAiB;wBAC/B,qGAAA;wBACA,4BAAA;wBACA,+IAAA;wBACY,OAAO,IAAI,SAAS,MAAM;4BACxB,QAAQ;4BACR,SAAS;gCACP,qBAAqB;4BACrC;wBACA;oBACA;gBACA;YACA;YACA,2IAAA;YACM,OAAO,CAAA,GAAA,kOAAA,CAAA,qBAAkB,AAAlB,EAAmB,CAAA;gBACxB,MAAM,MAAe,IAAI,CAAC,EAAE;gBAC5B,MAAM,eAAe,CAAA,GAAA,kOAAA,CAAA,kBAAe,AAAf;gBAErB,IAAI;gBACJ,IAAI;gBAEJ,IAAI,eAAe,SAAS;oBAC1B,eAAe,wBAAwB,CAAC;wBACtC,mBAAmB,CAAA,GAAA,qOAAA,CAAA,+BAA4B,AAA5B,EAA6B;oBAC5D;oBACU,WAAW,CAAC,WAAW,EAAE,IAAI,MAAM,CAAC,CAAC,EAAE,IAAI,IAAI,IAAI,GAAG,EAAE,QAAQ,CAAC,CAAA;oBACA,aAAA;gBACA,OAAA;oBACA,WAAA;oBACA,aAAA;gBACA;gBAEA,aAAA,kBAAA,CAAA;gBAEA,MAAA,aAAA,CAAA,GAAA,uOAAA,CAAA,gBAAA;gBAEA,IAAA,YAAA;oBACA,gHAAA;oBACA,qCAAA;oBACA,WAAA;oBACA,aAAA;oBAEA,MAAA,WAAA,CAAA,GAAA,uOAAA,CAAA,cAAA,EAAA;oBACA,IAAA,UAAA;wBACA,CAAA,GAAA,qOAAA,CAAA,0BAAA,EAAA,UAAA,cAAA;oBACA;gBACA;gBAEA,OAAA,CAAA,GAAA,qOAAA,CAAA,YAAA,EACA;oBACA,MAAA;oBACA,IAAA;oBACA,YAAA;wBACA,CAAA,uOAAA,CAAA,mCAAA,CAAA,EAAA;wBACA,CAAA,uOAAA,CAAA,mCAAA,CAAA,EAAA;oBACA;gBACA,GACA;oBACA,OAAA,CAAA,GAAA,kPAAA,CAAA,uBAAA,EACA,IAAA,eAAA,KAAA,CAAA,SAAA,OACA,CAAA;wBACA,CAAA,GAAA,4NAAA,CAAA,mBAAA,EAAA,OAAA;4BACA,WAAA;gCACA,MAAA;gCACA,SAAA;4BACA;wBACA;oBACA,GACA;wBACA,CAAA,GAAA,6OAAA,CAAA,kBAAA,EAAA,CAAA,GAAA,iYAAA,CAAA,yBAAA;oBACA;gBAEA;YAEA;QACA;IACA;AACA"}},
    {"offset": {"line": 2255, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2260, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/common/pages-router-instrumentation/wrapPageComponentWithSentry.ts"],"sourcesContent":["import { captureException, extractTraceparentData, getCurrentScope, withIsolationScope } from '@sentry/core';\n\ninterface FunctionComponent {\n  (...args: unknown[]): unknown;\n}\n\ninterface ClassComponent {\n  new (...args: unknown[]): {\n    props?: unknown;\n    render(...args: unknown[]): unknown;\n  };\n}\n\nfunction isReactClassComponent(target: unknown): target is ClassComponent {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return typeof target === 'function' && target?.prototype?.isReactComponent;\n}\n\n/**\n * Wraps a page component with Sentry error instrumentation.\n */\nexport function wrapPageComponentWithSentry(pageComponent: FunctionComponent | ClassComponent): unknown {\n  if (isReactClassComponent(pageComponent)) {\n    return class SentryWrappedPageComponent extends pageComponent {\n      public render(...args: unknown[]): unknown {\n        return withIsolationScope(() => {\n          const scope = getCurrentScope();\n          // We extract the sentry trace data that is put in the component props by datafetcher wrappers\n          const sentryTraceData =\n            typeof this.props === 'object' &&\n            this.props !== null &&\n            '_sentryTraceData' in this.props &&\n            typeof this.props._sentryTraceData === 'string'\n              ? this.props._sentryTraceData\n              : undefined;\n\n          if (sentryTraceData) {\n            const traceparentData = extractTraceparentData(sentryTraceData);\n            scope.setContext('trace', {\n              span_id: traceparentData?.parentSpanId,\n              trace_id: traceparentData?.traceId,\n            });\n          }\n\n          try {\n            return super.render(...args);\n          } catch (e) {\n            captureException(e, {\n              mechanism: {\n                handled: false,\n              },\n            });\n            throw e;\n          }\n        });\n      }\n    };\n  } else if (typeof pageComponent === 'function') {\n    return new Proxy(pageComponent, {\n      apply(target, thisArg, argArray: [{ _sentryTraceData?: string } | undefined]) {\n        return withIsolationScope(() => {\n          const scope = getCurrentScope();\n          // We extract the sentry trace data that is put in the component props by datafetcher wrappers\n          const sentryTraceData = argArray?.[0]?._sentryTraceData;\n\n          if (sentryTraceData) {\n            const traceparentData = extractTraceparentData(sentryTraceData);\n            scope.setContext('trace', {\n              span_id: traceparentData?.parentSpanId,\n              trace_id: traceparentData?.traceId,\n            });\n          }\n\n          try {\n            return target.apply(thisArg, argArray);\n          } catch (e) {\n            captureException(e, {\n              mechanism: {\n                handled: false,\n              },\n            });\n            throw e;\n          }\n        });\n      },\n    });\n  } else {\n    return pageComponent;\n  }\n}\n"],"names":[],"mappings":";;;;;;;;AAaA,SAAS,sBAAsB,MAAM;IACrC,sEAAA;IACE,OAAO,OAAO,WAAW,cAAc,QAAQ,WAAW;AAC5D;AAEA;;CAEA,GACO,SAAS,4BAA4B,aAAa;IACvD,IAAI,sBAAsB,gBAAgB;QACxC,OAAO,MAAM,mCAAmC;YACvC,OAAO,GAAG,IAAI,EAAsB;gBACzC,OAAO,CAAA,GAAA,kOAAA,CAAA,qBAAkB,AAAlB,EAAmB;oBACxB,MAAM,QAAQ,CAAA,GAAA,kOAAA,CAAA,kBAAe,AAAf;oBACxB,8FAAA;oBACU,MAAM,kBACJ,OAAO,IAAI,CAAC,KAAA,KAAU,YACtB,IAAI,CAAC,KAAA,KAAU,QACf,sBAAsB,IAAI,CAAC,KAAA,IAC3B,OAAO,IAAI,CAAC,KAAK,CAAC,gBAAA,KAAqB,WACnC,IAAI,CAAC,KAAK,CAAC,gBAAA,GACX;oBAEN,IAAI,iBAAiB;wBACnB,MAAM,kBAAkB,CAAA,GAAA,qOAAA,CAAA,yBAAsB,AAAtB,EAAuB;wBAC/C,MAAM,UAAU,CAAC,SAAS;4BACxB,SAAS,iBAAiB;4BAC1B,UAAU,iBAAiB;wBACzC;oBACA;oBAEU,IAAI;wBACF,OAAO,KAAK,CAAC,UAAU;oBACnC,EAAY,OAAO,GAAG;wBACV,CAAA,GAAA,4NAAA,CAAA,mBAAgB,AAAhB,EAAiB,GAAG;4BAClB,WAAW;gCACT,SAAS;4BACzB;wBACA;wBACY,MAAM;oBAClB;gBACA;YACA;QACA;IACA,OAAS,IAAI,OAAO,kBAAkB,YAAY;QAC9C,OAAO,IAAI,MAAM,eAAe;YAC9B,OAAM,MAAM,EAAE,OAAO,EAAE,QAAQ;gBAC7B,OAAO,CAAA,GAAA,kOAAA,CAAA,qBAAkB,AAAlB,EAAmB;oBACxB,MAAM,QAAQ,CAAA,GAAA,kOAAA,CAAA,kBAAe,AAAf;oBACxB,8FAAA;oBACU,MAAM,kBAAkB,UAAQ,CAAG,EAAE,EAAE;oBAEvC,IAAI,iBAAiB;wBACnB,MAAM,kBAAkB,CAAA,GAAA,qOAAA,CAAA,yBAAsB,AAAtB,EAAuB;wBAC/C,MAAM,UAAU,CAAC,SAAS;4BACxB,SAAS,iBAAiB;4BAC1B,UAAU,iBAAiB;wBACzC;oBACA;oBAEU,IAAI;wBACF,OAAO,OAAO,KAAK,CAAC,SAAS;oBACzC,EAAY,OAAO,GAAG;wBACV,CAAA,GAAA,4NAAA,CAAA,mBAAgB,AAAhB,EAAiB,GAAG;4BAClB,WAAW;gCACT,SAAS;4BACzB;wBACA;wBACY,MAAM;oBAClB;gBACA;YACA;QACA;IACA,OAAS;QACL,OAAO;IACX;AACA"}},
    {"offset": {"line": 2335, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2340, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/common/wrapRouteHandlerWithSentry.ts"],"sourcesContent":["import type { RequestEventData } from '@sentry/core';\nimport {\n  captureException,\n  getActiveSpan,\n  getCapturedScopesOnSpan,\n  getIsolationScope,\n  getRootSpan,\n  handleCallbackErrors,\n  propagationContextFromHeaders,\n  Scope,\n  SEMANTIC_ATTRIBUTE_SENTRY_OP,\n  SEMANTIC_ATTRIBUTE_SENTRY_SOURCE,\n  setCapturedScopesOnSpan,\n  setHttpStatus,\n  winterCGHeadersToDict,\n  withIsolationScope,\n  withScope,\n} from '@sentry/core';\nimport { isNotFoundNavigationError, isRedirectNavigationError } from './nextNavigationErrorUtils';\nimport type { RouteHandlerContext } from './types';\nimport { commonObjectToIsolationScope } from './utils/tracingUtils';\n\n/**\n * Wraps a Next.js App Router Route handler with Sentry error and performance instrumentation.\n *\n * NOTICE: This wrapper is for App Router API routes. If you are looking to wrap Pages Router API routes use `wrapApiHandlerWithSentry` instead.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function wrapRouteHandlerWithSentry<F extends (...args: any[]) => any>(\n  routeHandler: F,\n  context: RouteHandlerContext,\n): (...args: Parameters<F>) => ReturnType<F> extends Promise<unknown> ? ReturnType<F> : Promise<ReturnType<F>> {\n  const { method, parameterizedRoute, headers } = context;\n\n  return new Proxy(routeHandler, {\n    apply: async (originalFunction, thisArg, args) => {\n      const activeSpan = getActiveSpan();\n      const rootSpan = activeSpan ? getRootSpan(activeSpan) : undefined;\n\n      let edgeRuntimeIsolationScopeOverride: Scope | undefined;\n      if (rootSpan && process.env.NEXT_RUNTIME === 'edge') {\n        const isolationScope = commonObjectToIsolationScope(headers);\n        const { scope } = getCapturedScopesOnSpan(rootSpan);\n        setCapturedScopesOnSpan(rootSpan, scope ?? new Scope(), isolationScope);\n\n        edgeRuntimeIsolationScopeOverride = isolationScope;\n\n        rootSpan.updateName(`${method} ${parameterizedRoute}`);\n        rootSpan.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, 'route');\n        rootSpan.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'http.server');\n      }\n\n      return withIsolationScope(\n        process.env.NEXT_RUNTIME === 'edge' ? edgeRuntimeIsolationScopeOverride : getIsolationScope(),\n        () => {\n          return withScope(async scope => {\n            scope.setTransactionName(`${method} ${parameterizedRoute}`);\n\n            if (process.env.NEXT_RUNTIME === 'edge') {\n              const completeHeadersDict: Record<string, string> = headers ? winterCGHeadersToDict(headers) : {};\n              const incomingPropagationContext = propagationContextFromHeaders(\n                completeHeadersDict['sentry-trace'],\n                completeHeadersDict['baggage'],\n              );\n              scope.setPropagationContext(incomingPropagationContext);\n              scope.setSDKProcessingMetadata({\n                normalizedRequest: {\n                  method,\n                  headers: completeHeadersDict,\n                } satisfies RequestEventData,\n              });\n            }\n\n            const response: Response = await handleCallbackErrors(\n              () => originalFunction.apply(thisArg, args),\n              error => {\n                // Next.js throws errors when calling `redirect()`. We don't wanna report these.\n                if (isRedirectNavigationError(error)) {\n                  // Don't do anything\n                } else if (isNotFoundNavigationError(error)) {\n                  if (activeSpan) {\n                    setHttpStatus(activeSpan, 404);\n                  }\n                  if (rootSpan) {\n                    setHttpStatus(rootSpan, 404);\n                  }\n                } else {\n                  captureException(error, {\n                    mechanism: {\n                      handled: false,\n                    },\n                  });\n                }\n              },\n            );\n\n            try {\n              if (response.status) {\n                if (activeSpan) {\n                  setHttpStatus(activeSpan, response.status);\n                }\n                if (rootSpan) {\n                  setHttpStatus(rootSpan, response.status);\n                }\n              }\n            } catch {\n              // best effort - response may be undefined?\n            }\n\n            return response;\n          });\n        },\n      );\n    },\n  });\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAsBA;;;;CAIA,GACA,8DAAA;AACO,SAAS,2BACd,YAAY,EACZ,OAAO;IAEP,MAAM,EAAE,MAAM,EAAE,kBAAkB,EAAE,OAAA,EAAQ,GAAI;IAEhD,OAAO,IAAI,MAAM,cAAc;QAC7B,OAAO,OAAO,kBAAkB,SAAS;YACvC,MAAM,aAAa,CAAA,GAAA,uOAAA,CAAA,gBAAa,AAAb;YACnB,MAAM,WAAW,aAAa,CAAA,GAAA,uOAAA,CAAA,cAAW,AAAX,EAAY,cAAc;YAExD,IAAI;YACJ,IAAI,YAAY,yCAA6B,QAAQ;gBACnD,MAAM,iBAAiB,CAAA,GAAA,kYAAA,CAAA,+BAA4B,AAA5B,EAA6B;gBACpD,MAAM,EAAE,KAAA,EAAM,GAAI,CAAA,GAAA,qOAAA,CAAA,0BAAuB,AAAvB,EAAwB;gBAC1C,CAAA,GAAA,qOAAA,CAAA,0BAAuB,AAAvB,EAAwB,UAAU,SAAS,IAAI,0NAAA,CAAA,QAAK,IAAI;gBAExD,oCAAoC;gBAEpC,SAAS,UAAU,CAAC,CAAC,EAAA,OAAA,CAAA,EAAA,mBAAA,CAAA;gBACA,SAAA,YAAA,CAAA,uOAAA,CAAA,mCAAA,EAAA;gBACA,SAAA,YAAA,CAAA,uOAAA,CAAA,+BAAA,EAAA;YACA;YAEA,OAAA,CAAA,GAAA,kOAAA,CAAA,qBAAA,EACA,6EAAA,CAAA,GAAA,kOAAA,CAAA,oBAAA,KACA;gBACA,OAAA,CAAA,GAAA,kOAAA,CAAA,YAAA,EAAA,OAAA;oBACA,MAAA,kBAAA,CAAA,CAAA,EAAA,OAAA,CAAA,EAAA,mBAAA,CAAA;oBAEA;;;oBAeA,MAAA,WAAA,MAAA,CAAA,GAAA,kPAAA,CAAA,uBAAA,EACA,IAAA,iBAAA,KAAA,CAAA,SAAA,OACA,CAAA;wBACA,gFAAA;wBACA,IAAA,CAAA,GAAA,qYAAA,CAAA,4BAAA,EAAA;6BAEA,IAAA,CAAA,GAAA,qYAAA,CAAA,4BAAA,EAAA,QAAA;4BACA,IAAA,YAAA;gCACA,CAAA,GAAA,0OAAA,CAAA,gBAAA,EAAA,YAAA;4BACA;4BACA,IAAA,UAAA;gCACA,CAAA,GAAA,0OAAA,CAAA,gBAAA,EAAA,UAAA;4BACA;wBACA,OAAA;4BACA,CAAA,GAAA,4NAAA,CAAA,mBAAA,EAAA,OAAA;gCACA,WAAA;oCACA,SAAA;gCACA;4BACA;wBACA;oBACA;oBAGA,IAAA;wBACA,IAAA,SAAA,MAAA,EAAA;4BACA,IAAA,YAAA;gCACA,CAAA,GAAA,0OAAA,CAAA,gBAAA,EAAA,YAAA,SAAA,MAAA;4BACA;4BACA,IAAA,UAAA;gCACA,CAAA,GAAA,0OAAA,CAAA,gBAAA,EAAA,UAAA,SAAA,MAAA;4BACA;wBACA;oBACA,EAAA,OAAA;oBACA,2CAAA;oBACA;oBAEA,OAAA;gBACA;YACA;QAEA;IACA;AACA"}},
    {"offset": {"line": 2425, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2430, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry+nextjs@9.37.0_@opentelemetry+context-async-hooks@2.0.1_@opentelemetry+core@2.0.1_@ope_lts32b4w4r2y4zqntr2x66zi2m/node_modules/@sentry/nextjs/src/common/wrapServerComponentWithSentry.ts"],"sourcesContent":["import type { RequestEventData } from '@sentry/core';\nimport {\n  captureException,\n  getActiveSpan,\n  getCapturedScopesOnSpan,\n  getClient,\n  getRootSpan,\n  handleCallbackErrors,\n  propagationContextFromHeaders,\n  Scope,\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n  SEMANTIC_ATTRIBUTE_SENTRY_SOURCE,\n  setCapturedScopesOnSpan,\n  SPAN_STATUS_ERROR,\n  SPAN_STATUS_OK,\n  spanToJSON,\n  startSpanManual,\n  vercelWaitUntil,\n  winterCGHeadersToDict,\n  withIsolationScope,\n  withScope,\n} from '@sentry/core';\nimport { isNotFoundNavigationError, isRedirectNavigationError } from '../common/nextNavigationErrorUtils';\nimport type { ServerComponentContext } from '../common/types';\nimport { TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL } from './span-attributes-with-logic-attached';\nimport { flushSafelyWithTimeout } from './utils/responseEnd';\nimport { commonObjectToIsolationScope, commonObjectToPropagationContext } from './utils/tracingUtils';\nimport { getSanitizedRequestUrl } from './utils/urls';\n\n/**\n * Wraps an `app` directory server component with Sentry error instrumentation.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function wrapServerComponentWithSentry<F extends (...args: any[]) => any>(\n  appDirComponent: F,\n  context: ServerComponentContext,\n): F {\n  const { componentRoute, componentType } = context;\n  // Even though users may define server components as async functions, for the client bundles\n  // Next.js will turn them into synchronous functions and it will transform any `await`s into instances of the `use`\n  // hook. 🤯\n  return new Proxy(appDirComponent, {\n    apply: (originalFunction, thisArg, args) => {\n      const requestTraceId = getActiveSpan()?.spanContext().traceId;\n      const isolationScope = commonObjectToIsolationScope(context.headers);\n\n      let pathname = undefined as string | undefined;\n      const activeSpan = getActiveSpan();\n      if (activeSpan) {\n        const rootSpan = getRootSpan(activeSpan);\n        const { scope } = getCapturedScopesOnSpan(rootSpan);\n        setCapturedScopesOnSpan(rootSpan, scope ?? new Scope(), isolationScope);\n\n        const spanData = spanToJSON(rootSpan);\n\n        if (spanData.data && 'http.target' in spanData.data) {\n          pathname = spanData.data['http.target']?.toString();\n        }\n      }\n\n      const headersDict = context.headers ? winterCGHeadersToDict(context.headers) : undefined;\n\n      let params: Record<string, string> | undefined = undefined;\n\n      if (getClient()?.getOptions().sendDefaultPii) {\n        const props: unknown = args[0];\n        params =\n          props && typeof props === 'object' && 'params' in props\n            ? (props.params as Record<string, string>)\n            : undefined;\n      }\n\n      isolationScope.setSDKProcessingMetadata({\n        normalizedRequest: {\n          headers: headersDict,\n          url: getSanitizedRequestUrl(componentRoute, params, headersDict, pathname),\n        } satisfies RequestEventData,\n      });\n\n      return withIsolationScope(isolationScope, () => {\n        return withScope(scope => {\n          scope.setTransactionName(`${componentType} Server Component (${componentRoute})`);\n\n          if (process.env.NEXT_RUNTIME === 'edge') {\n            const propagationContext = commonObjectToPropagationContext(\n              context.headers,\n              propagationContextFromHeaders(headersDict?.['sentry-trace'], headersDict?.['baggage']),\n            );\n\n            if (requestTraceId) {\n              propagationContext.traceId = requestTraceId;\n            }\n\n            scope.setPropagationContext(propagationContext);\n          }\n\n          const activeSpan = getActiveSpan();\n          if (activeSpan) {\n            const rootSpan = getRootSpan(activeSpan);\n            const sentryTrace = headersDict?.['sentry-trace'];\n            if (sentryTrace) {\n              rootSpan.setAttribute(TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL, sentryTrace);\n            }\n          }\n\n          return startSpanManual(\n            {\n              op: 'function.nextjs',\n              name: `${componentType} Server Component (${componentRoute})`,\n              attributes: {\n                [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'component',\n                [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.function.nextjs',\n                'sentry.nextjs.ssr.function.type': componentType,\n                'sentry.nextjs.ssr.function.route': componentRoute,\n              },\n            },\n            span => {\n              return handleCallbackErrors(\n                () => originalFunction.apply(thisArg, args),\n                error => {\n                  // When you read this code you might think: \"Wait a minute, shouldn't we set the status on the root span too?\"\n                  // The answer is: \"No.\" - The status of the root span is determined by whatever status code Next.js decides to put on the response.\n                  if (isNotFoundNavigationError(error)) {\n                    // We don't want to report \"not-found\"s\n                    span.setStatus({ code: SPAN_STATUS_ERROR, message: 'not_found' });\n                  } else if (isRedirectNavigationError(error)) {\n                    // We don't want to report redirects\n                    span.setStatus({ code: SPAN_STATUS_OK });\n                  } else {\n                    span.setStatus({ code: SPAN_STATUS_ERROR, message: 'internal_error' });\n                    captureException(error, {\n                      mechanism: {\n                        handled: false,\n                      },\n                    });\n                  }\n                },\n                () => {\n                  span.end();\n                  vercelWaitUntil(flushSafelyWithTimeout());\n                },\n              );\n            },\n          );\n        });\n      });\n    },\n  });\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 2554, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}