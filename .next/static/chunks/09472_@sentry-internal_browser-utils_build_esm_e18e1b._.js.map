{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry-internal+browser-utils@9.36.0/node_modules/@sentry-internal/browser-utils/src/types.ts"],"sourcesContent":["import type {\n  FetchBreadcrumbHint,\n  HandlerDataFetch,\n  SentryWrappedXMLHttpRequest,\n  XhrBreadcrumbHint,\n} from '@sentry/core';\nimport { GLOBAL_OBJ } from '@sentry/core';\n\nexport const WINDOW = GLOBAL_OBJ as typeof GLOBAL_OBJ &\n  // document is not available in all browser environments (webworkers). We make it optional so you have to explicitly check for it\n  Omit<Window, 'document'> &\n  Partial<Pick<Window, 'document'>>;\n\nexport type NetworkMetaWarning =\n  | 'MAYBE_JSON_TRUNCATED'\n  | 'TEXT_TRUNCATED'\n  | 'URL_SKIPPED'\n  | 'BODY_PARSE_ERROR'\n  | 'BODY_PARSE_TIMEOUT'\n  | 'UNPARSEABLE_BODY_TYPE';\n\ntype RequestBody = null | Blob | BufferSource | FormData | URLSearchParams | string;\n\nexport type XhrHint = XhrBreadcrumbHint & {\n  xhr: XMLHttpRequest & SentryWrappedXMLHttpRequest;\n  input?: RequestBody;\n};\nexport type FetchHint = FetchBreadcrumbHint & {\n  input: HandlerDataFetch['args'];\n  response: Response;\n};\n"],"names":[],"mappings":";;;;;;AAQO,MAAM,SAAS,uOAAA,CAAA,aAAA"}},
    {"offset": {"line": 14, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 19, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry-internal+browser-utils@9.36.0/node_modules/@sentry-internal/browser-utils/src/instrument/history.ts"],"sourcesContent":["import type { HandlerDataHistory } from '@sentry/core';\nimport { addHandler, fill, maybeInstrument, supportsHistory, triggerHandlers } from '@sentry/core';\nimport { WINDOW } from '../types';\n\nlet lastHref: string | undefined;\n\n/**\n * Add an instrumentation handler for when a fetch request happens.\n * The handler function is called once when the request starts and once when it ends,\n * which can be identified by checking if it has an `endTimestamp`.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nexport function addHistoryInstrumentationHandler(handler: (data: HandlerDataHistory) => void): void {\n  const type = 'history';\n  addHandler(type, handler);\n  maybeInstrument(type, instrumentHistory);\n}\n\n/**\n * Exported just for testing\n */\nexport function instrumentHistory(): void {\n  // The `popstate` event may also be triggered on `pushState`, but it may not always reliably be emitted by the browser\n  // Which is why we also monkey-patch methods below, in addition to this\n  WINDOW.addEventListener('popstate', () => {\n    const to = WINDOW.location.href;\n    // keep track of the current URL state, as we always receive only the updated state\n    const from = lastHref;\n    lastHref = to;\n\n    if (from === to) {\n      return;\n    }\n\n    const handlerData = { from, to } satisfies HandlerDataHistory;\n    triggerHandlers('history', handlerData);\n  });\n\n  // Just guard against this not being available, in weird environments\n  if (!supportsHistory()) {\n    return;\n  }\n\n  function historyReplacementFunction(originalHistoryFunction: () => void): () => void {\n    return function (this: History, ...args: unknown[]): void {\n      const url = args.length > 2 ? args[2] : undefined;\n      if (url) {\n        const from = lastHref;\n\n        // Ensure the URL is absolute\n        // this can be either a path, then it is relative to the current origin\n        // or a full URL of the current origin - other origins are not allowed\n        // See: https://developer.mozilla.org/en-US/docs/Web/API/History/pushState#url\n        // coerce to string (this is what pushState does)\n        const to = getAbsoluteUrl(String(url));\n\n        // keep track of the current URL state, as we always receive only the updated state\n        lastHref = to;\n\n        if (from === to) {\n          return originalHistoryFunction.apply(this, args);\n        }\n\n        const handlerData = { from, to } satisfies HandlerDataHistory;\n        triggerHandlers('history', handlerData);\n      }\n      return originalHistoryFunction.apply(this, args);\n    };\n  }\n\n  fill(WINDOW.history, 'pushState', historyReplacementFunction);\n  fill(WINDOW.history, 'replaceState', historyReplacementFunction);\n}\n\nfunction getAbsoluteUrl(urlOrPath: string): string {\n  try {\n    const url = new URL(urlOrPath, WINDOW.location.origin);\n    return url.toString();\n  } catch {\n    // fallback, just do nothing\n    return urlOrPath;\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;;AAIA,IAAI;AAEJ;;;;;;;CAOA,GACO,SAAS,iCAAiC,OAAO;IACtD,MAAM,OAAO;IACb,CAAA,GAAA,2OAAA,CAAA,aAAU,AAAV,EAAW,MAAM;IACjB,CAAA,GAAA,2OAAA,CAAA,kBAAe,AAAf,EAAgB,MAAM;AACxB;AAEA;;CAEA,GACO,SAAS;IAChB,sHAAA;IACA,uEAAA;IACE,0QAAA,CAAA,SAAM,CAAC,gBAAgB,CAAC,YAAY;QAClC,MAAM,KAAK,0QAAA,CAAA,SAAM,CAAC,QAAQ,CAAC,IAAI;QACnC,mFAAA;QACI,MAAM,OAAO;QACb,WAAW;QAEX,IAAI,SAAS,IAAI;YACf;QACN;QAEI,MAAM,cAAc;YAAE;YAAM;QAAA;QAC5B,CAAA,GAAA,2OAAA,CAAA,kBAAe,AAAf,EAAgB,WAAW;IAC/B;IAEA,qEAAA;IACE,IAAI,CAAC,CAAA,GAAA,sOAAA,CAAA,kBAAe,AAAf,KAAmB;QACtB;IACJ;IAEE,SAAS,2BAA2B,uBAAuB;QACzD,OAAO,SAAyB,GAAG,IAAI;YACrC,MAAM,MAAM,KAAK,MAAO,GAAE,IAAI,IAAI,CAAC,EAAC,GAAI;YACxC,IAAI,KAAK;gBACP,MAAM,OAAO;gBAErB,6BAAA;gBACA,uEAAA;gBACA,sEAAA;gBACA,8EAAA;gBACA,iDAAA;gBACQ,MAAM,KAAK,eAAe,OAAO;gBAEzC,mFAAA;gBACQ,WAAW;gBAEX,IAAI,SAAS,IAAI;oBACf,OAAO,wBAAwB,KAAK,CAAC,IAAI,EAAE;gBACrD;gBAEQ,MAAM,cAAc;oBAAE;oBAAM;gBAAA;gBAC5B,CAAA,GAAA,2OAAA,CAAA,kBAAe,AAAf,EAAgB,WAAW;YACnC;YACM,OAAO,wBAAwB,KAAK,CAAC,IAAI,EAAE;QACjD;IACA;IAEE,CAAA,GAAA,oOAAA,CAAA,OAAI,AAAJ,EAAK,0QAAA,CAAA,SAAM,CAAC,OAAO,EAAE,aAAa;IAClC,CAAA,GAAA,oOAAA,CAAA,OAAI,AAAJ,EAAK,0QAAA,CAAA,SAAM,CAAC,OAAO,EAAE,gBAAgB;AACvC;AAEA,SAAS,eAAe,SAAS;IAC/B,IAAI;QACF,MAAM,MAAM,IAAI,IAAI,WAAW,0QAAA,CAAA,SAAM,CAAC,QAAQ,CAAC,MAAM;QACrD,OAAO,IAAI,QAAQ;IACvB,EAAI,OAAM;QACV,4BAAA;QACI,OAAO;IACX;AACA"}},
    {"offset": {"line": 105, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 110, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry-internal+browser-utils@9.36.0/node_modules/@sentry-internal/browser-utils/src/debug-build.ts"],"sourcesContent":["declare const __DEBUG_BUILD__: boolean;\n\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nexport const DEBUG_BUILD = __DEBUG_BUILD__;\n"],"names":[],"mappings":"AAEA;;;;CAIA;;;AACO,MAAM,cAA6B,OAAA,qBAAA,eAAA"}},
    {"offset": {"line": 120, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 125, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry-internal+browser-utils@9.36.0/node_modules/@sentry-internal/browser-utils/src/metrics/web-vitals/lib/bindReporter.ts"],"sourcesContent":["/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { MetricRatingThresholds, MetricType } from '../types';\n\nconst getRating = (value: number, thresholds: MetricRatingThresholds): MetricType['rating'] => {\n  if (value > thresholds[1]) {\n    return 'poor';\n  }\n  if (value > thresholds[0]) {\n    return 'needs-improvement';\n  }\n  return 'good';\n};\n\nexport const bindReporter = <MetricName extends MetricType['name']>(\n  callback: (metric: Extract<MetricType, { name: MetricName }>) => void,\n  metric: Extract<MetricType, { name: MetricName }>,\n  thresholds: MetricRatingThresholds,\n  reportAllChanges?: boolean,\n) => {\n  let prevValue: number;\n  let delta: number;\n  return (forceReport?: boolean) => {\n    if (metric.value >= 0) {\n      if (forceReport || reportAllChanges) {\n        delta = metric.value - (prevValue ?? 0);\n\n        // Report the metric if there's a non-zero delta or if no previous\n        // value exists (which can happen in the case of the document becoming\n        // hidden when the metric value is 0).\n        // See: https://github.com/GoogleChrome/web-vitals/issues/14\n        if (delta || prevValue === undefined) {\n          prevValue = metric.value;\n          metric.delta = delta;\n          metric.rating = getRating(metric.value, thresholds);\n          callback(metric);\n        }\n      }\n    }\n  };\n};\n"],"names":[],"mappings":";;;AAkBA,MAAM,YAAY,CAAC,OAAe;IAChC,IAAI,QAAQ,UAAU,CAAC,EAAE,EAAE;QACzB,OAAO;IACX;IACE,IAAI,QAAQ,UAAU,CAAC,EAAE,EAAE;QACzB,OAAO;IACX;IACE,OAAO;AACT;AAEO,MAAM,eAAe,CAC1B,UACA,QACA,YACA;IAEA,IAAI;IACJ,IAAI;IACJ,OAAO,CAAC;QACN,IAAI,OAAO,KAAM,IAAG,GAAG;YACrB,IAAI,eAAe,kBAAkB;gBACnC,QAAQ,OAAO,KAAA,GAAA,CAAS,aAAa,CAAC;gBAE9C,kEAAA;gBACA,sEAAA;gBACA,sCAAA;gBACA,4DAAA;gBACQ,IAAI,SAAS,cAAc,WAAW;oBACpC,YAAY,OAAO,KAAK;oBACxB,OAAO,KAAM,GAAE;oBACf,OAAO,MAAA,GAAS,UAAU,OAAO,KAAK,EAAE;oBACxC,SAAS;gBACnB;YACA;QACA;IACA;AACA"}},
    {"offset": {"line": 160, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 165, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry-internal+browser-utils@9.36.0/node_modules/@sentry-internal/browser-utils/src/metrics/web-vitals/lib/generateUniqueID.ts"],"sourcesContent":["/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Performantly generate a unique, 30-char string by combining a version\n * number, the current timestamp with a 13-digit number integer.\n * @return {string}\n */\nexport const generateUniqueID = () => {\n  return `v5-${Date.now()}-${Math.floor(Math.random() * (9e12 - 1)) + 1e12}`;\n};\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;CAcA,GAEA;;;;CAIA;;;AACa,MAAA,mBAAmB;IAC9B,OAAO,CAAC,GAAG,EAAE,KAAK,GAAG,GAAG,CAAC,EAAE,KAAK,KAAK,CAAC,KAAK,MAAM,KAAC,CAAK,OAAO,CAAC,KAAK,KAAK,CAAA;AACA"}},
    {"offset": {"line": 191, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 196, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry-internal+browser-utils@9.36.0/node_modules/@sentry-internal/browser-utils/src/metrics/web-vitals/lib/getNavigationEntry.ts"],"sourcesContent":["/*\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { WINDOW } from '../../../types';\n\n// sentry-specific change:\n// add optional param to not check for responseStart (see comment below)\nexport const getNavigationEntry = (checkResponseStart = true): PerformanceNavigationTiming | void => {\n  const navigationEntry = WINDOW.performance?.getEntriesByType?.('navigation')[0];\n  // Check to ensure the `responseStart` property is present and valid.\n  // In some cases a zero value is reported by the browser (for\n  // privacy/security reasons), and in other cases (bugs) the value is\n  // negative or is larger than the current page time. Ignore these cases:\n  // - https://github.com/GoogleChrome/web-vitals/issues/137\n  // - https://github.com/GoogleChrome/web-vitals/issues/162\n  // - https://github.com/GoogleChrome/web-vitals/issues/275\n  if (\n    // sentry-specific change:\n    // We don't want to check for responseStart for our own use of `getNavigationEntry`\n    !checkResponseStart ||\n    (navigationEntry && navigationEntry.responseStart > 0 && navigationEntry.responseStart < performance.now())\n  ) {\n    return navigationEntry;\n  }\n};\n"],"names":[],"mappings":";;;;;;AAAA;;;;;;;;;;;;;;CAcA,GAIA,0BAAA;AACA,wEAAA;MACa,qBAAqB,CAAC,qBAAqB,IAAI;IAC1D,MAAM,kBAAkB,0QAAA,CAAA,SAAM,CAAC,WAAW,EAAE,mBAAmB,aAAa,CAAC,EAAE;IACjF,qEAAA;IACA,6DAAA;IACA,oEAAA;IACA,wEAAA;IACA,0DAAA;IACA,0DAAA;IACA,0DAAA;IACE,IACF,0BAAA;IACA,mFAAA;IACI,CAAC,sBACA,mBAAmB,gBAAgB,aAAA,GAAgB,KAAK,gBAAgB,aAAc,GAAE,YAAY,GAAG,IACxG;QACA,OAAO;IACX;AACA"}},
    {"offset": {"line": 235, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 240, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry-internal+browser-utils@9.36.0/node_modules/@sentry-internal/browser-utils/src/metrics/web-vitals/lib/getActivationStart.ts"],"sourcesContent":["/*\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getNavigationEntry } from './getNavigationEntry';\n\nexport const getActivationStart = (): number => {\n  const navEntry = getNavigationEntry();\n  return navEntry?.activationStart ?? 0;\n};\n"],"names":[],"mappings":";;;;;;AAAA;;;;;;;;;;;;;;CAcA,GAIa,MAAA,qBAAqB;IAChC,MAAM,WAAW,CAAA,GAAA,0TAAA,CAAA,qBAAkB,AAAlB;IACjB,OAAO,UAAU,mBAAmB;AACtC"}},
    {"offset": {"line": 266, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 271, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry-internal+browser-utils@9.36.0/node_modules/@sentry-internal/browser-utils/src/metrics/web-vitals/lib/initMetric.ts"],"sourcesContent":["/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { WINDOW } from '../../../types';\nimport type { MetricType } from '../types';\nimport { generateUniqueID } from './generateUniqueID';\nimport { getActivationStart } from './getActivationStart';\nimport { getNavigationEntry } from './getNavigationEntry';\n\nexport const initMetric = <MetricName extends MetricType['name']>(name: MetricName, value: number = -1) => {\n  const navEntry = getNavigationEntry();\n  let navigationType: MetricType['navigationType'] = 'navigate';\n\n  if (navEntry) {\n    if (WINDOW.document?.prerendering || getActivationStart() > 0) {\n      navigationType = 'prerender';\n    } else if (WINDOW.document?.wasDiscarded) {\n      navigationType = 'restore';\n    } else if (navEntry.type) {\n      navigationType = navEntry.type.replace(/_/g, '-') as MetricType['navigationType'];\n    }\n  }\n\n  // Use `entries` type specific for the metric.\n  const entries: Extract<MetricType, { name: MetricName }>['entries'] = [];\n\n  return {\n    name,\n    value,\n    rating: 'good' as const, // If needed, will be updated when reported. `const` to keep the type from widening to `string`.\n    delta: 0,\n    entries,\n    id: generateUniqueID(),\n    navigationType,\n  };\n};\n"],"names":[],"mappings":";;;;;;;;;;;;AAAA;;;;;;;;;;;;;;CAcA,GAQa,MAAA,aAAa,CAAwC,MAAkB,QAAgB,CAAA,CAAE;IACpG,MAAM,WAAW,CAAA,GAAA,0TAAA,CAAA,qBAAkB,AAAlB;IACjB,IAAI,iBAA+C;IAEnD,IAAI,UAAU;QACZ,IAAI,0QAAA,CAAA,SAAM,CAAC,QAAQ,EAAE,gBAAgB,CAAA,GAAA,0TAAA,CAAA,qBAAkB,AAAlB,MAAuB,GAAG;YAC7D,iBAAiB;QACvB,OAAW,IAAI,0QAAA,CAAA,SAAM,CAAC,QAAQ,EAAE,cAAc;YACxC,iBAAiB;QACvB,OAAW,IAAI,SAAS,IAAI,EAAE;YACxB,iBAAiB,SAAS,IAAI,CAAC,OAAO,CAAC,MAAM;QACnD;IACA;IAEA,8CAAA;IACE,MAAM,UAAgE,EAAE;IAExE,OAAO;QACL;QACA;QACA,QAAQ;QACR,OAAO;QACP;QACA,IAAI,CAAA,GAAA,wTAAA,CAAA,mBAAgB,AAAhB;QACJ;IACJ;AACA"}},
    {"offset": {"line": 323, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 328, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry-internal+browser-utils@9.36.0/node_modules/@sentry-internal/browser-utils/src/metrics/web-vitals/lib/initUnique.ts"],"sourcesContent":["/*\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst instanceMap: WeakMap<object, unknown> = new WeakMap();\n\n/**\n * A function that accepts and identity object and a class object and returns\n * either a new instance of that class or an existing instance, if the\n * identity object was previously used.\n */\nexport function initUnique<T>(identityObj: object, ClassObj: new () => T): T {\n  if (!instanceMap.get(identityObj)) {\n    instanceMap.set(identityObj, new ClassObj());\n  }\n  return instanceMap.get(identityObj)! as T;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;CAcA;;;AAEA,MAAM,cAAwC,IAAI;AAElD;;;;CAIA,GACO,SAAS,WAAc,WAAW,EAAU,QAAQ;IACzD,IAAI,CAAC,YAAY,GAAG,CAAC,cAAc;QACjC,YAAY,GAAG,CAAC,aAAa,IAAI;IACrC;IACE,OAAO,YAAY,GAAG,CAAC;AACzB"}},
    {"offset": {"line": 358, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 363, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry-internal+browser-utils@9.36.0/node_modules/@sentry-internal/browser-utils/src/metrics/web-vitals/lib/LayoutShiftManager.ts"],"sourcesContent":["/* eslint-disable jsdoc/require-jsdoc */\n/*\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class LayoutShiftManager {\n  // eslint-disable-next-line @typescript-eslint/explicit-member-accessibility\n  _onAfterProcessingUnexpectedShift?: (entry: LayoutShift) => void;\n\n  // eslint-disable-next-line @sentry-internal/sdk/no-class-field-initializers, @typescript-eslint/explicit-member-accessibility\n  _sessionValue = 0;\n  // eslint-disable-next-line @sentry-internal/sdk/no-class-field-initializers, @typescript-eslint/explicit-member-accessibility\n  _sessionEntries: LayoutShift[] = [];\n\n  // eslint-disable-next-line @typescript-eslint/explicit-member-accessibility\n  _processEntry(entry: LayoutShift) {\n    // Only count layout shifts without recent user input.\n    if (entry.hadRecentInput) return;\n\n    const firstSessionEntry = this._sessionEntries[0];\n    // This previously used `this._sessionEntries.at(-1)` but that is ES2022. We support ES2021 and earlier.\n    const lastSessionEntry = this._sessionEntries[this._sessionEntries.length - 1];\n\n    // If the entry occurred less than 1 second after the previous entry\n    // and less than 5 seconds after the first entry in the session,\n    // include the entry in the current session. Otherwise, start a new\n    // session.\n    if (\n      this._sessionValue &&\n      firstSessionEntry &&\n      lastSessionEntry &&\n      entry.startTime - lastSessionEntry.startTime < 1000 &&\n      entry.startTime - firstSessionEntry.startTime < 5000\n    ) {\n      this._sessionValue += entry.value;\n      this._sessionEntries.push(entry);\n    } else {\n      this._sessionValue = entry.value;\n      this._sessionEntries = [entry];\n    }\n\n    this._onAfterProcessingUnexpectedShift?.(entry);\n  }\n}\n"],"names":[],"mappings":"AAAA,sCAAA,GACA;;;;;;;;;;;;;;CAcA;;;AAEO,MAAM;IAAmB,aAAA;QAAA,mBAAA,SAAA,CAAA,MAAA,CAAA,IAAA,CAAA,IAAA;QAAA,mBAAA,SAAA,CAAA,OAAA,CAAA,IAAA,CAAA,IAAA;IAAA;IAChC,4EAAA;IAGA,8HAAA;IACE,SAAA;QAAA,IAAA,CAAA,aAAA,GAAgB;IAAC;IACnB,8HAAA;IACA,UAAA;QAAA,IAAA,CAAE,eAAe,GAAkB,EAAA;IAAE;IAErC,4EAAA;IACE,cAAc,KAAK,EAAe;QACpC,sDAAA;QACI,IAAI,MAAM,cAAc,EAAE;QAE1B,MAAM,oBAAoB,IAAI,CAAC,eAAe,CAAC,EAAE;QACrD,wGAAA;QACI,MAAM,mBAAmB,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,eAAe,CAAC,MAAO,GAAE,EAAE;QAElF,oEAAA;QACA,gEAAA;QACA,mEAAA;QACA,WAAA;QACI,IACE,IAAI,CAAC,aAAc,IACnB,qBACA,oBACA,MAAM,SAAU,GAAE,iBAAiB,SAAA,GAAY,QAC/C,MAAM,SAAA,GAAY,kBAAkB,SAAA,GAAY,MAChD;YACA,IAAI,CAAC,aAAA,IAAiB,MAAM,KAAK;YACjC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC;QAChC,OAAW;YACL,IAAI,CAAC,aAAA,GAAgB,MAAM,KAAK;YAChC,IAAI,CAAC,eAAA,GAAkB;gBAAC;aAAM;QACpC;QAEI,IAAI,CAAC,iCAAiC,GAAG;IAC7C;AACA"}},
    {"offset": {"line": 419, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 424, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry-internal+browser-utils@9.36.0/node_modules/@sentry-internal/browser-utils/src/metrics/web-vitals/lib/observe.ts"],"sourcesContent":["/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ninterface PerformanceEntryMap {\n  event: PerformanceEventTiming[];\n  'first-input': PerformanceEventTiming[];\n  'layout-shift': LayoutShift[];\n  'largest-contentful-paint': LargestContentfulPaint[];\n  'long-animation-frame': PerformanceLongAnimationFrameTiming[];\n  paint: PerformancePaintTiming[];\n  navigation: PerformanceNavigationTiming[];\n  resource: PerformanceResourceTiming[];\n  // Sentry-specific change:\n  // We add longtask as a supported entry type as we use this in\n  // our `instrumentPerformanceObserver` function also observes 'longtask'\n  // entries.\n  longtask: PerformanceEntry[];\n  // Sentry-specific change:\n  // We add element as a supported entry type for ElementTiming API\n  element: PerformanceEntry[];\n}\n\n/**\n * Takes a performance entry type and a callback function, and creates a\n * `PerformanceObserver` instance that will observe the specified entry type\n * with buffering enabled and call the callback _for each entry_.\n *\n * This function also feature-detects entry support and wraps the logic in a\n * try/catch to avoid errors in unsupporting browsers.\n */\nexport const observe = <K extends keyof PerformanceEntryMap>(\n  type: K,\n  callback: (entries: PerformanceEntryMap[K]) => void,\n  opts: PerformanceObserverInit = {},\n): PerformanceObserver | undefined => {\n  try {\n    if (PerformanceObserver.supportedEntryTypes.includes(type)) {\n      const po = new PerformanceObserver(list => {\n        // Delay by a microtask to workaround a bug in Safari where the\n        // callback is invoked immediately, rather than in a separate task.\n        // See: https://github.com/GoogleChrome/web-vitals/issues/277\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        Promise.resolve().then(() => {\n          callback(list.getEntries() as PerformanceEntryMap[K]);\n        });\n      });\n      po.observe({ type, buffered: true, ...opts });\n      return po;\n    }\n  } catch {\n    // Do nothing.\n  }\n  return;\n};\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;CAcA,GAqBA;;;;;;;CAOA;;;AACO,MAAM,UAAU,CACrB,MACA,UACA,OAAgC,CAAA,CAAE;IAElC,IAAI;QACF,IAAI,oBAAoB,mBAAmB,CAAC,QAAQ,CAAC,OAAO;YAC1D,MAAM,KAAK,IAAI,oBAAoB,CAAA;gBACzC,+DAAA;gBACA,mEAAA;gBACA,6DAAA;gBACA,mEAAA;gBACQ,QAAQ,OAAO,GAAG,IAAI,CAAC;oBACrB,SAAS,KAAK,UAAU;gBAClC;YACA;YACM,GAAG,OAAO,CAAC;gBAAE;gBAAM,UAAU;gBAAM,GAAG,IAAA;YAAA;YACtC,OAAO;QACb;IACA,EAAI,OAAM;IACV,cAAA;IACA;IACE;AACF"}},
    {"offset": {"line": 474, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 479, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry-internal+browser-utils@9.36.0/node_modules/@sentry-internal/browser-utils/src/metrics/web-vitals/lib/runOnce.ts"],"sourcesContent":["/*\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const runOnce = (cb: () => void) => {\n  let called = false;\n  return () => {\n    if (!called) {\n      cb();\n      called = true;\n    }\n  };\n};\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;CAcA;;;MAEa,UAAU,CAAC;IACtB,IAAI,SAAS;IACb,OAAO;QACL,IAAI,CAAC,QAAQ;YACX;YACA,SAAS;QACf;IACA;AACA"}},
    {"offset": {"line": 507, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 512, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry-internal+browser-utils@9.36.0/node_modules/@sentry-internal/browser-utils/src/metrics/web-vitals/lib/getVisibilityWatcher.ts"],"sourcesContent":["/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { WINDOW } from '../../../types';\nimport { getActivationStart } from './getActivationStart';\n\nlet firstHiddenTime = -1;\n\nconst initHiddenTime = () => {\n  // If the document is hidden when this code runs, assume it was always\n  // hidden and the page was loaded in the background, with the one exception\n  // that visibility state is always 'hidden' during prerendering, so we have\n  // to ignore that case until prerendering finishes (see: `prerenderingchange`\n  // event logic below).\n  return WINDOW.document?.visibilityState === 'hidden' && !WINDOW.document?.prerendering ? 0 : Infinity;\n};\n\nconst onVisibilityUpdate = (event: Event) => {\n  // If the document is 'hidden' and no previous hidden timestamp has been\n  // set, update it based on the current event data.\n  if (WINDOW.document!.visibilityState === 'hidden' && firstHiddenTime > -1) {\n    // If the event is a 'visibilitychange' event, it means the page was\n    // visible prior to this change, so the event timestamp is the first\n    // hidden time.\n    // However, if the event is not a 'visibilitychange' event, then it must\n    // be a 'prerenderingchange' event, and the fact that the document is\n    // still 'hidden' from the above check means the tab was activated\n    // in a background state and so has always been hidden.\n    firstHiddenTime = event.type === 'visibilitychange' ? event.timeStamp : 0;\n\n    // Remove all listeners now that a `firstHiddenTime` value has been set.\n    removeChangeListeners();\n  }\n};\n\nconst addChangeListeners = () => {\n  addEventListener('visibilitychange', onVisibilityUpdate, true);\n  // IMPORTANT: when a page is prerendering, its `visibilityState` is\n  // 'hidden', so in order to account for cases where this module checks for\n  // visibility during prerendering, an additional check after prerendering\n  // completes is also required.\n  addEventListener('prerenderingchange', onVisibilityUpdate, true);\n};\n\nconst removeChangeListeners = () => {\n  removeEventListener('visibilitychange', onVisibilityUpdate, true);\n  removeEventListener('prerenderingchange', onVisibilityUpdate, true);\n};\n\nexport const getVisibilityWatcher = () => {\n  if (WINDOW.document && firstHiddenTime < 0) {\n    // Check if we have a previous hidden `visibility-state` performance entry.\n    const activationStart = getActivationStart();\n    const firstVisibilityStateHiddenTime = !WINDOW.document.prerendering\n      ? globalThis.performance\n          .getEntriesByType('visibility-state')\n          .filter(e => e.name === 'hidden' && e.startTime > activationStart)[0]?.startTime\n      : undefined;\n\n    // Prefer that, but if it's not available and the document is hidden when\n    // this code runs, assume it was hidden since navigation start. This isn't\n    // a perfect heuristic, but it's the best we can do until the\n    // `visibility-state` performance entry becomes available in all browsers.\n    firstHiddenTime = firstVisibilityStateHiddenTime ?? initHiddenTime();\n    // We're still going to listen to for changes so we can handle things like\n    // bfcache restores and/or prerender without having to examine individual\n    // timestamps in detail.\n    addChangeListeners();\n  }\n  return {\n    get firstHiddenTime() {\n      return firstHiddenTime;\n    },\n  };\n};\n"],"names":[],"mappings":";;;;;;;;AAAA;;;;;;;;;;;;;;CAcA,GAKA,IAAI,kBAAkB,CAAA;AAEtB,MAAM,iBAAiB;IACvB,sEAAA;IACA,2EAAA;IACA,2EAAA;IACA,6EAAA;IACA,sBAAA;IACE,OAAO,0QAAA,CAAA,SAAM,CAAC,QAAQ,EAAE,oBAAoB,YAAY,CAAC,0QAAA,CAAA,SAAM,CAAC,QAAQ,EAAE,eAAe,IAAI;AAC/F;AAEA,MAAM,qBAAqB,CAAC;IAC5B,wEAAA;IACA,kDAAA;IACE,IAAI,0QAAA,CAAA,SAAM,CAAC,QAAQ,CAAE,eAAA,KAAoB,YAAY,kBAAkB,CAAA,GAAI;QAC7E,oEAAA;QACA,oEAAA;QACA,eAAA;QACA,wEAAA;QACA,qEAAA;QACA,kEAAA;QACA,uDAAA;QACI,kBAAkB,MAAM,IAAK,KAAI,qBAAqB,MAAM,SAAU,GAAE;QAE5E,wEAAA;QACI;IACJ;AACA;AAEA,MAAM,qBAAqB;IACzB,iBAAiB,oBAAoB,oBAAoB;IAC3D,mEAAA;IACA,0EAAA;IACA,yEAAA;IACA,8BAAA;IACE,iBAAiB,sBAAsB,oBAAoB;AAC7D;AAEA,MAAM,wBAAwB;IAC5B,oBAAoB,oBAAoB,oBAAoB;IAC5D,oBAAoB,sBAAsB,oBAAoB;AAChE;AAEa,MAAA,uBAAuB;IAClC,IAAI,0QAAA,CAAA,SAAM,CAAC,QAAA,IAAY,kBAAkB,GAAG;QAC9C,2EAAA;QACI,MAAM,kBAAkB,CAAA,GAAA,0TAAA,CAAA,qBAAkB,AAAlB;QACxB,MAAM,iCAAiC,CAAC,0QAAA,CAAA,SAAM,CAAC,QAAQ,CAAC,YAAA,GACpD,WAAW,WAAA,CACR,gBAAgB,CAAC,oBACjB,MAAM,CAAC,CAAA,IAAK,EAAE,IAAA,KAAS,YAAY,EAAE,SAAA,GAAY,gBAAgB,CAAC,EAAE,EAAE,YACzE;QAER,yEAAA;QACA,0EAAA;QACA,6DAAA;QACA,0EAAA;QACI,kBAAkB,kCAAkC;QACxD,0EAAA;QACA,yEAAA;QACA,wBAAA;QACI;IACJ;IACE,OAAO;QACL,IAAI,mBAAkB;YACpB,OAAO;QACb;IACA;AACA"}},
    {"offset": {"line": 594, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 599, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry-internal+browser-utils@9.36.0/node_modules/@sentry-internal/browser-utils/src/metrics/web-vitals/lib/whenActivated.ts"],"sourcesContent":["/*\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { WINDOW } from '../../../types';\n\nexport const whenActivated = (callback: () => void) => {\n  if (WINDOW.document?.prerendering) {\n    addEventListener('prerenderingchange', () => callback(), true);\n  } else {\n    callback();\n  }\n};\n"],"names":[],"mappings":";;;;;;AAAA;;;;;;;;;;;;;;CAcA,SAIa,gBAAgB,CAAC;IAC5B,IAAI,0QAAA,CAAA,SAAM,CAAC,QAAQ,EAAE,cAAc;QACjC,iBAAiB,sBAAsB,IAAM,YAAY;IAC7D,OAAS;QACL;IACJ;AACA"}},
    {"offset": {"line": 628, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 633, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry-internal+browser-utils@9.36.0/node_modules/@sentry-internal/browser-utils/src/metrics/web-vitals/onFCP.ts"],"sourcesContent":["/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bindReporter } from './lib/bindReporter';\nimport { getActivationStart } from './lib/getActivationStart';\nimport { getVisibilityWatcher } from './lib/getVisibilityWatcher';\nimport { initMetric } from './lib/initMetric';\nimport { observe } from './lib/observe';\nimport { whenActivated } from './lib/whenActivated';\nimport type { FCPMetric, MetricRatingThresholds, ReportOpts } from './types';\n\n/** Thresholds for FCP. See https://web.dev/articles/fcp#what_is_a_good_fcp_score */\nexport const FCPThresholds: MetricRatingThresholds = [1800, 3000];\n\n/**\n * Calculates the [FCP](https://web.dev/articles/fcp) value for the current page and\n * calls the `callback` function once the value is ready, along with the\n * relevant `paint` performance entry used to determine the value. The reported\n * value is a `DOMHighResTimeStamp`.\n */\nexport const onFCP = (onReport: (metric: FCPMetric) => void, opts: ReportOpts = {}) => {\n  whenActivated(() => {\n    const visibilityWatcher = getVisibilityWatcher();\n    const metric = initMetric('FCP');\n    let report: ReturnType<typeof bindReporter>;\n\n    const handleEntries = (entries: FCPMetric['entries']) => {\n      for (const entry of entries) {\n        if (entry.name === 'first-contentful-paint') {\n          po!.disconnect();\n\n          // Only report if the page wasn't hidden prior to the first paint.\n          if (entry.startTime < visibilityWatcher.firstHiddenTime) {\n            // The activationStart reference is used because FCP should be\n            // relative to page activation rather than navigation start if the\n            // page was prerendered. But in cases where `activationStart` occurs\n            // after the FCP, this time should be clamped at 0.\n            metric.value = Math.max(entry.startTime - getActivationStart(), 0);\n            metric.entries.push(entry);\n            report(true);\n          }\n        }\n      }\n    };\n\n    const po = observe('paint', handleEntries);\n\n    if (po) {\n      report = bindReporter(onReport, metric, FCPThresholds, opts.reportAllChanges);\n    }\n  });\n};\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;CAcA,GAUA,kFAAA,GACO,MAAM,gBAAwC;IAAC;IAAM;CAAI;AAEhE;;;;;CAKA,GACa,MAAA,QAAQ,CAAC,UAAuC,OAAmB,CAAA,CAAE;IAChF,CAAA,GAAA,qTAAA,CAAA,gBAAa,AAAb,EAAc;QACZ,MAAM,oBAAoB,CAAA,GAAA,4TAAA,CAAA,uBAAoB,AAApB;QAC1B,MAAM,SAAS,CAAA,GAAA,kTAAA,CAAA,aAAU,AAAV,EAAW;QAC1B,IAAI;QAEJ,MAAM,gBAAgB,CAAC;YACrB,KAAK,MAAM,SAAS,QAAS;gBAC3B,IAAI,MAAM,IAAK,KAAI,0BAA0B;oBAC3C,GAAI,UAAU;oBAExB,kEAAA;oBACU,IAAI,MAAM,SAAA,GAAY,kBAAkB,eAAe,EAAE;wBACnE,8DAAA;wBACA,kEAAA;wBACA,oEAAA;wBACA,mDAAA;wBACY,OAAO,KAAA,GAAQ,KAAK,GAAG,CAAC,MAAM,SAAA,GAAY,CAAA,GAAA,0TAAA,CAAA,qBAAkB,AAAlB,KAAsB;wBAChE,OAAO,OAAO,CAAC,IAAI,CAAC;wBACpB,OAAO;oBACnB;gBACA;YACA;QACA;QAEI,MAAM,KAAK,CAAA,GAAA,+SAAA,CAAA,UAAO,AAAP,EAAQ,SAAS;QAE5B,IAAI,IAAI;YACN,SAAS,CAAA,GAAA,oTAAA,CAAA,eAAY,AAAZ,EAAa,UAAU,QAAQ,eAAe,KAAK,gBAAgB;QAClF;IACA;AACA"}},
    {"offset": {"line": 703, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 708, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry-internal+browser-utils@9.36.0/node_modules/@sentry-internal/browser-utils/src/metrics/web-vitals/getCLS.ts"],"sourcesContent":["/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { WINDOW } from '../../types';\nimport { bindReporter } from './lib/bindReporter';\nimport { initMetric } from './lib/initMetric';\nimport { initUnique } from './lib/initUnique';\nimport { LayoutShiftManager } from './lib/LayoutShiftManager';\nimport { observe } from './lib/observe';\nimport { runOnce } from './lib/runOnce';\nimport { onFCP } from './onFCP';\nimport type { CLSMetric, MetricRatingThresholds, ReportOpts } from './types';\n\n/** Thresholds for CLS. See https://web.dev/articles/cls#what_is_a_good_cls_score */\nexport const CLSThresholds: MetricRatingThresholds = [0.1, 0.25];\n\n/**\n * Calculates the [CLS](https://web.dev/articles/cls) value for the current page and\n * calls the `callback` function once the value is ready to be reported, along\n * with all `layout-shift` performance entries that were used in the metric\n * value calculation. The reported value is a `double` (corresponding to a\n * [layout shift score](https://web.dev/articles/cls#layout_shift_score)).\n *\n * If the `reportAllChanges` configuration option is set to `true`, the\n * `callback` function will be called as soon as the value is initially\n * determined as well as any time the value changes throughout the page\n * lifespan.\n *\n * _**Important:** CLS should be continually monitored for changes throughout\n * the entire lifespan of a page—including if the user returns to the page after\n * it's been hidden/backgrounded. However, since browsers often [will not fire\n * additional callbacks once the user has backgrounded a\n * page](https://developer.chrome.com/blog/page-lifecycle-api/#advice-hidden),\n * `callback` is always called when the page's visibility state changes to\n * hidden. As a result, the `callback` function might be called multiple times\n * during the same page load._\n */\nexport const onCLS = (onReport: (metric: CLSMetric) => void, opts: ReportOpts = {}) => {\n  // Start monitoring FCP so we can only report CLS if FCP is also reported.\n  // Note: this is done to match the current behavior of CrUX.\n  onFCP(\n    runOnce(() => {\n      const metric = initMetric('CLS', 0);\n      let report: ReturnType<typeof bindReporter>;\n\n      const layoutShiftManager = initUnique(opts, LayoutShiftManager);\n\n      const handleEntries = (entries: LayoutShift[]) => {\n        for (const entry of entries) {\n          layoutShiftManager._processEntry(entry);\n        }\n\n        // If the current session value is larger than the current CLS value,\n        // update CLS and the entries contributing to it.\n        if (layoutShiftManager._sessionValue > metric.value) {\n          metric.value = layoutShiftManager._sessionValue;\n          metric.entries = layoutShiftManager._sessionEntries;\n          report();\n        }\n      };\n\n      const po = observe('layout-shift', handleEntries);\n      if (po) {\n        report = bindReporter(onReport, metric, CLSThresholds, opts!.reportAllChanges);\n\n        WINDOW.document?.addEventListener('visibilitychange', () => {\n          if (WINDOW.document?.visibilityState === 'hidden') {\n            handleEntries(po.takeRecords() as CLSMetric['entries']);\n            report(true);\n          }\n        });\n\n        // Queue a task to report (if nothing else triggers a report first).\n        // This allows CLS to be reported as soon as FCP fires when\n        // `reportAllChanges` is true.\n        WINDOW?.setTimeout?.(report);\n      }\n    }),\n  );\n};\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;CAcA,GAYA,kFAAA,GACO,MAAM,gBAAwC;IAAC;IAAK;CAAI;AAE/D;;;;;;;;;;;;;;;;;;;;CAoBA,GACa,MAAA,QAAQ,CAAC,UAAuC,OAAmB,CAAA,CAAE;IAClF,0EAAA;IACA,4DAAA;IACE,CAAA,GAAA,sSAAA,CAAA,QAAK,AAAL,EACE,CAAA,GAAA,+SAAA,CAAA,UAAO,AAAP,EAAQ;QACN,MAAM,SAAS,CAAA,GAAA,kTAAA,CAAA,aAAU,AAAV,EAAW,OAAO;QACjC,IAAI;QAEJ,MAAM,qBAAqB,CAAA,GAAA,kTAAA,CAAA,aAAU,AAAV,EAAW,MAAM,0TAAA,CAAA,qBAAkB;QAE9D,MAAM,gBAAgB,CAAC;YACrB,KAAK,MAAM,SAAS,QAAS;gBAC3B,mBAAmB,aAAa,CAAC;YAC3C;YAEA,qEAAA;YACA,iDAAA;YACQ,IAAI,mBAAmB,aAAA,GAAgB,OAAO,KAAK,EAAE;gBACnD,OAAO,KAAA,GAAQ,mBAAmB,aAAa;gBAC/C,OAAO,OAAA,GAAU,mBAAmB,eAAe;gBACnD;YACV;QACA;QAEM,MAAM,KAAK,CAAA,GAAA,+SAAA,CAAA,UAAO,AAAP,EAAQ,gBAAgB;QACnC,IAAI,IAAI;YACN,SAAS,CAAA,GAAA,oTAAA,CAAA,eAAY,AAAZ,EAAa,UAAU,QAAQ,eAAe,KAAM,gBAAgB;YAE7E,0QAAA,CAAA,SAAM,CAAC,QAAQ,EAAE,iBAAiB,oBAAoB;gBACpD,IAAI,0QAAA,CAAA,SAAM,CAAC,QAAQ,EAAE,oBAAoB,UAAU;oBACjD,cAAc,GAAG,WAAW;oBAC5B,OAAO;gBACnB;YACA;YAEA,oEAAA;YACA,2DAAA;YACA,8BAAA;YACQ,0QAAA,CAAA,SAAM,EAAE,aAAa;QAC7B;IACA;AAEA"}},
    {"offset": {"line": 804, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 809, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry-internal+browser-utils@9.36.0/node_modules/@sentry-internal/browser-utils/src/metrics/web-vitals/lib/onHidden.ts"],"sourcesContent":["/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { WINDOW } from '../../../types';\n\nexport interface OnHiddenCallback {\n  (event: Event): void;\n}\n\n// Sentry-specific change:\n// This function's logic was NOT updated to web-vitals 4.2.4 or 5.x but we continue\n// to use the web-vitals 3.5.2 versiondue to us having stricter browser support.\n// PR with context that made the changes: https://github.com/GoogleChrome/web-vitals/pull/442/files#r1530492402\n// The PR removed listening to the `pagehide` event, in favour of only listening to `visibilitychange` event.\n// This is \"more correct\" but some browsers we still support (Safari <14.4) don't fully support `visibilitychange`\n// or have known bugs w.r.t the `visibilitychange` event.\n// TODO (v10): If we decide to drop support for Safari 14.4, we can use the logic from web-vitals 4.2.4\n// In this case, we also need to update the integration tests that currently trigger the `pagehide` event to\n// simulate the page being hidden.\nexport const onHidden = (cb: OnHiddenCallback) => {\n  const onHiddenOrPageHide = (event: Event) => {\n    if (event.type === 'pagehide' || WINDOW.document?.visibilityState === 'hidden') {\n      cb(event);\n    }\n  };\n\n  if (WINDOW.document) {\n    addEventListener('visibilitychange', onHiddenOrPageHide, true);\n    // Some browsers have buggy implementations of visibilitychange,\n    // so we use pagehide in addition, just to be safe.\n    addEventListener('pagehide', onHiddenOrPageHide, true);\n  }\n};\n"],"names":[],"mappings":";;;;;;AAAA;;;;;;;;;;;;;;CAcA,GAQA,0BAAA;AACA,mFAAA;AACA,gFAAA;AACA,+GAAA;AACA,6GAAA;AACA,kHAAA;AACA,yDAAA;AACA,uGAAA;AACA,4GAAA;AACA,kCAAA;MACa,WAAW,CAAC;IACvB,MAAM,qBAAqB,CAAC;QAC1B,IAAI,MAAM,IAAA,KAAS,cAAc,0QAAA,CAAA,SAAM,CAAC,QAAQ,EAAE,oBAAoB,UAAU;YAC9E,GAAG;QACT;IACA;IAEE,IAAI,0QAAA,CAAA,SAAM,CAAC,QAAQ,EAAE;QACnB,iBAAiB,oBAAoB,oBAAoB;QAC7D,gEAAA;QACA,mDAAA;QACI,iBAAiB,YAAY,oBAAoB;IACrD;AACA"}},
    {"offset": {"line": 854, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 859, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry-internal+browser-utils@9.36.0/node_modules/@sentry-internal/browser-utils/src/metrics/web-vitals/getFID.ts"],"sourcesContent":["/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * // Sentry: web-vitals removed FID reporting from v5. We're keeping it around\n * for the time being.\n * // TODO(v10): Remove FID reporting!\n */\n\nimport { bindReporter } from './lib/bindReporter';\nimport { getVisibilityWatcher } from './lib/getVisibilityWatcher';\nimport { initMetric } from './lib/initMetric';\nimport { observe } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nimport { runOnce } from './lib/runOnce';\nimport { whenActivated } from './lib/whenActivated';\nimport type { FIDMetric, MetricRatingThresholds, ReportOpts } from './types';\n\n/** Thresholds for FID. See https://web.dev/articles/fid#what_is_a_good_fid_score */\nexport const FIDThresholds: MetricRatingThresholds = [100, 300];\n\n/**\n * Calculates the [FID](https://web.dev/articles/fid) value for the current page and\n * calls the `callback` function once the value is ready, along with the\n * relevant `first-input` performance entry used to determine the value. The\n * reported value is a `DOMHighResTimeStamp`.\n *\n * _**Important:** since FID is only reported after the user interacts with the\n * page, it's possible that it will not be reported for some page loads._\n */\nexport const onFID = (onReport: (metric: FIDMetric) => void, opts: ReportOpts = {}) => {\n  whenActivated(() => {\n    const visibilityWatcher = getVisibilityWatcher();\n    const metric = initMetric('FID');\n    // eslint-disable-next-line prefer-const\n    let report: ReturnType<typeof bindReporter>;\n\n    const handleEntry = (entry: PerformanceEventTiming): void => {\n      // Only report if the page wasn't hidden prior to the first input.\n      if (entry.startTime < visibilityWatcher.firstHiddenTime) {\n        metric.value = entry.processingStart - entry.startTime;\n        metric.entries.push(entry);\n        report(true);\n      }\n    };\n\n    const handleEntries = (entries: FIDMetric['entries']) => {\n      (entries as PerformanceEventTiming[]).forEach(handleEntry);\n    };\n\n    const po = observe('first-input', handleEntries);\n\n    report = bindReporter(onReport, metric, FIDThresholds, opts.reportAllChanges);\n\n    if (po) {\n      // sentry: TODO: Figure out if we can use new whinIdleOrHidden insteard of onHidden\n      onHidden(\n        runOnce(() => {\n          handleEntries(po.takeRecords() as FIDMetric['entries']);\n          po.disconnect();\n        }),\n      );\n    }\n  });\n};\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;CAkBA,GAWA,kFAAA,GACO,MAAM,gBAAwC;IAAC;IAAK;CAAG;AAE9D;;;;;;;;CAQA,GACa,MAAA,QAAQ,CAAC,UAAuC,OAAmB,CAAA,CAAE;IAChF,CAAA,GAAA,qTAAA,CAAA,gBAAa,AAAb,EAAc;QACZ,MAAM,oBAAoB,CAAA,GAAA,4TAAA,CAAA,uBAAoB,AAApB;QAC1B,MAAM,SAAS,CAAA,GAAA,kTAAA,CAAA,aAAU,AAAV,EAAW;QAC9B,wCAAA;QACI,IAAI;QAEJ,MAAM,cAAc,CAAC;YACzB,kEAAA;YACM,IAAI,MAAM,SAAA,GAAY,kBAAkB,eAAe,EAAE;gBACvD,OAAO,KAAA,GAAQ,MAAM,eAAgB,GAAE,MAAM,SAAS;gBACtD,OAAO,OAAO,CAAC,IAAI,CAAC;gBACpB,OAAO;YACf;QACA;QAEI,MAAM,gBAAgB,CAAC;YACpB,QAAqC,OAAO,CAAC;QACpD;QAEI,MAAM,KAAK,CAAA,GAAA,+SAAA,CAAA,UAAO,AAAP,EAAQ,eAAe;QAElC,SAAS,CAAA,GAAA,oTAAA,CAAA,eAAY,AAAZ,EAAa,UAAU,QAAQ,eAAe,KAAK,gBAAgB;QAE5E,IAAI,IAAI;YACZ,mFAAA;YACM,CAAA,GAAA,gTAAA,CAAA,WAAQ,AAAR,EACE,CAAA,GAAA,+SAAA,CAAA,UAAO,AAAP,EAAQ;gBACN,cAAc,GAAG,WAAW;gBAC5B,GAAG,UAAU;YACvB;QAEA;IACA;AACA"}},
    {"offset": {"line": 938, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 943, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry-internal+browser-utils@9.36.0/node_modules/@sentry-internal/browser-utils/src/metrics/web-vitals/lib/polyfills/interactionCountPolyfill.ts"],"sourcesContent":["/*\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { observe } from '../observe';\n\ndeclare global {\n  interface Performance {\n    interactionCount: number;\n  }\n}\n\nlet interactionCountEstimate = 0;\nlet minKnownInteractionId = Infinity;\nlet maxKnownInteractionId = 0;\n\nconst updateEstimate = (entries: PerformanceEventTiming[]) => {\n  entries.forEach(e => {\n    if (e.interactionId) {\n      minKnownInteractionId = Math.min(minKnownInteractionId, e.interactionId);\n      maxKnownInteractionId = Math.max(maxKnownInteractionId, e.interactionId);\n\n      interactionCountEstimate = maxKnownInteractionId ? (maxKnownInteractionId - minKnownInteractionId) / 7 + 1 : 0;\n    }\n  });\n};\n\nlet po: PerformanceObserver | undefined;\n\n/**\n * Returns the `interactionCount` value using the native API (if available)\n * or the polyfill estimate in this module.\n */\nexport const getInteractionCount = (): number => {\n  return po ? interactionCountEstimate : performance.interactionCount || 0;\n};\n\n/**\n * Feature detects native support or initializes the polyfill if needed.\n */\nexport const initInteractionCountPolyfill = (): void => {\n  if ('interactionCount' in performance || po) return;\n\n  po = observe('event', updateEstimate, {\n    type: 'event',\n    buffered: true,\n    durationThreshold: 0,\n  } as PerformanceObserverInit);\n};\n"],"names":[],"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;CAcA,GAUA,IAAI,2BAA2B;AAC/B,IAAI,wBAAwB;AAC5B,IAAI,wBAAwB;AAE5B,MAAM,iBAAiB,CAAC;IACtB,QAAQ,OAAO,CAAC,CAAA;QACd,IAAI,EAAE,aAAa,EAAE;YACnB,wBAAwB,KAAK,GAAG,CAAC,uBAAuB,EAAE,aAAa;YACvE,wBAAwB,KAAK,GAAG,CAAC,uBAAuB,EAAE,aAAa;YAEvE,2BAA2B,wBAAwB,CAAC,wBAAwB,qBAAqB,IAAI,IAAI,IAAI;QACnH;IACA;AACA;AAEA,IAAI;AAEJ;;;CAGA,GACa,MAAA,sBAAsB;IACjC,OAAO,KAAK,2BAA2B,YAAY,gBAAiB,IAAG;AACzE;AAEA;;CAEA,GACa,MAAA,+BAA+B;IAC1C,IAAI,sBAAsB,eAAe,IAAI;IAE7C,KAAK,CAAA,GAAA,+SAAA,CAAA,UAAO,AAAP,EAAQ,SAAS,gBAAgB;QACpC,MAAM;QACN,UAAU;QACV,mBAAmB;IACvB;AACA"}},
    {"offset": {"line": 995, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1000, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry-internal+browser-utils@9.36.0/node_modules/@sentry-internal/browser-utils/src/metrics/web-vitals/lib/InteractionManager.ts"],"sourcesContent":["/*\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getInteractionCount } from './polyfills/interactionCountPolyfill.js';\n\nexport interface Interaction {\n  _latency: number;\n  // While the `id` and `entries` properties are also internal and could be\n  // mangled by prefixing with an underscore, since they correspond to public\n  // symbols there is no need to mangle them as the library will compress\n  // better if we reuse the existing names.\n  id: number;\n  entries: PerformanceEventTiming[];\n}\n\n// To prevent unnecessary memory usage on pages with lots of interactions,\n// store at most 10 of the longest interactions to consider as INP candidates.\nconst MAX_INTERACTIONS_TO_CONSIDER = 10;\n\n// Used to store the interaction count after a bfcache restore, since p98\n// interaction latencies should only consider the current navigation.\nlet prevInteractionCount = 0;\n\n/**\n * Returns the interaction count since the last bfcache restore (or for the\n * full page lifecycle if there were no bfcache restores).\n */\nconst getInteractionCountForNavigation = () => {\n  return getInteractionCount() - prevInteractionCount;\n};\n\n/**\n *\n */\nexport class InteractionManager {\n  /**\n   * A list of longest interactions on the page (by latency) sorted so the\n   * longest one is first. The list is at most MAX_INTERACTIONS_TO_CONSIDER\n   * long.\n   */\n  // eslint-disable-next-line @sentry-internal/sdk/no-class-field-initializers, @typescript-eslint/explicit-member-accessibility\n  _longestInteractionList: Interaction[] = [];\n\n  /**\n   * A mapping of longest interactions by their interaction ID.\n   * This is used for faster lookup.\n   */\n  // eslint-disable-next-line @sentry-internal/sdk/no-class-field-initializers, @typescript-eslint/explicit-member-accessibility\n  _longestInteractionMap: Map<number, Interaction> = new Map();\n\n  // eslint-disable-next-line @typescript-eslint/explicit-member-accessibility\n  _onBeforeProcessingEntry?: (entry: PerformanceEventTiming) => void;\n\n  // eslint-disable-next-line @typescript-eslint/explicit-member-accessibility\n  _onAfterProcessingINPCandidate?: (interaction: Interaction) => void;\n\n  // eslint-disable-next-line @typescript-eslint/explicit-member-accessibility, jsdoc/require-jsdoc\n  _resetInteractions() {\n    prevInteractionCount = getInteractionCount();\n    this._longestInteractionList.length = 0;\n    this._longestInteractionMap.clear();\n  }\n\n  /**\n   * Returns the estimated p98 longest interaction based on the stored\n   * interaction candidates and the interaction count for the current page.\n   */\n  // eslint-disable-next-line @typescript-eslint/explicit-member-accessibility\n  _estimateP98LongestInteraction() {\n    const candidateInteractionIndex = Math.min(\n      this._longestInteractionList.length - 1,\n      Math.floor(getInteractionCountForNavigation() / 50),\n    );\n\n    return this._longestInteractionList[candidateInteractionIndex];\n  }\n\n  /**\n   * Takes a performance entry and adds it to the list of worst interactions\n   * if its duration is long enough to make it among the worst. If the\n   * entry is part of an existing interaction, it is merged and the latency\n   * and entries list is updated as needed.\n   */\n  // eslint-disable-next-line @typescript-eslint/explicit-member-accessibility\n  _processEntry(entry: PerformanceEventTiming) {\n    this._onBeforeProcessingEntry?.(entry);\n\n    // Skip further processing for entries that cannot be INP candidates.\n    if (!(entry.interactionId || entry.entryType === 'first-input')) return;\n\n    // The least-long of the 10 longest interactions.\n    const minLongestInteraction = this._longestInteractionList.at(-1);\n\n    let interaction = this._longestInteractionMap.get(entry.interactionId!);\n\n    // Only process the entry if it's possibly one of the ten longest,\n    // or if it's part of an existing interaction.\n    if (\n      interaction ||\n      this._longestInteractionList.length < MAX_INTERACTIONS_TO_CONSIDER ||\n      // If the above conditions are false, `minLongestInteraction` will be set.\n      entry.duration > minLongestInteraction!._latency\n    ) {\n      // If the interaction already exists, update it. Otherwise create one.\n      if (interaction) {\n        // If the new entry has a longer duration, replace the old entries,\n        // otherwise add to the array.\n        if (entry.duration > interaction._latency) {\n          interaction.entries = [entry];\n          interaction._latency = entry.duration;\n        } else if (entry.duration === interaction._latency && entry.startTime === interaction.entries[0]!.startTime) {\n          interaction.entries.push(entry);\n        }\n      } else {\n        interaction = {\n          id: entry.interactionId!,\n          entries: [entry],\n          _latency: entry.duration,\n        };\n        this._longestInteractionMap.set(interaction.id, interaction);\n        this._longestInteractionList.push(interaction);\n      }\n\n      // Sort the entries by latency (descending) and keep only the top ten.\n      this._longestInteractionList.sort((a, b) => b._latency - a._latency);\n      if (this._longestInteractionList.length > MAX_INTERACTIONS_TO_CONSIDER) {\n        const removedInteractions = this._longestInteractionList.splice(MAX_INTERACTIONS_TO_CONSIDER);\n\n        for (const interaction of removedInteractions) {\n          this._longestInteractionMap.delete(interaction.id);\n        }\n      }\n\n      // Call any post-processing on the interaction\n      this._onAfterProcessingINPCandidate?.(interaction);\n    }\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1125, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1130, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry-internal+browser-utils@9.36.0/node_modules/@sentry-internal/browser-utils/src/metrics/web-vitals/lib/whenIdleOrHidden.ts"],"sourcesContent":["/*\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { WINDOW } from '../../../types.js';\nimport { onHidden } from './onHidden.js';\nimport { runOnce } from './runOnce.js';\n\n/**\n * Runs the passed callback during the next idle period, or immediately\n * if the browser's visibility state is (or becomes) hidden.\n */\nexport const whenIdleOrHidden = (cb: () => void) => {\n  const rIC = WINDOW.requestIdleCallback || WINDOW.setTimeout;\n\n  // If the document is hidden, run the callback immediately, otherwise\n  // race an idle callback with the next `visibilitychange` event.\n  if (WINDOW.document?.visibilityState === 'hidden') {\n    cb();\n  } else {\n    // eslint-disable-next-line no-param-reassign\n    cb = runOnce(cb);\n    rIC(cb);\n    // sentry: we use onHidden instead of directly listening to visibilitychange\n    // because some browsers we still support (Safari <14.4) don't fully support\n    // `visibilitychange` or have known bugs w.r.t the `visibilitychange` event.\n    onHidden(cb);\n  }\n};\n"],"names":[],"mappings":";;;;;;;;;;AAAA;;;;;;;;;;;;;;CAcA,GAMA;;;CAGA,SACa,mBAAmB,CAAC;IAC/B,MAAM,MAAM,0QAAA,CAAA,SAAM,CAAC,mBAAoB,IAAG,0QAAA,CAAA,SAAM,CAAC,UAAU;IAE7D,qEAAA;IACA,gEAAA;IACE,IAAI,0QAAA,CAAA,SAAM,CAAC,QAAQ,EAAE,oBAAoB,UAAU;QACjD;IACJ,OAAS;QACT,6CAAA;QACI,KAAK,CAAA,GAAA,+SAAA,CAAA,UAAO,AAAP,EAAQ;QACb,IAAI;QACR,4EAAA;QACA,4EAAA;QACA,4EAAA;QACI,CAAA,GAAA,gTAAA,CAAA,WAAQ,AAAR,EAAS;IACb;AACA"}},
    {"offset": {"line": 1175, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1180, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry-internal+browser-utils@9.36.0/node_modules/@sentry-internal/browser-utils/src/metrics/web-vitals/getINP.ts"],"sourcesContent":["/*\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bindReporter } from './lib/bindReporter';\nimport { initMetric } from './lib/initMetric';\nimport { initUnique } from './lib/initUnique';\nimport { InteractionManager } from './lib/InteractionManager';\nimport { observe } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nimport { initInteractionCountPolyfill } from './lib/polyfills/interactionCountPolyfill';\nimport { whenActivated } from './lib/whenActivated';\nimport { whenIdleOrHidden } from './lib/whenIdleOrHidden';\nimport type { INPMetric, INPReportOpts, MetricRatingThresholds } from './types';\n\n/** Thresholds for INP. See https://web.dev/articles/inp#what_is_a_good_inp_score */\nexport const INPThresholds: MetricRatingThresholds = [200, 500];\n\n// The default `durationThreshold` used across this library for observing\n// `event` entries via PerformanceObserver.\nconst DEFAULT_DURATION_THRESHOLD = 40;\n\n/**\n * Calculates the [INP](https://web.dev/articles/inp) value for the current\n * page and calls the `callback` function once the value is ready, along with\n * the `event` performance entries reported for that interaction. The reported\n * value is a `DOMHighResTimeStamp`.\n *\n * A custom `durationThreshold` configuration option can optionally be passed\n * to control what `event-timing` entries are considered for INP reporting. The\n * default threshold is `40`, which means INP scores of less than 40 will not\n * be reported. To avoid reporting no interactions in these cases, the library\n * will fall back to the input delay of the first interaction. Note that this\n * will not affect your 75th percentile INP value unless that value is also\n * less than 40 (well below the recommended\n * [good](https://web.dev/articles/inp#what_is_a_good_inp_score) threshold).\n *\n * If the `reportAllChanges` configuration option is set to `true`, the\n * `callback` function will be called as soon as the value is initially\n * determined as well as any time the value changes throughout the page\n * lifespan.\n *\n * _**Important:** INP should be continually monitored for changes throughout\n * the entire lifespan of a page—including if the user returns to the page after\n * it's been hidden/backgrounded. However, since browsers often [will not fire\n * additional callbacks once the user has backgrounded a\n * page](https://developer.chrome.com/blog/page-lifecycle-api/#advice-hidden),\n * `callback` is always called when the page's visibility state changes to\n * hidden. As a result, the `callback` function might be called multiple times\n * during the same page load._\n */\nexport const onINP = (onReport: (metric: INPMetric) => void, opts: INPReportOpts = {}) => {\n  // Return if the browser doesn't support all APIs needed to measure INP.\n  if (!(globalThis.PerformanceEventTiming && 'interactionId' in PerformanceEventTiming.prototype)) {\n    return;\n  }\n\n  whenActivated(() => {\n    // TODO(philipwalton): remove once the polyfill is no longer needed.\n    initInteractionCountPolyfill();\n\n    const metric = initMetric('INP');\n    // eslint-disable-next-line prefer-const\n    let report: ReturnType<typeof bindReporter>;\n\n    const interactionManager = initUnique(opts, InteractionManager);\n\n    const handleEntries = (entries: INPMetric['entries']) => {\n      // Queue the `handleEntries()` callback in the next idle task.\n      // This is needed to increase the chances that all event entries that\n      // occurred between the user interaction and the next paint\n      // have been dispatched. Note: there is currently an experiment\n      // running in Chrome (EventTimingKeypressAndCompositionInteractionId)\n      // 123+ that if rolled out fully may make this no longer necessary.\n      whenIdleOrHidden(() => {\n        for (const entry of entries) {\n          interactionManager._processEntry(entry);\n        }\n\n        const inp = interactionManager._estimateP98LongestInteraction();\n\n        if (inp && inp._latency !== metric.value) {\n          metric.value = inp._latency;\n          metric.entries = inp.entries;\n          report();\n        }\n      });\n    };\n\n    const po = observe('event', handleEntries, {\n      // Event Timing entries have their durations rounded to the nearest 8ms,\n      // so a duration of 40ms would be any event that spans 2.5 or more frames\n      // at 60Hz. This threshold is chosen to strike a balance between usefulness\n      // and performance. Running this callback for any interaction that spans\n      // just one or two frames is likely not worth the insight that could be\n      // gained.\n      durationThreshold: opts.durationThreshold ?? DEFAULT_DURATION_THRESHOLD,\n    });\n\n    report = bindReporter(onReport, metric, INPThresholds, opts.reportAllChanges);\n\n    if (po) {\n      // Also observe entries of type `first-input`. This is useful in cases\n      // where the first interaction is less than the `durationThreshold`.\n      po.observe({ type: 'first-input', buffered: true });\n\n      // sentry: we use onHidden instead of directly listening to visibilitychange\n      // because some browsers we still support (Safari <14.4) don't fully support\n      // `visibilitychange` or have known bugs w.r.t the `visibilitychange` event.\n      onHidden(() => {\n        handleEntries(po.takeRecords() as INPMetric['entries']);\n        report(true);\n      });\n    }\n  });\n};\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;CAcA,GAaA,kFAAA,GACO,MAAM,gBAAwC;IAAC;IAAK;CAAG;AAE9D,yEAAA;AACA,2CAAA;AACA,MAAM,6BAA6B;AAEnC;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA4BA,GACa,MAAA,QAAQ,CAAC,UAAuC,OAAsB,CAAA,CAAE;IACrF,wEAAA;IACE,IAAI,CAAA,CAAE,WAAW,sBAAA,IAA0B,mBAAmB,uBAAuB,SAAS,GAAG;QAC/F;IACJ;IAEE,CAAA,GAAA,qTAAA,CAAA,gBAAa,AAAb,EAAc;QAChB,oEAAA;QACI,CAAA,GAAA,6UAAA,CAAA,+BAA4B,AAA5B;QAEA,MAAM,SAAS,CAAA,GAAA,kTAAA,CAAA,aAAU,AAAV,EAAW;QAC9B,wCAAA;QACI,IAAI;QAEJ,MAAM,qBAAqB,CAAA,GAAA,kTAAA,CAAA,aAAU,AAAV,EAAW,MAAM,0TAAA,CAAA,qBAAkB;QAE9D,MAAM,gBAAgB,CAAC;YAC3B,8DAAA;YACA,qEAAA;YACA,2DAAA;YACA,+DAAA;YACA,qEAAA;YACA,mEAAA;YACM,CAAA,GAAA,wTAAA,CAAA,mBAAgB,AAAhB,EAAiB;gBACf,KAAK,MAAM,SAAS,QAAS;oBAC3B,mBAAmB,aAAa,CAAC;gBAC3C;gBAEQ,MAAM,MAAM,mBAAmB,8BAA8B;gBAE7D,IAAI,OAAO,IAAI,QAAA,KAAa,OAAO,KAAK,EAAE;oBACxC,OAAO,KAAA,GAAQ,IAAI,QAAQ;oBAC3B,OAAO,OAAA,GAAU,IAAI,OAAO;oBAC5B;gBACV;YACA;QACA;QAEI,MAAM,KAAK,CAAA,GAAA,+SAAA,CAAA,UAAO,AAAP,EAAQ,SAAS,eAAe;YAC/C,wEAAA;YACA,yEAAA;YACA,2EAAA;YACA,wEAAA;YACA,uEAAA;YACA,UAAA;YACM,mBAAmB,KAAK,iBAAA,IAAqB;QACnD;QAEI,SAAS,CAAA,GAAA,oTAAA,CAAA,eAAY,AAAZ,EAAa,UAAU,QAAQ,eAAe,KAAK,gBAAgB;QAE5E,IAAI,IAAI;YACZ,sEAAA;YACA,oEAAA;YACM,GAAG,OAAO,CAAC;gBAAE,MAAM;gBAAe,UAAU;YAAA;YAElD,4EAAA;YACA,4EAAA;YACA,4EAAA;YACM,CAAA,GAAA,gTAAA,CAAA,WAAQ,AAAR,EAAS;gBACP,cAAc,GAAG,WAAW;gBAC5B,OAAO;YACf;QACA;IACA;AACA"}},
    {"offset": {"line": 1312, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1317, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry-internal+browser-utils@9.36.0/node_modules/@sentry-internal/browser-utils/src/metrics/web-vitals/lib/LCPEntryManager.ts"],"sourcesContent":["/*\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// eslint-disable-next-line jsdoc/require-jsdoc\nexport class LCPEntryManager {\n  // eslint-disable-next-line @typescript-eslint/explicit-member-accessibility\n  _onBeforeProcessingEntry?: (entry: LargestContentfulPaint) => void;\n\n  // eslint-disable-next-line @typescript-eslint/explicit-member-accessibility, jsdoc/require-jsdoc\n  _processEntry(entry: LargestContentfulPaint) {\n    this._onBeforeProcessingEntry?.(entry);\n  }\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;CAcA,GAEA,+CAAA;;;;AACO,MAAM;IACb,4EAAA;IAGA,iGAAA;IACE,cAAc,KAAK,EAA0B;QAC3C,IAAI,CAAC,wBAAwB,GAAG;IACpC;AACA"}},
    {"offset": {"line": 1344, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1349, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry-internal+browser-utils@9.36.0/node_modules/@sentry-internal/browser-utils/src/metrics/web-vitals/getLCP.ts"],"sourcesContent":["/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { WINDOW } from '../../types';\nimport { bindReporter } from './lib/bindReporter';\nimport { getActivationStart } from './lib/getActivationStart';\nimport { getVisibilityWatcher } from './lib/getVisibilityWatcher';\nimport { initMetric } from './lib/initMetric';\nimport { initUnique } from './lib/initUnique';\nimport { LCPEntryManager } from './lib/LCPEntryManager';\nimport { observe } from './lib/observe';\nimport { runOnce } from './lib/runOnce';\nimport { whenActivated } from './lib/whenActivated';\nimport { whenIdleOrHidden } from './lib/whenIdleOrHidden';\nimport type { LCPMetric, MetricRatingThresholds, ReportOpts } from './types';\n\n/** Thresholds for LCP. See https://web.dev/articles/lcp#what_is_a_good_lcp_score */\nexport const LCPThresholds: MetricRatingThresholds = [2500, 4000];\n\n/**\n * Calculates the [LCP](https://web.dev/articles/lcp) value for the current page and\n * calls the `callback` function once the value is ready (along with the\n * relevant `largest-contentful-paint` performance entry used to determine the\n * value). The reported value is a `DOMHighResTimeStamp`.\n *\n * If the `reportAllChanges` configuration option is set to `true`, the\n * `callback` function will be called any time a new `largest-contentful-paint`\n * performance entry is dispatched, or once the final value of the metric has\n * been determined.\n */\nexport const onLCP = (onReport: (metric: LCPMetric) => void, opts: ReportOpts = {}) => {\n  whenActivated(() => {\n    const visibilityWatcher = getVisibilityWatcher();\n    const metric = initMetric('LCP');\n    let report: ReturnType<typeof bindReporter>;\n\n    const lcpEntryManager = initUnique(opts, LCPEntryManager);\n\n    const handleEntries = (entries: LCPMetric['entries']) => {\n      // If reportAllChanges is set then call this function for each entry,\n      // otherwise only consider the last one.\n      if (!opts!.reportAllChanges) {\n        // eslint-disable-next-line no-param-reassign\n        entries = entries.slice(-1);\n      }\n\n      for (const entry of entries) {\n        lcpEntryManager._processEntry(entry);\n\n        // Only report if the page wasn't hidden prior to LCP.\n        if (entry.startTime < visibilityWatcher.firstHiddenTime) {\n          // The startTime attribute returns the value of the renderTime if it is\n          // not 0, and the value of the loadTime otherwise. The activationStart\n          // reference is used because LCP should be relative to page activation\n          // rather than navigation start if the page was prerendered. But in cases\n          // where `activationStart` occurs after the LCP, this time should be\n          // clamped at 0.\n          metric.value = Math.max(entry.startTime - getActivationStart(), 0);\n          metric.entries = [entry];\n          report();\n        }\n      }\n    };\n\n    const po = observe('largest-contentful-paint', handleEntries);\n\n    if (po) {\n      report = bindReporter(onReport, metric, LCPThresholds, opts.reportAllChanges);\n\n      // Ensure this logic only runs once, since it can be triggered from\n      // any of three different event listeners below.\n      const stopListening = runOnce(() => {\n        handleEntries(po.takeRecords() as LCPMetric['entries']);\n        po.disconnect();\n        report(true);\n      });\n\n      // Stop listening after input or visibilitychange.\n      // Note: while scrolling is an input that stops LCP observation, it's\n      // unreliable since it can be programmatically generated.\n      // See: https://github.com/GoogleChrome/web-vitals/issues/75\n      for (const type of ['keydown', 'click', 'visibilitychange']) {\n        // Wrap the listener in an idle callback so it's run in a separate\n        // task to reduce potential INP impact.\n        // https://github.com/GoogleChrome/web-vitals/issues/383\n        if (WINDOW.document) {\n          addEventListener(type, () => whenIdleOrHidden(stopListening), {\n            capture: true,\n            once: true,\n          });\n        }\n      }\n    }\n  });\n};\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;CAcA,GAeA,kFAAA,GACO,MAAM,gBAAwC;IAAC;IAAM;CAAI;AAEhE;;;;;;;;;;CAUA,GACa,MAAA,QAAQ,CAAC,UAAuC,OAAmB,CAAA,CAAE;IAChF,CAAA,GAAA,qTAAA,CAAA,gBAAa,AAAb,EAAc;QACZ,MAAM,oBAAoB,CAAA,GAAA,4TAAA,CAAA,uBAAoB,AAApB;QAC1B,MAAM,SAAS,CAAA,GAAA,kTAAA,CAAA,aAAU,AAAV,EAAW;QAC1B,IAAI;QAEJ,MAAM,kBAAkB,CAAA,GAAA,kTAAA,CAAA,aAAU,AAAV,EAAW,MAAM,uTAAA,CAAA,kBAAe;QAExD,MAAM,gBAAgB,CAAC;YAC3B,qEAAA;YACA,wCAAA;YACM,IAAI,CAAC,KAAM,gBAAgB,EAAE;gBACnC,6CAAA;gBACQ,UAAU,QAAQ,KAAK,CAAC,CAAA;YAChC;YAEM,KAAK,MAAM,SAAS,QAAS;gBAC3B,gBAAgB,aAAa,CAAC;gBAEtC,sDAAA;gBACQ,IAAI,MAAM,SAAA,GAAY,kBAAkB,eAAe,EAAE;oBACjE,uEAAA;oBACA,sEAAA;oBACA,sEAAA;oBACA,yEAAA;oBACA,oEAAA;oBACA,gBAAA;oBACU,OAAO,KAAA,GAAQ,KAAK,GAAG,CAAC,MAAM,SAAA,GAAY,CAAA,GAAA,0TAAA,CAAA,qBAAkB,AAAlB,KAAsB;oBAChE,OAAO,OAAA,GAAU;wBAAC;qBAAM;oBACxB;gBACV;YACA;QACA;QAEI,MAAM,KAAK,CAAA,GAAA,+SAAA,CAAA,UAAO,AAAP,EAAQ,4BAA4B;QAE/C,IAAI,IAAI;YACN,SAAS,CAAA,GAAA,oTAAA,CAAA,eAAY,AAAZ,EAAa,UAAU,QAAQ,eAAe,KAAK,gBAAgB;YAElF,mEAAA;YACA,gDAAA;YACM,MAAM,gBAAgB,CAAA,GAAA,+SAAA,CAAA,UAAO,AAAP,EAAQ;gBAC5B,cAAc,GAAG,WAAW;gBAC5B,GAAG,UAAU;gBACb,OAAO;YACf;YAEA,kDAAA;YACA,qEAAA;YACA,yDAAA;YACA,4DAAA;YACM,KAAK,MAAM,QAAQ;gBAAC;gBAAW;gBAAS;aAAmB,CAAE;gBACnE,kEAAA;gBACA,uCAAA;gBACA,wDAAA;gBACQ,IAAI,0QAAA,CAAA,SAAM,CAAC,QAAQ,EAAE;oBACnB,iBAAiB,MAAM,IAAM,CAAA,GAAA,wTAAA,CAAA,mBAAgB,AAAhB,EAAiB,gBAAgB;wBAC5D,SAAS;wBACT,MAAM;oBAClB;gBACA;YACA;QACA;IACA;AACA"}},
    {"offset": {"line": 1469, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1474, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry-internal+browser-utils@9.36.0/node_modules/@sentry-internal/browser-utils/src/metrics/web-vitals/onTTFB.ts"],"sourcesContent":["/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { WINDOW } from '../../types';\nimport { bindReporter } from './lib/bindReporter';\nimport { getActivationStart } from './lib/getActivationStart';\nimport { getNavigationEntry } from './lib/getNavigationEntry';\nimport { initMetric } from './lib/initMetric';\nimport { whenActivated } from './lib/whenActivated';\nimport type { MetricRatingThresholds, ReportOpts, TTFBMetric } from './types';\n\n/** Thresholds for TTFB. See https://web.dev/articles/ttfb#what_is_a_good_ttfb_score */\nexport const TTFBThresholds: MetricRatingThresholds = [800, 1800];\n\n/**\n * Runs in the next task after the page is done loading and/or prerendering.\n * @param callback\n */\nconst whenReady = (callback: () => void) => {\n  if (WINDOW.document?.prerendering) {\n    whenActivated(() => whenReady(callback));\n  } else if (WINDOW.document?.readyState !== 'complete') {\n    addEventListener('load', () => whenReady(callback), true);\n  } else {\n    // Queue a task so the callback runs after `loadEventEnd`.\n    setTimeout(callback);\n  }\n};\n\n/**\n * Calculates the [TTFB](https://web.dev/articles/ttfb) value for the\n * current page and calls the `callback` function once the page has loaded,\n * along with the relevant `navigation` performance entry used to determine the\n * value. The reported value is a `DOMHighResTimeStamp`.\n *\n * Note, this function waits until after the page is loaded to call `callback`\n * in order to ensure all properties of the `navigation` entry are populated.\n * This is useful if you want to report on other metrics exposed by the\n * [Navigation Timing API](https://w3c.github.io/navigation-timing/). For\n * example, the TTFB metric starts from the page's [time\n * origin](https://www.w3.org/TR/hr-time-2/#sec-time-origin), which means it\n * includes time spent on DNS lookup, connection negotiation, network latency,\n * and server processing time.\n */\nexport const onTTFB = (onReport: (metric: TTFBMetric) => void, opts: ReportOpts = {}) => {\n  const metric = initMetric('TTFB');\n  const report = bindReporter(onReport, metric, TTFBThresholds, opts.reportAllChanges);\n\n  whenReady(() => {\n    const navigationEntry = getNavigationEntry();\n\n    if (navigationEntry) {\n      // The activationStart reference is used because TTFB should be\n      // relative to page activation rather than navigation start if the\n      // page was prerendered. But in cases where `activationStart` occurs\n      // after the first byte is received, this time should be clamped at 0.\n      metric.value = Math.max(navigationEntry.responseStart - getActivationStart(), 0);\n\n      metric.entries = [navigationEntry];\n      report(true);\n    }\n  });\n};\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;CAcA,GAUA,qFAAA,GACO,MAAM,iBAAyC;IAAC;IAAK;CAAI;AAEhE;;;CAGA,GACA,MAAM,YAAY,CAAC;IACjB,IAAI,0QAAA,CAAA,SAAM,CAAC,QAAQ,EAAE,cAAc;QACjC,CAAA,GAAA,qTAAA,CAAA,gBAAa,AAAb,EAAc,IAAM,UAAU;IAClC,OAAS,IAAI,0QAAA,CAAA,SAAM,CAAC,QAAQ,EAAE,eAAe,YAAY;QACrD,iBAAiB,QAAQ,IAAM,UAAU,WAAW;IACxD,OAAS;QACT,0DAAA;QACI,WAAW;IACf;AACA;AAEA;;;;;;;;;;;;;;CAcA,GACa,MAAA,SAAS,CAAC,UAAwC,OAAmB,CAAA,CAAE;IAClF,MAAM,SAAS,CAAA,GAAA,kTAAA,CAAA,aAAU,AAAV,EAAW;IAC1B,MAAM,SAAS,CAAA,GAAA,oTAAA,CAAA,eAAY,AAAZ,EAAa,UAAU,QAAQ,gBAAgB,KAAK,gBAAgB;IAEnF,UAAU;QACR,MAAM,kBAAkB,CAAA,GAAA,0TAAA,CAAA,qBAAkB,AAAlB;QAExB,IAAI,iBAAiB;YACzB,+DAAA;YACA,kEAAA;YACA,oEAAA;YACA,sEAAA;YACM,OAAO,KAAA,GAAQ,KAAK,GAAG,CAAC,gBAAgB,aAAA,GAAgB,CAAA,GAAA,0TAAA,CAAA,qBAAkB,AAAlB,KAAsB;YAE9E,OAAO,OAAA,GAAU;gBAAC;aAAgB;YAClC,OAAO;QACb;IACA;AACA"}},
    {"offset": {"line": 1556, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1561, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry-internal+browser-utils@9.36.0/node_modules/@sentry-internal/browser-utils/src/metrics/instrument.ts"],"sourcesContent":["import { getFunctionName, logger } from '@sentry/core';\nimport { DEBUG_BUILD } from '../debug-build';\nimport { onCLS } from './web-vitals/getCLS';\nimport { onFID } from './web-vitals/getFID';\nimport { onINP } from './web-vitals/getINP';\nimport { onLCP } from './web-vitals/getLCP';\nimport { observe } from './web-vitals/lib/observe';\nimport { onTTFB } from './web-vitals/onTTFB';\n\ntype InstrumentHandlerTypePerformanceObserver =\n  | 'longtask'\n  | 'event'\n  | 'navigation'\n  | 'paint'\n  | 'resource'\n  | 'first-input'\n  | 'element';\n\ntype InstrumentHandlerTypeMetric = 'cls' | 'lcp' | 'fid' | 'ttfb' | 'inp';\n\n// We provide this here manually instead of relying on a global, as this is not available in non-browser environements\n// And we do not want to expose such types\ninterface PerformanceEntry {\n  readonly duration: number;\n  readonly entryType: string;\n  readonly name: string;\n  readonly startTime: number;\n  toJSON(): Record<string, unknown>;\n}\ninterface PerformanceEventTiming extends PerformanceEntry {\n  processingStart: number;\n  processingEnd: number;\n  duration: number;\n  cancelable?: boolean;\n  target?: unknown | null;\n  interactionId?: number;\n}\n\ninterface PerformanceScriptTiming extends PerformanceEntry {\n  sourceURL: string;\n  sourceFunctionName: string;\n  sourceCharPosition: number;\n  invoker: string;\n  invokerType: string;\n}\nexport interface PerformanceLongAnimationFrameTiming extends PerformanceEntry {\n  scripts: PerformanceScriptTiming[];\n}\n\ninterface Metric {\n  /**\n   * The name of the metric (in acronym form).\n   */\n  name: 'CLS' | 'FCP' | 'FID' | 'INP' | 'LCP' | 'TTFB';\n\n  /**\n   * The current value of the metric.\n   */\n  value: number;\n\n  /**\n   * The rating as to whether the metric value is within the \"good\",\n   * \"needs improvement\", or \"poor\" thresholds of the metric.\n   */\n  rating: 'good' | 'needs-improvement' | 'poor';\n\n  /**\n   * The delta between the current value and the last-reported value.\n   * On the first report, `delta` and `value` will always be the same.\n   */\n  delta: number;\n\n  /**\n   * A unique ID representing this particular metric instance. This ID can\n   * be used by an analytics tool to dedupe multiple values sent for the same\n   * metric instance, or to group multiple deltas together and calculate a\n   * total. It can also be used to differentiate multiple different metric\n   * instances sent from the same page, which can happen if the page is\n   * restored from the back/forward cache (in that case new metrics object\n   * get created).\n   */\n  id: string;\n\n  /**\n   * Any performance entries relevant to the metric value calculation.\n   * The array may also be empty if the metric value was not based on any\n   * entries (e.g. a CLS value of 0 given no layout shifts).\n   */\n  entries: PerformanceEntry[];\n\n  /**\n   * The type of navigation\n   *\n   * Navigation Timing API (or `undefined` if the browser doesn't\n   * support that API). For pages that are restored from the bfcache, this\n   * value will be 'back-forward-cache'.\n   */\n  navigationType: 'navigate' | 'reload' | 'back-forward' | 'back-forward-cache' | 'prerender' | 'restore';\n}\n\ntype InstrumentHandlerType = InstrumentHandlerTypeMetric | InstrumentHandlerTypePerformanceObserver;\n\ntype StopListening = undefined | void | (() => void);\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype InstrumentHandlerCallback = (data: any) => void;\n\ntype CleanupHandlerCallback = () => void;\n\nconst handlers: { [key in InstrumentHandlerType]?: InstrumentHandlerCallback[] } = {};\nconst instrumented: { [key in InstrumentHandlerType]?: boolean } = {};\n\nlet _previousCls: Metric | undefined;\nlet _previousFid: Metric | undefined;\nlet _previousLcp: Metric | undefined;\nlet _previousTtfb: Metric | undefined;\nlet _previousInp: Metric | undefined;\n\n/**\n * Add a callback that will be triggered when a CLS metric is available.\n * Returns a cleanup callback which can be called to remove the instrumentation handler.\n *\n * Pass `stopOnCallback = true` to stop listening for CLS when the cleanup callback is called.\n * This will lead to the CLS being finalized and frozen.\n */\nexport function addClsInstrumentationHandler(\n  callback: (data: { metric: Metric }) => void,\n  stopOnCallback = false,\n): CleanupHandlerCallback {\n  return addMetricObserver('cls', callback, instrumentCls, _previousCls, stopOnCallback);\n}\n\n/**\n * Add a callback that will be triggered when a LCP metric is available.\n * Returns a cleanup callback which can be called to remove the instrumentation handler.\n *\n * Pass `stopOnCallback = true` to stop listening for LCP when the cleanup callback is called.\n * This will lead to the LCP being finalized and frozen.\n */\nexport function addLcpInstrumentationHandler(\n  callback: (data: { metric: Metric }) => void,\n  stopOnCallback = false,\n): CleanupHandlerCallback {\n  return addMetricObserver('lcp', callback, instrumentLcp, _previousLcp, stopOnCallback);\n}\n\n/**\n * Add a callback that will be triggered when a FID metric is available.\n * Returns a cleanup callback which can be called to remove the instrumentation handler.\n */\nexport function addFidInstrumentationHandler(callback: (data: { metric: Metric }) => void): CleanupHandlerCallback {\n  return addMetricObserver('fid', callback, instrumentFid, _previousFid);\n}\n\n/**\n * Add a callback that will be triggered when a FID metric is available.\n */\nexport function addTtfbInstrumentationHandler(callback: (data: { metric: Metric }) => void): CleanupHandlerCallback {\n  return addMetricObserver('ttfb', callback, instrumentTtfb, _previousTtfb);\n}\n\nexport type InstrumentationHandlerCallback = (data: {\n  metric: Omit<Metric, 'entries'> & {\n    entries: PerformanceEventTiming[];\n  };\n}) => void;\n\n/**\n * Add a callback that will be triggered when a INP metric is available.\n * Returns a cleanup callback which can be called to remove the instrumentation handler.\n */\nexport function addInpInstrumentationHandler(callback: InstrumentationHandlerCallback): CleanupHandlerCallback {\n  return addMetricObserver('inp', callback, instrumentInp, _previousInp);\n}\n\nexport function addPerformanceInstrumentationHandler(\n  type: 'event',\n  callback: (data: { entries: ((PerformanceEntry & { target?: unknown | null }) | PerformanceEventTiming)[] }) => void,\n): CleanupHandlerCallback;\nexport function addPerformanceInstrumentationHandler(\n  type: InstrumentHandlerTypePerformanceObserver,\n  callback: (data: { entries: PerformanceEntry[] }) => void,\n): CleanupHandlerCallback;\n\n/**\n * Add a callback that will be triggered when a performance observer is triggered,\n * and receives the entries of the observer.\n * Returns a cleanup callback which can be called to remove the instrumentation handler.\n */\nexport function addPerformanceInstrumentationHandler(\n  type: InstrumentHandlerTypePerformanceObserver,\n  callback: (data: { entries: PerformanceEntry[] }) => void,\n): CleanupHandlerCallback {\n  addHandler(type, callback);\n\n  if (!instrumented[type]) {\n    instrumentPerformanceObserver(type);\n    instrumented[type] = true;\n  }\n\n  return getCleanupCallback(type, callback);\n}\n\n/** Trigger all handlers of a given type. */\nfunction triggerHandlers(type: InstrumentHandlerType, data: unknown): void {\n  const typeHandlers = handlers[type];\n\n  if (!typeHandlers?.length) {\n    return;\n  }\n\n  for (const handler of typeHandlers) {\n    try {\n      handler(data);\n    } catch (e) {\n      DEBUG_BUILD &&\n        logger.error(\n          `Error while triggering instrumentation handler.\\nType: ${type}\\nName: ${getFunctionName(handler)}\\nError:`,\n          e,\n        );\n    }\n  }\n}\n\nfunction instrumentCls(): StopListening {\n  return onCLS(\n    metric => {\n      triggerHandlers('cls', {\n        metric,\n      });\n      _previousCls = metric;\n    },\n    // We want the callback to be called whenever the CLS value updates.\n    // By default, the callback is only called when the tab goes to the background.\n    { reportAllChanges: true },\n  );\n}\n\nfunction instrumentFid(): void {\n  return onFID(metric => {\n    triggerHandlers('fid', {\n      metric,\n    });\n    _previousFid = metric;\n  });\n}\n\nfunction instrumentLcp(): StopListening {\n  return onLCP(\n    metric => {\n      triggerHandlers('lcp', {\n        metric,\n      });\n      _previousLcp = metric;\n    },\n    // We want the callback to be called whenever the LCP value updates.\n    // By default, the callback is only called when the tab goes to the background.\n    { reportAllChanges: true },\n  );\n}\n\nfunction instrumentTtfb(): StopListening {\n  return onTTFB(metric => {\n    triggerHandlers('ttfb', {\n      metric,\n    });\n    _previousTtfb = metric;\n  });\n}\n\nfunction instrumentInp(): void {\n  return onINP(metric => {\n    triggerHandlers('inp', {\n      metric,\n    });\n    _previousInp = metric;\n  });\n}\n\nfunction addMetricObserver(\n  type: InstrumentHandlerTypeMetric,\n  callback: InstrumentHandlerCallback,\n  instrumentFn: () => StopListening,\n  previousValue: Metric | undefined,\n  stopOnCallback = false,\n): CleanupHandlerCallback {\n  addHandler(type, callback);\n\n  let stopListening: StopListening | undefined;\n\n  if (!instrumented[type]) {\n    stopListening = instrumentFn();\n    instrumented[type] = true;\n  }\n\n  if (previousValue) {\n    callback({ metric: previousValue });\n  }\n\n  return getCleanupCallback(type, callback, stopOnCallback ? stopListening : undefined);\n}\n\nfunction instrumentPerformanceObserver(type: InstrumentHandlerTypePerformanceObserver): void {\n  const options: PerformanceObserverInit = {};\n\n  // Special per-type options we want to use\n  if (type === 'event') {\n    options.durationThreshold = 0;\n  }\n\n  observe(\n    type,\n    entries => {\n      triggerHandlers(type, { entries });\n    },\n    options,\n  );\n}\n\nfunction addHandler(type: InstrumentHandlerType, handler: InstrumentHandlerCallback): void {\n  handlers[type] = handlers[type] || [];\n  (handlers[type] as InstrumentHandlerCallback[]).push(handler);\n}\n\n// Get a callback which can be called to remove the instrumentation handler\nfunction getCleanupCallback(\n  type: InstrumentHandlerType,\n  callback: InstrumentHandlerCallback,\n  stopListening: StopListening,\n): CleanupHandlerCallback {\n  return () => {\n    if (stopListening) {\n      stopListening();\n    }\n\n    const typeHandlers = handlers[type];\n\n    if (!typeHandlers) {\n      return;\n    }\n\n    const index = typeHandlers.indexOf(callback);\n    if (index !== -1) {\n      typeHandlers.splice(index, 1);\n    }\n  };\n}\n\n/**\n * Check if a PerformanceEntry is a PerformanceEventTiming by checking for the `duration` property.\n */\nexport function isPerformanceEventTiming(entry: PerformanceEntry): entry is PerformanceEventTiming {\n  return 'duration' in entry;\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1756, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1761, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry-internal+browser-utils@9.36.0/node_modules/@sentry-internal/browser-utils/src/metrics/utils.ts"],"sourcesContent":["import type { Integration, SentrySpan, Span, SpanAttributes, SpanTimeInput, StartSpanOptions } from '@sentry/core';\nimport { getClient, getCurrentScope, spanToJSON, startInactiveSpan, withActiveSpan } from '@sentry/core';\nimport { WINDOW } from '../types';\n\n/**\n * Checks if a given value is a valid measurement value.\n */\nexport function isMeasurementValue(value: unknown): value is number {\n  return typeof value === 'number' && isFinite(value);\n}\n\n/**\n * Helper function to start child on transactions. This function will make sure that the transaction will\n * use the start timestamp of the created child span if it is earlier than the transactions actual\n * start timestamp.\n */\nexport function startAndEndSpan(\n  parentSpan: Span,\n  startTimeInSeconds: number,\n  endTime: SpanTimeInput,\n  { ...ctx }: StartSpanOptions,\n): Span | undefined {\n  const parentStartTime = spanToJSON(parentSpan).start_timestamp;\n  if (parentStartTime && parentStartTime > startTimeInSeconds) {\n    // We can only do this for SentrySpans...\n    if (typeof (parentSpan as Partial<SentrySpan>).updateStartTime === 'function') {\n      (parentSpan as SentrySpan).updateStartTime(startTimeInSeconds);\n    }\n  }\n\n  // The return value only exists for tests\n  return withActiveSpan(parentSpan, () => {\n    const span = startInactiveSpan({\n      startTime: startTimeInSeconds,\n      ...ctx,\n    });\n\n    if (span) {\n      span.end(endTime);\n    }\n\n    return span;\n  });\n}\n\ninterface StandaloneWebVitalSpanOptions {\n  name: string;\n  transaction?: string;\n  attributes: SpanAttributes;\n  startTime: number;\n}\n\n/**\n * Starts an inactive, standalone span used to send web vital values to Sentry.\n * DO NOT use this for arbitrary spans, as these spans require special handling\n * during ingestion to extract metrics.\n *\n * This function adds a bunch of attributes and data to the span that's shared\n * by all web vital standalone spans. However, you need to take care of adding\n * the actual web vital value as an event to the span. Also, you need to assign\n * a transaction name and some other values that are specific to the web vital.\n *\n * Ultimately, you also need to take care of ending the span to send it off.\n *\n * @param options\n *\n * @returns an inactive, standalone and NOT YET ended span\n */\nexport function startStandaloneWebVitalSpan(options: StandaloneWebVitalSpanOptions): Span | undefined {\n  const client = getClient();\n  if (!client) {\n    return;\n  }\n\n  const { name, transaction, attributes: passedAttributes, startTime } = options;\n\n  const { release, environment, sendDefaultPii } = client.getOptions();\n  // We need to get the replay, user, and activeTransaction from the current scope\n  // so that we can associate replay id, profile id, and a user display to the span\n  const replay = client.getIntegrationByName<Integration & { getReplayId: () => string }>('Replay');\n  const replayId = replay?.getReplayId();\n\n  const scope = getCurrentScope();\n\n  const user = scope.getUser();\n  const userDisplay = user !== undefined ? user.email || user.id || user.ip_address : undefined;\n\n  let profileId: string | undefined;\n  try {\n    // @ts-expect-error skip optional chaining to save bundle size with try catch\n    profileId = scope.getScopeData().contexts.profile.profile_id;\n  } catch {\n    // do nothing\n  }\n\n  const attributes: SpanAttributes = {\n    release,\n    environment,\n\n    user: userDisplay || undefined,\n    profile_id: profileId || undefined,\n    replay_id: replayId || undefined,\n\n    transaction,\n\n    // Web vital score calculation relies on the user agent to account for different\n    // browsers setting different thresholds for what is considered a good/meh/bad value.\n    // For example: Chrome vs. Chrome Mobile\n    'user_agent.original': WINDOW.navigator?.userAgent,\n\n    // This tells Sentry to infer the IP address from the request\n    'client.address': sendDefaultPii ? '{{auto}}' : undefined,\n\n    ...passedAttributes,\n  };\n\n  return startInactiveSpan({\n    name,\n    attributes,\n    startTime,\n    experimental: {\n      standalone: true,\n    },\n  });\n}\n\n/** Get the browser performance API. */\nexport function getBrowserPerformanceAPI(): Performance | undefined {\n  // @ts-expect-error we want to make sure all of these are available, even if TS is sure they are\n  return WINDOW.addEventListener && WINDOW.performance;\n}\n\n/**\n * Converts from milliseconds to seconds\n * @param time time in ms\n */\nexport function msToSec(time: number): number {\n  return time / 1000;\n}\n\n/**\n * Converts ALPN protocol ids to name and version.\n *\n * (https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids)\n * @param nextHopProtocol PerformanceResourceTiming.nextHopProtocol\n */\nexport function extractNetworkProtocol(nextHopProtocol: string): { name: string; version: string } {\n  let name = 'unknown';\n  let version = 'unknown';\n  let _name = '';\n  for (const char of nextHopProtocol) {\n    // http/1.1 etc.\n    if (char === '/') {\n      [name, version] = nextHopProtocol.split('/') as [string, string];\n      break;\n    }\n    // h2, h3 etc.\n    if (!isNaN(Number(char))) {\n      name = _name === 'h' ? 'http' : _name;\n      version = nextHopProtocol.split(_name)[1] as string;\n      break;\n    }\n    _name += char;\n  }\n  if (_name === nextHopProtocol) {\n    // webrtc, ftp, etc.\n    name = _name;\n  }\n  return { name, version };\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1909, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1914, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry-internal+browser-utils@9.36.0/node_modules/@sentry-internal/browser-utils/src/metrics/inp.ts"],"sourcesContent":["import type { Span, SpanAttributes } from '@sentry/core';\nimport {\n  browserPerformanceTimeOrigin,\n  getActiveSpan,\n  getCurrentScope,\n  getRootSpan,\n  htmlTreeAsString,\n  SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME,\n  SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT,\n  SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE,\n  SEMANTIC_ATTRIBUTE_SENTRY_OP,\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n  spanToJSON,\n} from '@sentry/core';\nimport type { InstrumentationHandlerCallback } from './instrument';\nimport {\n  addInpInstrumentationHandler,\n  addPerformanceInstrumentationHandler,\n  isPerformanceEventTiming,\n} from './instrument';\nimport { getBrowserPerformanceAPI, msToSec, startStandaloneWebVitalSpan } from './utils';\n\nconst LAST_INTERACTIONS: number[] = [];\nconst INTERACTIONS_SPAN_MAP = new Map<number, Span>();\n\n/**\n * 60 seconds is the maximum for a plausible INP value\n * (source: Me)\n */\nconst MAX_PLAUSIBLE_INP_DURATION = 60;\n/**\n * Start tracking INP webvital events.\n */\nexport function startTrackingINP(): () => void {\n  const performance = getBrowserPerformanceAPI();\n  if (performance && browserPerformanceTimeOrigin()) {\n    const inpCallback = _trackINP();\n\n    return (): void => {\n      inpCallback();\n    };\n  }\n\n  return () => undefined;\n}\n\nconst INP_ENTRY_MAP: Record<string, 'click' | 'hover' | 'drag' | 'press'> = {\n  click: 'click',\n  pointerdown: 'click',\n  pointerup: 'click',\n  mousedown: 'click',\n  mouseup: 'click',\n  touchstart: 'click',\n  touchend: 'click',\n  mouseover: 'hover',\n  mouseout: 'hover',\n  mouseenter: 'hover',\n  mouseleave: 'hover',\n  pointerover: 'hover',\n  pointerout: 'hover',\n  pointerenter: 'hover',\n  pointerleave: 'hover',\n  dragstart: 'drag',\n  dragend: 'drag',\n  drag: 'drag',\n  dragenter: 'drag',\n  dragleave: 'drag',\n  dragover: 'drag',\n  drop: 'drag',\n  keydown: 'press',\n  keyup: 'press',\n  keypress: 'press',\n  input: 'press',\n};\n\n/** Starts tracking the Interaction to Next Paint on the current page. #\n * exported only for testing\n */\nexport function _trackINP(): () => void {\n  return addInpInstrumentationHandler(_onInp);\n}\n\n/**\n * exported only for testing\n */\nexport const _onInp: InstrumentationHandlerCallback = ({ metric }) => {\n  if (metric.value == undefined) {\n    return;\n  }\n\n  const duration = msToSec(metric.value);\n\n  // We received occasional reports of hour-long INP values.\n  // Therefore, we add a sanity check to avoid creating spans for\n  // unrealistically long INP durations.\n  if (duration > MAX_PLAUSIBLE_INP_DURATION) {\n    return;\n  }\n\n  const entry = metric.entries.find(entry => entry.duration === metric.value && INP_ENTRY_MAP[entry.name]);\n\n  if (!entry) {\n    return;\n  }\n\n  const { interactionId } = entry;\n  const interactionType = INP_ENTRY_MAP[entry.name];\n\n  /** Build the INP span, create an envelope from the span, and then send the envelope */\n  const startTime = msToSec((browserPerformanceTimeOrigin() as number) + entry.startTime);\n  const activeSpan = getActiveSpan();\n  const rootSpan = activeSpan ? getRootSpan(activeSpan) : undefined;\n\n  // We first try to lookup the span from our INTERACTIONS_SPAN_MAP,\n  // where we cache the route per interactionId\n  const cachedSpan = interactionId != null ? INTERACTIONS_SPAN_MAP.get(interactionId) : undefined;\n\n  const spanToUse = cachedSpan || rootSpan;\n\n  // Else, we try to use the active span.\n  // Finally, we fall back to look at the transactionName on the scope\n  const routeName = spanToUse ? spanToJSON(spanToUse).description : getCurrentScope().getScopeData().transactionName;\n\n  const name = htmlTreeAsString(entry.target);\n  const attributes: SpanAttributes = {\n    [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.browser.inp',\n    [SEMANTIC_ATTRIBUTE_SENTRY_OP]: `ui.interaction.${interactionType}`,\n    [SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME]: entry.duration,\n  };\n\n  const span = startStandaloneWebVitalSpan({\n    name,\n    transaction: routeName,\n    attributes,\n    startTime,\n  });\n\n  if (span) {\n    span.addEvent('inp', {\n      [SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT]: 'millisecond',\n      [SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE]: metric.value,\n    });\n\n    span.end(startTime + duration);\n  }\n};\n\n/**\n * Register a listener to cache route information for INP interactions.\n */\nexport function registerInpInteractionListener(): void {\n  const handleEntries = ({ entries }: { entries: PerformanceEntry[] }): void => {\n    const activeSpan = getActiveSpan();\n    const activeRootSpan = activeSpan && getRootSpan(activeSpan);\n\n    entries.forEach(entry => {\n      if (!isPerformanceEventTiming(entry) || !activeRootSpan) {\n        return;\n      }\n\n      const interactionId = entry.interactionId;\n      if (interactionId == null) {\n        return;\n      }\n\n      // If the interaction was already recorded before, nothing more to do\n      if (INTERACTIONS_SPAN_MAP.has(interactionId)) {\n        return;\n      }\n\n      // We keep max. 10 interactions in the list, then remove the oldest one & clean up\n      if (LAST_INTERACTIONS.length > 10) {\n        const last = LAST_INTERACTIONS.shift() as number;\n        INTERACTIONS_SPAN_MAP.delete(last);\n      }\n\n      // We add the interaction to the list of recorded interactions\n      // and store the span for this interaction\n      LAST_INTERACTIONS.push(interactionId);\n      INTERACTIONS_SPAN_MAP.set(interactionId, activeRootSpan);\n    });\n  };\n\n  addPerformanceInstrumentationHandler('event', handleEntries);\n  addPerformanceInstrumentationHandler('first-input', handleEntries);\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 2065, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2070, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry-internal+browser-utils@9.36.0/node_modules/@sentry-internal/browser-utils/src/metrics/cls.ts"],"sourcesContent":["import type { SpanAttributes } from '@sentry/core';\nimport {\n  browserPerformanceTimeOrigin,\n  getActiveSpan,\n  getClient,\n  getCurrentScope,\n  getRootSpan,\n  htmlTreeAsString,\n  logger,\n  SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME,\n  SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT,\n  SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE,\n  SEMANTIC_ATTRIBUTE_SENTRY_OP,\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n  spanToJSON,\n} from '@sentry/core';\nimport { DEBUG_BUILD } from '../debug-build';\nimport { addClsInstrumentationHandler } from './instrument';\nimport { msToSec, startStandaloneWebVitalSpan } from './utils';\nimport { onHidden } from './web-vitals/lib/onHidden';\n\n/**\n * Starts tracking the Cumulative Layout Shift on the current page and collects the value once\n *\n * - the page visibility is hidden\n * - a navigation span is started (to stop CLS measurement for SPA soft navigations)\n *\n * Once either of these events triggers, the CLS value is sent as a standalone span and we stop\n * measuring CLS.\n */\nexport function trackClsAsStandaloneSpan(): void {\n  let standaloneCLsValue = 0;\n  let standaloneClsEntry: LayoutShift | undefined;\n  let pageloadSpanId: string | undefined;\n\n  if (!supportsLayoutShift()) {\n    return;\n  }\n\n  let sentSpan = false;\n  function _collectClsOnce() {\n    if (sentSpan) {\n      return;\n    }\n    sentSpan = true;\n    if (pageloadSpanId) {\n      sendStandaloneClsSpan(standaloneCLsValue, standaloneClsEntry, pageloadSpanId);\n    }\n    cleanupClsHandler();\n  }\n\n  const cleanupClsHandler = addClsInstrumentationHandler(({ metric }) => {\n    const entry = metric.entries[metric.entries.length - 1] as LayoutShift | undefined;\n    if (!entry) {\n      return;\n    }\n    standaloneCLsValue = metric.value;\n    standaloneClsEntry = entry;\n  }, true);\n\n  onHidden(() => {\n    _collectClsOnce();\n  });\n\n  // Since the call chain of this function is synchronous and evaluates before the SDK client is created,\n  // we need to wait with subscribing to a client hook until the client is created. Therefore, we defer\n  // to the next tick after the SDK setup.\n  setTimeout(() => {\n    const client = getClient();\n\n    if (!client) {\n      return;\n    }\n\n    const unsubscribeStartNavigation = client.on('startNavigationSpan', () => {\n      _collectClsOnce();\n      unsubscribeStartNavigation?.();\n    });\n\n    const activeSpan = getActiveSpan();\n    if (activeSpan) {\n      const rootSpan = getRootSpan(activeSpan);\n      const spanJSON = spanToJSON(rootSpan);\n      if (spanJSON.op === 'pageload') {\n        pageloadSpanId = rootSpan.spanContext().spanId;\n      }\n    }\n  }, 0);\n}\n\nfunction sendStandaloneClsSpan(clsValue: number, entry: LayoutShift | undefined, pageloadSpanId: string) {\n  DEBUG_BUILD && logger.log(`Sending CLS span (${clsValue})`);\n\n  const startTime = msToSec((browserPerformanceTimeOrigin() || 0) + (entry?.startTime || 0));\n  const routeName = getCurrentScope().getScopeData().transactionName;\n\n  const name = entry ? htmlTreeAsString(entry.sources[0]?.node) : 'Layout shift';\n\n  const attributes: SpanAttributes = {\n    [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.browser.cls',\n    [SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'ui.webvital.cls',\n    [SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME]: entry?.duration || 0,\n    // attach the pageload span id to the CLS span so that we can link them in the UI\n    'sentry.pageload.span_id': pageloadSpanId,\n  };\n\n  // Add CLS sources as span attributes to help with debugging layout shifts\n  // See: https://developer.mozilla.org/en-US/docs/Web/API/LayoutShift/sources\n  if (entry?.sources) {\n    entry.sources.forEach((source, index) => {\n      attributes[`cls.source.${index + 1}`] = htmlTreeAsString(source.node);\n    });\n  }\n\n  const span = startStandaloneWebVitalSpan({\n    name,\n    transaction: routeName,\n    attributes,\n    startTime,\n  });\n\n  if (span) {\n    span.addEvent('cls', {\n      [SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT]: '',\n      [SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE]: clsValue,\n    });\n\n    // LayoutShift performance entries always have a duration of 0, so we don't need to add `entry.duration` here\n    // see: https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/duration\n    span.end(startTime);\n  }\n}\n\nfunction supportsLayoutShift(): boolean {\n  try {\n    return PerformanceObserver.supportedEntryTypes.includes('layout-shift');\n  } catch {\n    return false;\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 2192, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2197, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry-internal+browser-utils@9.36.0/node_modules/@sentry-internal/browser-utils/src/metrics/lcp.ts"],"sourcesContent":["import type { SpanAttributes } from '@sentry/core';\nimport {\n  browserPerformanceTimeOrigin,\n  getActiveSpan,\n  getClient,\n  getCurrentScope,\n  getRootSpan,\n  htmlTreeAsString,\n  logger,\n  SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME,\n  SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT,\n  SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE,\n  SEMANTIC_ATTRIBUTE_SENTRY_OP,\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n  spanToJSON,\n} from '@sentry/core';\nimport { DEBUG_BUILD } from '../debug-build';\nimport { addLcpInstrumentationHandler } from './instrument';\nimport { msToSec, startStandaloneWebVitalSpan } from './utils';\nimport { onHidden } from './web-vitals/lib/onHidden';\n\n/**\n * Starts tracking the Largest Contentful Paint on the current page and collects the value once\n *\n * - the page visibility is hidden\n * - a navigation span is started (to stop LCP measurement for SPA soft navigations)\n *\n * Once either of these events triggers, the LCP value is sent as a standalone span and we stop\n * measuring LCP for subsequent routes.\n */\nexport function trackLcpAsStandaloneSpan(): void {\n  let standaloneLcpValue = 0;\n  let standaloneLcpEntry: LargestContentfulPaint | undefined;\n  let pageloadSpanId: string | undefined;\n\n  if (!supportsLargestContentfulPaint()) {\n    return;\n  }\n\n  let sentSpan = false;\n  function _collectLcpOnce() {\n    if (sentSpan) {\n      return;\n    }\n    sentSpan = true;\n    if (pageloadSpanId) {\n      _sendStandaloneLcpSpan(standaloneLcpValue, standaloneLcpEntry, pageloadSpanId);\n    }\n    cleanupLcpHandler();\n  }\n\n  const cleanupLcpHandler = addLcpInstrumentationHandler(({ metric }) => {\n    const entry = metric.entries[metric.entries.length - 1] as LargestContentfulPaint | undefined;\n    if (!entry) {\n      return;\n    }\n    standaloneLcpValue = metric.value;\n    standaloneLcpEntry = entry;\n  }, true);\n\n  onHidden(() => {\n    _collectLcpOnce();\n  });\n\n  // Since the call chain of this function is synchronous and evaluates before the SDK client is created,\n  // we need to wait with subscribing to a client hook until the client is created. Therefore, we defer\n  // to the next tick after the SDK setup.\n  setTimeout(() => {\n    const client = getClient();\n\n    if (!client) {\n      return;\n    }\n\n    const unsubscribeStartNavigation = client.on('startNavigationSpan', () => {\n      _collectLcpOnce();\n      unsubscribeStartNavigation?.();\n    });\n\n    const activeSpan = getActiveSpan();\n    if (activeSpan) {\n      const rootSpan = getRootSpan(activeSpan);\n      const spanJSON = spanToJSON(rootSpan);\n      if (spanJSON.op === 'pageload') {\n        pageloadSpanId = rootSpan.spanContext().spanId;\n      }\n    }\n  }, 0);\n}\n\n/**\n * Exported only for testing!\n */\nexport function _sendStandaloneLcpSpan(\n  lcpValue: number,\n  entry: LargestContentfulPaint | undefined,\n  pageloadSpanId: string,\n) {\n  DEBUG_BUILD && logger.log(`Sending LCP span (${lcpValue})`);\n\n  const startTime = msToSec((browserPerformanceTimeOrigin() || 0) + (entry?.startTime || 0));\n  const routeName = getCurrentScope().getScopeData().transactionName;\n\n  const name = entry ? htmlTreeAsString(entry.element) : 'Largest contentful paint';\n\n  const attributes: SpanAttributes = {\n    [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.browser.lcp',\n    [SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'ui.webvital.lcp',\n    [SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME]: 0, // LCP is a point-in-time metric\n    // attach the pageload span id to the LCP span so that we can link them in the UI\n    'sentry.pageload.span_id': pageloadSpanId,\n  };\n\n  if (entry) {\n    entry.element && (attributes['lcp.element'] = htmlTreeAsString(entry.element));\n    entry.id && (attributes['lcp.id'] = entry.id);\n\n    // Trim URL to the first 200 characters.\n    entry.url && (attributes['lcp.url'] = entry.url.trim().slice(0, 200));\n\n    // loadTime is the time of LCP that's related to receiving the LCP element response..\n    entry.loadTime != null && (attributes['lcp.loadTime'] = entry.loadTime);\n\n    // renderTime is loadTime + rendering time\n    // it's 0 if the LCP element is loaded from a 3rd party origin that doesn't send the\n    // `Timing-Allow-Origin` header.\n    entry.renderTime != null && (attributes['lcp.renderTime'] = entry.renderTime);\n\n    entry.size != null && (attributes['lcp.size'] = entry.size);\n  }\n\n  const span = startStandaloneWebVitalSpan({\n    name,\n    transaction: routeName,\n    attributes,\n    startTime,\n  });\n\n  if (span) {\n    span.addEvent('lcp', {\n      [SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT]: 'millisecond',\n      [SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE]: lcpValue,\n    });\n\n    // LCP is a point-in-time metric, so we end the span immediately\n    span.end(startTime);\n  }\n}\n\nfunction supportsLargestContentfulPaint(): boolean {\n  try {\n    return PerformanceObserver.supportedEntryTypes.includes('largest-contentful-paint');\n  } catch {\n    return false;\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 2327, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2332, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry-internal+browser-utils@9.36.0/node_modules/@sentry-internal/browser-utils/src/metrics/browserMetrics.ts"],"sourcesContent":["/* eslint-disable max-lines */\nimport type { Measurements, Span, SpanAttributes, SpanAttributeValue, StartSpanOptions } from '@sentry/core';\nimport {\n  browserPerformanceTimeOrigin,\n  getActiveSpan,\n  getComponentName,\n  htmlTreeAsString,\n  isPrimitive,\n  parseUrl,\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n  setMeasurement,\n  spanToJSON,\n  stringMatchesSomePattern,\n} from '@sentry/core';\nimport { WINDOW } from '../types';\nimport { trackClsAsStandaloneSpan } from './cls';\nimport {\n  type PerformanceLongAnimationFrameTiming,\n  addClsInstrumentationHandler,\n  addFidInstrumentationHandler,\n  addLcpInstrumentationHandler,\n  addPerformanceInstrumentationHandler,\n  addTtfbInstrumentationHandler,\n} from './instrument';\nimport { trackLcpAsStandaloneSpan } from './lcp';\nimport {\n  extractNetworkProtocol,\n  getBrowserPerformanceAPI,\n  isMeasurementValue,\n  msToSec,\n  startAndEndSpan,\n} from './utils';\nimport { getActivationStart } from './web-vitals/lib/getActivationStart';\nimport { getNavigationEntry } from './web-vitals/lib/getNavigationEntry';\nimport { getVisibilityWatcher } from './web-vitals/lib/getVisibilityWatcher';\n\ninterface NavigatorNetworkInformation {\n  readonly connection?: NetworkInformation;\n}\n\n// http://wicg.github.io/netinfo/#connection-types\ntype ConnectionType = 'bluetooth' | 'cellular' | 'ethernet' | 'mixed' | 'none' | 'other' | 'unknown' | 'wifi' | 'wimax';\n\n// http://wicg.github.io/netinfo/#effectiveconnectiontype-enum\ntype EffectiveConnectionType = '2g' | '3g' | '4g' | 'slow-2g';\n\n// http://wicg.github.io/netinfo/#dom-megabit\ntype Megabit = number;\n// http://wicg.github.io/netinfo/#dom-millisecond\ntype Millisecond = number;\n\n// http://wicg.github.io/netinfo/#networkinformation-interface\ninterface NetworkInformation extends EventTarget {\n  // http://wicg.github.io/netinfo/#type-attribute\n  readonly type?: ConnectionType;\n  // http://wicg.github.io/netinfo/#effectivetype-attribute\n  readonly effectiveType?: EffectiveConnectionType;\n  // http://wicg.github.io/netinfo/#downlinkmax-attribute\n  readonly downlinkMax?: Megabit;\n  // http://wicg.github.io/netinfo/#downlink-attribute\n  readonly downlink?: Megabit;\n  // http://wicg.github.io/netinfo/#rtt-attribute\n  readonly rtt?: Millisecond;\n  // http://wicg.github.io/netinfo/#savedata-attribute\n  readonly saveData?: boolean;\n  // http://wicg.github.io/netinfo/#handling-changes-to-the-underlying-connection\n  onchange?: EventListener;\n}\n\n// https://w3c.github.io/device-memory/#sec-device-memory-js-api\ninterface NavigatorDeviceMemory {\n  readonly deviceMemory?: number;\n}\n\nconst MAX_INT_AS_BYTES = 2147483647;\n\nlet _performanceCursor: number = 0;\n\nlet _measurements: Measurements = {};\nlet _lcpEntry: LargestContentfulPaint | undefined;\nlet _clsEntry: LayoutShift | undefined;\n\ninterface StartTrackingWebVitalsOptions {\n  recordClsStandaloneSpans: boolean;\n  recordLcpStandaloneSpans: boolean;\n}\n\n/**\n * Start tracking web vitals.\n * The callback returned by this function can be used to stop tracking & ensure all measurements are final & captured.\n *\n * @returns A function that forces web vitals collection\n */\nexport function startTrackingWebVitals({\n  recordClsStandaloneSpans,\n  recordLcpStandaloneSpans,\n}: StartTrackingWebVitalsOptions): () => void {\n  const performance = getBrowserPerformanceAPI();\n  if (performance && browserPerformanceTimeOrigin()) {\n    // @ts-expect-error we want to make sure all of these are available, even if TS is sure they are\n    if (performance.mark) {\n      WINDOW.performance.mark('sentry-tracing-init');\n    }\n    const fidCleanupCallback = _trackFID();\n    const lcpCleanupCallback = recordLcpStandaloneSpans ? trackLcpAsStandaloneSpan() : _trackLCP();\n    const ttfbCleanupCallback = _trackTtfb();\n    const clsCleanupCallback = recordClsStandaloneSpans ? trackClsAsStandaloneSpan() : _trackCLS();\n\n    return (): void => {\n      fidCleanupCallback();\n      lcpCleanupCallback?.();\n      ttfbCleanupCallback();\n      clsCleanupCallback?.();\n    };\n  }\n\n  return () => undefined;\n}\n\n/**\n * Start tracking long tasks.\n */\nexport function startTrackingLongTasks(): void {\n  addPerformanceInstrumentationHandler('longtask', ({ entries }) => {\n    const parent = getActiveSpan();\n    if (!parent) {\n      return;\n    }\n\n    const { op: parentOp, start_timestamp: parentStartTimestamp } = spanToJSON(parent);\n\n    for (const entry of entries) {\n      const startTime = msToSec((browserPerformanceTimeOrigin() as number) + entry.startTime);\n      const duration = msToSec(entry.duration);\n\n      if (parentOp === 'navigation' && parentStartTimestamp && startTime < parentStartTimestamp) {\n        // Skip adding a span if the long task started before the navigation started.\n        // `startAndEndSpan` will otherwise adjust the parent's start time to the span's start\n        // time, potentially skewing the duration of the actual navigation as reported via our\n        // routing instrumentations\n        continue;\n      }\n\n      startAndEndSpan(parent, startTime, startTime + duration, {\n        name: 'Main UI thread blocked',\n        op: 'ui.long-task',\n        attributes: {\n          [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.ui.browser.metrics',\n        },\n      });\n    }\n  });\n}\n\n/**\n * Start tracking long animation frames.\n */\nexport function startTrackingLongAnimationFrames(): void {\n  // NOTE: the current web-vitals version (3.5.2) does not support long-animation-frame, so\n  // we directly observe `long-animation-frame` events instead of through the web-vitals\n  // `observe` helper function.\n  const observer = new PerformanceObserver(list => {\n    const parent = getActiveSpan();\n    if (!parent) {\n      return;\n    }\n    for (const entry of list.getEntries() as PerformanceLongAnimationFrameTiming[]) {\n      if (!entry.scripts[0]) {\n        continue;\n      }\n\n      const startTime = msToSec((browserPerformanceTimeOrigin() as number) + entry.startTime);\n\n      const { start_timestamp: parentStartTimestamp, op: parentOp } = spanToJSON(parent);\n\n      if (parentOp === 'navigation' && parentStartTimestamp && startTime < parentStartTimestamp) {\n        // Skip adding the span if the long animation frame started before the navigation started.\n        // `startAndEndSpan` will otherwise adjust the parent's start time to the span's start\n        // time, potentially skewing the duration of the actual navigation as reported via our\n        // routing instrumentations\n        continue;\n      }\n      const duration = msToSec(entry.duration);\n\n      const attributes: SpanAttributes = {\n        [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.ui.browser.metrics',\n      };\n\n      const initialScript = entry.scripts[0];\n      const { invoker, invokerType, sourceURL, sourceFunctionName, sourceCharPosition } = initialScript;\n      attributes['browser.script.invoker'] = invoker;\n      attributes['browser.script.invoker_type'] = invokerType;\n      if (sourceURL) {\n        attributes['code.filepath'] = sourceURL;\n      }\n      if (sourceFunctionName) {\n        attributes['code.function'] = sourceFunctionName;\n      }\n      if (sourceCharPosition !== -1) {\n        attributes['browser.script.source_char_position'] = sourceCharPosition;\n      }\n\n      startAndEndSpan(parent, startTime, startTime + duration, {\n        name: 'Main UI thread blocked',\n        op: 'ui.long-animation-frame',\n        attributes,\n      });\n    }\n  });\n\n  observer.observe({ type: 'long-animation-frame', buffered: true });\n}\n\n/**\n * Start tracking interaction events.\n */\nexport function startTrackingInteractions(): void {\n  addPerformanceInstrumentationHandler('event', ({ entries }) => {\n    const parent = getActiveSpan();\n    if (!parent) {\n      return;\n    }\n    for (const entry of entries) {\n      if (entry.name === 'click') {\n        const startTime = msToSec((browserPerformanceTimeOrigin() as number) + entry.startTime);\n        const duration = msToSec(entry.duration);\n\n        const spanOptions: StartSpanOptions & Required<Pick<StartSpanOptions, 'attributes'>> = {\n          name: htmlTreeAsString(entry.target),\n          op: `ui.interaction.${entry.name}`,\n          startTime: startTime,\n          attributes: {\n            [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.ui.browser.metrics',\n          },\n        };\n\n        const componentName = getComponentName(entry.target);\n        if (componentName) {\n          spanOptions.attributes['ui.component_name'] = componentName;\n        }\n\n        startAndEndSpan(parent, startTime, startTime + duration, spanOptions);\n      }\n    }\n  });\n}\n\nexport { registerInpInteractionListener, startTrackingINP } from './inp';\n\n/**\n * Starts tracking the Cumulative Layout Shift on the current page and collects the value and last entry\n * to the `_measurements` object which ultimately is applied to the pageload span's measurements.\n */\nfunction _trackCLS(): () => void {\n  return addClsInstrumentationHandler(({ metric }) => {\n    const entry = metric.entries[metric.entries.length - 1] as LayoutShift | undefined;\n    if (!entry) {\n      return;\n    }\n    _measurements['cls'] = { value: metric.value, unit: '' };\n    _clsEntry = entry;\n  }, true);\n}\n\n/** Starts tracking the Largest Contentful Paint on the current page. */\nfunction _trackLCP(): () => void {\n  return addLcpInstrumentationHandler(({ metric }) => {\n    const entry = metric.entries[metric.entries.length - 1];\n    if (!entry) {\n      return;\n    }\n\n    _measurements['lcp'] = { value: metric.value, unit: 'millisecond' };\n    _lcpEntry = entry as LargestContentfulPaint;\n  }, true);\n}\n\n/** Starts tracking the First Input Delay on the current page. */\nfunction _trackFID(): () => void {\n  return addFidInstrumentationHandler(({ metric }) => {\n    const entry = metric.entries[metric.entries.length - 1];\n    if (!entry) {\n      return;\n    }\n\n    const timeOrigin = msToSec(browserPerformanceTimeOrigin() as number);\n    const startTime = msToSec(entry.startTime);\n    _measurements['fid'] = { value: metric.value, unit: 'millisecond' };\n    _measurements['mark.fid'] = { value: timeOrigin + startTime, unit: 'second' };\n  });\n}\n\nfunction _trackTtfb(): () => void {\n  return addTtfbInstrumentationHandler(({ metric }) => {\n    const entry = metric.entries[metric.entries.length - 1];\n    if (!entry) {\n      return;\n    }\n\n    _measurements['ttfb'] = { value: metric.value, unit: 'millisecond' };\n  });\n}\n\ninterface AddPerformanceEntriesOptions {\n  /**\n   * Flag to determine if CLS should be recorded as a measurement on the pageload span or\n   * sent as a standalone span instead.\n   * Sending it as a standalone span will yield more accurate LCP values.\n   *\n   * Default: `false` for backwards compatibility.\n   */\n  recordClsOnPageloadSpan: boolean;\n\n  /**\n   * Flag to determine if LCP should be recorded as a measurement on the pageload span or\n   * sent as a standalone span instead.\n   * Sending it as a standalone span will yield more accurate LCP values.\n   *\n   * Default: `false` for backwards compatibility.\n   */\n  recordLcpOnPageloadSpan: boolean;\n\n  /**\n   * Resource spans with `op`s matching strings in the array will not be emitted.\n   *\n   * Default: []\n   */\n  ignoreResourceSpans: Array<'resouce.script' | 'resource.css' | 'resource.img' | 'resource.other' | string>;\n\n  /**\n   * Performance spans created from browser Performance APIs,\n   * `performance.mark(...)` nand `performance.measure(...)`\n   * with `name`s matching strings in the array will not be emitted.\n   *\n   * Default: []\n   */\n  ignorePerformanceApiSpans: Array<string | RegExp>;\n}\n\n/** Add performance related spans to a transaction */\nexport function addPerformanceEntries(span: Span, options: AddPerformanceEntriesOptions): void {\n  const performance = getBrowserPerformanceAPI();\n  const origin = browserPerformanceTimeOrigin();\n  if (!performance?.getEntries || !origin) {\n    // Gatekeeper if performance API not available\n    return;\n  }\n\n  const timeOrigin = msToSec(origin);\n\n  const performanceEntries = performance.getEntries();\n\n  const { op, start_timestamp: transactionStartTime } = spanToJSON(span);\n\n  performanceEntries.slice(_performanceCursor).forEach(entry => {\n    const startTime = msToSec(entry.startTime);\n    const duration = msToSec(\n      // Inexplicably, Chrome sometimes emits a negative duration. We need to work around this.\n      // There is a SO post attempting to explain this, but it leaves one with open questions: https://stackoverflow.com/questions/23191918/peformance-getentries-and-negative-duration-display\n      // The way we clamp the value is probably not accurate, since we have observed this happen for things that may take a while to load, like for example the replay worker.\n      // TODO: Investigate why this happens and how to properly mitigate. For now, this is a workaround to prevent transactions being dropped due to negative duration spans.\n      Math.max(0, entry.duration),\n    );\n\n    if (op === 'navigation' && transactionStartTime && timeOrigin + startTime < transactionStartTime) {\n      return;\n    }\n\n    switch (entry.entryType) {\n      case 'navigation': {\n        _addNavigationSpans(span, entry as PerformanceNavigationTiming, timeOrigin);\n        break;\n      }\n      case 'mark':\n      case 'paint':\n      case 'measure': {\n        _addMeasureSpans(span, entry, startTime, duration, timeOrigin, options.ignorePerformanceApiSpans);\n\n        // capture web vitals\n        const firstHidden = getVisibilityWatcher();\n        // Only report if the page wasn't hidden prior to the web vital.\n        const shouldRecord = entry.startTime < firstHidden.firstHiddenTime;\n\n        if (entry.name === 'first-paint' && shouldRecord) {\n          _measurements['fp'] = { value: entry.startTime, unit: 'millisecond' };\n        }\n        if (entry.name === 'first-contentful-paint' && shouldRecord) {\n          _measurements['fcp'] = { value: entry.startTime, unit: 'millisecond' };\n        }\n        break;\n      }\n      case 'resource': {\n        _addResourceSpans(\n          span,\n          entry as PerformanceResourceTiming,\n          entry.name,\n          startTime,\n          duration,\n          timeOrigin,\n          options.ignoreResourceSpans,\n        );\n        break;\n      }\n      // Ignore other entry types.\n    }\n  });\n\n  _performanceCursor = Math.max(performanceEntries.length - 1, 0);\n\n  _trackNavigator(span);\n\n  // Measurements are only available for pageload transactions\n  if (op === 'pageload') {\n    _addTtfbRequestTimeToMeasurements(_measurements);\n\n    const fidMark = _measurements['mark.fid'];\n    if (fidMark && _measurements['fid']) {\n      // create span for FID\n      startAndEndSpan(span, fidMark.value, fidMark.value + msToSec(_measurements['fid'].value), {\n        name: 'first input delay',\n        op: 'ui.action',\n        attributes: {\n          [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.ui.browser.metrics',\n        },\n      });\n\n      // Delete mark.fid as we don't want it to be part of final payload\n      delete _measurements['mark.fid'];\n    }\n\n    // If FCP is not recorded we should not record the cls value\n    // according to the new definition of CLS.\n    // TODO: Check if the first condition is still necessary: `onCLS` already only fires once `onFCP` was called.\n    if (!('fcp' in _measurements) || !options.recordClsOnPageloadSpan) {\n      delete _measurements.cls;\n    }\n\n    // If LCP standalone spans are enabled, don't record LCP as a measurement\n    if (!options.recordLcpOnPageloadSpan) {\n      delete _measurements.lcp;\n    }\n\n    Object.entries(_measurements).forEach(([measurementName, measurement]) => {\n      setMeasurement(measurementName, measurement.value, measurement.unit);\n    });\n\n    // Set timeOrigin which denotes the timestamp which to base the LCP/FCP/FP/TTFB measurements on\n    span.setAttribute('performance.timeOrigin', timeOrigin);\n\n    // In prerendering scenarios, where a page might be prefetched and pre-rendered before the user clicks the link,\n    // the navigation starts earlier than when the user clicks it. Web Vitals should always be based on the\n    // user-perceived time, so they are not reported from the actual start of the navigation, but rather from the\n    // time where the user actively started the navigation, for example by clicking a link.\n    // This is user action is called \"activation\" and the time between navigation and activation is stored in\n    // the `activationStart` attribute of the \"navigation\" PerformanceEntry.\n    span.setAttribute('performance.activationStart', getActivationStart());\n\n    _setWebVitalAttributes(span, options);\n  }\n\n  _lcpEntry = undefined;\n  _clsEntry = undefined;\n  _measurements = {};\n}\n\n/**\n * Create measure related spans.\n * Exported only for tests.\n */\nexport function _addMeasureSpans(\n  span: Span,\n  entry: PerformanceEntry,\n  startTime: number,\n  duration: number,\n  timeOrigin: number,\n  ignorePerformanceApiSpans: AddPerformanceEntriesOptions['ignorePerformanceApiSpans'],\n): void {\n  if (\n    ['mark', 'measure'].includes(entry.entryType) &&\n    stringMatchesSomePattern(entry.name, ignorePerformanceApiSpans)\n  ) {\n    return;\n  }\n\n  const navEntry = getNavigationEntry(false);\n  const requestTime = msToSec(navEntry ? navEntry.requestStart : 0);\n  // Because performance.measure accepts arbitrary timestamps it can produce\n  // spans that happen before the browser even makes a request for the page.\n  //\n  // An example of this is the automatically generated Next.js-before-hydration\n  // spans created by the Next.js framework.\n  //\n  // To prevent this we will pin the start timestamp to the request start time\n  // This does make duration inaccurate, so if this does happen, we will add\n  // an attribute to the span\n  const measureStartTimestamp = timeOrigin + Math.max(startTime, requestTime);\n  const startTimeStamp = timeOrigin + startTime;\n  const measureEndTimestamp = startTimeStamp + duration;\n\n  const attributes: SpanAttributes = {\n    [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.resource.browser.metrics',\n  };\n\n  if (measureStartTimestamp !== startTimeStamp) {\n    attributes['sentry.browser.measure_happened_before_request'] = true;\n    attributes['sentry.browser.measure_start_time'] = measureStartTimestamp;\n  }\n\n  _addDetailToSpanAttributes(attributes, entry as PerformanceMeasure);\n\n  // Measurements from third parties can be off, which would create invalid spans, dropping transactions in the process.\n  if (measureStartTimestamp <= measureEndTimestamp) {\n    startAndEndSpan(span, measureStartTimestamp, measureEndTimestamp, {\n      name: entry.name as string,\n      op: entry.entryType as string,\n      attributes,\n    });\n  }\n}\n\nfunction _addDetailToSpanAttributes(attributes: SpanAttributes, performanceMeasure: PerformanceMeasure): void {\n  try {\n    // Accessing detail might throw in some browsers (e.g., Firefox) due to security restrictions\n    const detail = performanceMeasure.detail;\n\n    if (!detail) {\n      return;\n    }\n\n    // Process detail based on its type\n    if (typeof detail === 'object') {\n      // Handle object details\n      for (const [key, value] of Object.entries(detail)) {\n        if (value && isPrimitive(value)) {\n          attributes[`sentry.browser.measure.detail.${key}`] = value as SpanAttributeValue;\n        } else if (value !== undefined) {\n          try {\n            // This is user defined so we can't guarantee it's serializable\n            attributes[`sentry.browser.measure.detail.${key}`] = JSON.stringify(value);\n          } catch {\n            // Skip values that can't be stringified\n          }\n        }\n      }\n      return;\n    }\n\n    if (isPrimitive(detail)) {\n      // Handle primitive details\n      attributes['sentry.browser.measure.detail'] = detail as SpanAttributeValue;\n      return;\n    }\n\n    try {\n      attributes['sentry.browser.measure.detail'] = JSON.stringify(detail);\n    } catch {\n      // Skip if stringification fails\n    }\n  } catch {\n    // Silently ignore any errors when accessing detail\n    // This handles the Firefox \"Permission denied to access object\" error\n  }\n}\n\n/**\n * Instrument navigation entries\n * exported only for tests\n */\nexport function _addNavigationSpans(span: Span, entry: PerformanceNavigationTiming, timeOrigin: number): void {\n  (['unloadEvent', 'redirect', 'domContentLoadedEvent', 'loadEvent', 'connect'] as const).forEach(event => {\n    _addPerformanceNavigationTiming(span, entry, event, timeOrigin);\n  });\n  _addPerformanceNavigationTiming(span, entry, 'secureConnection', timeOrigin, 'TLS/SSL');\n  _addPerformanceNavigationTiming(span, entry, 'fetch', timeOrigin, 'cache');\n  _addPerformanceNavigationTiming(span, entry, 'domainLookup', timeOrigin, 'DNS');\n\n  _addRequest(span, entry, timeOrigin);\n}\n\ntype StartEventName =\n  | 'secureConnection'\n  | 'fetch'\n  | 'domainLookup'\n  | 'unloadEvent'\n  | 'redirect'\n  | 'connect'\n  | 'domContentLoadedEvent'\n  | 'loadEvent';\n\ntype EndEventName =\n  | 'connectEnd'\n  | 'domainLookupStart'\n  | 'domainLookupEnd'\n  | 'unloadEventEnd'\n  | 'redirectEnd'\n  | 'connectEnd'\n  | 'domContentLoadedEventEnd'\n  | 'loadEventEnd';\n\n/** Create performance navigation related spans */\nfunction _addPerformanceNavigationTiming(\n  span: Span,\n  entry: PerformanceNavigationTiming,\n  event: StartEventName,\n  timeOrigin: number,\n  name: string = event,\n): void {\n  const eventEnd = _getEndPropertyNameForNavigationTiming(event) satisfies keyof PerformanceNavigationTiming;\n  const end = entry[eventEnd];\n  const start = entry[`${event}Start`];\n  if (!start || !end) {\n    return;\n  }\n  startAndEndSpan(span, timeOrigin + msToSec(start), timeOrigin + msToSec(end), {\n    op: `browser.${name}`,\n    name: entry.name,\n    attributes: {\n      [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.ui.browser.metrics',\n      ...(event === 'redirect' && entry.redirectCount != null ? { 'http.redirect_count': entry.redirectCount } : {}),\n    },\n  });\n}\n\nfunction _getEndPropertyNameForNavigationTiming(event: StartEventName): EndEventName {\n  if (event === 'secureConnection') {\n    return 'connectEnd';\n  }\n  if (event === 'fetch') {\n    return 'domainLookupStart';\n  }\n  return `${event}End`;\n}\n\n/** Create request and response related spans */\nfunction _addRequest(span: Span, entry: PerformanceNavigationTiming, timeOrigin: number): void {\n  const requestStartTimestamp = timeOrigin + msToSec(entry.requestStart as number);\n  const responseEndTimestamp = timeOrigin + msToSec(entry.responseEnd as number);\n  const responseStartTimestamp = timeOrigin + msToSec(entry.responseStart as number);\n  if (entry.responseEnd) {\n    // It is possible that we are collecting these metrics when the page hasn't finished loading yet, for example when the HTML slowly streams in.\n    // In this case, ie. when the document request hasn't finished yet, `entry.responseEnd` will be 0.\n    // In order not to produce faulty spans, where the end timestamp is before the start timestamp, we will only collect\n    // these spans when the responseEnd value is available. The backend (Relay) would drop the entire span if it contained faulty spans.\n    startAndEndSpan(span, requestStartTimestamp, responseEndTimestamp, {\n      op: 'browser.request',\n      name: entry.name,\n      attributes: {\n        [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.ui.browser.metrics',\n      },\n    });\n\n    startAndEndSpan(span, responseStartTimestamp, responseEndTimestamp, {\n      op: 'browser.response',\n      name: entry.name,\n      attributes: {\n        [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.ui.browser.metrics',\n      },\n    });\n  }\n}\n\n/**\n * Create resource-related spans.\n * Exported only for tests.\n */\nexport function _addResourceSpans(\n  span: Span,\n  entry: PerformanceResourceTiming,\n  resourceUrl: string,\n  startTime: number,\n  duration: number,\n  timeOrigin: number,\n  ignoreResourceSpans?: Array<string>,\n): void {\n  // we already instrument based on fetch and xhr, so we don't need to\n  // duplicate spans here.\n  if (entry.initiatorType === 'xmlhttprequest' || entry.initiatorType === 'fetch') {\n    return;\n  }\n\n  const op = entry.initiatorType ? `resource.${entry.initiatorType}` : 'resource.other';\n  if (ignoreResourceSpans?.includes(op)) {\n    return;\n  }\n\n  const parsedUrl = parseUrl(resourceUrl);\n\n  const attributes: SpanAttributes = {\n    [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.resource.browser.metrics',\n  };\n  setResourceEntrySizeData(attributes, entry, 'transferSize', 'http.response_transfer_size');\n  setResourceEntrySizeData(attributes, entry, 'encodedBodySize', 'http.response_content_length');\n  setResourceEntrySizeData(attributes, entry, 'decodedBodySize', 'http.decoded_response_content_length');\n\n  // `deliveryType` is experimental and does not exist everywhere\n  const deliveryType = (entry as { deliveryType?: 'cache' | 'navigational-prefetch' | '' }).deliveryType;\n  if (deliveryType != null) {\n    attributes['http.response_delivery_type'] = deliveryType;\n  }\n\n  // Types do not reflect this property yet\n  const renderBlockingStatus = (entry as { renderBlockingStatus?: 'render-blocking' | 'non-render-blocking' })\n    .renderBlockingStatus;\n  if (renderBlockingStatus) {\n    attributes['resource.render_blocking_status'] = renderBlockingStatus;\n  }\n\n  if (parsedUrl.protocol) {\n    attributes['url.scheme'] = parsedUrl.protocol.split(':').pop(); // the protocol returned by parseUrl includes a :, but OTEL spec does not, so we remove it.\n  }\n\n  if (parsedUrl.host) {\n    attributes['server.address'] = parsedUrl.host;\n  }\n\n  attributes['url.same_origin'] = resourceUrl.includes(WINDOW.location.origin);\n\n  const { name, version } = extractNetworkProtocol(entry.nextHopProtocol);\n  attributes['network.protocol.name'] = name;\n  attributes['network.protocol.version'] = version;\n\n  const startTimestamp = timeOrigin + startTime;\n  const endTimestamp = startTimestamp + duration;\n\n  startAndEndSpan(span, startTimestamp, endTimestamp, {\n    name: resourceUrl.replace(WINDOW.location.origin, ''),\n    op,\n    attributes,\n  });\n}\n\n/**\n * Capture the information of the user agent.\n */\nfunction _trackNavigator(span: Span): void {\n  const navigator = WINDOW.navigator as null | (Navigator & NavigatorNetworkInformation & NavigatorDeviceMemory);\n  if (!navigator) {\n    return;\n  }\n\n  // track network connectivity\n  const connection = navigator.connection;\n  if (connection) {\n    if (connection.effectiveType) {\n      span.setAttribute('effectiveConnectionType', connection.effectiveType);\n    }\n\n    if (connection.type) {\n      span.setAttribute('connectionType', connection.type);\n    }\n\n    if (isMeasurementValue(connection.rtt)) {\n      _measurements['connection.rtt'] = { value: connection.rtt, unit: 'millisecond' };\n    }\n  }\n\n  if (isMeasurementValue(navigator.deviceMemory)) {\n    span.setAttribute('deviceMemory', `${navigator.deviceMemory} GB`);\n  }\n\n  if (isMeasurementValue(navigator.hardwareConcurrency)) {\n    span.setAttribute('hardwareConcurrency', String(navigator.hardwareConcurrency));\n  }\n}\n\n/** Add LCP / CLS data to span to allow debugging */\nfunction _setWebVitalAttributes(span: Span, options: AddPerformanceEntriesOptions): void {\n  // Only add LCP attributes if LCP is being recorded on the pageload span\n  if (_lcpEntry && options.recordLcpOnPageloadSpan) {\n    // Capture Properties of the LCP element that contributes to the LCP.\n\n    if (_lcpEntry.element) {\n      span.setAttribute('lcp.element', htmlTreeAsString(_lcpEntry.element));\n    }\n\n    if (_lcpEntry.id) {\n      span.setAttribute('lcp.id', _lcpEntry.id);\n    }\n\n    if (_lcpEntry.url) {\n      // Trim URL to the first 200 characters.\n      span.setAttribute('lcp.url', _lcpEntry.url.trim().slice(0, 200));\n    }\n\n    if (_lcpEntry.loadTime != null) {\n      // loadTime is the time of LCP that's related to receiving the LCP element response..\n      span.setAttribute('lcp.loadTime', _lcpEntry.loadTime);\n    }\n\n    if (_lcpEntry.renderTime != null) {\n      // renderTime is loadTime + rendering time\n      // it's 0 if the LCP element is loaded from a 3rd party origin that doesn't send the\n      // `Timing-Allow-Origin` header.\n      span.setAttribute('lcp.renderTime', _lcpEntry.renderTime);\n    }\n\n    span.setAttribute('lcp.size', _lcpEntry.size);\n  }\n\n  // Only add CLS attributes if CLS is being recorded on the pageload span\n  if (_clsEntry?.sources && options.recordClsOnPageloadSpan) {\n    _clsEntry.sources.forEach((source, index) =>\n      span.setAttribute(`cls.source.${index + 1}`, htmlTreeAsString(source.node)),\n    );\n  }\n}\n\nfunction setResourceEntrySizeData(\n  attributes: SpanAttributes,\n  entry: PerformanceResourceTiming,\n  key: keyof Pick<PerformanceResourceTiming, 'transferSize' | 'encodedBodySize' | 'decodedBodySize'>,\n  dataKey: 'http.response_transfer_size' | 'http.response_content_length' | 'http.decoded_response_content_length',\n): void {\n  const entryVal = entry[key];\n  if (entryVal != null && entryVal < MAX_INT_AS_BYTES) {\n    attributes[dataKey] = entryVal;\n  }\n}\n\n/**\n * Add ttfb request time information to measurements.\n *\n * ttfb information is added via vendored web vitals library.\n */\nfunction _addTtfbRequestTimeToMeasurements(_measurements: Measurements): void {\n  const navEntry = getNavigationEntry(false);\n  if (!navEntry) {\n    return;\n  }\n\n  const { responseStart, requestStart } = navEntry;\n\n  if (requestStart <= responseStart) {\n    _measurements['ttfb.requestTime'] = {\n      value: responseStart - requestStart,\n      unit: 'millisecond',\n    };\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 2946, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2951, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry-internal+browser-utils@9.36.0/node_modules/@sentry-internal/browser-utils/src/metrics/elementTiming.ts"],"sourcesContent":["import type { SpanAttributes } from '@sentry/core';\nimport {\n  browserPerformanceTimeOrigin,\n  getActiveSpan,\n  getCurrentScope,\n  getRootSpan,\n  SEMANTIC_ATTRIBUTE_SENTRY_OP,\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n  SEMANTIC_ATTRIBUTE_SENTRY_SOURCE,\n  spanToJSON,\n  startSpan,\n  timestampInSeconds,\n} from '@sentry/core';\nimport { addPerformanceInstrumentationHandler } from './instrument';\nimport { getBrowserPerformanceAPI, msToSec } from './utils';\n\n// ElementTiming interface based on the W3C spec\ninterface PerformanceElementTiming extends PerformanceEntry {\n  renderTime: number;\n  loadTime: number;\n  intersectionRect: DOMRectReadOnly;\n  identifier: string;\n  naturalWidth: number;\n  naturalHeight: number;\n  id: string;\n  element: Element | null;\n  url?: string;\n}\n\n/**\n * Start tracking ElementTiming performance entries.\n */\nexport function startTrackingElementTiming(): () => void {\n  const performance = getBrowserPerformanceAPI();\n  if (performance && browserPerformanceTimeOrigin()) {\n    return addPerformanceInstrumentationHandler('element', _onElementTiming);\n  }\n\n  return () => undefined;\n}\n\n/**\n * exported only for testing\n */\nexport const _onElementTiming = ({ entries }: { entries: PerformanceEntry[] }): void => {\n  const activeSpan = getActiveSpan();\n  const rootSpan = activeSpan ? getRootSpan(activeSpan) : undefined;\n  const transactionName = rootSpan\n    ? spanToJSON(rootSpan).description\n    : getCurrentScope().getScopeData().transactionName;\n\n  entries.forEach(entry => {\n    const elementEntry = entry as PerformanceElementTiming;\n\n    // Skip entries without identifier (elementtiming attribute)\n    if (!elementEntry.identifier) {\n      return;\n    }\n\n    // `name` contains the type of the element paint. Can be `'image-paint'` or `'text-paint'`.\n    // https://developer.mozilla.org/en-US/docs/Web/API/PerformanceElementTiming#instance_properties\n    const paintType = elementEntry.name as 'image-paint' | 'text-paint' | undefined;\n\n    const renderTime = elementEntry.renderTime;\n    const loadTime = elementEntry.loadTime;\n\n    // starting the span at:\n    // - `loadTime` if available (should be available for all \"image-paint\" entries, 0 otherwise)\n    // - `renderTime` if available (available for all entries, except 3rd party images, but these should be covered by `loadTime`, 0 otherwise)\n    // - `timestampInSeconds()` as a safeguard\n    // see https://developer.mozilla.org/en-US/docs/Web/API/PerformanceElementTiming/renderTime#cross-origin_image_render_time\n    const [spanStartTime, spanStartTimeSource] = loadTime\n      ? [msToSec(loadTime), 'load-time']\n      : renderTime\n        ? [msToSec(renderTime), 'render-time']\n        : [timestampInSeconds(), 'entry-emission'];\n\n    const duration =\n      paintType === 'image-paint'\n        ? // for image paints, we can acually get a duration because image-paint entries also have a `loadTime`\n          // and `renderTime`. `loadTime` is the time when the image finished loading and `renderTime` is the\n          // time when the image finished rendering.\n          msToSec(Math.max(0, (renderTime ?? 0) - (loadTime ?? 0)))\n        : // for `'text-paint'` entries, we can't get a duration because the `loadTime` is always zero.\n          0;\n\n    const attributes: SpanAttributes = {\n      [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.ui.browser.elementtiming',\n      [SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'ui.elementtiming',\n      // name must be user-entered, so we can assume low cardinality\n      [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'component',\n      // recording the source of the span start time, as it varies depending on available data\n      'sentry.span_start_time_source': spanStartTimeSource,\n      'sentry.transaction_name': transactionName,\n      'element.id': elementEntry.id,\n      'element.type': elementEntry.element?.tagName?.toLowerCase() || 'unknown',\n      'element.size':\n        elementEntry.naturalWidth && elementEntry.naturalHeight\n          ? `${elementEntry.naturalWidth}x${elementEntry.naturalHeight}`\n          : undefined,\n      'element.render_time': renderTime,\n      'element.load_time': loadTime,\n      // `url` is `0`(number) for text paints (hence we fall back to undefined)\n      'element.url': elementEntry.url || undefined,\n      'element.identifier': elementEntry.identifier,\n      'element.paint_type': paintType,\n    };\n\n    startSpan(\n      {\n        name: `element[${elementEntry.identifier}]`,\n        attributes,\n        startTime: spanStartTime,\n        onlyIfParent: true,\n      },\n      span => {\n        span.end(spanStartTime + duration);\n      },\n    );\n  });\n};\n"],"names":[],"mappings":";;;;;;;;;;;;;;;AAgBA,gDAAA;AAaA;;CAEA,GACO,SAAS;IACd,MAAM,cAAc,CAAA,GAAA,qRAAA,CAAA,2BAAwB,AAAxB;IACpB,IAAI,eAAe,CAAA,GAAA,kOAAA,CAAA,+BAA4B,AAA5B,KAAgC;QACjD,OAAO,CAAA,GAAA,0RAAA,CAAA,uCAAoC,AAApC,EAAqC,WAAW;IAC3D;IAEE,OAAO,IAAM;AACf;AAEA;;CAEA,SACa,mBAAmB,CAAC,EAAE,OAAA,EAAS;IAC1C,MAAM,aAAa,CAAA,GAAA,uOAAA,CAAA,gBAAa,AAAb;IACnB,MAAM,WAAW,aAAa,CAAA,GAAA,uOAAA,CAAA,cAAW,AAAX,EAAY,cAAc;IACxD,MAAM,kBAAkB,WACpB,CAAA,GAAA,uOAAA,CAAA,aAAU,AAAV,EAAW,UAAU,WAAA,GACrB,CAAA,GAAA,kOAAA,CAAA,kBAAe,AAAf,IAAkB,YAAY,GAAG,eAAe;IAEpD,QAAQ,OAAO,CAAC,CAAA;QACd,MAAM,eAAe;QAEzB,4DAAA;QACI,IAAI,CAAC,aAAa,UAAU,EAAE;YAC5B;QACN;QAEA,2FAAA;QACA,gGAAA;QACI,MAAM,YAAY,aAAa,IAAK;QAEpC,MAAM,aAAa,aAAa,UAAU;QAC1C,MAAM,WAAW,aAAa,QAAQ;QAE1C,wBAAA;QACA,6FAAA;QACA,2IAAA;QACA,0CAAA;QACA,0HAAA;QACI,MAAM,CAAC,eAAe,oBAAmB,GAAI,WACzC;YAAC,CAAA,GAAA,qRAAA,CAAA,UAAO,AAAP,EAAQ;YAAW;SAAW,GAC/B,aACE;YAAC,CAAA,GAAA,qRAAA,CAAA,UAAO,AAAP,EAAQ;YAAa;SAAa,GACnC;YAAC,CAAA,GAAA,kOAAA,CAAA,qBAAkB,AAAlB;YAAsB;SAAiB;QAE9C,MAAM,WACJ,cAAc,gBAEpB,mGAAA;QACA,0CAAA;QACU,CAAA,GAAA,qRAAA,CAAA,UAAO,AAAP,EAAQ,KAAK,GAAG,CAAC,GAAG,CAAC,cAAc,CAAC,IAAA,CAAK,YAAY,CAAC,MAEtD;QAEN,MAAM,aAA6B;YACjC,CAAC,uOAAA,CAAA,mCAAgC,CAAA,EAAG;YACpC,CAAC,uOAAA,CAAA,+BAA4B,CAAA,EAAG;YACtC,8DAAA;YACM,CAAC,uOAAA,CAAA,mCAAgC,CAAA,EAAG;YAC1C,wFAAA;YACM,iCAAiC;YACjC,2BAA2B;YAC3B,cAAc,aAAa,EAAE;YAC7B,gBAAgB,aAAa,OAAO,EAAE,SAAS,iBAAiB;YAChE,gBACE,aAAa,YAAa,IAAG,aAAa,aAAA,GACtC,CAAC,EAAA,aAAA,YAAA,CAAA,CAAA,EAAA,aAAA,aAAA,CAAA,CAAA,GACA;YACA,uBAAA;YACA,qBAAA;YACA,yEAAA;YACA,eAAA,aAAA,GAAA,IAAA;YACA,sBAAA,aAAA,UAAA;YACA,sBAAA;QACA;QAEA,CAAA,GAAA,qOAAA,CAAA,YAAA,EACA;YACA,MAAA,CAAA,QAAA,EAAA,aAAA,UAAA,CAAA,CAAA,CAAA;YACA;YACA,WAAA;YACA,cAAA;QACA,GACA,CAAA;YACA,KAAA,GAAA,CAAA,gBAAA;QACA;IAEA;AACA"}},
    {"offset": {"line": 3041, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3046, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry-internal+browser-utils@9.36.0/node_modules/@sentry-internal/browser-utils/src/instrument/xhr.ts"],"sourcesContent":["import type { HandlerDataXhr, SentryWrappedXMLHttpRequest } from '@sentry/core';\nimport { addHandler, isString, maybeInstrument, timestampInSeconds, triggerHandlers } from '@sentry/core';\nimport { WINDOW } from '../types';\n\nexport const SENTRY_XHR_DATA_KEY = '__sentry_xhr_v3__';\n\ntype WindowWithXhr = Window & { XMLHttpRequest?: typeof XMLHttpRequest };\n\n/**\n * Add an instrumentation handler for when an XHR request happens.\n * The handler function is called once when the request starts and once when it ends,\n * which can be identified by checking if it has an `endTimestamp`.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nexport function addXhrInstrumentationHandler(handler: (data: HandlerDataXhr) => void): void {\n  const type = 'xhr';\n  addHandler(type, handler);\n  maybeInstrument(type, instrumentXHR);\n}\n\n/** Exported only for tests. */\nexport function instrumentXHR(): void {\n  if (!(WINDOW as WindowWithXhr).XMLHttpRequest) {\n    return;\n  }\n\n  const xhrproto = XMLHttpRequest.prototype;\n\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  xhrproto.open = new Proxy(xhrproto.open, {\n    apply(\n      originalOpen,\n      xhrOpenThisArg: XMLHttpRequest & SentryWrappedXMLHttpRequest,\n      xhrOpenArgArray:\n        | [method: string, url: string | URL]\n        | [method: string, url: string | URL, async: boolean, username?: string | null, password?: string | null],\n    ) {\n      // NOTE: If you are a Sentry user, and you are seeing this stack frame,\n      //       it means the error, that was caused by your XHR call did not\n      //       have a stack trace. If you are using HttpClient integration,\n      //       this is the expected behavior, as we are using this virtual error to capture\n      //       the location of your XHR call, and group your HttpClient events accordingly.\n      const virtualError = new Error();\n\n      const startTimestamp = timestampInSeconds() * 1000;\n\n      // open() should always be called with two or more arguments\n      // But to be on the safe side, we actually validate this and bail out if we don't have a method & url\n      const method = isString(xhrOpenArgArray[0]) ? xhrOpenArgArray[0].toUpperCase() : undefined;\n      const url = parseXhrUrlArg(xhrOpenArgArray[1]);\n\n      if (!method || !url) {\n        return originalOpen.apply(xhrOpenThisArg, xhrOpenArgArray);\n      }\n\n      xhrOpenThisArg[SENTRY_XHR_DATA_KEY] = {\n        method,\n        url,\n        request_headers: {},\n      };\n\n      // if Sentry key appears in URL, don't capture it as a request\n      if (method === 'POST' && url.match(/sentry_key/)) {\n        xhrOpenThisArg.__sentry_own_request__ = true;\n      }\n\n      const onreadystatechangeHandler: () => void = () => {\n        // For whatever reason, this is not the same instance here as from the outer method\n        const xhrInfo = xhrOpenThisArg[SENTRY_XHR_DATA_KEY];\n\n        if (!xhrInfo) {\n          return;\n        }\n\n        if (xhrOpenThisArg.readyState === 4) {\n          try {\n            // touching statusCode in some platforms throws\n            // an exception\n            xhrInfo.status_code = xhrOpenThisArg.status;\n          } catch (e) {\n            /* do nothing */\n          }\n\n          const handlerData: HandlerDataXhr = {\n            endTimestamp: timestampInSeconds() * 1000,\n            startTimestamp,\n            xhr: xhrOpenThisArg,\n            virtualError,\n          };\n          triggerHandlers('xhr', handlerData);\n        }\n      };\n\n      if ('onreadystatechange' in xhrOpenThisArg && typeof xhrOpenThisArg.onreadystatechange === 'function') {\n        xhrOpenThisArg.onreadystatechange = new Proxy(xhrOpenThisArg.onreadystatechange, {\n          apply(originalOnreadystatechange, onreadystatechangeThisArg, onreadystatechangeArgArray: unknown[]) {\n            onreadystatechangeHandler();\n            return originalOnreadystatechange.apply(onreadystatechangeThisArg, onreadystatechangeArgArray);\n          },\n        });\n      } else {\n        xhrOpenThisArg.addEventListener('readystatechange', onreadystatechangeHandler);\n      }\n\n      // Intercepting `setRequestHeader` to access the request headers of XHR instance.\n      // This will only work for user/library defined headers, not for the default/browser-assigned headers.\n      // Request cookies are also unavailable for XHR, as `Cookie` header can't be defined by `setRequestHeader`.\n      xhrOpenThisArg.setRequestHeader = new Proxy(xhrOpenThisArg.setRequestHeader, {\n        apply(\n          originalSetRequestHeader,\n          setRequestHeaderThisArg: SentryWrappedXMLHttpRequest,\n          setRequestHeaderArgArray: unknown[],\n        ) {\n          const [header, value] = setRequestHeaderArgArray;\n\n          const xhrInfo = setRequestHeaderThisArg[SENTRY_XHR_DATA_KEY];\n\n          if (xhrInfo && isString(header) && isString(value)) {\n            xhrInfo.request_headers[header.toLowerCase()] = value;\n          }\n\n          return originalSetRequestHeader.apply(setRequestHeaderThisArg, setRequestHeaderArgArray);\n        },\n      });\n\n      return originalOpen.apply(xhrOpenThisArg, xhrOpenArgArray);\n    },\n  });\n\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  xhrproto.send = new Proxy(xhrproto.send, {\n    apply(originalSend, sendThisArg: XMLHttpRequest & SentryWrappedXMLHttpRequest, sendArgArray: unknown[]) {\n      const sentryXhrData = sendThisArg[SENTRY_XHR_DATA_KEY];\n\n      if (!sentryXhrData) {\n        return originalSend.apply(sendThisArg, sendArgArray);\n      }\n\n      if (sendArgArray[0] !== undefined) {\n        sentryXhrData.body = sendArgArray[0];\n      }\n\n      const handlerData: HandlerDataXhr = {\n        startTimestamp: timestampInSeconds() * 1000,\n        xhr: sendThisArg,\n      };\n      triggerHandlers('xhr', handlerData);\n\n      return originalSend.apply(sendThisArg, sendArgArray);\n    },\n  });\n}\n\n/**\n * Parses the URL argument of a XHR method to a string.\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/open#url\n * url: A string or any other object with a stringifier — including a URL object — that provides the URL of the resource to send the request to.\n *\n * @param url - The URL argument of an XHR method\n * @returns The parsed URL string or undefined if the URL is invalid\n */\nfunction parseXhrUrlArg(url: unknown): string | undefined {\n  if (isString(url)) {\n    return url;\n  }\n\n  try {\n    // If the passed in argument is not a string, it should have a `toString` method as a stringifier.\n    // If that fails, we just return undefined (like in IE11 where URL is not available)\n    return (url as URL).toString();\n  } catch {} // eslint-disable-line no-empty\n\n  return undefined;\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 3190, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3195, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry-internal+browser-utils@9.36.0/node_modules/@sentry-internal/browser-utils/src/instrument/dom.ts"],"sourcesContent":["import type { HandlerDataDom } from '@sentry/core';\nimport { addHandler, addNonEnumerableProperty, fill, maybeInstrument, triggerHandlers, uuid4 } from '@sentry/core';\nimport { WINDOW } from '../types';\n\ntype SentryWrappedTarget = HTMLElement & { _sentryId?: string };\n\ntype AddEventListener = (\n  type: string,\n  listener: EventListenerOrEventListenerObject,\n  options?: boolean | AddEventListenerOptions,\n) => void;\ntype RemoveEventListener = (\n  type: string,\n  listener: EventListenerOrEventListenerObject,\n  options?: boolean | EventListenerOptions,\n) => void;\n\ntype InstrumentedElement = Element & {\n  __sentry_instrumentation_handlers__?: {\n    [key in 'click' | 'keypress']?: {\n      handler?: unknown;\n      /** The number of custom listeners attached to this element */\n      refCount: number;\n    };\n  };\n};\n\nconst DEBOUNCE_DURATION = 1000;\n\nlet debounceTimerID: number | undefined;\nlet lastCapturedEventType: string | undefined;\nlet lastCapturedEventTargetId: string | undefined;\n\n/**\n * Add an instrumentation handler for when a click or a keypress happens.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nexport function addClickKeypressInstrumentationHandler(handler: (data: HandlerDataDom) => void): void {\n  const type = 'dom';\n  addHandler(type, handler);\n  maybeInstrument(type, instrumentDOM);\n}\n\n/** Exported for tests only. */\nexport function instrumentDOM(): void {\n  if (!WINDOW.document) {\n    return;\n  }\n\n  // Make it so that any click or keypress that is unhandled / bubbled up all the way to the document triggers our dom\n  // handlers. (Normally we have only one, which captures a breadcrumb for each click or keypress.) Do this before\n  // we instrument `addEventListener` so that we don't end up attaching this handler twice.\n  const triggerDOMHandler = triggerHandlers.bind(null, 'dom');\n  const globalDOMEventHandler = makeDOMEventHandler(triggerDOMHandler, true);\n  WINDOW.document.addEventListener('click', globalDOMEventHandler, false);\n  WINDOW.document.addEventListener('keypress', globalDOMEventHandler, false);\n\n  // After hooking into click and keypress events bubbled up to `document`, we also hook into user-handled\n  // clicks & keypresses, by adding an event listener of our own to any element to which they add a listener. That\n  // way, whenever one of their handlers is triggered, ours will be, too. (This is needed because their handler\n  // could potentially prevent the event from bubbling up to our global listeners. This way, our handler are still\n  // guaranteed to fire at least once.)\n  ['EventTarget', 'Node'].forEach((target: string) => {\n    const globalObject = WINDOW as unknown as Record<string, { prototype?: object }>;\n    const proto = globalObject[target]?.prototype;\n\n    // eslint-disable-next-line no-prototype-builtins\n    if (!proto?.hasOwnProperty?.('addEventListener')) {\n      return;\n    }\n\n    fill(proto, 'addEventListener', function (originalAddEventListener: AddEventListener): AddEventListener {\n      return function (this: InstrumentedElement, type, listener, options): AddEventListener {\n        if (type === 'click' || type == 'keypress') {\n          try {\n            const handlers = (this.__sentry_instrumentation_handlers__ =\n              this.__sentry_instrumentation_handlers__ || {});\n            const handlerForType = (handlers[type] = handlers[type] || { refCount: 0 });\n\n            if (!handlerForType.handler) {\n              const handler = makeDOMEventHandler(triggerDOMHandler);\n              handlerForType.handler = handler;\n              originalAddEventListener.call(this, type, handler, options);\n            }\n\n            handlerForType.refCount++;\n          } catch (e) {\n            // Accessing dom properties is always fragile.\n            // Also allows us to skip `addEventListeners` calls with no proper `this` context.\n          }\n        }\n\n        return originalAddEventListener.call(this, type, listener, options);\n      };\n    });\n\n    fill(\n      proto,\n      'removeEventListener',\n      function (originalRemoveEventListener: RemoveEventListener): RemoveEventListener {\n        return function (this: InstrumentedElement, type, listener, options): () => void {\n          if (type === 'click' || type == 'keypress') {\n            try {\n              const handlers = this.__sentry_instrumentation_handlers__ || {};\n              const handlerForType = handlers[type];\n\n              if (handlerForType) {\n                handlerForType.refCount--;\n                // If there are no longer any custom handlers of the current type on this element, we can remove ours, too.\n                if (handlerForType.refCount <= 0) {\n                  originalRemoveEventListener.call(this, type, handlerForType.handler, options);\n                  handlerForType.handler = undefined;\n                  delete handlers[type]; // eslint-disable-line @typescript-eslint/no-dynamic-delete\n                }\n\n                // If there are no longer any custom handlers of any type on this element, cleanup everything.\n                if (Object.keys(handlers).length === 0) {\n                  delete this.__sentry_instrumentation_handlers__;\n                }\n              }\n            } catch (e) {\n              // Accessing dom properties is always fragile.\n              // Also allows us to skip `addEventListeners` calls with no proper `this` context.\n            }\n          }\n\n          return originalRemoveEventListener.call(this, type, listener, options);\n        };\n      },\n    );\n  });\n}\n\n/**\n * Check whether the event is similar to the last captured one. For example, two click events on the same button.\n */\nfunction isSimilarToLastCapturedEvent(event: Event): boolean {\n  // If both events have different type, then user definitely performed two separate actions. e.g. click + keypress.\n  if (event.type !== lastCapturedEventType) {\n    return false;\n  }\n\n  try {\n    // If both events have the same type, it's still possible that actions were performed on different targets.\n    // e.g. 2 clicks on different buttons.\n    if (!event.target || (event.target as SentryWrappedTarget)._sentryId !== lastCapturedEventTargetId) {\n      return false;\n    }\n  } catch (e) {\n    // just accessing `target` property can throw an exception in some rare circumstances\n    // see: https://github.com/getsentry/sentry-javascript/issues/838\n  }\n\n  // If both events have the same type _and_ same `target` (an element which triggered an event, _not necessarily_\n  // to which an event listener was attached), we treat them as the same action, as we want to capture\n  // only one breadcrumb. e.g. multiple clicks on the same button, or typing inside a user input box.\n  return true;\n}\n\n/**\n * Decide whether an event should be captured.\n * @param event event to be captured\n */\nfunction shouldSkipDOMEvent(eventType: string, target: SentryWrappedTarget | null): boolean {\n  // We are only interested in filtering `keypress` events for now.\n  if (eventType !== 'keypress') {\n    return false;\n  }\n\n  if (!target?.tagName) {\n    return true;\n  }\n\n  // Only consider keypress events on actual input elements. This will disregard keypresses targeting body\n  // e.g.tabbing through elements, hotkeys, etc.\n  if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA' || target.isContentEditable) {\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Wraps addEventListener to capture UI breadcrumbs\n */\nfunction makeDOMEventHandler(\n  handler: (data: HandlerDataDom) => void,\n  globalListener: boolean = false,\n): (event: Event) => void {\n  return (event: Event & { _sentryCaptured?: true }): void => {\n    // It's possible this handler might trigger multiple times for the same\n    // event (e.g. event propagation through node ancestors).\n    // Ignore if we've already captured that event.\n    if (!event || event['_sentryCaptured']) {\n      return;\n    }\n\n    const target = getEventTarget(event);\n\n    // We always want to skip _some_ events.\n    if (shouldSkipDOMEvent(event.type, target)) {\n      return;\n    }\n\n    // Mark event as \"seen\"\n    addNonEnumerableProperty(event, '_sentryCaptured', true);\n\n    if (target && !target._sentryId) {\n      // Add UUID to event target so we can identify if\n      addNonEnumerableProperty(target, '_sentryId', uuid4());\n    }\n\n    const name = event.type === 'keypress' ? 'input' : event.type;\n\n    // If there is no last captured event, it means that we can safely capture the new event and store it for future comparisons.\n    // If there is a last captured event, see if the new event is different enough to treat it as a unique one.\n    // If that's the case, emit the previous event and store locally the newly-captured DOM event.\n    if (!isSimilarToLastCapturedEvent(event)) {\n      const handlerData: HandlerDataDom = { event, name, global: globalListener };\n      handler(handlerData);\n      lastCapturedEventType = event.type;\n      lastCapturedEventTargetId = target ? target._sentryId : undefined;\n    }\n\n    // Start a new debounce timer that will prevent us from capturing multiple events that should be grouped together.\n    clearTimeout(debounceTimerID);\n    debounceTimerID = WINDOW.setTimeout(() => {\n      lastCapturedEventTargetId = undefined;\n      lastCapturedEventType = undefined;\n    }, DEBOUNCE_DURATION);\n  };\n}\n\nfunction getEventTarget(event: Event): SentryWrappedTarget | null {\n  try {\n    return event.target as SentryWrappedTarget | null;\n  } catch (e) {\n    // just accessing `target` property can throw an exception in some rare circumstances\n    // see: https://github.com/getsentry/sentry-javascript/issues/838\n    return null;\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 3391, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3396, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry-internal+browser-utils@9.36.0/node_modules/@sentry-internal/browser-utils/src/getNativeImplementation.ts"],"sourcesContent":["import { isNativeFunction, logger } from '@sentry/core';\nimport { DEBUG_BUILD } from './debug-build';\nimport { WINDOW } from './types';\n\n/**\n * We generally want to use window.fetch / window.setTimeout.\n * However, in some cases this may be wrapped (e.g. by Zone.js for Angular),\n * so we try to get an unpatched version of this from a sandboxed iframe.\n */\n\ninterface CacheableImplementations {\n  setTimeout: typeof WINDOW.setTimeout;\n  fetch: typeof WINDOW.fetch;\n}\n\nconst cachedImplementations: Partial<CacheableImplementations> = {};\n\n/**\n * Get the native implementation of a browser function.\n *\n * This can be used to ensure we get an unwrapped version of a function, in cases where a wrapped function can lead to problems.\n *\n * The following methods can be retrieved:\n * - `setTimeout`: This can be wrapped by e.g. Angular, causing change detection to be triggered.\n * - `fetch`: This can be wrapped by e.g. ad-blockers, causing an infinite loop when a request is blocked.\n */\nexport function getNativeImplementation<T extends keyof CacheableImplementations>(\n  name: T,\n): CacheableImplementations[T] {\n  const cached = cachedImplementations[name];\n  if (cached) {\n    return cached;\n  }\n\n  let impl = WINDOW[name] as CacheableImplementations[T];\n\n  // Fast path to avoid DOM I/O\n  if (isNativeFunction(impl)) {\n    return (cachedImplementations[name] = impl.bind(WINDOW) as CacheableImplementations[T]);\n  }\n\n  const document = WINDOW.document;\n  // eslint-disable-next-line deprecation/deprecation\n  if (document && typeof document.createElement === 'function') {\n    try {\n      const sandbox = document.createElement('iframe');\n      sandbox.hidden = true;\n      document.head.appendChild(sandbox);\n      const contentWindow = sandbox.contentWindow;\n      if (contentWindow?.[name]) {\n        impl = contentWindow[name] as CacheableImplementations[T];\n      }\n      document.head.removeChild(sandbox);\n    } catch (e) {\n      // Could not create sandbox iframe, just use window.xxx\n      DEBUG_BUILD && logger.warn(`Could not create sandbox iframe for ${name} check, bailing to window.${name}: `, e);\n    }\n  }\n\n  // Sanity check: This _should_ not happen, but if it does, we just skip caching...\n  // This can happen e.g. in tests where fetch may not be available in the env, or similar.\n  if (!impl) {\n    return impl;\n  }\n\n  return (cachedImplementations[name] = impl.bind(WINDOW) as CacheableImplementations[T]);\n}\n\n/** Clear a cached implementation. */\nexport function clearCachedImplementation(name: keyof CacheableImplementations): void {\n  cachedImplementations[name] = undefined;\n}\n\n/**\n * A special usecase for incorrectly wrapped Fetch APIs in conjunction with ad-blockers.\n * Whenever someone wraps the Fetch API and returns the wrong promise chain,\n * this chain becomes orphaned and there is no possible way to capture it's rejections\n * other than allowing it bubble up to this very handler. eg.\n *\n * const f = window.fetch;\n * window.fetch = function () {\n *   const p = f.apply(this, arguments);\n *\n *   p.then(function() {\n *     console.log('hi.');\n *   });\n *\n *   return p;\n * }\n *\n * `p.then(function () { ... })` is producing a completely separate promise chain,\n * however, what's returned is `p` - the result of original `fetch` call.\n *\n * This mean, that whenever we use the Fetch API to send our own requests, _and_\n * some ad-blocker blocks it, this orphaned chain will _always_ reject,\n * effectively causing another event to be captured.\n * This makes a whole process become an infinite loop, which we need to somehow\n * deal with, and break it in one way or another.\n *\n * To deal with this issue, we are making sure that we _always_ use the real\n * browser Fetch API, instead of relying on what `window.fetch` exposes.\n * The only downside to this would be missing our own requests as breadcrumbs,\n * but because we are already not doing this, it should be just fine.\n *\n * Possible failed fetch error messages per-browser:\n *\n * Chrome:  Failed to fetch\n * Edge:    Failed to Fetch\n * Firefox: NetworkError when attempting to fetch resource\n * Safari:  resource blocked by content blocker\n */\nexport function fetch(...rest: Parameters<typeof WINDOW.fetch>): ReturnType<typeof WINDOW.fetch> {\n  return getNativeImplementation('fetch')(...rest);\n}\n\n/**\n * Get an unwrapped `setTimeout` method.\n * This ensures that even if e.g. Angular wraps `setTimeout`, we get the native implementation,\n * avoiding triggering change detection.\n */\nexport function setTimeout(...rest: Parameters<typeof WINDOW.setTimeout>): ReturnType<typeof WINDOW.setTimeout> {\n  return getNativeImplementation('setTimeout')(...rest);\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;AAIA;;;;CAIA,GAOA,MAAM,wBAA2D,CAAA;AAEjE;;;;;;;;CAQA,GACO,SAAS,wBACd,IAAI;IAEJ,MAAM,SAAS,qBAAqB,CAAC,KAAK;IAC1C,IAAI,QAAQ;QACV,OAAO;IACX;IAEE,IAAI,OAAO,0QAAA,CAAA,SAAM,CAAC,KAAM;IAE1B,6BAAA;IACE,IAAI,CAAA,GAAA,sOAAA,CAAA,mBAAgB,AAAhB,EAAiB,OAAO;QAC1B,OAAQ,qBAAqB,CAAC,KAAI,GAAI,KAAK,IAAI,CAAC,0QAAA,CAAA,SAAM;IAC1D;IAEE,MAAM,WAAW,0QAAA,CAAA,SAAM,CAAC,QAAQ;IAClC,mDAAA;IACE,IAAI,YAAY,OAAO,SAAS,aAAA,KAAkB,YAAY;QAC5D,IAAI;YACF,MAAM,UAAU,SAAS,aAAa,CAAC;YACvC,QAAQ,MAAO,GAAE;YACjB,SAAS,IAAI,CAAC,WAAW,CAAC;YAC1B,MAAM,gBAAgB,QAAQ,aAAa;YAC3C,IAAI,eAAa,CAAG,KAAK,EAAE;gBACzB,OAAO,aAAa,CAAC,KAAM;YACnC;YACM,SAAS,IAAI,CAAC,WAAW,CAAC;QAChC,EAAM,OAAO,GAAG;YAChB,uDAAA;YACM,mRAAA,CAAA,cAAA,IAAe,oOAAA,CAAA,SAAM,CAAC,IAAI,CAAC,CAAC,oCAAoC,EAAE,KAAK,0BAA0B,EAAE,KAAK,EAAE,CAAC,EAAE;QACnH;IACA;IAEA,kFAAA;IACA,yFAAA;IACE,IAAI,CAAC,MAAM;QACT,OAAO;IACX;IAEE,OAAQ,qBAAqB,CAAC,KAAI,GAAI,KAAK,IAAI,CAAC,0QAAA,CAAA,SAAM;AACxD;AAEA,mCAAA,GACO,SAAS,0BAA0B,IAAI;IAC5C,qBAAqB,CAAC,KAAI,GAAI;AAChC;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAqCA,GACO,SAAS,MAAM,GAAG,IAAI;IAC3B,OAAO,wBAAwB,YAAY;AAC7C;AAEA;;;;CAIA,GACO,SAAS,WAAW,GAAG,IAAI;IAChC,OAAO,wBAAwB,iBAAiB;AAClD"}},
    {"offset": {"line": 3509, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3514, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@sentry-internal+browser-utils@9.36.0/node_modules/@sentry-internal/browser-utils/src/networkUtils.ts"],"sourcesContent":["import type { Logger } from '@sentry/core';\nimport { logger } from '@sentry/core';\nimport { DEBUG_BUILD } from './debug-build';\nimport type { NetworkMetaWarning } from './types';\n\n/**\n * Serializes FormData.\n *\n * This is a bit simplified, but gives us a decent estimate.\n * This converts e.g. { name: 'Anne Smith', age: 13 } to 'name=Anne+Smith&age=13'.\n *\n */\nexport function serializeFormData(formData: FormData): string {\n  // @ts-expect-error passing FormData to URLSearchParams actually works\n  return new URLSearchParams(formData).toString();\n}\n\n/** Get the string representation of a body. */\nexport function getBodyString(body: unknown, _logger: Logger = logger): [string | undefined, NetworkMetaWarning?] {\n  try {\n    if (typeof body === 'string') {\n      return [body];\n    }\n\n    if (body instanceof URLSearchParams) {\n      return [body.toString()];\n    }\n\n    if (body instanceof FormData) {\n      return [serializeFormData(body)];\n    }\n\n    if (!body) {\n      return [undefined];\n    }\n  } catch (error) {\n    DEBUG_BUILD && _logger.error(error, 'Failed to serialize body', body);\n    return [undefined, 'BODY_PARSE_ERROR'];\n  }\n\n  DEBUG_BUILD && _logger.info('Skipping network body because of body type', body);\n\n  return [undefined, 'UNPARSEABLE_BODY_TYPE'];\n}\n\n/**\n * Parses the fetch arguments to extract the request payload.\n *\n * We only support getting the body from the fetch options.\n */\nexport function getFetchRequestArgBody(fetchArgs: unknown[] = []): RequestInit['body'] | undefined {\n  if (fetchArgs.length !== 2 || typeof fetchArgs[1] !== 'object') {\n    return undefined;\n  }\n\n  return (fetchArgs[1] as RequestInit).body;\n}\n"],"names":[],"mappings":";;;;;;;;;;AAKA;;;;;;CAMA,GACO,SAAS,kBAAkB,QAAQ;IAC1C,sEAAA;IACE,OAAO,IAAI,gBAAgB,UAAU,QAAQ;AAC/C;AAEA,6CAAA,GACO,SAAS,cAAc,IAAI,EAAW,UAAkB,oOAAA,CAAA,SAAM;IACnE,IAAI;QACF,IAAI,OAAO,SAAS,UAAU;YAC5B,OAAO;gBAAC;aAAK;QACnB;QAEI,IAAI,gBAAgB,iBAAiB;YACnC,OAAO;gBAAC,KAAK,QAAQ;aAAG;QAC9B;QAEI,IAAI,gBAAgB,UAAU;YAC5B,OAAO;gBAAC,kBAAkB;aAAM;QACtC;QAEI,IAAI,CAAC,MAAM;YACT,OAAO;gBAAC;aAAU;QACxB;IACA,EAAI,OAAO,OAAO;QACd,mRAAA,CAAA,cAAA,IAAe,QAAQ,KAAK,CAAC,OAAO,4BAA4B;QAChE,OAAO;YAAC;YAAW;SAAmB;IAC1C;IAEE,mRAAA,CAAA,cAAA,IAAe,QAAQ,IAAI,CAAC,8CAA8C;IAE1E,OAAO;QAAC;QAAW;KAAwB;AAC7C;AAEA;;;;CAIA,GACO,SAAS,uBAAuB,YAAuB,EAAE;IAC9D,IAAI,UAAU,MAAA,KAAW,KAAK,OAAO,SAAS,CAAC,EAAG,KAAI,UAAU;QAC9D,OAAO;IACX;IAEE,OAAO,AAAC,SAAS,CAAC,EAAG,CAAgB,IAAI;AAC3C"}},
    {"offset": {"line": 3581, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}